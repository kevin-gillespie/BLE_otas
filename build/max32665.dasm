
/mnt/c/Users/terry.wu/workspace/BLE_OTAs/build/max32665.elf:     file format elf32-littlearm


Disassembly of section .text:

10004000 <__isr_vector>:
10004000:	20020000 	.word	0x20020000
10004004:	10005cbd 	.word	0x10005cbd
10004008:	100043d9 	.word	0x100043d9
1000400c:	100042d5 	.word	0x100042d5
10004010:	10005cfd 	.word	0x10005cfd
10004014:	10005cff 	.word	0x10005cff
10004018:	10005d01 	.word	0x10005d01
	...
1000402c:	10008c81 	.word	0x10008c81
	...
10004038:	10008ce1 	.word	0x10008ce1
1000403c:	10008d45 	.word	0x10008d45
10004040:	10005d09 	.word	0x10005d09
10004044:	10005d0b 	.word	0x10005d0b
10004048:	10005d0d 	.word	0x10005d0d
1000404c:	10005d0f 	.word	0x10005d0f
10004050:	10005d11 	.word	0x10005d11
10004054:	100058ed 	.word	0x100058ed
10004058:	10005929 	.word	0x10005929
1000405c:	10005d17 	.word	0x10005d17
10004060:	10005d19 	.word	0x10005d19
10004064:	10005d1b 	.word	0x10005d1b
10004068:	10005d1d 	.word	0x10005d1d
1000406c:	10005d1f 	.word	0x10005d1f
10004070:	10005d21 	.word	0x10005d21
10004074:	1000594d 	.word	0x1000594d
10004078:	10005d25 	.word	0x10005d25
1000407c:	10005d27 	.word	0x10005d27
10004080:	10005d29 	.word	0x10005d29
10004084:	10005d2b 	.word	0x10005d2b
10004088:	10005d2d 	.word	0x10005d2d
1000408c:	10005d2f 	.word	0x10005d2f
10004090:	10005d31 	.word	0x10005d31
10004094:	10005d33 	.word	0x10005d33
10004098:	10005d35 	.word	0x10005d35
1000409c:	10005d37 	.word	0x10005d37
100040a0:	1000457d 	.word	0x1000457d
100040a4:	10004583 	.word	0x10004583
100040a8:	10005d3d 	.word	0x10005d3d
100040ac:	10005d3f 	.word	0x10005d3f
100040b0:	1000583d 	.word	0x1000583d
100040b4:	10005855 	.word	0x10005855
100040b8:	10005859 	.word	0x10005859
100040bc:	1000585d 	.word	0x1000585d
100040c0:	10005d49 	.word	0x10005d49
100040c4:	10005d4b 	.word	0x10005d4b
100040c8:	10005d4d 	.word	0x10005d4d
100040cc:	10005d4f 	.word	0x10005d4f
100040d0:	10005959 	.word	0x10005959
100040d4:	10005d53 	.word	0x10005d53
100040d8:	10005d55 	.word	0x10005d55
100040dc:	100092e9 	.word	0x100092e9
100040e0:	10009359 	.word	0x10009359
100040e4:	10009439 	.word	0x10009439
100040e8:	100093a9 	.word	0x100093a9
100040ec:	100093e9 	.word	0x100093e9
100040f0:	1000946d 	.word	0x1000946d
100040f4:	100094e1 	.word	0x100094e1
100040f8:	10009515 	.word	0x10009515
100040fc:	10009541 	.word	0x10009541
10004100:	100094a1 	.word	0x100094a1
10004104:	10009543 	.word	0x10009543
10004108:	10009545 	.word	0x10009545
1000410c:	10009547 	.word	0x10009547
10004110:	10009549 	.word	0x10009549
10004114:	100042e9 	.word	0x100042e9
10004118:	10005d75 	.word	0x10005d75
1000411c:	10005d77 	.word	0x10005d77
10004120:	10005d79 	.word	0x10005d79
10004124:	10005d7b 	.word	0x10005d7b
10004128:	10005d7d 	.word	0x10005d7d
1000412c:	10005d7f 	.word	0x10005d7f
10004130:	10005d81 	.word	0x10005d81
10004134:	10005d83 	.word	0x10005d83
10004138:	10005965 	.word	0x10005965
1000413c:	10005d87 	.word	0x10005d87
10004140:	10005d89 	.word	0x10005d89
10004144:	10005d8b 	.word	0x10005d8b
10004148:	10005d8d 	.word	0x10005d8d
1000414c:	10005d8f 	.word	0x10005d8f
10004150:	10005861 	.word	0x10005861
10004154:	10005865 	.word	0x10005865
10004158:	10005869 	.word	0x10005869
1000415c:	1000586d 	.word	0x1000586d
10004160:	10005d99 	.word	0x10005d99
10004164:	10005d9b 	.word	0x10005d9b
10004168:	10005d9d 	.word	0x10005d9d
1000416c:	10005d9f 	.word	0x10005d9f
10004170:	10005da1 	.word	0x10005da1
10004174:	10005da3 	.word	0x10005da3
10004178:	10005da5 	.word	0x10005da5
1000417c:	10005da7 	.word	0x10005da7
10004180:	10005da9 	.word	0x10005da9
10004184:	10005dab 	.word	0x10005dab
10004188:	10005dad 	.word	0x10005dad
1000418c:	10005daf 	.word	0x10005daf
10004190:	10005db1 	.word	0x10005db1
10004194:	10005db3 	.word	0x10005db3
10004198:	10005db5 	.word	0x10005db5
1000419c:	10005db7 	.word	0x10005db7
100041a0:	10005db9 	.word	0x10005db9
100041a4:	10005dbb 	.word	0x10005dbb
100041a8:	10005dbd 	.word	0x10005dbd
100041ac:	10005dbf 	.word	0x10005dbf
100041b0:	10005dc1 	.word	0x10005dc1
100041b4:	10005dc3 	.word	0x10005dc3
100041b8:	10005dc5 	.word	0x10005dc5

100041bc <deregister_tm_clones>:
100041bc:	4803      	ldr	r0, [pc, #12]	; (100041cc <deregister_tm_clones+0x10>)
100041be:	4b04      	ldr	r3, [pc, #16]	; (100041d0 <deregister_tm_clones+0x14>)
100041c0:	4283      	cmp	r3, r0
100041c2:	d002      	beq.n	100041ca <deregister_tm_clones+0xe>
100041c4:	4b03      	ldr	r3, [pc, #12]	; (100041d4 <deregister_tm_clones+0x18>)
100041c6:	b103      	cbz	r3, 100041ca <deregister_tm_clones+0xe>
100041c8:	4718      	bx	r3
100041ca:	4770      	bx	lr
100041cc:	20000a58 	.word	0x20000a58
100041d0:	20000a58 	.word	0x20000a58
100041d4:	00000000 	.word	0x00000000

100041d8 <register_tm_clones>:
100041d8:	4805      	ldr	r0, [pc, #20]	; (100041f0 <register_tm_clones+0x18>)
100041da:	4906      	ldr	r1, [pc, #24]	; (100041f4 <register_tm_clones+0x1c>)
100041dc:	1a0b      	subs	r3, r1, r0
100041de:	0fd9      	lsrs	r1, r3, #31
100041e0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
100041e4:	1049      	asrs	r1, r1, #1
100041e6:	d002      	beq.n	100041ee <register_tm_clones+0x16>
100041e8:	4b03      	ldr	r3, [pc, #12]	; (100041f8 <register_tm_clones+0x20>)
100041ea:	b103      	cbz	r3, 100041ee <register_tm_clones+0x16>
100041ec:	4718      	bx	r3
100041ee:	4770      	bx	lr
100041f0:	20000a58 	.word	0x20000a58
100041f4:	20000a58 	.word	0x20000a58
100041f8:	00000000 	.word	0x00000000

100041fc <__do_global_dtors_aux>:
100041fc:	b510      	push	{r4, lr}
100041fe:	4c06      	ldr	r4, [pc, #24]	; (10004218 <__do_global_dtors_aux+0x1c>)
10004200:	7823      	ldrb	r3, [r4, #0]
10004202:	b943      	cbnz	r3, 10004216 <__do_global_dtors_aux+0x1a>
10004204:	f7ff ffda 	bl	100041bc <deregister_tm_clones>
10004208:	4b04      	ldr	r3, [pc, #16]	; (1000421c <__do_global_dtors_aux+0x20>)
1000420a:	b113      	cbz	r3, 10004212 <__do_global_dtors_aux+0x16>
1000420c:	4804      	ldr	r0, [pc, #16]	; (10004220 <__do_global_dtors_aux+0x24>)
1000420e:	f3af 8000 	nop.w
10004212:	2301      	movs	r3, #1
10004214:	7023      	strb	r3, [r4, #0]
10004216:	bd10      	pop	{r4, pc}
10004218:	20000a58 	.word	0x20000a58
1000421c:	00000000 	.word	0x00000000
10004220:	10010e1c 	.word	0x10010e1c

10004224 <frame_dummy>:
10004224:	b508      	push	{r3, lr}
10004226:	4b04      	ldr	r3, [pc, #16]	; (10004238 <frame_dummy+0x14>)
10004228:	b11b      	cbz	r3, 10004232 <frame_dummy+0xe>
1000422a:	4904      	ldr	r1, [pc, #16]	; (1000423c <frame_dummy+0x18>)
1000422c:	4804      	ldr	r0, [pc, #16]	; (10004240 <frame_dummy+0x1c>)
1000422e:	f3af 8000 	nop.w
10004232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10004236:	e7cf      	b.n	100041d8 <register_tm_clones>
10004238:	00000000 	.word	0x00000000
1000423c:	20000a5c 	.word	0x20000a5c
10004240:	10010e1c 	.word	0x10010e1c

10004244 <HardFault_Decoder>:
10004244:	b480      	push	{r7}
10004246:	b083      	sub	sp, #12
10004248:	af00      	add	r7, sp, #0
1000424a:	6078      	str	r0, [r7, #4]
1000424c:	e7fe      	b.n	1000424c <HardFault_Decoder+0x8>
	...

10004250 <vTask1>:
10004250:	b507      	push	{r0, r1, r2, lr}
10004252:	f004 f99f 	bl	10008594 <xTaskGetTickCount>
10004256:	4c05      	ldr	r4, [pc, #20]	; (1000426c <vTask1+0x1c>)
10004258:	9001      	str	r0, [sp, #4]
1000425a:	4620      	mov	r0, r4
1000425c:	f005 fb80 	bl	10009960 <puts>
10004260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10004264:	a801      	add	r0, sp, #4
10004266:	f004 fa93 	bl	10008790 <vTaskDelayUntil>
1000426a:	e7f6      	b.n	1000425a <vTask1+0xa>
1000426c:	1001052c 	.word	0x1001052c

10004270 <vApplicationIdleHook>:
10004270:	b508      	push	{r3, lr}
10004272:	2001      	movs	r0, #1
10004274:	f000 f928 	bl	100044c8 <LED_Off>
10004278:	f002 fb3c 	bl	100068f4 <MXC_LP_EnterSleepMode>
1000427c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10004280:	2001      	movs	r0, #1
10004282:	f000 b903 	b.w	1000448c <LED_On>
	...

10004288 <main>:
10004288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000428a:	2300      	movs	r3, #0
1000428c:	4a0d      	ldr	r2, [pc, #52]	; (100042c4 <main+0x3c>)
1000428e:	9303      	str	r3, [sp, #12]
10004290:	9b03      	ldr	r3, [sp, #12]
10004292:	4293      	cmp	r3, r2
10004294:	dd11      	ble.n	100042ba <main+0x32>
10004296:	f000 f829 	bl	100042ec <bleStartup>
1000429a:	2300      	movs	r3, #0
1000429c:	2201      	movs	r2, #1
1000429e:	e9cd 2300 	strd	r2, r3, [sp]
100042a2:	4909      	ldr	r1, [pc, #36]	; (100042c8 <main+0x40>)
100042a4:	4809      	ldr	r0, [pc, #36]	; (100042cc <main+0x44>)
100042a6:	2280      	movs	r2, #128	; 0x80
100042a8:	f004 f858 	bl	1000835c <xTaskCreate>
100042ac:	f004 f936 	bl	1000851c <vTaskStartScheduler>
100042b0:	4807      	ldr	r0, [pc, #28]	; (100042d0 <main+0x48>)
100042b2:	f005 fb55 	bl	10009960 <puts>
100042b6:	bf00      	nop
100042b8:	e7fd      	b.n	100042b6 <main+0x2e>
100042ba:	9b03      	ldr	r3, [sp, #12]
100042bc:	3301      	adds	r3, #1
100042be:	9303      	str	r3, [sp, #12]
100042c0:	e7e6      	b.n	10004290 <main+0x8>
100042c2:	bf00      	nop
100042c4:	003ffffe 	.word	0x003ffffe
100042c8:	1001054a 	.word	0x1001054a
100042cc:	10004251 	.word	0x10004251
100042d0:	10010550 	.word	0x10010550

100042d4 <HardFault_Handler>:
100042d4:	f01e 0f04 	tst.w	lr, #4
100042d8:	bf0c      	ite	eq
100042da:	f3ef 8008 	mrseq	r0, MSP
100042de:	f3ef 8009 	mrsne	r0, PSP
100042e2:	f7ff bfaf 	b.w	10004244 <HardFault_Decoder>
100042e6:	4770      	bx	lr

100042e8 <WUT_IRQHandler>:
100042e8:	f003 bc62 	b.w	10007bb0 <MXC_WUT_Handler>

100042ec <bleStartup>:
100042ec:	b538      	push	{r3, r4, r5, lr}
100042ee:	4d21      	ldr	r5, [pc, #132]	; (10004374 <bleStartup+0x88>)
100042f0:	4c21      	ldr	r4, [pc, #132]	; (10004378 <bleStartup+0x8c>)
100042f2:	4628      	mov	r0, r5
100042f4:	f004 ffc6 	bl	10009284 <PalBbLoadCfg>
100042f8:	4620      	mov	r0, r4
100042fa:	f000 fa45 	bl	10004788 <LlGetDefaultRunTimeCfg>
100042fe:	2309      	movs	r3, #9
10004300:	222b      	movs	r2, #43	; 0x2b
10004302:	f104 010c 	add.w	r1, r4, #12
10004306:	2002      	movs	r0, #2
10004308:	7123      	strb	r3, [r4, #4]
1000430a:	f001 f966 	bl	100055da <PalCfgLoadData>
1000430e:	2204      	movs	r2, #4
10004310:	f104 0130 	add.w	r1, r4, #48	; 0x30
10004314:	2001      	movs	r0, #1
10004316:	f001 f960 	bl	100055da <PalCfgLoadData>
1000431a:	2314      	movs	r3, #20
1000431c:	802b      	strh	r3, [r5, #0]
1000431e:	2300      	movs	r3, #0
10004320:	f884 3020 	strb.w	r3, [r4, #32]
10004324:	f000 feff 	bl	10005126 <WsfHeapGetFreeStartAddress>
10004328:	f44f 6100 	mov.w	r1, #2048	; 0x800
1000432c:	f000 fe40 	bl	10004fb0 <WsfBufIoUartInit>
10004330:	f000 fef4 	bl	1000511c <WsfHeapAlloc>
10004334:	4911      	ldr	r1, [pc, #68]	; (1000437c <bleStartup+0x90>)
10004336:	8be3      	ldrh	r3, [r4, #30]
10004338:	f240 120d 	movw	r2, #269	; 0x10d
1000433c:	810a      	strh	r2, [r1, #8]
1000433e:	3314      	adds	r3, #20
10004340:	7b62      	ldrb	r2, [r4, #13]
10004342:	728a      	strb	r2, [r1, #10]
10004344:	818b      	strh	r3, [r1, #12]
10004346:	7f22      	ldrb	r2, [r4, #28]
10004348:	7ee3      	ldrb	r3, [r4, #27]
1000434a:	4413      	add	r3, r2
1000434c:	738b      	strb	r3, [r1, #14]
1000434e:	2004      	movs	r0, #4
10004350:	f000 fcd2 	bl	10004cf8 <WsfBufInit>
10004354:	b280      	uxth	r0, r0
10004356:	f000 fee1 	bl	1000511c <WsfHeapAlloc>
1000435a:	f001 f801 	bl	10005360 <WsfOsInit>
1000435e:	f001 f871 	bl	10005444 <WsfTimerInit>
10004362:	4807      	ldr	r0, [pc, #28]	; (10004380 <bleStartup+0x94>)
10004364:	f001 f8e4 	bl	10005530 <WsfTraceRegisterHandler>
10004368:	2001      	movs	r0, #1
1000436a:	f001 f8d1 	bl	10005510 <WsfTraceEnable>
1000436e:	f000 f9bb 	bl	100046e8 <AppTerminalInit>
10004372:	e7fe      	b.n	10004372 <bleStartup+0x86>
10004374:	20000a74 	.word	0x20000a74
10004378:	20000a80 	.word	0x20000a80
1000437c:	20000000 	.word	0x20000000
10004380:	10005009 	.word	0x10005009

10004384 <mxc_assert>:
};
const unsigned int num_leds = (sizeof(led_pin) / sizeof(mxc_gpio_cfg_t));

/******************************************************************************/
void mxc_assert(const char *expr, const char *file, int line)
{
10004384:	b508      	push	{r3, lr}
10004386:	4603      	mov	r3, r0
    printf("MXC_ASSERT %s #%d: (%s)\n", file, line, expr);
10004388:	4801      	ldr	r0, [pc, #4]	; (10004390 <mxc_assert+0xc>)
1000438a:	f005 faa1 	bl	100098d0 <printf>
    while (1);
1000438e:	e7fe      	b.n	1000438e <mxc_assert+0xa>
10004390:	10010582 	.word	0x10010582

10004394 <Console_Init>:
/******************************************************************************/
int Console_Init(void)
{
    int err;

    if ((err = MXC_UART_Init(ConsoleUart, CONSOLE_BAUD, MAP_B)) != E_NO_ERROR) {
10004394:	4b03      	ldr	r3, [pc, #12]	; (100043a4 <Console_Init+0x10>)
10004396:	2201      	movs	r2, #1
10004398:	6818      	ldr	r0, [r3, #0]
1000439a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1000439e:	f003 b8ad 	b.w	100074fc <MXC_UART_Init>
100043a2:	bf00      	nop
100043a4:	20000010 	.word	0x20000010

100043a8 <Board_Init>:
{
100043a8:	b508      	push	{r3, lr}
    if ((err = Console_Init()) < E_NO_ERROR) {
100043aa:	f7ff fff3 	bl	10004394 <Console_Init>
100043ae:	2800      	cmp	r0, #0
100043b0:	db0c      	blt.n	100043cc <Board_Init+0x24>
    if ((err = PB_Init()) != E_NO_ERROR) {
100043b2:	f000 f8c7 	bl	10004544 <PB_Init>
100043b6:	b120      	cbz	r0, 100043c2 <Board_Init+0x1a>
        MXC_ASSERT_FAIL();
100043b8:	2254      	movs	r2, #84	; 0x54
        MXC_ASSERT_FAIL();
100043ba:	4905      	ldr	r1, [pc, #20]	; (100043d0 <Board_Init+0x28>)
100043bc:	4805      	ldr	r0, [pc, #20]	; (100043d4 <Board_Init+0x2c>)
100043be:	f7ff ffe1 	bl	10004384 <mxc_assert>
    if ((err = LED_Init()) != E_NO_ERROR) {
100043c2:	f000 f89f 	bl	10004504 <LED_Init>
100043c6:	b108      	cbz	r0, 100043cc <Board_Init+0x24>
        MXC_ASSERT_FAIL();
100043c8:	2259      	movs	r2, #89	; 0x59
100043ca:	e7f6      	b.n	100043ba <Board_Init+0x12>
}
100043cc:	bd08      	pop	{r3, pc}
100043ce:	bf00      	nop
100043d0:	1001059b 	.word	0x1001059b
100043d4:	100105cb 	.word	0x100105cb

100043d8 <NMI_Handler>:

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
100043d8:	bf00      	nop

/******************************************************************************/
void NMI_Handler(void)
{
    __NOP();
}
100043da:	4770      	bx	lr

100043dc <_close>:
    return -1;
}
int _close(int file)
{
    return -1;
}
100043dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100043e0:	4770      	bx	lr

100043e2 <_isatty>:
100043e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100043e6:	4770      	bx	lr

100043e8 <_lseek>:
    return -1;
}
int _lseek(int file, off_t offset, int whence)
{
    return -1;
}
100043e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100043ec:	4770      	bx	lr

100043ee <_fstat>:
int _fstat(int file, struct stat *st)
{
    return -1;
}
100043ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100043f2:	4770      	bx	lr

100043f4 <_read>:
   fgetc for stdio */
#if defined (__ICCARM__) || defined ( __GNUC__ )

#if defined ( __GNUC__ )                        // GNUC _read function prototype
int _read(int file, char *ptr, int len)
{
100043f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100043f8:	4616      	mov	r6, r2
    size_t n;
#endif /*  */

    int num = 0; // count of number received.

    switch (file)
100043fa:	4604      	mov	r4, r0
100043fc:	b9c0      	cbnz	r0, 10004430 <_read+0x3c>
    {
        case STDIN_FILENO:
            for (n = 0; n < len; n++) {
                *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
100043fe:	4f10      	ldr	r7, [pc, #64]	; (10004440 <_read+0x4c>)
10004400:	460d      	mov	r5, r1
            for (n = 0; n < len; n++) {
10004402:	42b4      	cmp	r4, r6
10004404:	46a8      	mov	r8, r5
10004406:	da10      	bge.n	1000442a <_read+0x36>
                *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
10004408:	4638      	mov	r0, r7
1000440a:	f003 f8fd 	bl	10007608 <MXC_UART_ReadCharacter>
1000440e:	b2c1      	uxtb	r1, r0
10004410:	7029      	strb	r1, [r5, #0]
                MXC_UART_WriteCharacter(MXC_UARTn,*ptr); // echo the byte.
10004412:	4638      	mov	r0, r7
10004414:	f003 f8fa 	bl	1000760c <MXC_UART_WriteCharacter>
                if (*ptr == '\r') { // check for end of line.
10004418:	f815 3b01 	ldrb.w	r3, [r5], #1
1000441c:	2b0d      	cmp	r3, #13
1000441e:	f104 0401 	add.w	r4, r4, #1
10004422:	d1ee      	bne.n	10004402 <_read+0xe>
                    *ptr = '\n';
10004424:	230a      	movs	r3, #10
10004426:	f888 3000 	strb.w	r3, [r8]
        default:
            errno = EBADF;
            return -1;
    }
    return num;
}
1000442a:	4620      	mov	r0, r4
1000442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            errno = EBADF;
10004430:	f005 f8a8 	bl	10009584 <__errno>
10004434:	2309      	movs	r3, #9
10004436:	6003      	str	r3, [r0, #0]
            return -1;
10004438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1000443c:	e7f5      	b.n	1000442a <_read+0x36>
1000443e:	bf00      	nop
10004440:	40043000 	.word	0x40043000

10004444 <_write>:
{
    size_t n;
#endif /* __GNUC__ */


    switch (file) {
10004444:	3801      	subs	r0, #1
10004446:	2801      	cmp	r0, #1
{
10004448:	b538      	push	{r3, r4, r5, lr}
    switch (file) {
1000444a:	d918      	bls.n	1000447e <_write+0x3a>
                while(MXC_UARTn->status & MXC_F_UART_STATUS_TX_FULL);
                MXC_UARTn->fifo=*ptr++;
            }
            break;
        default:
            errno = EBADF;
1000444c:	f005 f89a 	bl	10009584 <__errno>
10004450:	2309      	movs	r3, #9
10004452:	6003      	str	r3, [r0, #0]
            return -1;
10004454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10004458:	e00f      	b.n	1000447a <_write+0x36>
                if (*ptr == '\n') {
1000445a:	781c      	ldrb	r4, [r3, #0]
1000445c:	2c0a      	cmp	r4, #10
1000445e:	d103      	bne.n	10004468 <_write+0x24>
                    while(MXC_UARTn->status & MXC_F_UART_STATUS_TX_FULL);
10004460:	6884      	ldr	r4, [r0, #8]
10004462:	0624      	lsls	r4, r4, #24
10004464:	d4fc      	bmi.n	10004460 <_write+0x1c>
                    MXC_UARTn->fifo = '\r';
10004466:	61c5      	str	r5, [r0, #28]
                while(MXC_UARTn->status & MXC_F_UART_STATUS_TX_FULL);
10004468:	6884      	ldr	r4, [r0, #8]
1000446a:	0624      	lsls	r4, r4, #24
1000446c:	d4fc      	bmi.n	10004468 <_write+0x24>
                MXC_UARTn->fifo=*ptr++;
1000446e:	f813 4b01 	ldrb.w	r4, [r3], #1
10004472:	61c4      	str	r4, [r0, #28]
            for (n = 0; n < len; n++) {
10004474:	1a5c      	subs	r4, r3, r1
10004476:	4294      	cmp	r4, r2
10004478:	dbef      	blt.n	1000445a <_write+0x16>
    }

    return len;
}
1000447a:	4610      	mov	r0, r2
1000447c:	bd38      	pop	{r3, r4, r5, pc}
1000447e:	4802      	ldr	r0, [pc, #8]	; (10004488 <_write+0x44>)
    switch (file) {
10004480:	460b      	mov	r3, r1
                    MXC_UARTn->fifo = '\r';
10004482:	250d      	movs	r5, #13
10004484:	e7f6      	b.n	10004474 <_write+0x30>
10004486:	bf00      	nop
10004488:	40043000 	.word	0x40043000

1000448c <LED_On>:
}

//******************************************************************************
void LED_On(unsigned int idx)
{
    MXC_ASSERT(idx < num_leds);
1000448c:	4b0a      	ldr	r3, [pc, #40]	; (100044b8 <LED_On+0x2c>)
1000448e:	681b      	ldr	r3, [r3, #0]
10004490:	4283      	cmp	r3, r0
{
10004492:	b510      	push	{r4, lr}
10004494:	4604      	mov	r4, r0
    MXC_ASSERT(idx < num_leds);
10004496:	d804      	bhi.n	100044a2 <LED_On+0x16>
10004498:	4908      	ldr	r1, [pc, #32]	; (100044bc <LED_On+0x30>)
1000449a:	4809      	ldr	r0, [pc, #36]	; (100044c0 <LED_On+0x34>)
1000449c:	223c      	movs	r2, #60	; 0x3c
1000449e:	f7ff ff71 	bl	10004384 <mxc_assert>
    if(LED_ON == 0)
        MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
100044a2:	4a08      	ldr	r2, [pc, #32]	; (100044c4 <LED_On+0x38>)
100044a4:	230c      	movs	r3, #12
100044a6:	fb03 f004 	mul.w	r0, r3, r4
100044aa:	1813      	adds	r3, r2, r0
    else
        MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);

}
100044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
100044b0:	6859      	ldr	r1, [r3, #4]
100044b2:	5810      	ldr	r0, [r2, r0]
100044b4:	f002 baea 	b.w	10006a8c <MXC_GPIO_OutClr>
100044b8:	100105f4 	.word	0x100105f4
100044bc:	10010608 	.word	0x10010608
100044c0:	10010639 	.word	0x10010639
100044c4:	100105d0 	.word	0x100105d0

100044c8 <LED_Off>:

//******************************************************************************
void LED_Off(unsigned int idx)
{
    MXC_ASSERT(idx < num_leds);
100044c8:	4b0a      	ldr	r3, [pc, #40]	; (100044f4 <LED_Off+0x2c>)
100044ca:	681b      	ldr	r3, [r3, #0]
100044cc:	4283      	cmp	r3, r0
{
100044ce:	b510      	push	{r4, lr}
100044d0:	4604      	mov	r4, r0
    MXC_ASSERT(idx < num_leds);
100044d2:	d804      	bhi.n	100044de <LED_Off+0x16>
100044d4:	4908      	ldr	r1, [pc, #32]	; (100044f8 <LED_Off+0x30>)
100044d6:	4809      	ldr	r0, [pc, #36]	; (100044fc <LED_Off+0x34>)
100044d8:	2247      	movs	r2, #71	; 0x47
100044da:	f7ff ff53 	bl	10004384 <mxc_assert>
    if (LED_ON == 0)
        MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
100044de:	4a08      	ldr	r2, [pc, #32]	; (10004500 <LED_Off+0x38>)
100044e0:	230c      	movs	r3, #12
100044e2:	fb03 f004 	mul.w	r0, r3, r4
100044e6:	1813      	adds	r3, r2, r0
    else
        MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);

}
100044e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
100044ec:	6859      	ldr	r1, [r3, #4]
100044ee:	5810      	ldr	r0, [r2, r0]
100044f0:	f002 baca 	b.w	10006a88 <MXC_GPIO_OutSet>
100044f4:	100105f4 	.word	0x100105f4
100044f8:	10010608 	.word	0x10010608
100044fc:	10010639 	.word	0x10010639
10004500:	100105d0 	.word	0x100105d0

10004504 <LED_Init>:
{
10004504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    for (i = 0; i < num_leds; i++) {
10004506:	4b0d      	ldr	r3, [pc, #52]	; (1000453c <LED_Init+0x38>)
        if (MXC_GPIO_Config(&led_pin[i]) != E_NO_ERROR) {
10004508:	4e0d      	ldr	r6, [pc, #52]	; (10004540 <LED_Init+0x3c>)
    for (i = 0; i < num_leds; i++) {
1000450a:	681b      	ldr	r3, [r3, #0]
1000450c:	9301      	str	r3, [sp, #4]
1000450e:	2400      	movs	r4, #0
    int retval = E_NO_ERROR;
10004510:	4625      	mov	r5, r4
        if (MXC_GPIO_Config(&led_pin[i]) != E_NO_ERROR) {
10004512:	270c      	movs	r7, #12
    for (i = 0; i < num_leds; i++) {
10004514:	9b01      	ldr	r3, [sp, #4]
10004516:	42a3      	cmp	r3, r4
10004518:	d802      	bhi.n	10004520 <LED_Init+0x1c>
}
1000451a:	4628      	mov	r0, r5
1000451c:	b003      	add	sp, #12
1000451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LED_Off(i);                 // Set the output value
10004520:	4620      	mov	r0, r4
10004522:	f7ff ffd1 	bl	100044c8 <LED_Off>
        if (MXC_GPIO_Config(&led_pin[i]) != E_NO_ERROR) {
10004526:	fb07 6004 	mla	r0, r7, r4, r6
1000452a:	f002 fa5d 	bl	100069e8 <MXC_GPIO_Config>
            retval = E_UNKNOWN;
1000452e:	2800      	cmp	r0, #0
10004530:	bf18      	it	ne
10004532:	f06f 0507 	mvnne.w	r5, #7
    for (i = 0; i < num_leds; i++) {
10004536:	3401      	adds	r4, #1
10004538:	e7ec      	b.n	10004514 <LED_Init+0x10>
1000453a:	bf00      	nop
1000453c:	100105f4 	.word	0x100105f4
10004540:	100105d0 	.word	0x100105d0

10004544 <PB_Init>:
#include "pb.h"

//int virtualButtons[2];
/******************************************************************************/
int PB_Init(void)
{
10004544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int retval = E_NO_ERROR;
    unsigned int i;

    // Enable pushbutton inputs
    for (i = 0; i < num_pbs; i++) {
10004546:	4b0b      	ldr	r3, [pc, #44]	; (10004574 <PB_Init+0x30>)
        if (MXC_GPIO_Config(&pb_pin[i]) != E_NO_ERROR) {
10004548:	4e0b      	ldr	r6, [pc, #44]	; (10004578 <PB_Init+0x34>)
    for (i = 0; i < num_pbs; i++) {
1000454a:	681b      	ldr	r3, [r3, #0]
1000454c:	9301      	str	r3, [sp, #4]
1000454e:	2400      	movs	r4, #0
    int retval = E_NO_ERROR;
10004550:	4625      	mov	r5, r4
        if (MXC_GPIO_Config(&pb_pin[i]) != E_NO_ERROR) {
10004552:	270c      	movs	r7, #12
    for (i = 0; i < num_pbs; i++) {
10004554:	9b01      	ldr	r3, [sp, #4]
10004556:	42a3      	cmp	r3, r4
10004558:	d802      	bhi.n	10004560 <PB_Init+0x1c>
            retval = E_UNKNOWN;
        }
    }

    return retval;
}
1000455a:	4628      	mov	r0, r5
1000455c:	b003      	add	sp, #12
1000455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (MXC_GPIO_Config(&pb_pin[i]) != E_NO_ERROR) {
10004560:	fb07 6004 	mla	r0, r7, r4, r6
10004564:	f002 fa40 	bl	100069e8 <MXC_GPIO_Config>
            retval = E_UNKNOWN;
10004568:	2800      	cmp	r0, #0
1000456a:	bf18      	it	ne
1000456c:	f06f 0507 	mvnne.w	r5, #7
    for (i = 0; i < num_pbs; i++) {
10004570:	3401      	adds	r4, #1
10004572:	e7ef      	b.n	10004554 <PB_Init+0x10>
10004574:	100105f8 	.word	0x100105f8
10004578:	100105fc 	.word	0x100105fc

1000457c <GPIO0_IRQHandler>:


//******************************************************************************
void GPIO0_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO0));
1000457c:	2000      	movs	r0, #0
1000457e:	f002 ba87 	b.w	10006a90 <MXC_GPIO_Handler>

10004582 <GPIO1_IRQHandler>:
}
void GPIO1_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO1));
10004582:	2001      	movs	r0, #1
10004584:	f002 ba84 	b.w	10006a90 <MXC_GPIO_Handler>

10004588 <appTerminalPinCodeHandler>:
 *  \return Error code.
 */
/*************************************************************************************************/
static uint8_t appTerminalPinCodeHandler(uint32_t argc, char **argv)
{
  if (argc < 2)
10004588:	2801      	cmp	r0, #1
{
1000458a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000458c:	4604      	mov	r4, r0
1000458e:	460e      	mov	r6, r1
  if (argc < 2)
10004590:	d923      	bls.n	100045da <appTerminalPinCodeHandler+0x52>
  {
    return TERMINAL_ERROR_TOO_FEW_ARGUMENTS;
  }
  else if (argc == 3)
10004592:	2803      	cmp	r0, #3
10004594:	d123      	bne.n	100045de <appTerminalPinCodeHandler+0x56>
  {
    uint32_t passkey;
    uint8_t  buf[SMP_PIN_LEN];
    uint8_t connId;

    passkey = atoi(argv[2]);
10004596:	6888      	ldr	r0, [r1, #8]
10004598:	f004 ffec 	bl	10009574 <atoi>
1000459c:	4605      	mov	r5, r0
    connId = atoi(argv[1]);
1000459e:	6870      	ldr	r0, [r6, #4]
100045a0:	f004 ffe8 	bl	10009574 <atoi>
100045a4:	b2c0      	uxtb	r0, r0

    if (connId < 1 || connId > DM_CONN_MAX)
100045a6:	1e43      	subs	r3, r0, #1
100045a8:	2b02      	cmp	r3, #2
100045aa:	d906      	bls.n	100045ba <appTerminalPinCodeHandler+0x32>
    {
      TerminalTxPrint("ConnID must be in the range [1 .. %d]\n", DM_CONN_MAX);
100045ac:	480d      	ldr	r0, [pc, #52]	; (100045e4 <appTerminalPinCodeHandler+0x5c>)
100045ae:	4621      	mov	r1, r4
100045b0:	f000 fb80 	bl	10004cb4 <TerminalTxPrint>
100045b4:	2001      	movs	r0, #1
  {
    return TERMINAL_ERROR_TOO_MANY_ARGUMENTS;
  }

  return TERMINAL_ERROR_OK;
}
100045b6:	b002      	add	sp, #8
100045b8:	bd70      	pop	{r4, r5, r6, pc}
    passkey %= 1000000;
100045ba:	4b0b      	ldr	r3, [pc, #44]	; (100045e8 <appTerminalPinCodeHandler+0x60>)
100045bc:	fbb5 f2f3 	udiv	r2, r5, r3
100045c0:	fb03 5312 	mls	r3, r3, r2, r5
    buf[0] = UINT32_TO_BYTE0(passkey);
100045c4:	f8ad 3004 	strh.w	r3, [sp, #4]
    DmSecAuthRsp((dmConnId_t) connId, SMP_PIN_LEN, buf);
100045c8:	aa01      	add	r2, sp, #4
    buf[2] = UINT32_TO_BYTE2(passkey);
100045ca:	0c1b      	lsrs	r3, r3, #16
    DmSecAuthRsp((dmConnId_t) connId, SMP_PIN_LEN, buf);
100045cc:	4621      	mov	r1, r4
    buf[2] = UINT32_TO_BYTE2(passkey);
100045ce:	f88d 3006 	strb.w	r3, [sp, #6]
    DmSecAuthRsp((dmConnId_t) connId, SMP_PIN_LEN, buf);
100045d2:	f000 f8af 	bl	10004734 <DmSecAuthRsp>
  return TERMINAL_ERROR_OK;
100045d6:	2000      	movs	r0, #0
100045d8:	e7ed      	b.n	100045b6 <appTerminalPinCodeHandler+0x2e>
    return TERMINAL_ERROR_TOO_FEW_ARGUMENTS;
100045da:	2002      	movs	r0, #2
100045dc:	e7eb      	b.n	100045b6 <appTerminalPinCodeHandler+0x2e>
    return TERMINAL_ERROR_TOO_MANY_ARGUMENTS;
100045de:	2003      	movs	r0, #3
100045e0:	e7e9      	b.n	100045b6 <appTerminalPinCodeHandler+0x2e>
100045e2:	bf00      	nop
100045e4:	10010648 	.word	0x10010648
100045e8:	000f4240 	.word	0x000f4240

100045ec <appTerminalCommandBtnHandler>:
  if (argc < 3)
100045ec:	2802      	cmp	r0, #2
{
100045ee:	b570      	push	{r4, r5, r6, lr}
100045f0:	460e      	mov	r6, r1
  if (argc < 3)
100045f2:	d95a      	bls.n	100046aa <appTerminalCommandBtnHandler+0xbe>
  else if (argc == 3)
100045f4:	2803      	cmp	r0, #3
100045f6:	d15a      	bne.n	100046ae <appTerminalCommandBtnHandler+0xc2>
    if (strcmp(argv[1], "1") == 0)
100045f8:	684d      	ldr	r5, [r1, #4]
100045fa:	492f      	ldr	r1, [pc, #188]	; (100046b8 <appTerminalCommandBtnHandler+0xcc>)
100045fc:	4628      	mov	r0, r5
100045fe:	f005 f9c3 	bl	10009988 <strcmp>
10004602:	b1c0      	cbz	r0, 10004636 <appTerminalCommandBtnHandler+0x4a>
    else if (strcmp(argv[1], "2") == 0)
10004604:	492d      	ldr	r1, [pc, #180]	; (100046bc <appTerminalCommandBtnHandler+0xd0>)
10004606:	4628      	mov	r0, r5
10004608:	f005 f9be 	bl	10009988 <strcmp>
1000460c:	2800      	cmp	r0, #0
1000460e:	d150      	bne.n	100046b2 <appTerminalCommandBtnHandler+0xc6>
      btnIndx = 2;
10004610:	2402      	movs	r4, #2
    if (strcmp(argv[2], "d") == 0)
10004612:	68b6      	ldr	r6, [r6, #8]
10004614:	492a      	ldr	r1, [pc, #168]	; (100046c0 <appTerminalCommandBtnHandler+0xd4>)
10004616:	4630      	mov	r0, r6
10004618:	f005 f9b6 	bl	10009988 <strcmp>
1000461c:	b968      	cbnz	r0, 1000463a <appTerminalCommandBtnHandler+0x4e>
      TerminalTxPrint("Button %s Press" TERMINAL_STRING_NEW_LINE, argv[1]);
1000461e:	4829      	ldr	r0, [pc, #164]	; (100046c4 <appTerminalCommandBtnHandler+0xd8>)
10004620:	4629      	mov	r1, r5
10004622:	f000 fb47 	bl	10004cb4 <TerminalTxPrint>
      event = (btnIndx == 1? APP_UI_BTN_1_DOWN : APP_UI_BTN_2_DOWN);
10004626:	2c01      	cmp	r4, #1
10004628:	bf18      	it	ne
1000462a:	2406      	movne	r4, #6
    AppUiBtnTest(event);
1000462c:	4620      	mov	r0, r4
1000462e:	f000 f879 	bl	10004724 <AppUiBtnTest>
  return TERMINAL_ERROR_OK;
10004632:	2000      	movs	r0, #0
}
10004634:	bd70      	pop	{r4, r5, r6, pc}
      btnIndx = 1;
10004636:	2401      	movs	r4, #1
10004638:	e7eb      	b.n	10004612 <appTerminalCommandBtnHandler+0x26>
    else if (strcmp(argv[2], "s") == 0)
1000463a:	4923      	ldr	r1, [pc, #140]	; (100046c8 <appTerminalCommandBtnHandler+0xdc>)
1000463c:	4630      	mov	r0, r6
1000463e:	f005 f9a3 	bl	10009988 <strcmp>
10004642:	b940      	cbnz	r0, 10004656 <appTerminalCommandBtnHandler+0x6a>
      TerminalTxPrint("Short Button %s Press" TERMINAL_STRING_NEW_LINE, argv[1]);
10004644:	4821      	ldr	r0, [pc, #132]	; (100046cc <appTerminalCommandBtnHandler+0xe0>)
10004646:	4629      	mov	r1, r5
10004648:	f000 fb34 	bl	10004cb4 <TerminalTxPrint>
      event = (btnIndx == 1? APP_UI_BTN_1_SHORT : APP_UI_BTN_2_SHORT);
1000464c:	2c01      	cmp	r4, #1
1000464e:	bf0c      	ite	eq
10004650:	2402      	moveq	r4, #2
10004652:	2407      	movne	r4, #7
10004654:	e7ea      	b.n	1000462c <appTerminalCommandBtnHandler+0x40>
    else if (strcmp(argv[2], "m") == 0)
10004656:	491e      	ldr	r1, [pc, #120]	; (100046d0 <appTerminalCommandBtnHandler+0xe4>)
10004658:	4630      	mov	r0, r6
1000465a:	f005 f995 	bl	10009988 <strcmp>
1000465e:	b940      	cbnz	r0, 10004672 <appTerminalCommandBtnHandler+0x86>
      TerminalTxPrint("Medium Button %s Press" TERMINAL_STRING_NEW_LINE, argv[1]);
10004660:	481c      	ldr	r0, [pc, #112]	; (100046d4 <appTerminalCommandBtnHandler+0xe8>)
10004662:	4629      	mov	r1, r5
10004664:	f000 fb26 	bl	10004cb4 <TerminalTxPrint>
      event = (btnIndx == 1? APP_UI_BTN_1_MED : APP_UI_BTN_2_MED);
10004668:	2c01      	cmp	r4, #1
1000466a:	bf0c      	ite	eq
1000466c:	2403      	moveq	r4, #3
1000466e:	2408      	movne	r4, #8
10004670:	e7dc      	b.n	1000462c <appTerminalCommandBtnHandler+0x40>
    else if (strcmp(argv[2], "l") == 0)
10004672:	4919      	ldr	r1, [pc, #100]	; (100046d8 <appTerminalCommandBtnHandler+0xec>)
10004674:	4630      	mov	r0, r6
10004676:	f005 f987 	bl	10009988 <strcmp>
1000467a:	b940      	cbnz	r0, 1000468e <appTerminalCommandBtnHandler+0xa2>
      TerminalTxPrint("Long Button %s Press" TERMINAL_STRING_NEW_LINE, argv[1]);
1000467c:	4817      	ldr	r0, [pc, #92]	; (100046dc <appTerminalCommandBtnHandler+0xf0>)
1000467e:	4629      	mov	r1, r5
10004680:	f000 fb18 	bl	10004cb4 <TerminalTxPrint>
      event = (btnIndx == 1? APP_UI_BTN_1_LONG : APP_UI_BTN_2_LONG);
10004684:	2c01      	cmp	r4, #1
10004686:	bf0c      	ite	eq
10004688:	2404      	moveq	r4, #4
1000468a:	2409      	movne	r4, #9
1000468c:	e7ce      	b.n	1000462c <appTerminalCommandBtnHandler+0x40>
    else if (strcmp(argv[2], "x") == 0)
1000468e:	4914      	ldr	r1, [pc, #80]	; (100046e0 <appTerminalCommandBtnHandler+0xf4>)
10004690:	4630      	mov	r0, r6
10004692:	f005 f979 	bl	10009988 <strcmp>
10004696:	b960      	cbnz	r0, 100046b2 <appTerminalCommandBtnHandler+0xc6>
      TerminalTxPrint("XL Button %s Press" TERMINAL_STRING_NEW_LINE, argv[1]);
10004698:	4812      	ldr	r0, [pc, #72]	; (100046e4 <appTerminalCommandBtnHandler+0xf8>)
1000469a:	4629      	mov	r1, r5
1000469c:	f000 fb0a 	bl	10004cb4 <TerminalTxPrint>
      event = (btnIndx == 1? APP_UI_BTN_1_EX_LONG : APP_UI_BTN_2_EX_LONG);
100046a0:	2c01      	cmp	r4, #1
100046a2:	bf0c      	ite	eq
100046a4:	2405      	moveq	r4, #5
100046a6:	240a      	movne	r4, #10
100046a8:	e7c0      	b.n	1000462c <appTerminalCommandBtnHandler+0x40>
    return TERMINAL_ERROR_TOO_FEW_ARGUMENTS;
100046aa:	2002      	movs	r0, #2
100046ac:	e7c2      	b.n	10004634 <appTerminalCommandBtnHandler+0x48>
    return TERMINAL_ERROR_TOO_MANY_ARGUMENTS;
100046ae:	2003      	movs	r0, #3
100046b0:	e7c0      	b.n	10004634 <appTerminalCommandBtnHandler+0x48>
      return TERMINAL_ERROR_BAD_ARGUMENTS;
100046b2:	2001      	movs	r0, #1
100046b4:	e7be      	b.n	10004634 <appTerminalCommandBtnHandler+0x48>
100046b6:	bf00      	nop
100046b8:	1001066f 	.word	0x1001066f
100046bc:	10010671 	.word	0x10010671
100046c0:	10010673 	.word	0x10010673
100046c4:	100106c6 	.word	0x100106c6
100046c8:	10010646 	.word	0x10010646
100046cc:	10010675 	.word	0x10010675
100046d0:	1001068d 	.word	0x1001068d
100046d4:	1001068f 	.word	0x1001068f
100046d8:	100106a8 	.word	0x100106a8
100046dc:	100106aa 	.word	0x100106aa
100046e0:	100106c1 	.word	0x100106c1
100046e4:	100106c3 	.word	0x100106c3

100046e8 <AppTerminalInit>:
{
100046e8:	b508      	push	{r3, lr}
  WsfBufIoUartRegister(TerminalRx);
100046ea:	4809      	ldr	r0, [pc, #36]	; (10004710 <AppTerminalInit+0x28>)
100046ec:	f000 fc86 	bl	10004ffc <WsfBufIoUartRegister>
  TerminalRegisterUartTxFunc(WsfBufIoWrite);
100046f0:	4808      	ldr	r0, [pc, #32]	; (10004714 <AppTerminalInit+0x2c>)
100046f2:	f000 f963 	bl	100049bc <TerminalRegisterUartTxFunc>
  handlerId = WsfOsSetNextHandler(TerminalHandler);
100046f6:	4808      	ldr	r0, [pc, #32]	; (10004718 <AppTerminalInit+0x30>)
100046f8:	f000 fe1c 	bl	10005334 <WsfOsSetNextHandler>
  TerminalInit(handlerId);
100046fc:	f000 f974 	bl	100049e8 <TerminalInit>
  TerminalRegisterCommand(&appTerminalButtonPress);
10004700:	4806      	ldr	r0, [pc, #24]	; (1000471c <AppTerminalInit+0x34>)
10004702:	f000 f961 	bl	100049c8 <TerminalRegisterCommand>
}
10004706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TerminalRegisterCommand(&appTerminalPinCode);
1000470a:	4805      	ldr	r0, [pc, #20]	; (10004720 <AppTerminalInit+0x38>)
1000470c:	f000 b95c 	b.w	100049c8 <TerminalRegisterCommand>
10004710:	10004c31 	.word	0x10004c31
10004714:	10005009 	.word	0x10005009
10004718:	10004ae1 	.word	0x10004ae1
1000471c:	20000014 	.word	0x20000014
10004720:	20000024 	.word	0x20000024

10004724 <AppUiBtnTest>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
  if (appUiCbackTbl.btnCback)
10004724:	4b02      	ldr	r3, [pc, #8]	; (10004730 <AppUiBtnTest+0xc>)
10004726:	681b      	ldr	r3, [r3, #0]
10004728:	b103      	cbz	r3, 1000472c <AppUiBtnTest+0x8>
  {
    (*appUiCbackTbl.btnCback)(btn);
1000472a:	4718      	bx	r3
  }
}
1000472c:	4770      	bx	lr
1000472e:	bf00      	nop
10004730:	20000ab4 	.word	0x20000ab4

10004734 <DmSecAuthRsp>:
/*************************************************************************************************/
void DmSecAuthRsp(dmConnId_t connId, uint8_t authDataLen, uint8_t *pAuthData)
{
  smpDmAuthRsp_t   *pMsg;

  WSF_ASSERT(authDataLen <= SMP_OOB_LEN);
10004734:	2910      	cmp	r1, #16
{
10004736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004738:	4607      	mov	r7, r0
1000473a:	460d      	mov	r5, r1
1000473c:	4616      	mov	r6, r2
  WSF_ASSERT(authDataLen <= SMP_OOB_LEN);
1000473e:	d904      	bls.n	1000474a <DmSecAuthRsp+0x16>
10004740:	480c      	ldr	r0, [pc, #48]	; (10004774 <DmSecAuthRsp+0x40>)
10004742:	f44f 7197 	mov.w	r1, #302	; 0x12e
10004746:	f000 facb 	bl	10004ce0 <WsfAssert>

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
1000474a:	2016      	movs	r0, #22
1000474c:	f000 fcf8 	bl	10005140 <WsfMsgAlloc>
10004750:	4604      	mov	r4, r0
10004752:	b170      	cbz	r0, 10004772 <DmSecAuthRsp+0x3e>
  {
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
10004754:	2304      	movs	r3, #4
10004756:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
10004758:	8007      	strh	r7, [r0, #0]
    pMsg->authDataLen = authDataLen;
1000475a:	7505      	strb	r5, [r0, #20]

    if (pAuthData != NULL)
1000475c:	b126      	cbz	r6, 10004768 <DmSecAuthRsp+0x34>
    {
      memcpy(pMsg->authData, pAuthData, authDataLen);
1000475e:	462a      	mov	r2, r5
10004760:	4631      	mov	r1, r6
10004762:	4418      	add	r0, r3
10004764:	f004 ff52 	bl	1000960c <memcpy>
    }

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
10004768:	4620      	mov	r0, r4
  }
}
1000476a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
1000476e:	f000 b803 	b.w	10004778 <SmpDmMsgSend>
}
10004772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10004774:	1001070b 	.word	0x1001070b

10004778 <SmpDmMsgSend>:
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
  WsfMsgSend(smpCb.handlerId, pMsg);
10004778:	4b02      	ldr	r3, [pc, #8]	; (10004784 <SmpDmMsgSend+0xc>)
{
1000477a:	4601      	mov	r1, r0
  WsfMsgSend(smpCb.handlerId, pMsg);
1000477c:	f893 00ec 	ldrb.w	r0, [r3, #236]	; 0xec
10004780:	f000 bcfe 	b.w	10005180 <WsfMsgSend>
10004784:	20011164 	.word	0x20011164

10004788 <LlGetDefaultRunTimeCfg>:
 *
 *  This function returns default value for the LL subsystem's runtime configurations.
 */
/*************************************************************************************************/
void LlGetDefaultRunTimeCfg(LlRtCfg_t *pCfg)
{
10004788:	b510      	push	{r4, lr}
    .phyCodedSup        = FALSE,
    .stableModIdxTxSup  = FALSE,
    .stableModIdxRxSup  = FALSE
  };

  *pCfg = defCfg;
1000478a:	2234      	movs	r2, #52	; 0x34
{
1000478c:	4604      	mov	r4, r0
  *pCfg = defCfg;
1000478e:	2100      	movs	r1, #0
10004790:	f005 f83e 	bl	10009810 <memset>
10004794:	f240 43b7 	movw	r3, #1207	; 0x4b7
10004798:	8023      	strh	r3, [r4, #0]
1000479a:	2308      	movs	r3, #8
1000479c:	7123      	strb	r3, [r4, #4]
1000479e:	2304      	movs	r3, #4
100047a0:	2140      	movs	r1, #64	; 0x40
100047a2:	7363      	strb	r3, [r4, #13]
100047a4:	75a3      	strb	r3, [r4, #22]
100047a6:	76e3      	strb	r3, [r4, #27]
100047a8:	7723      	strb	r3, [r4, #28]
100047aa:	231b      	movs	r3, #27
100047ac:	22fb      	movs	r2, #251	; 0xfb
100047ae:	7421      	strb	r1, [r4, #16]
100047b0:	83e3      	strh	r3, [r4, #30]
100047b2:	2102      	movs	r1, #2
100047b4:	f242 7310 	movw	r3, #10000	; 0x2710
100047b8:	81e2      	strh	r2, [r4, #14]
100047ba:	82a1      	strh	r1, [r4, #20]
100047bc:	8322      	strh	r2, [r4, #24]
100047be:	85e3      	strh	r3, [r4, #46]	; 0x2e
}
100047c0:	bd10      	pop	{r4, pc}
	...

100047c4 <printFmtInt>:
 *
 *  \return Number of characters stored.
 */
/*************************************************************************************************/
static int printFmtInt(char *pStr, int maxLen, int i, uint8_t base, bool_t sign, int width)
{
100047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100047c6:	9d07      	ldr	r5, [sp, #28]
100047c8:	4604      	mov	r4, r0
100047ca:	f89d 0018 	ldrb.w	r0, [sp, #24]
  uint8_t use_width;
  int t;

  use_width = width;

  if (i == 0)
100047ce:	b932      	cbnz	r2, 100047de <printFmtInt+0x1a>
  {
    s = "0\0";
100047d0:	491e      	ldr	r1, [pc, #120]	; (1000484c <printFmtInt+0x88>)
    width--;
100047d2:	1e6f      	subs	r7, r5, #1
    goto almost;
100047d4:	4620      	mov	r0, r4
    *--s = (char)(t + '0');
    u /= base;
    width--;
  }

almost:
100047d6:	4603      	mov	r3, r0
100047d8:	19c5      	adds	r5, r0, r7
  while (width > 0)
  {
    *pStr++ = '0';
100047da:	2630      	movs	r6, #48	; 0x30
100047dc:	e029      	b.n	10004832 <printFmtInt+0x6e>
  if (sign && base == 10 && i < 0)
100047de:	b318      	cbz	r0, 10004828 <printFmtInt+0x64>
100047e0:	2b0a      	cmp	r3, #10
100047e2:	d121      	bne.n	10004828 <printFmtInt+0x64>
100047e4:	2a00      	cmp	r2, #0
100047e6:	da1f      	bge.n	10004828 <printFmtInt+0x64>
    *pStr++ = '-';
100047e8:	4620      	mov	r0, r4
100047ea:	262d      	movs	r6, #45	; 0x2d
100047ec:	f800 6b01 	strb.w	r6, [r0], #1
    u = (unsigned int)-i;
100047f0:	4252      	negs	r2, r2
    width--;
100047f2:	1e6f      	subs	r7, r5, #1
  s = pStr + maxLen - 1;
100047f4:	1e4e      	subs	r6, r1, #1
  *s = '\0';
100047f6:	f04f 0c00 	mov.w	ip, #0
100047fa:	f800 c006 	strb.w	ip, [r0, r6]
  use_width = width;
100047fe:	b2ed      	uxtb	r5, r5
  s = pStr + maxLen - 1;
10004800:	1981      	adds	r1, r0, r6
  while (u && (!use_width || (width > 0)))
10004802:	b10d      	cbz	r5, 10004808 <printFmtInt+0x44>
10004804:	2f00      	cmp	r7, #0
10004806:	dde6      	ble.n	100047d6 <printFmtInt+0x12>
    t = (unsigned int)u % base;
10004808:	fbb2 fcf3 	udiv	ip, r2, r3
1000480c:	fb03 261c 	mls	r6, r3, ip, r2
    if (t >= 10)
10004810:	2e09      	cmp	r6, #9
      t += 'A' - '0' - 10;
10004812:	bf88      	it	hi
10004814:	3607      	addhi	r6, #7
    *--s = (char)(t + '0');
10004816:	3630      	adds	r6, #48	; 0x30
  while (u && (!use_width || (width > 0)))
10004818:	4293      	cmp	r3, r2
    *--s = (char)(t + '0');
1000481a:	f801 6d01 	strb.w	r6, [r1, #-1]!
    width--;
1000481e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
  while (u && (!use_width || (width > 0)))
10004822:	d8d8      	bhi.n	100047d6 <printFmtInt+0x12>
    u /= base;
10004824:	4662      	mov	r2, ip
10004826:	e7ec      	b.n	10004802 <printFmtInt+0x3e>
10004828:	462f      	mov	r7, r5
1000482a:	4620      	mov	r0, r4
1000482c:	e7e2      	b.n	100047f4 <printFmtInt+0x30>
    *pStr++ = '0';
1000482e:	f803 6b01 	strb.w	r6, [r3], #1
  while (width > 0)
10004832:	1aea      	subs	r2, r5, r3
10004834:	2a00      	cmp	r2, #0
10004836:	dcfa      	bgt.n	1000482e <printFmtInt+0x6a>
    width--;
  }
  strcpy(pStr, s);
10004838:	2f00      	cmp	r7, #0
1000483a:	bfa8      	it	ge
1000483c:	19c0      	addge	r0, r0, r7
1000483e:	f005 fa0d 	bl	10009c5c <strcpy>

  return strlen(p);
10004842:	4620      	mov	r0, r4
}
10004844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return strlen(p);
10004848:	f005 ba7a 	b.w	10009d40 <strlen>
1000484c:	10010741 	.word	0x10010741

10004850 <PrintVsn>:
 *
 *  \return Number of characters stored.
 */
/*************************************************************************************************/
uint32_t PrintVsn(char *pStr, uint32_t size, const char *pFmt, va_list ap)
{
10004850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t len = 0;

    *pStr = 0;
10004854:	2600      	movs	r6, #0
{
10004856:	4604      	mov	r4, r0
10004858:	4689      	mov	r9, r1
1000485a:	461d      	mov	r5, r3
    *pStr = 0;
1000485c:	7006      	strb	r6, [r0, #0]
    size--; /* Ensure we null-terminate within our buffer */
1000485e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
        /* unsigned hexadecimal integer */
        case 'x':
        case 'X':
        {
          unsigned int tmp    = va_arg(ap, unsigned int);
          uint8_t      lenTmp = printFmtInt(pStr, size - len, tmp, 16, 0, width);
10004862:	46b2      	mov	sl, r6
          uint8_t      lenTmp = printFmtInt(pStr, size - len, tmp, 10, 0, width);
10004864:	f04f 0b0a 	mov.w	fp, #10
    while ((*pFmt != '\0') && (len < size))
10004868:	7813      	ldrb	r3, [r2, #0]
1000486a:	b10b      	cbz	r3, 10004870 <PrintVsn+0x20>
1000486c:	4546      	cmp	r6, r8
1000486e:	d309      	bcc.n	10004884 <PrintVsn+0x34>
    }

    /* Null-terminate output. */
    *pStr = 0;

    if (len > size)
10004870:	4546      	cmp	r6, r8
    {
      /* Compensate for -1 earlier. */
      return size + 2;
10004872:	bf88      	it	hi
10004874:	f109 0601 	addhi.w	r6, r9, #1
    *pStr = 0;
10004878:	2300      	movs	r3, #0
    }

    return len;
}
1000487a:	4630      	mov	r0, r6
    *pStr = 0;
1000487c:	7023      	strb	r3, [r4, #0]
}
1000487e:	b003      	add	sp, #12
10004880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (*pFmt != '%')
10004884:	2b25      	cmp	r3, #37	; 0x25
10004886:	f102 0701 	add.w	r7, r2, #1
1000488a:	d004      	beq.n	10004896 <PrintVsn+0x46>
        *pStr++ = *pFmt++;
1000488c:	f804 3b01 	strb.w	r3, [r4], #1
        len++;
10004890:	3601      	adds	r6, #1
        *pStr++ = '%';
10004892:	463a      	mov	r2, r7
10004894:	e7e8      	b.n	10004868 <PrintVsn+0x18>
      if (*pFmt == '%')
10004896:	7853      	ldrb	r3, [r2, #1]
10004898:	2b25      	cmp	r3, #37	; 0x25
1000489a:	d104      	bne.n	100048a6 <PrintVsn+0x56>
        *pStr++ = '%';
1000489c:	f804 3b01 	strb.w	r3, [r4], #1
        len++;
100048a0:	3601      	adds	r6, #1
        pFmt++;
100048a2:	1c97      	adds	r7, r2, #2
        continue;
100048a4:	e7f5      	b.n	10004892 <PrintVsn+0x42>
      if (*pFmt == '0')
100048a6:	2b30      	cmp	r3, #48	; 0x30
100048a8:	d13b      	bne.n	10004922 <PrintVsn+0xd2>
  *pInt = 0;
100048aa:	2200      	movs	r2, #0
100048ac:	4638      	mov	r0, r7
100048ae:	4611      	mov	r1, r2
    c = *pStr++;
100048b0:	f810 cb01 	ldrb.w	ip, [r0], #1
    if (!PRINT_IS_XDIGIT(c))
100048b4:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
100048b8:	b2db      	uxtb	r3, r3
100048ba:	2b09      	cmp	r3, #9
100048bc:	d92a      	bls.n	10004914 <PrintVsn+0xc4>
100048be:	f02c 0e20 	bic.w	lr, ip, #32
100048c2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
100048c6:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
100048ca:	f1be 0f05 	cmp.w	lr, #5
100048ce:	b2db      	uxtb	r3, r3
100048d0:	d806      	bhi.n	100048e0 <PrintVsn+0x90>
    t = PRINT_XDIGIT_TO_INT(c);
100048d2:	2b05      	cmp	r3, #5
100048d4:	d816      	bhi.n	10004904 <PrintVsn+0xb4>
100048d6:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
100048da:	b2db      	uxtb	r3, r3
    if (t >= base)
100048dc:	2b09      	cmp	r3, #9
100048de:	d919      	bls.n	10004914 <PrintVsn+0xc4>
        pFmt += printParseInt(pFmt, &width, 10u);
100048e0:	440f      	add	r7, r1
      if (*pFmt == 'l')
100048e2:	783b      	ldrb	r3, [r7, #0]
100048e4:	2b6c      	cmp	r3, #108	; 0x6c
100048e6:	bf08      	it	eq
100048e8:	3701      	addeq	r7, #1
      switch(*pFmt)
100048ea:	783b      	ldrb	r3, [r7, #0]
100048ec:	2b78      	cmp	r3, #120	; 0x78
100048ee:	d807      	bhi.n	10004900 <PrintVsn+0xb0>
100048f0:	2b6f      	cmp	r3, #111	; 0x6f
100048f2:	d818      	bhi.n	10004926 <PrintVsn+0xd6>
100048f4:	2b63      	cmp	r3, #99	; 0x63
100048f6:	d02f      	beq.n	10004958 <PrintVsn+0x108>
100048f8:	2b64      	cmp	r3, #100	; 0x64
100048fa:	d042      	beq.n	10004982 <PrintVsn+0x132>
100048fc:	2b58      	cmp	r3, #88	; 0x58
100048fe:	d04a      	beq.n	10004996 <PrintVsn+0x146>
      pFmt++;
10004900:	3701      	adds	r7, #1
10004902:	e7c6      	b.n	10004892 <PrintVsn+0x42>
    t = PRINT_XDIGIT_TO_INT(c);
10004904:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
10004908:	2b05      	cmp	r3, #5
1000490a:	d802      	bhi.n	10004912 <PrintVsn+0xc2>
1000490c:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
10004910:	e7e3      	b.n	100048da <PrintVsn+0x8a>
    if (t >= base)
10004912:	2300      	movs	r3, #0
    *pInt += t;
10004914:	fb0b 3202 	mla	r2, fp, r2, r3
  } while (*pStr != '\0');
10004918:	7803      	ldrb	r3, [r0, #0]
    r++;
1000491a:	3101      	adds	r1, #1
  } while (*pStr != '\0');
1000491c:	2b00      	cmp	r3, #0
1000491e:	d1c7      	bne.n	100048b0 <PrintVsn+0x60>
10004920:	e7de      	b.n	100048e0 <PrintVsn+0x90>
      uint32_t width = 0;
10004922:	2200      	movs	r2, #0
10004924:	e7dd      	b.n	100048e2 <PrintVsn+0x92>
10004926:	3b70      	subs	r3, #112	; 0x70
10004928:	2b08      	cmp	r3, #8
1000492a:	d8e9      	bhi.n	10004900 <PrintVsn+0xb0>
1000492c:	a101      	add	r1, pc, #4	; (adr r1, 10004934 <PrintVsn+0xe4>)
1000492e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10004932:	bf00      	nop
10004934:	1000498b 	.word	0x1000498b
10004938:	10004901 	.word	0x10004901
1000493c:	10004901 	.word	0x10004901
10004940:	1000499d 	.word	0x1000499d
10004944:	10004901 	.word	0x10004901
10004948:	10004965 	.word	0x10004965
1000494c:	10004901 	.word	0x10004901
10004950:	10004901 	.word	0x10004901
10004954:	10004997 	.word	0x10004997
          char tmp = va_arg(ap, int);
10004958:	f855 3b04 	ldr.w	r3, [r5], #4
1000495c:	f804 3b01 	strb.w	r3, [r4], #1
          len++;
10004960:	3601      	adds	r6, #1
          break;
10004962:	e7cd      	b.n	10004900 <PrintVsn+0xb0>
          uint8_t      lenTmp = printFmtInt(pStr, size - len, tmp, 10, 0, width);
10004964:	e9cd a200 	strd	sl, r2, [sp]
          uint8_t lenTmp = printFmtInt(pStr, size - len, tmp, 10, 1, width);
10004968:	230a      	movs	r3, #10
1000496a:	eba8 0106 	sub.w	r1, r8, r6
1000496e:	4620      	mov	r0, r4
10004970:	f855 2b04 	ldr.w	r2, [r5], #4
10004974:	f7ff ff26 	bl	100047c4 <printFmtInt>
          pStr += lenTmp;
10004978:	fa54 f480 	uxtab	r4, r4, r0
          len  += lenTmp;
1000497c:	fa56 f680 	uxtab	r6, r6, r0
          break;
10004980:	e7be      	b.n	10004900 <PrintVsn+0xb0>
          uint8_t lenTmp = printFmtInt(pStr, size - len, tmp, 10, 1, width);
10004982:	2301      	movs	r3, #1
10004984:	9201      	str	r2, [sp, #4]
10004986:	9300      	str	r3, [sp, #0]
10004988:	e7ee      	b.n	10004968 <PrintVsn+0x118>
          uint8_t       lenTmp = printFmtInt(pStr, size - len, tmp, 16, 1, 8u);
1000498a:	2301      	movs	r3, #1
1000498c:	2108      	movs	r1, #8
1000498e:	e9cd 3100 	strd	r3, r1, [sp]
          uint8_t      lenTmp = printFmtInt(pStr, size - len, tmp, 16, 0, width);
10004992:	2310      	movs	r3, #16
10004994:	e7e9      	b.n	1000496a <PrintVsn+0x11a>
10004996:	e9cd a200 	strd	sl, r2, [sp]
1000499a:	e7fa      	b.n	10004992 <PrintVsn+0x142>
          while ((tmp != NULL) && (*tmp != '\0') && (len < size))
1000499c:	f855 3b04 	ldr.w	r3, [r5], #4
100049a0:	3b01      	subs	r3, #1
100049a2:	1c5a      	adds	r2, r3, #1
100049a4:	d0ac      	beq.n	10004900 <PrintVsn+0xb0>
100049a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
100049aa:	2a00      	cmp	r2, #0
100049ac:	d0a8      	beq.n	10004900 <PrintVsn+0xb0>
100049ae:	4546      	cmp	r6, r8
100049b0:	d2a6      	bcs.n	10004900 <PrintVsn+0xb0>
            *pStr++ = *tmp++;
100049b2:	f804 2b01 	strb.w	r2, [r4], #1
            len++;
100049b6:	3601      	adds	r6, #1
100049b8:	e7f3      	b.n	100049a2 <PrintVsn+0x152>
100049ba:	bf00      	nop

100049bc <TerminalRegisterUartTxFunc>:
 *  \brief  Register the UART Tx Function for the platform.
 */
/*************************************************************************************************/
void TerminalRegisterUartTxFunc(terminalUartTx_t uartTxFunc)
{
  terminalCb.terminalTx = uartTxFunc;
100049bc:	4b01      	ldr	r3, [pc, #4]	; (100049c4 <TerminalRegisterUartTxFunc+0x8>)
100049be:	6758      	str	r0, [r3, #116]	; 0x74
}
100049c0:	4770      	bx	lr
100049c2:	bf00      	nop
100049c4:	20000ac0 	.word	0x20000ac0

100049c8 <TerminalRegisterCommand>:
 *  \param  pCommand    Command.
 */
/*************************************************************************************************/
void TerminalRegisterCommand(terminalCommand_t *pCommand)
{
  terminalCommand_t *pCommandTemp = terminalCb.pFirstCommand;
100049c8:	4a06      	ldr	r2, [pc, #24]	; (100049e4 <TerminalRegisterCommand+0x1c>)
100049ca:	6853      	ldr	r3, [r2, #4]

  if (pCommandTemp == NULL)
100049cc:	b91b      	cbnz	r3, 100049d6 <TerminalRegisterCommand+0xe>
  {
    terminalCb.pFirstCommand = pCommand;
100049ce:	6050      	str	r0, [r2, #4]
    }

    pCommandTemp->pNext = pCommand;
  }

  pCommand->pNext = NULL;
100049d0:	2300      	movs	r3, #0
100049d2:	6003      	str	r3, [r0, #0]
}
100049d4:	4770      	bx	lr
    while (pCommandTemp->pNext != NULL)
100049d6:	461a      	mov	r2, r3
100049d8:	681b      	ldr	r3, [r3, #0]
100049da:	2b00      	cmp	r3, #0
100049dc:	d1fb      	bne.n	100049d6 <TerminalRegisterCommand+0xe>
    pCommandTemp->pNext = pCommand;
100049de:	6010      	str	r0, [r2, #0]
100049e0:	e7f6      	b.n	100049d0 <TerminalRegisterCommand+0x8>
100049e2:	bf00      	nop
100049e4:	20000ac0 	.word	0x20000ac0

100049e8 <TerminalInit>:
{
100049e8:	b510      	push	{r4, lr}
100049ea:	4604      	mov	r4, r0
  APP_TRACE_INFO0("terminal: init");
100049ec:	480a      	ldr	r0, [pc, #40]	; (10004a18 <TerminalInit+0x30>)
100049ee:	f000 fd53 	bl	10005498 <WsfTrace>
  terminalCb.handlerId     = handlerId;
100049f2:	4b0a      	ldr	r3, [pc, #40]	; (10004a1c <TerminalInit+0x34>)
  TerminalRegisterCommand(&terminalCommandHelp);
100049f4:	480a      	ldr	r0, [pc, #40]	; (10004a20 <TerminalInit+0x38>)
  terminalCb.handlerId     = handlerId;
100049f6:	701c      	strb	r4, [r3, #0]
  terminalCb.pFirstCommand = NULL;
100049f8:	2200      	movs	r2, #0
  terminalCb.doEcho        = TRUE;
100049fa:	2101      	movs	r1, #1
  terminalCb.pFirstCommand = NULL;
100049fc:	605a      	str	r2, [r3, #4]
  terminalCb.isExecuting   = FALSE;
100049fe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  terminalCb.doEcho        = TRUE;
10004a02:	f883 106e 	strb.w	r1, [r3, #110]	; 0x6e
  terminalCb.bufOffset     = 0;
10004a06:	671a      	str	r2, [r3, #112]	; 0x70
  TerminalRegisterCommand(&terminalCommandHelp);
10004a08:	f7ff ffde 	bl	100049c8 <TerminalRegisterCommand>
}
10004a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TerminalRegisterCommand(&terminalCommandEcho);
10004a10:	4804      	ldr	r0, [pc, #16]	; (10004a24 <TerminalInit+0x3c>)
10004a12:	f7ff bfd9 	b.w	100049c8 <TerminalRegisterCommand>
10004a16:	bf00      	nop
10004a18:	10010744 	.word	0x10010744
10004a1c:	20000ac0 	.word	0x20000ac0
10004a20:	20000044 	.word	0x20000044
10004a24:	20000034 	.word	0x20000034

10004a28 <TerminalTx>:
 *  \param  len     Length of buffer in octets.
 */
/*************************************************************************************************/
void TerminalTx(const uint8_t *pData, uint16_t len)
{
  if (terminalCb.terminalTx)
10004a28:	4b02      	ldr	r3, [pc, #8]	; (10004a34 <TerminalTx+0xc>)
10004a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10004a2c:	b103      	cbz	r3, 10004a30 <TerminalTx+0x8>
  {
    (*terminalCb.terminalTx)(pData, len);
10004a2e:	4718      	bx	r3
  }
}
10004a30:	4770      	bx	lr
10004a32:	bf00      	nop
10004a34:	20000ac0 	.word	0x20000ac0

10004a38 <TerminalTxStr>:
{
10004a38:	b510      	push	{r4, lr}
10004a3a:	4604      	mov	r4, r0
  TerminalTx((const uint8_t *)pStr, (uint16_t)strlen(pStr));
10004a3c:	f005 f980 	bl	10009d40 <strlen>
10004a40:	b281      	uxth	r1, r0
10004a42:	4620      	mov	r0, r4
}
10004a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TerminalTx((const uint8_t *)pStr, (uint16_t)strlen(pStr));
10004a48:	f7ff bfee 	b.w	10004a28 <TerminalTx>

10004a4c <terminalCommandEchoHandler>:
 *  \return Error code.
 */
/*************************************************************************************************/
static uint8_t terminalCommandEchoHandler(uint32_t argc, char **argv)
{
  if (argc < 2)
10004a4c:	2801      	cmp	r0, #1
{
10004a4e:	b538      	push	{r3, r4, r5, lr}
  if (argc < 2)
10004a50:	d91c      	bls.n	10004a8c <terminalCommandEchoHandler+0x40>
  {
    return TERMINAL_ERROR_TOO_FEW_ARGUMENTS;
  }
  else if (argc == 2)
10004a52:	2802      	cmp	r0, #2
10004a54:	d11c      	bne.n	10004a90 <terminalCommandEchoHandler+0x44>
  {
    if (strcmp(argv[1], "on") == 0)
10004a56:	684d      	ldr	r5, [r1, #4]
10004a58:	490f      	ldr	r1, [pc, #60]	; (10004a98 <terminalCommandEchoHandler+0x4c>)
10004a5a:	4628      	mov	r0, r5
10004a5c:	f004 ff94 	bl	10009988 <strcmp>
10004a60:	4604      	mov	r4, r0
10004a62:	b940      	cbnz	r0, 10004a76 <terminalCommandEchoHandler+0x2a>
    {
      terminalCb.doEcho = TRUE;
10004a64:	4b0d      	ldr	r3, [pc, #52]	; (10004a9c <terminalCommandEchoHandler+0x50>)
      TerminalTxStr("echo on" TERMINAL_STRING_NEW_LINE);
10004a66:	480e      	ldr	r0, [pc, #56]	; (10004aa0 <terminalCommandEchoHandler+0x54>)
      terminalCb.doEcho = TRUE;
10004a68:	2201      	movs	r2, #1
10004a6a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
    }
    else if (strcmp(argv[1], "off") == 0)
    {
      terminalCb.doEcho = FALSE;
      TerminalTxStr("echo off" TERMINAL_STRING_NEW_LINE);
10004a6e:	f7ff ffe3 	bl	10004a38 <TerminalTxStr>
10004a72:	4620      	mov	r0, r4
  {
    return TERMINAL_ERROR_TOO_MANY_ARGUMENTS;
  }

  return TERMINAL_ERROR_OK;
}
10004a74:	bd38      	pop	{r3, r4, r5, pc}
    else if (strcmp(argv[1], "off") == 0)
10004a76:	490b      	ldr	r1, [pc, #44]	; (10004aa4 <terminalCommandEchoHandler+0x58>)
10004a78:	4628      	mov	r0, r5
10004a7a:	f004 ff85 	bl	10009988 <strcmp>
10004a7e:	4604      	mov	r4, r0
10004a80:	b940      	cbnz	r0, 10004a94 <terminalCommandEchoHandler+0x48>
      terminalCb.doEcho = FALSE;
10004a82:	4b06      	ldr	r3, [pc, #24]	; (10004a9c <terminalCommandEchoHandler+0x50>)
10004a84:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
      TerminalTxStr("echo off" TERMINAL_STRING_NEW_LINE);
10004a88:	4807      	ldr	r0, [pc, #28]	; (10004aa8 <terminalCommandEchoHandler+0x5c>)
10004a8a:	e7f0      	b.n	10004a6e <terminalCommandEchoHandler+0x22>
    return TERMINAL_ERROR_TOO_FEW_ARGUMENTS;
10004a8c:	2002      	movs	r0, #2
10004a8e:	e7f1      	b.n	10004a74 <terminalCommandEchoHandler+0x28>
    return TERMINAL_ERROR_TOO_MANY_ARGUMENTS;
10004a90:	2003      	movs	r0, #3
10004a92:	e7ef      	b.n	10004a74 <terminalCommandEchoHandler+0x28>
      return TERMINAL_ERROR_BAD_ARGUMENTS;
10004a94:	2001      	movs	r0, #1
10004a96:	e7ed      	b.n	10004a74 <terminalCommandEchoHandler+0x28>
10004a98:	10010753 	.word	0x10010753
10004a9c:	20000ac0 	.word	0x20000ac0
10004aa0:	10010756 	.word	0x10010756
10004aa4:	10010760 	.word	0x10010760
10004aa8:	10010764 	.word	0x10010764

10004aac <terminalCommandHelpHandler>:
  if (argc > 1)
10004aac:	2801      	cmp	r0, #1
{
10004aae:	b538      	push	{r3, r4, r5, lr}
  if (argc > 1)
10004ab0:	d810      	bhi.n	10004ad4 <terminalCommandHelpHandler+0x28>
  terminalCommand_t *pCommand = terminalCb.pFirstCommand;
10004ab2:	4b09      	ldr	r3, [pc, #36]	; (10004ad8 <terminalCommandHelpHandler+0x2c>)
    TerminalTxStr(TERMINAL_STRING_NEW_LINE);
10004ab4:	4d09      	ldr	r5, [pc, #36]	; (10004adc <terminalCommandHelpHandler+0x30>)
  terminalCommand_t *pCommand = terminalCb.pFirstCommand;
10004ab6:	685c      	ldr	r4, [r3, #4]
  while (pCommand != NULL)
10004ab8:	b924      	cbnz	r4, 10004ac4 <terminalCommandHelpHandler+0x18>
  TerminalTxStr(TERMINAL_STRING_NEW_LINE);
10004aba:	4808      	ldr	r0, [pc, #32]	; (10004adc <terminalCommandHelpHandler+0x30>)
10004abc:	f7ff ffbc 	bl	10004a38 <TerminalTxStr>
  return TERMINAL_ERROR_OK;
10004ac0:	4620      	mov	r0, r4
}
10004ac2:	bd38      	pop	{r3, r4, r5, pc}
    TerminalTxStr(pCommand->pHelpStr);
10004ac4:	68a0      	ldr	r0, [r4, #8]
10004ac6:	f7ff ffb7 	bl	10004a38 <TerminalTxStr>
    TerminalTxStr(TERMINAL_STRING_NEW_LINE);
10004aca:	4628      	mov	r0, r5
10004acc:	f7ff ffb4 	bl	10004a38 <TerminalTxStr>
    pCommand = pCommand->pNext;
10004ad0:	6824      	ldr	r4, [r4, #0]
10004ad2:	e7f1      	b.n	10004ab8 <terminalCommandHelpHandler+0xc>
    return TERMINAL_ERROR_TOO_MANY_ARGUMENTS;
10004ad4:	2003      	movs	r0, #3
10004ad6:	e7f4      	b.n	10004ac2 <terminalCommandHelpHandler+0x16>
10004ad8:	20000ac0 	.word	0x20000ac0
10004adc:	10010818 	.word	0x10010818

10004ae0 <TerminalHandler>:
{
10004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((event & TERMINAL_EVENT_COMMAND_RX) != 0)
10004ae2:	07c3      	lsls	r3, r0, #31
{
10004ae4:	b08b      	sub	sp, #44	; 0x2c
  if ((event & TERMINAL_EVENT_COMMAND_RX) != 0)
10004ae6:	d518      	bpl.n	10004b1a <TerminalHandler+0x3a>
  length = strlen(pBuf);
10004ae8:	4842      	ldr	r0, [pc, #264]	; (10004bf4 <TerminalHandler+0x114>)
10004aea:	f005 f929 	bl	10009d40 <strlen>
  for (pBufCur = pBuf; pBufCur < pBuf + length; pBufCur++)
10004aee:	4b41      	ldr	r3, [pc, #260]	; (10004bf4 <TerminalHandler+0x114>)
  state  = STATE_OUTSIDE_OF_ARG;
10004af0:	2200      	movs	r2, #0
  for (pBufCur = pBuf; pBufCur < pBuf + length; pBufCur++)
10004af2:	f1a3 0708 	sub.w	r7, r3, #8
  uint32_t argc = 0;
10004af6:	4614      	mov	r4, r2
  for (pBufCur = pBuf; pBufCur < pBuf + length; pBufCur++)
10004af8:	4418      	add	r0, r3
10004afa:	463e      	mov	r6, r7
          *pBufCur = '\0';
10004afc:	4611      	mov	r1, r2
  for (pBufCur = pBuf; pBufCur < pBuf + length; pBufCur++)
10004afe:	4283      	cmp	r3, r0
10004b00:	d30d      	bcc.n	10004b1e <TerminalHandler+0x3e>
  if (argc > TERMINAL_MAX_ARGC)
10004b02:	2c08      	cmp	r4, #8
10004b04:	d946      	bls.n	10004b94 <TerminalHandler+0xb4>
    TerminalTxStr(TERMINAL_STRING_ERROR "too many arguments" TERMINAL_STRING_NEW_LINE);
10004b06:	483c      	ldr	r0, [pc, #240]	; (10004bf8 <TerminalHandler+0x118>)
          TerminalTxStr(TERMINAL_STRING_ERROR "Unknown error" TERMINAL_STRING_NEW_LINE);
10004b08:	f7ff ff96 	bl	10004a38 <TerminalTxStr>
    TerminalTxStr(TERMINAL_STRING_PROMPT);
10004b0c:	483b      	ldr	r0, [pc, #236]	; (10004bfc <TerminalHandler+0x11c>)
10004b0e:	f7ff ff93 	bl	10004a38 <TerminalTxStr>
    terminalCb.bufOffset   = 0;
10004b12:	2300      	movs	r3, #0
10004b14:	6733      	str	r3, [r6, #112]	; 0x70
    terminalCb.isExecuting = FALSE;
10004b16:	f886 306d 	strb.w	r3, [r6, #109]	; 0x6d
}
10004b1a:	b00b      	add	sp, #44	; 0x2c
10004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (state)
10004b1e:	2a03      	cmp	r2, #3
10004b20:	d818      	bhi.n	10004b54 <TerminalHandler+0x74>
10004b22:	e8df f002 	tbb	[pc, r2]
10004b26:	1902      	.short	0x1902
10004b28:	3124      	.short	0x3124
        if (*pBufCur == '\"')
10004b2a:	781d      	ldrb	r5, [r3, #0]
10004b2c:	2d22      	cmp	r5, #34	; 0x22
10004b2e:	d029      	beq.n	10004b84 <TerminalHandler+0xa4>
        else if (!TERMINAL_IS_SPACE(*pBufCur))
10004b30:	f1a5 0c09 	sub.w	ip, r5, #9
10004b34:	f1bc 0f04 	cmp.w	ip, #4
10004b38:	d90c      	bls.n	10004b54 <TerminalHandler+0x74>
10004b3a:	2d20      	cmp	r5, #32
10004b3c:	d00a      	beq.n	10004b54 <TerminalHandler+0x74>
          if (argc < TERMINAL_MAX_ARGC)
10004b3e:	2c07      	cmp	r4, #7
            argv[argc] = pBufCur;
10004b40:	bf9c      	itt	ls
10004b42:	aa0a      	addls	r2, sp, #40	; 0x28
10004b44:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
          argc++;
10004b48:	f104 0401 	add.w	r4, r4, #1
            argv[argc] = pBufCur;
10004b4c:	bf98      	it	ls
10004b4e:	f842 3c24 	strls.w	r3, [r2, #-36]
          state = STATE_INSIDE_OF_ARG;
10004b52:	2202      	movs	r2, #2
  for (pBufCur = pBuf; pBufCur < pBuf + length; pBufCur++)
10004b54:	3301      	adds	r3, #1
10004b56:	e7d2      	b.n	10004afe <TerminalHandler+0x1e>
        if (*pBufCur == '\"')
10004b58:	781a      	ldrb	r2, [r3, #0]
        if (argc < TERMINAL_MAX_ARGC)
10004b5a:	2c07      	cmp	r4, #7
          argv[state] = pBufCur;
10004b5c:	bf98      	it	ls
10004b5e:	9302      	strls	r3, [sp, #8]
        if (*pBufCur == '\"')
10004b60:	2a22      	cmp	r2, #34	; 0x22
        argc++;
10004b62:	f104 0401 	add.w	r4, r4, #1
        if (*pBufCur == '\"')
10004b66:	d113      	bne.n	10004b90 <TerminalHandler+0xb0>
          *pBufCur = '\0';
10004b68:	7019      	strb	r1, [r3, #0]
          state = STATE_OUTSIDE_OF_ARG;
10004b6a:	2200      	movs	r2, #0
10004b6c:	e7f2      	b.n	10004b54 <TerminalHandler+0x74>
        if (TERMINAL_IS_SPACE(*pBufCur))
10004b6e:	781d      	ldrb	r5, [r3, #0]
10004b70:	f1a5 0c09 	sub.w	ip, r5, #9
10004b74:	f1bc 0f04 	cmp.w	ip, #4
10004b78:	d9f6      	bls.n	10004b68 <TerminalHandler+0x88>
10004b7a:	2d20      	cmp	r5, #32
10004b7c:	d0f4      	beq.n	10004b68 <TerminalHandler+0x88>
        else if (*pBufCur == '\"')
10004b7e:	2d22      	cmp	r5, #34	; 0x22
10004b80:	d1e8      	bne.n	10004b54 <TerminalHandler+0x74>
          *pBufCur = '\0';
10004b82:	7019      	strb	r1, [r3, #0]
          state = STATE_JUST_GOT_QUOTE;
10004b84:	2201      	movs	r2, #1
10004b86:	e7e5      	b.n	10004b54 <TerminalHandler+0x74>
        if (*pBufCur == '\"')
10004b88:	781d      	ldrb	r5, [r3, #0]
10004b8a:	2d22      	cmp	r5, #34	; 0x22
10004b8c:	d1e2      	bne.n	10004b54 <TerminalHandler+0x74>
10004b8e:	e7eb      	b.n	10004b68 <TerminalHandler+0x88>
          state = STATE_INSIDE_OF_ARG_IN_QUOTES;
10004b90:	2203      	movs	r2, #3
10004b92:	e7df      	b.n	10004b54 <TerminalHandler+0x74>
  else if (argc > 0)
10004b94:	2c00      	cmp	r4, #0
10004b96:	d0b9      	beq.n	10004b0c <TerminalHandler+0x2c>
    terminalCommand_t *pCommand = terminalCb.pFirstCommand;
10004b98:	687d      	ldr	r5, [r7, #4]
      if (strcmp(pCommand->pName, argv[0]) == 0)
10004b9a:	9f01      	ldr	r7, [sp, #4]
    while (pCommand != NULL)
10004b9c:	b93d      	cbnz	r5, 10004bae <TerminalHandler+0xce>
      TerminalTxStr(TERMINAL_STRING_ERROR "unrecognized command \"");
10004b9e:	4818      	ldr	r0, [pc, #96]	; (10004c00 <TerminalHandler+0x120>)
10004ba0:	f7ff ff4a 	bl	10004a38 <TerminalTxStr>
      TerminalTxStr(argv[0]);
10004ba4:	9801      	ldr	r0, [sp, #4]
10004ba6:	f7ff ff47 	bl	10004a38 <TerminalTxStr>
      TerminalTxStr("\"" TERMINAL_STRING_NEW_LINE);
10004baa:	4816      	ldr	r0, [pc, #88]	; (10004c04 <TerminalHandler+0x124>)
10004bac:	e7ac      	b.n	10004b08 <TerminalHandler+0x28>
      if (strcmp(pCommand->pName, argv[0]) == 0)
10004bae:	6868      	ldr	r0, [r5, #4]
10004bb0:	4639      	mov	r1, r7
10004bb2:	f004 fee9 	bl	10009988 <strcmp>
10004bb6:	b148      	cbz	r0, 10004bcc <TerminalHandler+0xec>
      pCommand = pCommand->pNext;
10004bb8:	682d      	ldr	r5, [r5, #0]
10004bba:	e7ef      	b.n	10004b9c <TerminalHandler+0xbc>
          TerminalTxStr(TERMINAL_STRING_ERROR "Invalid argument(s)" TERMINAL_STRING_NEW_LINE);
10004bbc:	4812      	ldr	r0, [pc, #72]	; (10004c08 <TerminalHandler+0x128>)
10004bbe:	e7a3      	b.n	10004b08 <TerminalHandler+0x28>
          TerminalTxStr(TERMINAL_STRING_ERROR "Too few arguments" TERMINAL_STRING_NEW_LINE);
10004bc0:	4812      	ldr	r0, [pc, #72]	; (10004c0c <TerminalHandler+0x12c>)
10004bc2:	e7a1      	b.n	10004b08 <TerminalHandler+0x28>
          TerminalTxStr(TERMINAL_STRING_ERROR "Too many arguments" TERMINAL_STRING_NEW_LINE);
10004bc4:	4812      	ldr	r0, [pc, #72]	; (10004c10 <TerminalHandler+0x130>)
10004bc6:	e79f      	b.n	10004b08 <TerminalHandler+0x28>
          TerminalTxStr(TERMINAL_STRING_ERROR "Unknown error" TERMINAL_STRING_NEW_LINE);
10004bc8:	4812      	ldr	r0, [pc, #72]	; (10004c14 <TerminalHandler+0x134>)
10004bca:	e79d      	b.n	10004b08 <TerminalHandler+0x28>
      uint8_t r = pCommand->handler(argc, argv);
10004bcc:	68eb      	ldr	r3, [r5, #12]
10004bce:	a901      	add	r1, sp, #4
10004bd0:	4620      	mov	r0, r4
10004bd2:	4798      	blx	r3
      switch (r)
10004bd4:	2804      	cmp	r0, #4
10004bd6:	d8f7      	bhi.n	10004bc8 <TerminalHandler+0xe8>
10004bd8:	a301      	add	r3, pc, #4	; (adr r3, 10004be0 <TerminalHandler+0x100>)
10004bda:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
10004bde:	bf00      	nop
10004be0:	10004b0d 	.word	0x10004b0d
10004be4:	10004bbd 	.word	0x10004bbd
10004be8:	10004bc1 	.word	0x10004bc1
10004bec:	10004bc5 	.word	0x10004bc5
10004bf0:	10004b0d 	.word	0x10004b0d
10004bf4:	20000ac8 	.word	0x20000ac8
10004bf8:	1001076f 	.word	0x1001076f
10004bfc:	100107f6 	.word	0x100107f6
10004c00:	100107f9 	.word	0x100107f9
10004c04:	10010817 	.word	0x10010817
10004c08:	1001078b 	.word	0x1001078b
10004c0c:	100107a8 	.word	0x100107a8
10004c10:	100107c3 	.word	0x100107c3
10004c14:	100107df 	.word	0x100107df

10004c18 <TerminalTxChar>:
{
10004c18:	b507      	push	{r0, r1, r2, lr}
  TerminalTx((const uint8_t *)&c, 1);
10004c1a:	2101      	movs	r1, #1
{
10004c1c:	f88d 0007 	strb.w	r0, [sp, #7]
  TerminalTx((const uint8_t *)&c, 1);
10004c20:	f10d 0007 	add.w	r0, sp, #7
10004c24:	f7ff ff00 	bl	10004a28 <TerminalTx>
}
10004c28:	b003      	add	sp, #12
10004c2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

10004c30 <TerminalRx>:
{
10004c30:	b510      	push	{r4, lr}
  if (!terminalCb.isExecuting)
10004c32:	491d      	ldr	r1, [pc, #116]	; (10004ca8 <TerminalRx+0x78>)
10004c34:	f891 306d 	ldrb.w	r3, [r1, #109]	; 0x6d
10004c38:	460c      	mov	r4, r1
10004c3a:	b98b      	cbnz	r3, 10004c60 <TerminalRx+0x30>
    if ((dataByte == '\n') || (dataByte == '\r'))
10004c3c:	280a      	cmp	r0, #10
10004c3e:	d001      	beq.n	10004c44 <TerminalRx+0x14>
10004c40:	280d      	cmp	r0, #13
10004c42:	d10e      	bne.n	10004c62 <TerminalRx+0x32>
      TerminalTxStr(TERMINAL_STRING_NEW_LINE);
10004c44:	4819      	ldr	r0, [pc, #100]	; (10004cac <TerminalRx+0x7c>)
10004c46:	f7ff fef7 	bl	10004a38 <TerminalTxStr>
      terminalCb.buf[terminalCb.bufOffset] = '\0';
10004c4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      WsfSetEvent(terminalCb.handlerId, TERMINAL_EVENT_COMMAND_RX);
10004c4c:	7820      	ldrb	r0, [r4, #0]
      terminalCb.buf[terminalCb.bufOffset] = '\0';
10004c4e:	4423      	add	r3, r4
10004c50:	2200      	movs	r2, #0
      WsfSetEvent(terminalCb.handlerId, TERMINAL_EVENT_COMMAND_RX);
10004c52:	2101      	movs	r1, #1
      terminalCb.buf[terminalCb.bufOffset] = '\0';
10004c54:	721a      	strb	r2, [r3, #8]
      WsfSetEvent(terminalCb.handlerId, TERMINAL_EVENT_COMMAND_RX);
10004c56:	f000 fb2b 	bl	100052b0 <WsfSetEvent>
      terminalCb.isExecuting = TRUE;
10004c5a:	2301      	movs	r3, #1
10004c5c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
}
10004c60:	bd10      	pop	{r4, pc}
    else if ((dataByte == 0x7F) || (dataByte == '\b'))
10004c62:	287f      	cmp	r0, #127	; 0x7f
10004c64:	6f0b      	ldr	r3, [r1, #112]	; 0x70
10004c66:	d001      	beq.n	10004c6c <TerminalRx+0x3c>
10004c68:	2808      	cmp	r0, #8
10004c6a:	d10c      	bne.n	10004c86 <TerminalRx+0x56>
      if (terminalCb.bufOffset > 0)
10004c6c:	2b00      	cmp	r3, #0
10004c6e:	d0f7      	beq.n	10004c60 <TerminalRx+0x30>
        terminalCb.bufOffset--;
10004c70:	3b01      	subs	r3, #1
10004c72:	6723      	str	r3, [r4, #112]	; 0x70
        if (terminalCb.doEcho)
10004c74:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
10004c78:	2b00      	cmp	r3, #0
10004c7a:	d0f1      	beq.n	10004c60 <TerminalRx+0x30>
}
10004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          TerminalTxStr("\b \b");
10004c80:	480b      	ldr	r0, [pc, #44]	; (10004cb0 <TerminalRx+0x80>)
10004c82:	f7ff bed9 	b.w	10004a38 <TerminalTxStr>
    else if (terminalCb.bufOffset < TERMINAL_MAX_COMMAND_LEN)
10004c86:	2b63      	cmp	r3, #99	; 0x63
10004c88:	d8ea      	bhi.n	10004c60 <TerminalRx+0x30>
      if (TERMINAL_IS_PRINT(dataByte))
10004c8a:	281f      	cmp	r0, #31
10004c8c:	d9e8      	bls.n	10004c60 <TerminalRx+0x30>
        terminalCb.buf[terminalCb.bufOffset] = dataByte;
10004c8e:	18cc      	adds	r4, r1, r3
        terminalCb.bufOffset++;
10004c90:	3301      	adds	r3, #1
10004c92:	670b      	str	r3, [r1, #112]	; 0x70
        if (terminalCb.doEcho)
10004c94:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
        terminalCb.buf[terminalCb.bufOffset] = dataByte;
10004c98:	7220      	strb	r0, [r4, #8]
        if (terminalCb.doEcho)
10004c9a:	2b00      	cmp	r3, #0
10004c9c:	d0e0      	beq.n	10004c60 <TerminalRx+0x30>
}
10004c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          TerminalTxChar(dataByte);
10004ca2:	f7ff bfb9 	b.w	10004c18 <TerminalTxChar>
10004ca6:	bf00      	nop
10004ca8:	20000ac0 	.word	0x20000ac0
10004cac:	10010818 	.word	0x10010818
10004cb0:	1001081b 	.word	0x1001081b

10004cb4 <TerminalTxPrint>:
{
10004cb4:	b40f      	push	{r0, r1, r2, r3}
10004cb6:	b500      	push	{lr}
10004cb8:	b0c3      	sub	sp, #268	; 0x10c
10004cba:	ab44      	add	r3, sp, #272	; 0x110
  len = PrintVsn(buf, TERMINAL_PRINTF_MAX_LEN, pStr, args);
10004cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
{
10004cc0:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, pStr);
10004cc4:	9301      	str	r3, [sp, #4]
  len = PrintVsn(buf, TERMINAL_PRINTF_MAX_LEN, pStr, args);
10004cc6:	a802      	add	r0, sp, #8
10004cc8:	f7ff fdc2 	bl	10004850 <PrintVsn>
  TerminalTx((uint8_t *)buf, (uint16_t)len);
10004ccc:	b281      	uxth	r1, r0
10004cce:	a802      	add	r0, sp, #8
10004cd0:	f7ff feaa 	bl	10004a28 <TerminalTx>
}
10004cd4:	b043      	add	sp, #268	; 0x10c
10004cd6:	f85d eb04 	ldr.w	lr, [sp], #4
10004cda:	b004      	add	sp, #16
10004cdc:	4770      	bx	lr
	...

10004ce0 <WsfAssert>:
#if WSF_TOKEN_ENABLED == TRUE
void WsfAssert(uint16_t modId, uint16_t line)
#else
void WsfAssert(const char *pFile, uint16_t line)
#endif
{
10004ce0:	b508      	push	{r3, lr}
10004ce2:	460a      	mov	r2, r1
  (void)line;

#if WSF_TOKEN_ENABLED == TRUE
  WSF_TRACE_ERR2("Assertion detected on %s:%u", modId, line);
#else
  WSF_TRACE_ERR2("Assertion detected on %s:%u", pFile, line);
10004ce4:	4601      	mov	r1, r0
10004ce6:	4803      	ldr	r0, [pc, #12]	; (10004cf4 <WsfAssert+0x14>)
10004ce8:	f000 fbd6 	bl	10005498 <WsfTrace>
#endif

  PalSysAssertTrap();
}
10004cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  PalSysAssertTrap();
10004cf0:	f000 bde8 	b.w	100058c4 <PalSysAssertTrap>
10004cf4:	10010837 	.word	0x10010837

10004cf8 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint32_t WsfBufInit(uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
10004cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10004cfc:	4605      	mov	r5, r0
10004cfe:	460e      	mov	r6, r1
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) WsfHeapGetFreeStartAddress();
10004d00:	f000 fa11 	bl	10005126 <WsfHeapGetFreeStartAddress>
10004d04:	4f36      	ldr	r7, [pc, #216]	; (10004de0 <WsfBufInit+0xe8>)
  pPool = (wsfBufPool_t *) wsfBufMem;

  /* Buffer storage starts after the pool structs. */
  pStart = (wsfBufMem_t *) (pPool + numPools);

  wsfBufNumPools = numPools;
10004d06:	4b37      	ldr	r3, [pc, #220]	; (10004de4 <WsfBufInit+0xec>)
  wsfBufMem = (wsfBufMem_t *) WsfHeapGetFreeStartAddress();
10004d08:	6038      	str	r0, [r7, #0]
  pStart = (wsfBufMem_t *) (pPool + numPools);
10004d0a:	eb00 1405 	add.w	r4, r0, r5, lsl #4
  wsfBufNumPools = numPools;
10004d0e:	701d      	strb	r5, [r3, #0]
10004d10:	3604      	adds	r6, #4
10004d12:	f100 0b10 	add.w	fp, r0, #16
    pDesc++;

    pPool->pStart = pStart;
    pPool->pFree = pStart;
#if WSF_BUF_STATS == TRUE
    pPool->numAlloc = 0;
10004d16:	f04f 0900 	mov.w	r9, #0
    if (pStart > &wsfBufMem[WsfHeapCountAvailable() / sizeof(wsfBufMem_t)]) {
10004d1a:	f8d7 8000 	ldr.w	r8, [r7]
10004d1e:	f000 fa05 	bl	1000512c <WsfHeapCountAvailable>
10004d22:	f020 0007 	bic.w	r0, r0, #7
10004d26:	4480      	add	r8, r0
10004d28:	4544      	cmp	r4, r8
10004d2a:	d907      	bls.n	10004d3c <WsfBufInit+0x44>
      WSF_ASSERT(FALSE);
10004d2c:	21ad      	movs	r1, #173	; 0xad
      pStart += len;
    }

    /* Verify we didn't overrun memory; if we did, abort. */
    if (pStart > &wsfBufMem[WsfHeapCountAvailable() / sizeof(wsfBufMem_t)]) {
      WSF_ASSERT(FALSE);
10004d2e:	482e      	ldr	r0, [pc, #184]	; (10004de8 <WsfBufInit+0xf0>)
10004d30:	f7ff ffd6 	bl	10004ce0 <WsfAssert>
      return 0;
10004d34:	2000      	movs	r0, #0

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
}
10004d36:	b003      	add	sp, #12
10004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (numPools-- == 0) {
10004d3c:	2d00      	cmp	r5, #0
10004d3e:	d04a      	beq.n	10004dd6 <WsfBufInit+0xde>
    if (pDesc->len < sizeof(wsfBufMem_t)) {
10004d40:	f836 2c04 	ldrh.w	r2, [r6, #-4]
10004d44:	2a07      	cmp	r2, #7
10004d46:	d826      	bhi.n	10004d96 <WsfBufInit+0x9e>
      pPool->desc.len = sizeof(wsfBufMem_t);
10004d48:	f04f 0308 	mov.w	r3, #8
10004d4c:	f82b 3c10 	strh.w	r3, [fp, #-16]
    len = pPool->desc.len / sizeof(wsfBufMem_t);
10004d50:	f83b 8c10 	ldrh.w	r8, [fp, #-16]
    pPool->desc.num = pDesc->num;
10004d54:	f816 2c02 	ldrb.w	r2, [r6, #-2]
10004d58:	f80b 2c0e 	strb.w	r2, [fp, #-14]
    pPool->pFree = pStart;
10004d5c:	e94b 4403 	strd	r4, r4, [fp, #-12]
      pStart->pNext = pStart + len;
10004d60:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    pPool->numAlloc = 0;
10004d64:	f80b 9c04 	strb.w	r9, [fp, #-4]
    pPool->maxAlloc = 0;
10004d68:	f80b 9c03 	strb.w	r9, [fp, #-3]
    pPool->maxReqLen = 0;
10004d6c:	f82b 9c02 	strh.w	r9, [fp, #-2]
      pStart->pNext = pStart + len;
10004d70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    for (i = pPool->desc.num; i > 1; i--) {
10004d74:	2a01      	cmp	r2, #1
10004d76:	f8d7 a000 	ldr.w	sl, [r7]
10004d7a:	d814      	bhi.n	10004da6 <WsfBufInit+0xae>
    if (pStart > &wsfBufMem[WsfHeapCountAvailable() / sizeof(wsfBufMem_t)]) {
10004d7c:	f000 f9d6 	bl	1000512c <WsfHeapCountAvailable>
10004d80:	f020 0007 	bic.w	r0, r0, #7
10004d84:	4482      	add	sl, r0
10004d86:	4554      	cmp	r4, sl
10004d88:	f106 0604 	add.w	r6, r6, #4
10004d8c:	f10b 0b10 	add.w	fp, fp, #16
10004d90:	d91b      	bls.n	10004dca <WsfBufInit+0xd2>
      WSF_ASSERT(FALSE);
10004d92:	21dc      	movs	r1, #220	; 0xdc
10004d94:	e7cb      	b.n	10004d2e <WsfBufInit+0x36>
    } else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0) {
10004d96:	0753      	lsls	r3, r2, #29
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
10004d98:	bf1c      	itt	ne
10004d9a:	f022 0207 	bicne.w	r2, r2, #7
10004d9e:	3208      	addne	r2, #8
      pPool->desc.len = pDesc->len;
10004da0:	f82b 2c10 	strh.w	r2, [fp, #-16]
10004da4:	e7d4      	b.n	10004d50 <WsfBufInit+0x58>
10004da6:	9201      	str	r2, [sp, #4]
      if (pStart > &wsfBufMem[WsfHeapCountAvailable() / sizeof(wsfBufMem_t)]) {
10004da8:	f000 f9c0 	bl	1000512c <WsfHeapCountAvailable>
10004dac:	f020 0007 	bic.w	r0, r0, #7
10004db0:	4482      	add	sl, r0
10004db2:	4554      	cmp	r4, sl
10004db4:	9a01      	ldr	r2, [sp, #4]
10004db6:	d901      	bls.n	10004dbc <WsfBufInit+0xc4>
        WSF_ASSERT(FALSE);
10004db8:	21d2      	movs	r1, #210	; 0xd2
10004dba:	e7b8      	b.n	10004d2e <WsfBufInit+0x36>
      pStart->pNext = pStart + len;
10004dbc:	eb04 0108 	add.w	r1, r4, r8
    for (i = pPool->desc.num; i > 1; i--) {
10004dc0:	3a01      	subs	r2, #1
      pStart->pNext = pStart + len;
10004dc2:	6021      	str	r1, [r4, #0]
    for (i = pPool->desc.num; i > 1; i--) {
10004dc4:	b2d2      	uxtb	r2, r2
      pStart += len;
10004dc6:	460c      	mov	r4, r1
10004dc8:	e7d4      	b.n	10004d74 <WsfBufInit+0x7c>
    if (numPools-- == 0) {
10004dca:	3d01      	subs	r5, #1
    pStart->pNext = NULL;
10004dcc:	f8c4 9000 	str.w	r9, [r4]
    if (numPools-- == 0) {
10004dd0:	b2ed      	uxtb	r5, r5
    pStart += len;
10004dd2:	4444      	add	r4, r8
    if (pStart > &wsfBufMem[WsfHeapCountAvailable() / sizeof(wsfBufMem_t)]) {
10004dd4:	e7a1      	b.n	10004d1a <WsfBufInit+0x22>
  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
10004dd6:	6838      	ldr	r0, [r7, #0]
10004dd8:	4b04      	ldr	r3, [pc, #16]	; (10004dec <WsfBufInit+0xf4>)
10004dda:	1a20      	subs	r0, r4, r0
10004ddc:	6018      	str	r0, [r3, #0]
  return wsfBufMemLen;
10004dde:	e7aa      	b.n	10004d36 <WsfBufInit+0x3e>
10004de0:	20000b38 	.word	0x20000b38
10004de4:	20011260 	.word	0x20011260
10004de8:	10010853 	.word	0x10010853
10004dec:	20011264 	.word	0x20011264

10004df0 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
10004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  wsfBufMem_t   *pBuf;
  uint8_t       i;

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);
10004df2:	4606      	mov	r6, r0
10004df4:	b918      	cbnz	r0, 10004dfe <WsfBufAlloc+0xe>
10004df6:	4819      	ldr	r0, [pc, #100]	; (10004e5c <WsfBufAlloc+0x6c>)
10004df8:	21fe      	movs	r1, #254	; 0xfe
10004dfa:	f7ff ff71 	bl	10004ce0 <WsfAssert>

  pPool = (wsfBufPool_t *) wsfBufMem;
10004dfe:	4b18      	ldr	r3, [pc, #96]	; (10004e60 <WsfBufAlloc+0x70>)
10004e00:	681c      	ldr	r4, [r3, #0]

  for (i = wsfBufNumPools; i > 0; i--, pPool++) {
10004e02:	4b18      	ldr	r3, [pc, #96]	; (10004e64 <WsfBufAlloc+0x74>)
10004e04:	781f      	ldrb	r7, [r3, #0]
10004e06:	eb04 1707 	add.w	r7, r4, r7, lsl #4
10004e0a:	42bc      	cmp	r4, r7
10004e0c:	d106      	bne.n	10004e1c <WsfBufAlloc+0x2c>
#else
  WSF_TRACE_ALLOC1("WsfBufAlloc failed len:%u", len);
#endif

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
10004e0e:	4813      	ldr	r0, [pc, #76]	; (10004e5c <WsfBufAlloc+0x6c>)
10004e10:	f240 1149 	movw	r1, #329	; 0x149
10004e14:	f7ff ff64 	bl	10004ce0 <WsfAssert>
#endif

  return NULL;
10004e18:	2500      	movs	r5, #0
10004e1a:	e019      	b.n	10004e50 <WsfBufAlloc+0x60>
    if (len <= pPool->desc.len) {
10004e1c:	8823      	ldrh	r3, [r4, #0]
10004e1e:	42b3      	cmp	r3, r6
10004e20:	d31a      	bcc.n	10004e58 <WsfBufAlloc+0x68>
      WSF_CS_ENTER(cs);
10004e22:	f000 f941 	bl	100050a8 <WsfCsEnter>
      if (pPool->pFree != NULL) {
10004e26:	68a5      	ldr	r5, [r4, #8]
10004e28:	b1a5      	cbz	r5, 10004e54 <WsfBufAlloc+0x64>
        pPool->pFree = pBuf->pNext;
10004e2a:	682b      	ldr	r3, [r5, #0]
10004e2c:	60a3      	str	r3, [r4, #8]
        pBuf->free = 0;
10004e2e:	2300      	movs	r3, #0
10004e30:	606b      	str	r3, [r5, #4]
        if (++pPool->numAlloc > pPool->maxAlloc) {
10004e32:	7b23      	ldrb	r3, [r4, #12]
10004e34:	7b62      	ldrb	r2, [r4, #13]
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
10004e36:	89e0      	ldrh	r0, [r4, #14]
        if (++pPool->numAlloc > pPool->maxAlloc) {
10004e38:	3301      	adds	r3, #1
10004e3a:	b2db      	uxtb	r3, r3
10004e3c:	429a      	cmp	r2, r3
          pPool->maxAlloc = pPool->numAlloc;
10004e3e:	bf38      	it	cc
10004e40:	7363      	strbcc	r3, [r4, #13]
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
10004e42:	4286      	cmp	r6, r0
10004e44:	bf38      	it	cc
10004e46:	4606      	movcc	r6, r0
        if (++pPool->numAlloc > pPool->maxAlloc) {
10004e48:	7323      	strb	r3, [r4, #12]
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
10004e4a:	81e6      	strh	r6, [r4, #14]
        WSF_CS_EXIT(cs);
10004e4c:	f000 f944 	bl	100050d8 <WsfCsExit>
}
10004e50:	4628      	mov	r0, r5
10004e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      WSF_CS_EXIT(cs);
10004e54:	f000 f940 	bl	100050d8 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++) {
10004e58:	3410      	adds	r4, #16
10004e5a:	e7d6      	b.n	10004e0a <WsfBufAlloc+0x1a>
10004e5c:	10010853 	.word	0x10010853
10004e60:	20000b38 	.word	0x20000b38
10004e64:	20011260 	.word	0x20011260

10004e68 <WsfBufFree>:
 *
 *  \param  pBuf    Buffer to free.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
10004e68:	b570      	push	{r4, r5, r6, lr}

  WSF_CS_INIT(cs);

  /* Verify pointer is within range. */
#if WSF_BUF_FREE_CHECK_ASSERT == TRUE
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
10004e6a:	4c21      	ldr	r4, [pc, #132]	; (10004ef0 <WsfBufFree+0x88>)
10004e6c:	6823      	ldr	r3, [r4, #0]
10004e6e:	685b      	ldr	r3, [r3, #4]
10004e70:	4283      	cmp	r3, r0
{
10004e72:	4605      	mov	r5, r0
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
10004e74:	d904      	bls.n	10004e80 <WsfBufFree+0x18>
10004e76:	481f      	ldr	r0, [pc, #124]	; (10004ef4 <WsfBufFree+0x8c>)
10004e78:	f240 115f 	movw	r1, #351	; 0x15f
10004e7c:	f7ff ff30 	bl	10004ce0 <WsfAssert>
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
10004e80:	4a1d      	ldr	r2, [pc, #116]	; (10004ef8 <WsfBufFree+0x90>)
10004e82:	6823      	ldr	r3, [r4, #0]
10004e84:	6812      	ldr	r2, [r2, #0]
10004e86:	4413      	add	r3, r2
10004e88:	429d      	cmp	r5, r3
10004e8a:	d304      	bcc.n	10004e96 <WsfBufFree+0x2e>
10004e8c:	4819      	ldr	r0, [pc, #100]	; (10004ef4 <WsfBufFree+0x8c>)
10004e8e:	f44f 71b0 	mov.w	r1, #352	; 0x160
10004e92:	f7ff ff25 	bl	10004ce0 <WsfAssert>
#endif

  /* Iterate over pools starting from last pool. */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
10004e96:	4a19      	ldr	r2, [pc, #100]	; (10004efc <WsfBufFree+0x94>)
10004e98:	6823      	ldr	r3, [r4, #0]
10004e9a:	7814      	ldrb	r4, [r2, #0]
10004e9c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
10004ea0:	3c01      	subs	r4, #1
10004ea2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
  while (pPool >= (wsfBufPool_t *) wsfBufMem) {
10004ea6:	42a3      	cmp	r3, r4
10004ea8:	d906      	bls.n	10004eb8 <WsfBufFree+0x50>

  /* Should never get here. */
  WSF_ASSERT(FALSE);

  return;
}
10004eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_ASSERT(FALSE);
10004eae:	4811      	ldr	r0, [pc, #68]	; (10004ef4 <WsfBufFree+0x8c>)
10004eb0:	f44f 71c2 	mov.w	r1, #388	; 0x184
10004eb4:	f7ff bf14 	b.w	10004ce0 <WsfAssert>
    if (p >= pPool->pStart) {
10004eb8:	6862      	ldr	r2, [r4, #4]
10004eba:	42aa      	cmp	r2, r5
10004ebc:	d815      	bhi.n	10004eea <WsfBufFree+0x82>
      WSF_CS_ENTER(cs);
10004ebe:	f000 f8f3 	bl	100050a8 <WsfCsEnter>
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
10004ec2:	4e0f      	ldr	r6, [pc, #60]	; (10004f00 <WsfBufFree+0x98>)
10004ec4:	686a      	ldr	r2, [r5, #4]
10004ec6:	42b2      	cmp	r2, r6
10004ec8:	d104      	bne.n	10004ed4 <WsfBufFree+0x6c>
10004eca:	480a      	ldr	r0, [pc, #40]	; (10004ef4 <WsfBufFree+0x8c>)
10004ecc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
10004ed0:	f7ff ff06 	bl	10004ce0 <WsfAssert>
      p->free = WSF_BUF_FREE_NUM;
10004ed4:	606e      	str	r6, [r5, #4]
      pPool->numAlloc--;
10004ed6:	7b23      	ldrb	r3, [r4, #12]
10004ed8:	3b01      	subs	r3, #1
10004eda:	7323      	strb	r3, [r4, #12]
      p->pNext = pPool->pFree;
10004edc:	68a3      	ldr	r3, [r4, #8]
10004ede:	602b      	str	r3, [r5, #0]
      pPool->pFree = p;
10004ee0:	60a5      	str	r5, [r4, #8]
}
10004ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      WSF_CS_EXIT(cs);
10004ee6:	f000 b8f7 	b.w	100050d8 <WsfCsExit>
    pPool--;
10004eea:	3c10      	subs	r4, #16
10004eec:	e7db      	b.n	10004ea6 <WsfBufFree+0x3e>
10004eee:	bf00      	nop
10004ef0:	20000b38 	.word	0x20000b38
10004ef4:	10010853 	.word	0x10010853
10004ef8:	20011264 	.word	0x20011264
10004efc:	20011260 	.word	0x20011260
10004f00:	faabd00d 	.word	0xfaabd00d

10004f04 <wsfBufIoUartTxBufCount>:
/*************************************************************************************************/
static uint16_t wsfBufIoUartTxBufCount(void)
{
  uint16_t count;

  if (WsfBufIoCb.tx.in >= WsfBufIoCb.tx.out) {
10004f04:	4a04      	ldr	r2, [pc, #16]	; (10004f18 <wsfBufIoUartTxBufCount+0x14>)
10004f06:	88d0      	ldrh	r0, [r2, #6]
10004f08:	8913      	ldrh	r3, [r2, #8]
10004f0a:	4298      	cmp	r0, r3
    count = WsfBufIoCb.tx.in - WsfBufIoCb.tx.out;
  } else {
    count = WsfBufIoCb.tx.size - WsfBufIoCb.tx.out + WsfBufIoCb.tx.in;
10004f0c:	bf3c      	itt	cc
10004f0e:	8892      	ldrhcc	r2, [r2, #4]
10004f10:	1880      	addcc	r0, r0, r2
10004f12:	1ac0      	subs	r0, r0, r3
10004f14:	b280      	uxth	r0, r0
  }

  return count;
}
10004f16:	4770      	bx	lr
10004f18:	20000b3c 	.word	0x20000b3c

10004f1c <wsfBufIoUartRxHandler>:
 *  \brief  Rx handler.
 */
/*************************************************************************************************/
static void wsfBufIoUartRxHandler(void)
{
  if (WsfBufIoCb.rx.cback) {
10004f1c:	4a06      	ldr	r2, [pc, #24]	; (10004f38 <wsfBufIoUartRxHandler+0x1c>)
{
10004f1e:	b508      	push	{r3, lr}
  if (WsfBufIoCb.rx.cback) {
10004f20:	68d3      	ldr	r3, [r2, #12]
10004f22:	b10b      	cbz	r3, 10004f28 <wsfBufIoUartRxHandler+0xc>
    WsfBufIoCb.rx.cback(WsfBufIoCb.rx.buf[0]);
10004f24:	7c10      	ldrb	r0, [r2, #16]
10004f26:	4798      	blx	r3
  }
  /* Read next byte. */
  PalUartReadData(PAL_UART_ID_TERMINAL, WsfBufIoCb.rx.buf, 1);
}
10004f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  PalUartReadData(PAL_UART_ID_TERMINAL, WsfBufIoCb.rx.buf, 1);
10004f2c:	4903      	ldr	r1, [pc, #12]	; (10004f3c <wsfBufIoUartRxHandler+0x20>)
10004f2e:	2201      	movs	r2, #1
10004f30:	2002      	movs	r0, #2
10004f32:	f000 bdd9 	b.w	10005ae8 <PalUartReadData>
10004f36:	bf00      	nop
10004f38:	20000b3c 	.word	0x20000b3c
10004f3c:	20000b4c 	.word	0x20000b4c

10004f40 <wsfBufIoUartTxStart>:
{
10004f40:	b538      	push	{r3, r4, r5, lr}
  if (WsfBufIoCb.tx.out + len > WsfBufIoCb.tx.size) {
10004f42:	4c0d      	ldr	r4, [pc, #52]	; (10004f78 <wsfBufIoUartTxStart+0x38>)
10004f44:	8923      	ldrh	r3, [r4, #8]
10004f46:	6821      	ldr	r1, [r4, #0]
{
10004f48:	4605      	mov	r5, r0
  if (WsfBufIoCb.tx.out + len > WsfBufIoCb.tx.size) {
10004f4a:	88a0      	ldrh	r0, [r4, #4]
10004f4c:	195a      	adds	r2, r3, r5
10004f4e:	4282      	cmp	r2, r0
    len = WsfBufIoCb.tx.size - WsfBufIoCb.tx.out;
10004f50:	bfc4      	itt	gt
10004f52:	1ac0      	subgt	r0, r0, r3
10004f54:	b285      	uxthgt	r5, r0
  if (len <= 0xFF) {
10004f56:	2dff      	cmp	r5, #255	; 0xff
10004f58:	4419      	add	r1, r3
10004f5a:	d805      	bhi.n	10004f68 <wsfBufIoUartTxStart+0x28>
    PalUartWriteData(PAL_UART_ID_TERMINAL, WsfBufIoCb.tx.pBuf + WsfBufIoCb.tx.out, (uint16_t)len);
10004f5c:	462a      	mov	r2, r5
10004f5e:	2002      	movs	r0, #2
10004f60:	f000 fe34 	bl	10005bcc <PalUartWriteData>
    WsfBufIoCb.tx.crt = len;
10004f64:	8165      	strh	r5, [r4, #10]
}
10004f66:	bd38      	pop	{r3, r4, r5, pc}
    PalUartWriteData(PAL_UART_ID_TERMINAL, WsfBufIoCb.tx.pBuf + WsfBufIoCb.tx.out, 0xFF);
10004f68:	22ff      	movs	r2, #255	; 0xff
10004f6a:	2002      	movs	r0, #2
10004f6c:	f000 fe2e 	bl	10005bcc <PalUartWriteData>
    WsfBufIoCb.tx.crt = 0xFF;
10004f70:	23ff      	movs	r3, #255	; 0xff
10004f72:	8163      	strh	r3, [r4, #10]
}
10004f74:	e7f7      	b.n	10004f66 <wsfBufIoUartTxStart+0x26>
10004f76:	bf00      	nop
10004f78:	20000b3c 	.word	0x20000b3c

10004f7c <wsfBufIoUartTxHandler>:
/*!
 *  \brief  Tx handler.
 */
/*************************************************************************************************/
static void wsfBufIoUartTxHandler(void)
{
10004f7c:	b508      	push	{r3, lr}
  uint16_t count;

  WSF_CS_INIT(cs);
  WSF_CS_ENTER(cs);
10004f7e:	f000 f893 	bl	100050a8 <WsfCsEnter>

  if (WsfBufIoCb.tx.out + WsfBufIoCb.tx.crt >= WsfBufIoCb.tx.size) {
10004f82:	490a      	ldr	r1, [pc, #40]	; (10004fac <wsfBufIoUartTxHandler+0x30>)
10004f84:	890a      	ldrh	r2, [r1, #8]
10004f86:	894b      	ldrh	r3, [r1, #10]
10004f88:	8888      	ldrh	r0, [r1, #4]
10004f8a:	4413      	add	r3, r2
10004f8c:	4283      	cmp	r3, r0
    WsfBufIoCb.tx.out = WsfBufIoCb.tx.crt - (WsfBufIoCb.tx.size - WsfBufIoCb.tx.out);
10004f8e:	bfa8      	it	ge
10004f90:	1a1b      	subge	r3, r3, r0
  } else {
    WsfBufIoCb.tx.out += WsfBufIoCb.tx.crt;
10004f92:	b29b      	uxth	r3, r3
10004f94:	810b      	strh	r3, [r1, #8]
  }

  WsfBufIoCb.tx.crt = 0;
10004f96:	2300      	movs	r3, #0
10004f98:	814b      	strh	r3, [r1, #10]

  count = wsfBufIoUartTxBufCount();
10004f9a:	f7ff ffb3 	bl	10004f04 <wsfBufIoUartTxBufCount>

  if (count != 0) {
10004f9e:	b108      	cbz	r0, 10004fa4 <wsfBufIoUartTxHandler+0x28>
    wsfBufIoUartTxStart(count);
10004fa0:	f7ff ffce 	bl	10004f40 <wsfBufIoUartTxStart>
  }

  WSF_CS_EXIT(cs);
}
10004fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WSF_CS_EXIT(cs);
10004fa8:	f000 b896 	b.w	100050d8 <WsfCsExit>
10004fac:	20000b3c 	.word	0x20000b3c

10004fb0 <WsfBufIoUartInit>:
 *
 *  \return memory used.
 */
/*************************************************************************************************/
uint32_t WsfBufIoUartInit(void *pBuf, uint32_t size)
{
10004fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Skip initialization if it is already done. */
  if (WsfBufIoCb.initialized) {
10004fb2:	4c0f      	ldr	r4, [pc, #60]	; (10004ff0 <WsfBufIoUartInit+0x40>)
10004fb4:	7d23      	ldrb	r3, [r4, #20]
10004fb6:	b9cb      	cbnz	r3, 10004fec <WsfBufIoUartInit+0x3c>
  WsfBufIoCb.tx.pBuf = (uint8_t *)pBuf;
  WsfBufIoCb.tx.size = size;

  PalUartConfig_t cfg;
  cfg.baud   = 115200;
  cfg.hwFlow = FALSE;
10004fb8:	f88d 300c 	strb.w	r3, [sp, #12]
  cfg.rdCback = wsfBufIoUartRxHandler;
10004fbc:	4b0d      	ldr	r3, [pc, #52]	; (10004ff4 <WsfBufIoUartInit+0x44>)
  WsfBufIoCb.tx.pBuf = (uint8_t *)pBuf;
10004fbe:	6020      	str	r0, [r4, #0]
  cfg.baud   = 115200;
10004fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  WsfBufIoCb.tx.size = size;
10004fc4:	80a1      	strh	r1, [r4, #4]
  cfg.rdCback = wsfBufIoUartRxHandler;
10004fc6:	9300      	str	r3, [sp, #0]
  cfg.wrCback = wsfBufIoUartTxHandler;

  PalUartInit(PAL_UART_ID_TERMINAL, &cfg);
10004fc8:	4669      	mov	r1, sp
  cfg.wrCback = wsfBufIoUartTxHandler;
10004fca:	4b0b      	ldr	r3, [pc, #44]	; (10004ff8 <WsfBufIoUartInit+0x48>)
10004fcc:	9301      	str	r3, [sp, #4]
  PalUartInit(PAL_UART_ID_TERMINAL, &cfg);
10004fce:	2002      	movs	r0, #2
  cfg.baud   = 115200;
10004fd0:	9202      	str	r2, [sp, #8]
  PalUartInit(PAL_UART_ID_TERMINAL, &cfg);
10004fd2:	f000 fcfd 	bl	100059d0 <PalUartInit>

  /* Start UART RX. */
  PalUartReadData(PAL_UART_ID_TERMINAL, WsfBufIoCb.rx.buf, 1);
10004fd6:	2002      	movs	r0, #2
10004fd8:	2201      	movs	r2, #1
10004fda:	f104 0110 	add.w	r1, r4, #16
10004fde:	f000 fd83 	bl	10005ae8 <PalUartReadData>

  WsfBufIoCb.initialized = TRUE;
10004fe2:	2301      	movs	r3, #1
  return WsfBufIoCb.tx.size;
10004fe4:	88a0      	ldrh	r0, [r4, #4]
  WsfBufIoCb.initialized = TRUE;
10004fe6:	7523      	strb	r3, [r4, #20]
}
10004fe8:	b004      	add	sp, #16
10004fea:	bd10      	pop	{r4, pc}
    return 0;
10004fec:	2000      	movs	r0, #0
10004fee:	e7fb      	b.n	10004fe8 <WsfBufIoUartInit+0x38>
10004ff0:	20000b3c 	.word	0x20000b3c
10004ff4:	10004f1d 	.word	0x10004f1d
10004ff8:	10004f7d 	.word	0x10004f7d

10004ffc <WsfBufIoUartRegister>:
 *  \param  rxCback  Callback function for UART RX.
 */
/*************************************************************************************************/
void WsfBufIoUartRegister(WsfBufIoUartRxCback_t rxCback)
{
  if (rxCback != NULL) {
10004ffc:	b108      	cbz	r0, 10005002 <WsfBufIoUartRegister+0x6>
    WsfBufIoCb.rx.cback = rxCback;
10004ffe:	4b01      	ldr	r3, [pc, #4]	; (10005004 <WsfBufIoUartRegister+0x8>)
10005000:	60d8      	str	r0, [r3, #12]
  }
}
10005002:	4770      	bx	lr
10005004:	20000b3c 	.word	0x20000b3c

10005008 <WsfBufIoWrite>:
 *
 *  \return if write successfully.
 */
/*************************************************************************************************/
bool_t WsfBufIoWrite(const uint8_t *pBuf, uint32_t len)
{
10005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);

  /* Check if there is enough space in TX buffer */
  if ((WsfBufIoCb.tx.size - wsfBufIoUartTxBufCount() >= (uint16_t)len) &&
1000500c:	4c25      	ldr	r4, [pc, #148]	; (100050a4 <WsfBufIoWrite+0x9c>)
{
1000500e:	460d      	mov	r5, r1
10005010:	4681      	mov	r9, r0
  WSF_CS_ENTER(cs);
10005012:	f000 f849 	bl	100050a8 <WsfCsEnter>
  if ((WsfBufIoCb.tx.size - wsfBufIoUartTxBufCount() >= (uint16_t)len) &&
10005016:	f7ff ff75 	bl	10004f04 <wsfBufIoUartTxBufCount>
1000501a:	f8b4 a004 	ldrh.w	sl, [r4, #4]
1000501e:	b2ab      	uxth	r3, r5
10005020:	ebaa 0000 	sub.w	r0, sl, r0
10005024:	4298      	cmp	r0, r3
10005026:	db39      	blt.n	1000509c <WsfBufIoWrite+0x94>
10005028:	8963      	ldrh	r3, [r4, #10]
1000502a:	4553      	cmp	r3, sl
1000502c:	d236      	bcs.n	1000509c <WsfBufIoWrite+0x94>
      (WsfBufIoCb.tx.size > WsfBufIoCb.tx.crt)) {
    /* Compute the space available till the end of the buffer. */
    end = WsfBufIoCb.tx.size - WsfBufIoCb.tx.in;
1000502e:	88e6      	ldrh	r6, [r4, #6]
10005030:	6820      	ldr	r0, [r4, #0]
10005032:	ebaa 0806 	sub.w	r8, sl, r6

    /* Check if overrun should happen. */
    if (end < len) {
10005036:	fa1f f888 	uxth.w	r8, r8
1000503a:	45a8      	cmp	r8, r5
  if ((WsfBufIoCb.tx.size - wsfBufIoUartTxBufCount() >= (uint16_t)len) &&
1000503c:	b2af      	uxth	r7, r5
    if (end < len) {
1000503e:	4430      	add	r0, r6
10005040:	d224      	bcs.n	1000508c <WsfBufIoWrite+0x84>
      /* Copy the bytes till the end of the buffer. */
      memcpy(WsfBufIoCb.tx.pBuf + WsfBufIoCb.tx.in, pBuf, end);
10005042:	4642      	mov	r2, r8
10005044:	4649      	mov	r1, r9
      /* Copy the remaining bytes. */
      memcpy(WsfBufIoCb.tx.pBuf, pBuf + end, len - end);
      /* Increment input count */
      WsfBufIoCb.tx.in = len - end;
10005046:	eba6 060a 	sub.w	r6, r6, sl
      memcpy(WsfBufIoCb.tx.pBuf + WsfBufIoCb.tx.in, pBuf, end);
1000504a:	f004 fadf 	bl	1000960c <memcpy>
      WsfBufIoCb.tx.in = len - end;
1000504e:	443e      	add	r6, r7
      memcpy(WsfBufIoCb.tx.pBuf, pBuf + end, len - end);
10005050:	6820      	ldr	r0, [r4, #0]
10005052:	eba5 0208 	sub.w	r2, r5, r8
10005056:	eb09 0108 	add.w	r1, r9, r8
1000505a:	f004 fad7 	bl	1000960c <memcpy>
      WsfBufIoCb.tx.in = len - end;
1000505e:	80e6      	strh	r6, [r4, #6]
      /* Enough space till the end of the buffer. Just copy. */
      memcpy(WsfBufIoCb.tx.pBuf + WsfBufIoCb.tx.in, pBuf, len);
      WsfBufIoCb.tx.in += len;
    }

    if (WsfBufIoCb.tx.in == WsfBufIoCb.tx.size) {
10005060:	88a3      	ldrh	r3, [r4, #4]
10005062:	88e2      	ldrh	r2, [r4, #6]
10005064:	429a      	cmp	r2, r3
      WsfBufIoCb.tx.in = 0;
10005066:	bf08      	it	eq
10005068:	2300      	moveq	r3, #0
    }

    /* Check if UART TX is idle. */
    if (PalUartGetState(PAL_UART_ID_TERMINAL) == PAL_UART_STATE_READY) {
1000506a:	f04f 0002 	mov.w	r0, #2
      WsfBufIoCb.tx.in = 0;
1000506e:	bf08      	it	eq
10005070:	80e3      	strheq	r3, [r4, #6]
    if (PalUartGetState(PAL_UART_ID_TERMINAL) == PAL_UART_STATE_READY) {
10005072:	f000 fd25 	bl	10005ac0 <PalUartGetState>
10005076:	2801      	cmp	r0, #1
10005078:	4604      	mov	r4, r0
1000507a:	d111      	bne.n	100050a0 <WsfBufIoWrite+0x98>
      /* Start TX */
      wsfBufIoUartTxStart(len);
1000507c:	4638      	mov	r0, r7
1000507e:	f7ff ff5f 	bl	10004f40 <wsfBufIoUartTxStart>
    }
  } else {
    retValue = FALSE;
  }

  WSF_CS_EXIT(cs);
10005082:	f000 f829 	bl	100050d8 <WsfCsExit>

  return retValue;
}
10005086:	4620      	mov	r0, r4
10005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memcpy(WsfBufIoCb.tx.pBuf + WsfBufIoCb.tx.in, pBuf, len);
1000508c:	462a      	mov	r2, r5
1000508e:	4649      	mov	r1, r9
10005090:	f004 fabc 	bl	1000960c <memcpy>
      WsfBufIoCb.tx.in += len;
10005094:	88e3      	ldrh	r3, [r4, #6]
10005096:	443b      	add	r3, r7
10005098:	80e3      	strh	r3, [r4, #6]
1000509a:	e7e1      	b.n	10005060 <WsfBufIoWrite+0x58>
    retValue = FALSE;
1000509c:	2400      	movs	r4, #0
1000509e:	e7f0      	b.n	10005082 <WsfBufIoWrite+0x7a>
  uint32_t retValue = TRUE;
100050a0:	2401      	movs	r4, #1
100050a2:	e7ee      	b.n	10005082 <WsfBufIoWrite+0x7a>
100050a4:	20000b3c 	.word	0x20000b3c

100050a8 <WsfCsEnter>:
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
100050a8:	f3ef 8305 	mrs	r3, IPSR

	if( ulCurrentInterrupt == 0 )
100050ac:	b983      	cbnz	r3, 100050d0 <WsfCsEnter+0x28>
{
  if (xPortIsInsideInterrupt()) {
    return;
  }

  if (__atomic_fetch_add(&wsfCsNesting, 1, __ATOMIC_ACQ_REL) == 0) {
100050ae:	f3bf 8f5b 	dmb	ish
100050b2:	4b08      	ldr	r3, [pc, #32]	; (100050d4 <WsfCsEnter+0x2c>)
100050b4:	e8d3 2f4f 	ldrexb	r2, [r3]
100050b8:	1c51      	adds	r1, r2, #1
100050ba:	e8c3 1f40 	strexb	r0, r1, [r3]
100050be:	2800      	cmp	r0, #0
100050c0:	d1f8      	bne.n	100050b4 <WsfCsEnter+0xc>
100050c2:	f3bf 8f5b 	dmb	ish
100050c6:	f012 0fff 	tst.w	r2, #255	; 0xff
100050ca:	d101      	bne.n	100050d0 <WsfCsEnter+0x28>
    portENTER_CRITICAL();
100050cc:	f003 bdea 	b.w	10008ca4 <vPortEnterCritical>
  }
}
100050d0:	4770      	bx	lr
100050d2:	bf00      	nop
100050d4:	20000b54 	.word	0x20000b54

100050d8 <WsfCsExit>:
/*!
 *  \brief  Exit a critical section.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
100050d8:	b510      	push	{r4, lr}
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
100050da:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
100050de:	b9bb      	cbnz	r3, 10005110 <WsfCsExit+0x38>
  if (xPortIsInsideInterrupt()) {
    return;
  }

  WSF_ASSERT(__atomic_load_n(&wsfCsNesting, __ATOMIC_ACQUIRE) != 0);
100050e0:	4c0c      	ldr	r4, [pc, #48]	; (10005114 <WsfCsExit+0x3c>)
100050e2:	7823      	ldrb	r3, [r4, #0]
100050e4:	f3bf 8f5b 	dmb	ish
100050e8:	b91b      	cbnz	r3, 100050f2 <WsfCsExit+0x1a>
100050ea:	480b      	ldr	r0, [pc, #44]	; (10005118 <WsfCsExit+0x40>)
100050ec:	2143      	movs	r1, #67	; 0x43
100050ee:	f7ff fdf7 	bl	10004ce0 <WsfAssert>

  __atomic_fetch_sub(&wsfCsNesting, 1, __ATOMIC_RELEASE);
100050f2:	f3bf 8f5b 	dmb	ish
100050f6:	e8d4 3f4f 	ldrexb	r3, [r4]
100050fa:	3b01      	subs	r3, #1
100050fc:	e8c4 3f42 	strexb	r2, r3, [r4]
10005100:	2a00      	cmp	r2, #0
10005102:	d1f8      	bne.n	100050f6 <WsfCsExit+0x1e>

  if (wsfCsNesting == 0) {
10005104:	7823      	ldrb	r3, [r4, #0]
10005106:	b91b      	cbnz	r3, 10005110 <WsfCsExit+0x38>
    portEXIT_CRITICAL();
  }
}
10005108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portEXIT_CRITICAL();
1000510c:	f003 bdda 	b.w	10008cc4 <vPortExitCritical>
}
10005110:	bd10      	pop	{r4, pc}
10005112:	bf00      	nop
10005114:	20000b54 	.word	0x20000b54
10005118:	1001088d 	.word	0x1001088d

1000511c <WsfHeapAlloc>:
 */
/*************************************************************************************************/
void WsfHeapAlloc(uint32_t size)
{
  /* Round up to nearest multiple of 4 for word alignment */
  size = (size + 3) & ~3;
1000511c:	3003      	adds	r0, #3

  freeStartAddr = _sbrk(size);
1000511e:	f020 0003 	bic.w	r0, r0, #3
10005122:	f000 be65 	b.w	10005df0 <_sbrk>

10005126 <WsfHeapGetFreeStartAddress>:
 *  \return     Address of the start of heap memory.
 */
/*************************************************************************************************/
void *WsfHeapGetFreeStartAddress(void)
{
  freeStartAddr = _sbrk(0);
10005126:	2000      	movs	r0, #0
10005128:	f000 be62 	b.w	10005df0 <_sbrk>

1000512c <WsfHeapCountAvailable>:
 *
 *  \return     Number of bytes of heap memory available.
 */
/*************************************************************************************************/
uint32_t WsfHeapCountAvailable(void)
{
1000512c:	b508      	push	{r3, lr}
  freeStartAddr = _sbrk(0);
1000512e:	2000      	movs	r0, #0
10005130:	f000 fe5e 	bl	10005df0 <_sbrk>
  return ((uint32_t)&__HeapLimit - (uint32_t)freeStartAddr);
}
10005134:	4b01      	ldr	r3, [pc, #4]	; (1000513c <WsfHeapCountAvailable+0x10>)
10005136:	1a18      	subs	r0, r3, r0
10005138:	bd08      	pop	{r3, pc}
1000513a:	bf00      	nop
1000513c:	2001f000 	.word	0x2001f000

10005140 <WsfMsgAlloc>:
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
10005140:	3008      	adds	r0, #8
{
10005142:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
10005144:	b280      	uxth	r0, r0
10005146:	f7ff fe53 	bl	10004df0 <WsfBufAlloc>

  /* hide header */
  if (pMsg != NULL) {
1000514a:	b100      	cbz	r0, 1000514e <WsfMsgAlloc+0xe>
    pMsg++;
1000514c:	3008      	adds	r0, #8
  }

  return pMsg;
}
1000514e:	bd08      	pop	{r3, pc}

10005150 <WsfMsgFree>:
 *  \param  pMsg  Pointer to message buffer.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
10005150:	3808      	subs	r0, #8
10005152:	f7ff be89 	b.w	10004e68 <WsfBufFree>
	...

10005158 <WsfMsgEnq>:
 *  \param  handerId  Set message handler ID to this value.
 *  \param  pElem     Pointer to message buffer.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
10005158:	b570      	push	{r4, r5, r6, lr}
1000515a:	4605      	mov	r5, r0
1000515c:	460e      	mov	r6, r1
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);
1000515e:	4614      	mov	r4, r2
10005160:	b91a      	cbnz	r2, 1000516a <WsfMsgEnq+0x12>
10005162:	4806      	ldr	r0, [pc, #24]	; (1000517c <WsfMsgEnq+0x24>)
10005164:	217d      	movs	r1, #125	; 0x7d
10005166:	f7ff fdbb 	bl	10004ce0 <WsfAssert>

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;

  /* set handler ID */
  p->handlerId = handlerId;
1000516a:	f804 6c04 	strb.w	r6, [r4, #-4]

  WsfQueueEnq(pQueue, p);
1000516e:	f1a4 0108 	sub.w	r1, r4, #8
10005172:	4628      	mov	r0, r5
}
10005174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WsfQueueEnq(pQueue, p);
10005178:	f000 b930 	b.w	100053dc <WsfQueueEnq>
1000517c:	100108c6 	.word	0x100108c6

10005180 <WsfMsgSend>:
{
10005180:	b513      	push	{r0, r1, r4, lr}
10005182:	4604      	mov	r4, r0
10005184:	9101      	str	r1, [sp, #4]
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
10005186:	f000 f8d1 	bl	1000532c <WsfTaskMsgQueue>
1000518a:	4621      	mov	r1, r4
1000518c:	9a01      	ldr	r2, [sp, #4]
1000518e:	f7ff ffe3 	bl	10005158 <WsfMsgEnq>
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
10005192:	2101      	movs	r1, #1
10005194:	4620      	mov	r0, r4
}
10005196:	b002      	add	sp, #8
10005198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
1000519c:	f000 b8ae 	b.w	100052fc <WsfTaskSetReady>

100051a0 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
100051a0:	b510      	push	{r4, lr}
100051a2:	460c      	mov	r4, r1
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL) {
100051a4:	f000 f938 	bl	10005418 <WsfQueueDeq>
100051a8:	b110      	cbz	r0, 100051b0 <WsfMsgDeq+0x10>
    *pHandlerId = pMsg->handlerId;
100051aa:	7903      	ldrb	r3, [r0, #4]
100051ac:	7023      	strb	r3, [r4, #0]

    /* hide header */
    pMsg++;
100051ae:	3008      	adds	r0, #8
  }

  return pMsg;
}
100051b0:	bd10      	pop	{r4, pc}
	...

100051b4 <prvWSFHndTask>:
100051b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100051b6:	4f18      	ldr	r7, [pc, #96]	; (10005218 <prvWSFHndTask+0x64>)
100051b8:	427f      	negs	r7, r7
100051ba:	2600      	movs	r6, #0
100051bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
100051c0:	aa01      	add	r2, sp, #4
100051c2:	4619      	mov	r1, r3
100051c4:	4630      	mov	r0, r6
100051c6:	9601      	str	r6, [sp, #4]
100051c8:	f003 fc18 	bl	100089fc <xTaskNotifyWait>
100051cc:	2800      	cmp	r0, #0
100051ce:	d0f4      	beq.n	100051ba <prvWSFHndTask+0x6>
100051d0:	9b01      	ldr	r3, [sp, #4]
100051d2:	075b      	lsls	r3, r3, #29
100051d4:	d5f1      	bpl.n	100051ba <prvWSFHndTask+0x6>
100051d6:	4c10      	ldr	r4, [pc, #64]	; (10005218 <prvWSFHndTask+0x64>)
100051d8:	2510      	movs	r5, #16
100051da:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
100051de:	b19b      	cbz	r3, 10005208 <prvWSFHndTask+0x54>
100051e0:	f857 3014 	ldr.w	r3, [r7, r4, lsl #1]
100051e4:	b183      	cbz	r3, 10005208 <prvWSFHndTask+0x54>
100051e6:	f3bf 8f5b 	dmb	ish
100051ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
100051ee:	e8d3 0f5f 	ldrexh	r0, [r3]
100051f2:	e8c3 6f52 	strexh	r2, r6, [r3]
100051f6:	2a00      	cmp	r2, #0
100051f8:	d1f9      	bne.n	100051ee <prvWSFHndTask+0x3a>
100051fa:	f3bf 8f5b 	dmb	ish
100051fe:	f857 3014 	ldr.w	r3, [r7, r4, lsl #1]
10005202:	2100      	movs	r1, #0
10005204:	b280      	uxth	r0, r0
10005206:	4798      	blx	r3
10005208:	3d01      	subs	r5, #1
1000520a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
1000520e:	f104 0402 	add.w	r4, r4, #2
10005212:	d1e2      	bne.n	100051da <prvWSFHndTask+0x26>
10005214:	e7d1      	b.n	100051ba <prvWSFHndTask+0x6>
10005216:	bf00      	nop
10005218:	20011268 	.word	0x20011268

1000521c <prvWSFMsgTask>:
1000521c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000521e:	4d22      	ldr	r5, [pc, #136]	; (100052a8 <prvWSFMsgTask+0x8c>)
10005220:	f1a5 0660 	sub.w	r6, r5, #96	; 0x60
10005224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005228:	2000      	movs	r0, #0
1000522a:	aa01      	add	r2, sp, #4
1000522c:	4619      	mov	r1, r3
1000522e:	9001      	str	r0, [sp, #4]
10005230:	f003 fbe4 	bl	100089fc <xTaskNotifyWait>
10005234:	2800      	cmp	r0, #0
10005236:	d0f5      	beq.n	10005224 <prvWSFMsgTask+0x8>
10005238:	9b01      	ldr	r3, [sp, #4]
1000523a:	07da      	lsls	r2, r3, #31
1000523c:	d507      	bpl.n	1000524e <prvWSFMsgTask+0x32>
1000523e:	4f1b      	ldr	r7, [pc, #108]	; (100052ac <prvWSFMsgTask+0x90>)
10005240:	f10d 0103 	add.w	r1, sp, #3
10005244:	4628      	mov	r0, r5
10005246:	f7ff ffab 	bl	100051a0 <WsfMsgDeq>
1000524a:	4604      	mov	r4, r0
1000524c:	b9c0      	cbnz	r0, 10005280 <prvWSFMsgTask+0x64>
1000524e:	9b01      	ldr	r3, [sp, #4]
10005250:	079b      	lsls	r3, r3, #30
10005252:	d5e7      	bpl.n	10005224 <prvWSFMsgTask+0x8>
10005254:	4f15      	ldr	r7, [pc, #84]	; (100052ac <prvWSFMsgTask+0x90>)
10005256:	2000      	movs	r0, #0
10005258:	f000 f900 	bl	1000545c <WsfTimerServiceExpired>
1000525c:	4604      	mov	r4, r0
1000525e:	2800      	cmp	r0, #0
10005260:	d0e0      	beq.n	10005224 <prvWSFMsgTask+0x8>
10005262:	7b23      	ldrb	r3, [r4, #12]
10005264:	2b0f      	cmp	r3, #15
10005266:	d904      	bls.n	10005272 <prvWSFMsgTask+0x56>
10005268:	f240 110d 	movw	r1, #269	; 0x10d
1000526c:	4638      	mov	r0, r7
1000526e:	f7ff fd37 	bl	10004ce0 <WsfAssert>
10005272:	7b23      	ldrb	r3, [r4, #12]
10005274:	1d21      	adds	r1, r4, #4
10005276:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
1000527a:	2000      	movs	r0, #0
1000527c:	4798      	blx	r3
1000527e:	e7ea      	b.n	10005256 <prvWSFMsgTask+0x3a>
10005280:	f89d 3003 	ldrb.w	r3, [sp, #3]
10005284:	2b0f      	cmp	r3, #15
10005286:	d904      	bls.n	10005292 <prvWSFMsgTask+0x76>
10005288:	f44f 7182 	mov.w	r1, #260	; 0x104
1000528c:	4638      	mov	r0, r7
1000528e:	f7ff fd27 	bl	10004ce0 <WsfAssert>
10005292:	f89d 3003 	ldrb.w	r3, [sp, #3]
10005296:	4621      	mov	r1, r4
10005298:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
1000529c:	2000      	movs	r0, #0
1000529e:	4798      	blx	r3
100052a0:	4620      	mov	r0, r4
100052a2:	f7ff ff55 	bl	10005150 <WsfMsgFree>
100052a6:	e7cb      	b.n	10005240 <prvWSFMsgTask+0x24>
100052a8:	200112c8 	.word	0x200112c8
100052ac:	10010900 	.word	0x10010900

100052b0 <WsfSetEvent>:
100052b0:	b513      	push	{r0, r1, r4, lr}
100052b2:	4c11      	ldr	r4, [pc, #68]	; (100052f8 <WsfSetEvent+0x48>)
100052b4:	f3bf 8f5b 	dmb	ish
100052b8:	f000 000f 	and.w	r0, r0, #15
100052bc:	3020      	adds	r0, #32
100052be:	eb04 0040 	add.w	r0, r4, r0, lsl #1
100052c2:	e8d0 3f5f 	ldrexh	r3, [r0]
100052c6:	430b      	orrs	r3, r1
100052c8:	e8c0 3f52 	strexh	r2, r3, [r0]
100052cc:	2a00      	cmp	r2, #0
100052ce:	d1f8      	bne.n	100052c2 <WsfSetEvent+0x12>
100052d0:	f3ef 8305 	mrs	r3, IPSR
100052d4:	b93b      	cbnz	r3, 100052e6 <WsfSetEvent+0x36>
100052d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100052d8:	2201      	movs	r2, #1
100052da:	2104      	movs	r1, #4
100052dc:	b002      	add	sp, #8
100052de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100052e2:	f003 bbd1 	b.w	10008a88 <xTaskGenericNotify>
100052e6:	2300      	movs	r3, #0
100052e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100052ea:	9300      	str	r3, [sp, #0]
100052ec:	2201      	movs	r2, #1
100052ee:	2104      	movs	r1, #4
100052f0:	f003 fc1e 	bl	10008b30 <xTaskGenericNotifyFromISR>
100052f4:	b002      	add	sp, #8
100052f6:	bd10      	pop	{r4, pc}
100052f8:	20011268 	.word	0x20011268

100052fc <WsfTaskSetReady>:
100052fc:	b507      	push	{r0, r1, r2, lr}
100052fe:	f3ef 8305 	mrs	r3, IPSR
10005302:	4809      	ldr	r0, [pc, #36]	; (10005328 <WsfTaskSetReady+0x2c>)
10005304:	b933      	cbnz	r3, 10005314 <WsfTaskSetReady+0x18>
10005306:	6e80      	ldr	r0, [r0, #104]	; 0x68
10005308:	2201      	movs	r2, #1
1000530a:	b003      	add	sp, #12
1000530c:	f85d eb04 	ldr.w	lr, [sp], #4
10005310:	f003 bbba 	b.w	10008a88 <xTaskGenericNotify>
10005314:	2300      	movs	r3, #0
10005316:	9300      	str	r3, [sp, #0]
10005318:	2201      	movs	r2, #1
1000531a:	6e80      	ldr	r0, [r0, #104]	; 0x68
1000531c:	f003 fc08 	bl	10008b30 <xTaskGenericNotifyFromISR>
10005320:	b003      	add	sp, #12
10005322:	f85d fb04 	ldr.w	pc, [sp], #4
10005326:	bf00      	nop
10005328:	20011268 	.word	0x20011268

1000532c <WsfTaskMsgQueue>:
1000532c:	4800      	ldr	r0, [pc, #0]	; (10005330 <WsfTaskMsgQueue+0x4>)
1000532e:	4770      	bx	lr
10005330:	200112c8 	.word	0x200112c8

10005334 <WsfOsSetNextHandler>:
10005334:	b570      	push	{r4, r5, r6, lr}
10005336:	4c08      	ldr	r4, [pc, #32]	; (10005358 <WsfOsSetNextHandler+0x24>)
10005338:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
1000533c:	1c6a      	adds	r2, r5, #1
1000533e:	2d0f      	cmp	r5, #15
10005340:	4606      	mov	r6, r0
10005342:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
10005346:	d903      	bls.n	10005350 <WsfOsSetNextHandler+0x1c>
10005348:	4804      	ldr	r0, [pc, #16]	; (1000535c <WsfOsSetNextHandler+0x28>)
1000534a:	21c6      	movs	r1, #198	; 0xc6
1000534c:	f7ff fcc8 	bl	10004ce0 <WsfAssert>
10005350:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
10005354:	4628      	mov	r0, r5
10005356:	bd70      	pop	{r4, r5, r6, pc}
10005358:	20011268 	.word	0x20011268
1000535c:	10010900 	.word	0x10010900

10005360 <WsfOsInit>:
10005360:	b513      	push	{r0, r1, r4, lr}
10005362:	4c17      	ldr	r4, [pc, #92]	; (100053c0 <WsfOsInit+0x60>)
10005364:	2284      	movs	r2, #132	; 0x84
10005366:	2100      	movs	r1, #0
10005368:	4620      	mov	r0, r4
1000536a:	f004 fa51 	bl	10009810 <memset>
1000536e:	f104 0368 	add.w	r3, r4, #104	; 0x68
10005372:	9301      	str	r3, [sp, #4]
10005374:	2303      	movs	r3, #3
10005376:	9300      	str	r3, [sp, #0]
10005378:	4912      	ldr	r1, [pc, #72]	; (100053c4 <WsfOsInit+0x64>)
1000537a:	4813      	ldr	r0, [pc, #76]	; (100053c8 <WsfOsInit+0x68>)
1000537c:	2300      	movs	r3, #0
1000537e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
10005382:	f002 ffeb 	bl	1000835c <xTaskCreate>
10005386:	6ea3      	ldr	r3, [r4, #104]	; 0x68
10005388:	b91b      	cbnz	r3, 10005392 <WsfOsInit+0x32>
1000538a:	4810      	ldr	r0, [pc, #64]	; (100053cc <WsfOsInit+0x6c>)
1000538c:	21dd      	movs	r1, #221	; 0xdd
1000538e:	f7ff fca7 	bl	10004ce0 <WsfAssert>
10005392:	4b0f      	ldr	r3, [pc, #60]	; (100053d0 <WsfOsInit+0x70>)
10005394:	9301      	str	r3, [sp, #4]
10005396:	2302      	movs	r3, #2
10005398:	9300      	str	r3, [sp, #0]
1000539a:	490e      	ldr	r1, [pc, #56]	; (100053d4 <WsfOsInit+0x74>)
1000539c:	480e      	ldr	r0, [pc, #56]	; (100053d8 <WsfOsInit+0x78>)
1000539e:	2300      	movs	r3, #0
100053a0:	f44f 52fe 	mov.w	r2, #8128	; 0x1fc0
100053a4:	f002 ffda 	bl	1000835c <xTaskCreate>
100053a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
100053aa:	b933      	cbnz	r3, 100053ba <WsfOsInit+0x5a>
100053ac:	4807      	ldr	r0, [pc, #28]	; (100053cc <WsfOsInit+0x6c>)
100053ae:	21e4      	movs	r1, #228	; 0xe4
100053b0:	b002      	add	sp, #8
100053b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100053b6:	f7ff bc93 	b.w	10004ce0 <WsfAssert>
100053ba:	b002      	add	sp, #8
100053bc:	bd10      	pop	{r4, pc}
100053be:	bf00      	nop
100053c0:	20011268 	.word	0x20011268
100053c4:	10010939 	.word	0x10010939
100053c8:	1000521d 	.word	0x1000521d
100053cc:	10010900 	.word	0x10010900
100053d0:	200112d4 	.word	0x200112d4
100053d4:	10010941 	.word	0x10010941
100053d8:	100051b5 	.word	0x100051b5

100053dc <WsfQueueEnq>:
 *  \param  pQueue    Pointer to queue.
 *  \param  pElem     Pointer to element.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
100053dc:	b538      	push	{r3, r4, r5, lr}
100053de:	460d      	mov	r5, r1
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);
100053e0:	4604      	mov	r4, r0
100053e2:	b918      	cbnz	r0, 100053ec <WsfQueueEnq+0x10>
100053e4:	480b      	ldr	r0, [pc, #44]	; (10005414 <WsfQueueEnq+0x38>)
100053e6:	213b      	movs	r1, #59	; 0x3b
100053e8:	f7ff fc7a 	bl	10004ce0 <WsfAssert>
  WSF_ASSERT(pElem != NULL);
100053ec:	b91d      	cbnz	r5, 100053f6 <WsfQueueEnq+0x1a>
100053ee:	4809      	ldr	r0, [pc, #36]	; (10005414 <WsfQueueEnq+0x38>)
100053f0:	213c      	movs	r1, #60	; 0x3c
100053f2:	f7ff fc75 	bl	10004ce0 <WsfAssert>

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
100053f6:	2300      	movs	r3, #0
100053f8:	602b      	str	r3, [r5, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
100053fa:	f7ff fe55 	bl	100050a8 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL) {
100053fe:	6823      	ldr	r3, [r4, #0]
10005400:	b92b      	cbnz	r3, 1000540e <WsfQueueEnq+0x32>
    pQueue->pHead = pElem;
10005402:	6025      	str	r5, [r4, #0]
    pQueue->pTail = pElem;
  }
  /* else enqueue element to the tail of queue */
  else {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
    pQueue->pTail = pElem;
10005404:	6065      	str	r5, [r4, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
10005406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
1000540a:	f7ff be65 	b.w	100050d8 <WsfCsExit>
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
1000540e:	6863      	ldr	r3, [r4, #4]
10005410:	601d      	str	r5, [r3, #0]
10005412:	e7f7      	b.n	10005404 <WsfQueueEnq+0x28>
10005414:	10010949 	.word	0x10010949

10005418 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
10005418:	b538      	push	{r3, r4, r5, lr}
  wsfQueueElem_t  *pElem;

  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);
1000541a:	4604      	mov	r4, r0
1000541c:	b918      	cbnz	r0, 10005426 <WsfQueueDeq+0xe>
1000541e:	4808      	ldr	r0, [pc, #32]	; (10005440 <WsfQueueDeq+0x28>)
10005420:	2162      	movs	r1, #98	; 0x62
10005422:	f7ff fc5d 	bl	10004ce0 <WsfAssert>

  /* enter critical section */
  WSF_CS_ENTER(cs);
10005426:	f7ff fe3f 	bl	100050a8 <WsfCsEnter>

  pElem = pQueue->pHead;
1000542a:	6825      	ldr	r5, [r4, #0]

  /* if queue is not empty */
  if (pElem != NULL) {
1000542c:	b11d      	cbz	r5, 10005436 <WsfQueueDeq+0x1e>
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
1000542e:	682b      	ldr	r3, [r5, #0]
10005430:	6023      	str	r3, [r4, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL) {
10005432:	b903      	cbnz	r3, 10005436 <WsfQueueDeq+0x1e>
      pQueue->pTail = NULL;
10005434:	6063      	str	r3, [r4, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
10005436:	f7ff fe4f 	bl	100050d8 <WsfCsExit>

  return pElem;
}
1000543a:	4628      	mov	r0, r5
1000543c:	bd38      	pop	{r3, r4, r5, pc}
1000543e:	bf00      	nop
10005440:	10010949 	.word	0x10010949

10005444 <WsfTimerInit>:
  }
  WsfCsExit();
}

void WsfTimerInit(void)
{
10005444:	b508      	push	{r3, lr}
  s_queue = xQueueCreate(configTIMER_QUEUE_LENGTH, sizeof(wsfTimer_t*));
10005446:	2200      	movs	r2, #0
10005448:	2104      	movs	r1, #4
1000544a:	2008      	movs	r0, #8
1000544c:	f002 fdae 	bl	10007fac <xQueueGenericCreate>
10005450:	4b01      	ldr	r3, [pc, #4]	; (10005458 <WsfTimerInit+0x14>)
10005452:	6018      	str	r0, [r3, #0]
}
10005454:	bd08      	pop	{r3, pc}
10005456:	bf00      	nop
10005458:	20000b58 	.word	0x20000b58

1000545c <WsfTimerServiceExpired>:
  }
  WsfCsExit();
}

wsfTimer_t* WsfTimerServiceExpired(wsfTaskId_t taskId)
{
1000545c:	b507      	push	{r0, r1, r2, lr}
  wsfTimer_t *tmr;
  if (xQueueReceive(s_queue, &tmr, 0)) {
1000545e:	4b05      	ldr	r3, [pc, #20]	; (10005474 <WsfTimerServiceExpired+0x18>)
10005460:	2200      	movs	r2, #0
10005462:	6818      	ldr	r0, [r3, #0]
10005464:	a901      	add	r1, sp, #4
10005466:	f002 fe71 	bl	1000814c <xQueueReceive>
1000546a:	b100      	cbz	r0, 1000546e <WsfTimerServiceExpired+0x12>
    return tmr;
1000546c:	9801      	ldr	r0, [sp, #4]
  }
  return NULL;
}
1000546e:	b003      	add	sp, #12
10005470:	f85d fb04 	ldr.w	pc, [sp], #4
10005474:	20000b58 	.word	0x20000b58

10005478 <wsfTraceOverFlowMessage>:
 *
 *  \return Length in bytes of overflow message.
 */
/*************************************************************************************************/
uint8_t wsfTraceOverFlowMessage(char *pBuf, const char *pStr, ...)
{
10005478:	b40e      	push	{r1, r2, r3}
1000547a:	b503      	push	{r0, r1, lr}
1000547c:	ab03      	add	r3, sp, #12
  uint8_t len;
  va_list args;

  va_start(args, pStr);

  len = PrintVsn(pBuf, WSF_PRINTF_MAX_LEN, pStr, args);
1000547e:	2180      	movs	r1, #128	; 0x80
{
10005480:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, pStr);
10005484:	9301      	str	r3, [sp, #4]
  len = PrintVsn(pBuf, WSF_PRINTF_MAX_LEN, pStr, args);
10005486:	f7ff f9e3 	bl	10004850 <PrintVsn>

  va_end(args);

  return len;
}
1000548a:	b2c0      	uxtb	r0, r0
1000548c:	b002      	add	sp, #8
1000548e:	f85d eb04 	ldr.w	lr, [sp], #4
10005492:	b003      	add	sp, #12
10005494:	4770      	bx	lr
	...

10005498 <WsfTrace>:
 *  \param  pStr    Format string
 *  Addition parameters variable arguments to the format string.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
10005498:	b40f      	push	{r0, r1, r2, r3}
1000549a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!wsfTraceCb.enabled) {
1000549c:	4c19      	ldr	r4, [pc, #100]	; (10005504 <WsfTrace+0x6c>)
1000549e:	7a23      	ldrb	r3, [r4, #8]
100054a0:	4625      	mov	r5, r4
100054a2:	b18b      	cbz	r3, 100054c8 <WsfTrace+0x30>
    /* Discard message when disabled. */
    return;
  }

  if (wsfTraceCb.sendMsgCback != NULL) {
100054a4:	6823      	ldr	r3, [r4, #0]
100054a6:	b17b      	cbz	r3, 100054c8 <WsfTrace+0x30>
    static char buf[WSF_PRINTF_MAX_LEN];

    va_start(args, pStr);

    /* Dropped message notification. */
    if (wsfTraceCb.numDropMsg) {
100054a8:	6862      	ldr	r2, [r4, #4]
    va_start(args, pStr);
100054aa:	ab07      	add	r3, sp, #28
100054ac:	9301      	str	r3, [sp, #4]
    if (wsfTraceCb.numDropMsg) {
100054ae:	b192      	cbz	r2, 100054d6 <WsfTrace+0x3e>
      static char dropMsg[] = ">>> Trace buffer overflowed; %u message(s) lost <<<\r\n";

      len = wsfTraceOverFlowMessage(buf, dropMsg, wsfTraceCb.numDropMsg);
100054b0:	4915      	ldr	r1, [pc, #84]	; (10005508 <WsfTrace+0x70>)
100054b2:	4816      	ldr	r0, [pc, #88]	; (1000550c <WsfTrace+0x74>)
100054b4:	f7ff ffe0 	bl	10005478 <wsfTraceOverFlowMessage>

      if (wsfTraceCb.sendMsgCback((uint8_t *)buf, len) == FALSE) {
100054b8:	6823      	ldr	r3, [r4, #0]
      len = wsfTraceOverFlowMessage(buf, dropMsg, wsfTraceCb.numDropMsg);
100054ba:	4601      	mov	r1, r0
      if (wsfTraceCb.sendMsgCback((uint8_t *)buf, len) == FALSE) {
100054bc:	4813      	ldr	r0, [pc, #76]	; (1000550c <WsfTrace+0x74>)
100054be:	4798      	blx	r3
100054c0:	b938      	cbnz	r0, 100054d2 <WsfTrace+0x3a>
        wsfTraceCb.numDropMsg++;
100054c2:	6863      	ldr	r3, [r4, #4]
100054c4:	3301      	adds	r3, #1
100054c6:	6063      	str	r3, [r4, #4]
    if (wsfTraceCb.sendMsgCback((uint8_t *)buf, (uint8_t)len) == FALSE) {
      /* Trace I/O flow controlled; drop message. */
      wsfTraceCb.numDropMsg = 1;
    }
  }
}
100054c8:	b003      	add	sp, #12
100054ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
100054ce:	b004      	add	sp, #16
100054d0:	4770      	bx	lr
      wsfTraceCb.numDropMsg = 0;
100054d2:	2300      	movs	r3, #0
100054d4:	6063      	str	r3, [r4, #4]
    len = PrintVsn(buf, WSF_PRINTF_MAX_LEN - WSF_TRACE_SUFFIX_LEN, pStr, args);
100054d6:	4c0d      	ldr	r4, [pc, #52]	; (1000550c <WsfTrace+0x74>)
100054d8:	9b01      	ldr	r3, [sp, #4]
100054da:	9a06      	ldr	r2, [sp, #24]
100054dc:	217e      	movs	r1, #126	; 0x7e
100054de:	4620      	mov	r0, r4
100054e0:	f7ff f9b6 	bl	10004850 <PrintVsn>
    buf[len++] = '\r';
100054e4:	230d      	movs	r3, #13
100054e6:	5423      	strb	r3, [r4, r0]
    buf[len++] = '\n';
100054e8:	1823      	adds	r3, r4, r0
100054ea:	220a      	movs	r2, #10
100054ec:	3002      	adds	r0, #2
100054ee:	705a      	strb	r2, [r3, #1]
    if (wsfTraceCb.sendMsgCback((uint8_t *)buf, (uint8_t)len) == FALSE) {
100054f0:	b2c1      	uxtb	r1, r0
100054f2:	682b      	ldr	r3, [r5, #0]
100054f4:	4620      	mov	r0, r4
100054f6:	4798      	blx	r3
100054f8:	2800      	cmp	r0, #0
100054fa:	d1e5      	bne.n	100054c8 <WsfTrace+0x30>
      wsfTraceCb.numDropMsg = 1;
100054fc:	2301      	movs	r3, #1
100054fe:	606b      	str	r3, [r5, #4]
10005500:	e7e2      	b.n	100054c8 <WsfTrace+0x30>
10005502:	bf00      	nop
10005504:	200112ec 	.word	0x200112ec
10005508:	20000054 	.word	0x20000054
1000550c:	20000b5c 	.word	0x20000b5c

10005510 <WsfTraceEnable>:
 *
 *  \param  enable    TRUE to enable, FALSE to disable
 */
/*************************************************************************************************/
void WsfTraceEnable(bool_t enable)
{
10005510:	b538      	push	{r3, r4, r5, lr}
  WSF_ASSERT(wsfTraceCb.sendMsgCback);
10005512:	4c05      	ldr	r4, [pc, #20]	; (10005528 <WsfTraceEnable+0x18>)
10005514:	6822      	ldr	r2, [r4, #0]
{
10005516:	4605      	mov	r5, r0
  WSF_ASSERT(wsfTraceCb.sendMsgCback);
10005518:	b91a      	cbnz	r2, 10005522 <WsfTraceEnable+0x12>
1000551a:	4804      	ldr	r0, [pc, #16]	; (1000552c <WsfTraceEnable+0x1c>)
1000551c:	21e8      	movs	r1, #232	; 0xe8
1000551e:	f7ff fbdf 	bl	10004ce0 <WsfAssert>
  wsfTraceCb.enabled = enable;
10005522:	7225      	strb	r5, [r4, #8]
   *     0 |     0 | No tracing of any kind
   *     0 |     1 | Tracing through buffered UART
   *     1 |     0 | Tokenized tracing through CHCI
   *     1 |     1 | Tokenized tracing through buffered UART
   */
}
10005524:	bd38      	pop	{r3, r4, r5, pc}
10005526:	bf00      	nop
10005528:	200112ec 	.word	0x200112ec
1000552c:	10010985 	.word	0x10010985

10005530 <WsfTraceRegisterHandler>:
 *  ready for writing.
 */
/*************************************************************************************************/
void WsfTraceRegisterHandler(WsfTraceHandler_t traceCback)
{
  wsfTraceCb.sendMsgCback = traceCback;
10005530:	4b01      	ldr	r3, [pc, #4]	; (10005538 <WsfTraceRegisterHandler+0x8>)
10005532:	6018      	str	r0, [r3, #0]
}
10005534:	4770      	bx	lr
10005536:	bf00      	nop
10005538:	200112ec 	.word	0x200112ec

1000553c <palCfgLoadLlParams>:

  const uint16_t advDataLen     = LL_MAX_ADV_DATA_LEN;
  const uint16_t connDataLen    = 512;
  const uint16_t numTxBufs      = 16;

  pCfg->maxAdvSets            = 6;
1000553c:	f241 0306 	movw	r3, #4102	; 0x1006
  pCfg->maxAdvReports         = 16;
  pCfg->maxExtAdvDataLen      = advDataLen;
10005540:	f240 6172 	movw	r1, #1650	; 0x672
  pCfg->maxAdvSets            = 6;
10005544:	8003      	strh	r3, [r0, #0]
  /* pCfg->defExtAdvDataFragLen */  /* Use default. */
  pCfg->auxDelayUsec          = 0;
  pCfg->maxScanReqRcvdEvt     = 4;
10005546:	2304      	movs	r3, #4
  pCfg->maxExtAdvDataLen      = advDataLen;
10005548:	8041      	strh	r1, [r0, #2]
  pCfg->maxScanReqRcvdEvt     = 4;
1000554a:	7283      	strb	r3, [r0, #10]
  pCfg->maxExtScanDataLen     = advDataLen;
1000554c:	8181      	strh	r1, [r0, #12]
  pCfg->maxConn               = 4;
  pCfg->maxAclLen             = connDataLen;
1000554e:	f44f 7300 	mov.w	r3, #512	; 0x200
  pCfg->maxConn               = 4;
10005552:	f241 0104 	movw	r1, #4100	; 0x1004
  pCfg->maxAclLen             = connDataLen;
10005556:	8243      	strh	r3, [r0, #18]
  pCfg->maxConn               = 4;
10005558:	81c1      	strh	r1, [r0, #14]
  pCfg->numTxBufs             = numTxBufs;
  pCfg->numRxBufs             = 8;
  pCfg->numIsoTxBuf           = 16;
  pCfg->numIsoRxBuf           = 8;
  pCfg->maxIsoBufLen          = 512;
1000555a:	8303      	strh	r3, [r0, #24]
  pCfg->numRxBufs             = 8;
1000555c:	2108      	movs	r1, #8
  pCfg->maxIsoPduLen          = 251;
1000555e:	23fb      	movs	r3, #251	; 0xfb
  pCfg->auxDelayUsec          = 0;
10005560:	2200      	movs	r2, #0
  pCfg->numRxBufs             = 8;
10005562:	7401      	strb	r1, [r0, #16]
  pCfg->maxIsoPduLen          = 251;
10005564:	8343      	strh	r3, [r0, #26]
  pCfg->numIsoTxBuf           = 16;
10005566:	f44f 6101 	mov.w	r1, #2064	; 0x810
  pCfg->maxCig                = 2;
1000556a:	f240 6302 	movw	r3, #1538	; 0x602
  pCfg->auxDelayUsec          = 0;
1000556e:	80c2      	strh	r2, [r0, #6]
  pCfg->numIsoTxBuf           = 16;
10005570:	82c1      	strh	r1, [r0, #22]
  pCfg->maxCig                = 2;
10005572:	8383      	strh	r3, [r0, #28]
  pCfg->maxCis                = 6;
  pCfg->cisSubEvtSpaceDelay   = 0;
10005574:	83c2      	strh	r2, [r0, #30]
  pCfg->maxBig                = 2;
10005576:	8403      	strh	r3, [r0, #32]
  pCfg->maxBis                = 6;
}
10005578:	4770      	bx	lr

1000557a <palCfgLoadBdAddress>:
 *
 *  \param      pDevAddr            device address.
 */
/*************************************************************************************************/
void palCfgLoadBdAddress(uint8_t *pDevAddr)
{
1000557a:	b510      	push	{r4, lr}
1000557c:	b088      	sub	sp, #32
1000557e:	4604      	mov	r4, r0
  uint8_t id[MXC_SYS_USN_CHECKSUM_LEN];
  uint8_t checksum[MXC_SYS_USN_CHECKSUM_LEN];

  if(MXC_SYS_GetUSN(id, checksum) != E_NO_ERROR) {
10005580:	a904      	add	r1, sp, #16
10005582:	4668      	mov	r0, sp
10005584:	f000 fda6 	bl	100060d4 <MXC_SYS_GetUSN>
10005588:	b108      	cbz	r0, 1000558e <palCfgLoadBdAddress+0x14>
    PalSysAssertTrap();	
1000558a:	f000 f99b 	bl	100058c4 <PalSysAssertTrap>
  }


  /* MA-L assigend by IEEE to Maxim Integrated Products */
  pDevAddr[5] = 0x00;
1000558e:	2300      	movs	r3, #0
10005590:	7163      	strb	r3, [r4, #5]
  pDevAddr[4] = 0x18;
10005592:	2318      	movs	r3, #24
10005594:	7123      	strb	r3, [r4, #4]
  pDevAddr[3] = 0x80;
10005596:	2380      	movs	r3, #128	; 0x80
10005598:	70e3      	strb	r3, [r4, #3]

  pDevAddr[2] = checksum[2];
1000559a:	f89d 3012 	ldrb.w	r3, [sp, #18]
1000559e:	70a3      	strb	r3, [r4, #2]
  pDevAddr[1] = checksum[1];
100055a0:	f89d 3011 	ldrb.w	r3, [sp, #17]
100055a4:	7063      	strb	r3, [r4, #1]
  pDevAddr[0] = checksum[0];
100055a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
100055aa:	7023      	strb	r3, [r4, #0]
}
100055ac:	b008      	add	sp, #32
100055ae:	bd10      	pop	{r4, pc}

100055b0 <palCfgLoadExtMac154Address>:
 *
 *  \param      pDevAddr            device address.
 */
/*************************************************************************************************/
void palCfgLoadExtMac154Address(uint8_t *pDevAddr)
{
100055b0:	b510      	push	{r4, lr}
100055b2:	b088      	sub	sp, #32
100055b4:	4604      	mov	r4, r0
  unsigned int devAddrLen = 8;
  uint8_t id[MXC_SYS_USN_CHECKSUM_LEN];
  uint8_t checksum[MXC_SYS_USN_CHECKSUM_LEN];

  if(MXC_SYS_GetUSN(id, checksum) != E_NO_ERROR) {
100055b6:	a904      	add	r1, sp, #16
100055b8:	4668      	mov	r0, sp
100055ba:	f000 fd8b 	bl	100060d4 <MXC_SYS_GetUSN>
100055be:	b108      	cbz	r0, 100055c4 <palCfgLoadExtMac154Address+0x14>
    PalSysAssertTrap();	
100055c0:	f000 f980 	bl	100058c4 <PalSysAssertTrap>
100055c4:	1e62      	subs	r2, r4, #1
100055c6:	ab04      	add	r3, sp, #16
100055c8:	3407      	adds	r4, #7
  }

  /* Set the device address */
  unsigned int i = 0;
  while (i < devAddrLen) {
    pDevAddr[i] = checksum[i];
100055ca:	f813 1b01 	ldrb.w	r1, [r3], #1
100055ce:	f802 1f01 	strb.w	r1, [r2, #1]!
  while (i < devAddrLen) {
100055d2:	42a2      	cmp	r2, r4
100055d4:	d1f9      	bne.n	100055ca <palCfgLoadExtMac154Address+0x1a>
    i++;
  }
}
100055d6:	b008      	add	sp, #32
100055d8:	bd10      	pop	{r4, pc}

100055da <PalCfgLoadData>:
/*************************************************************************************************/
void PalCfgLoadData(uint8_t cfgId, void *pBuf, uint32_t len)
{
  (void)len;

  switch (cfgId) {
100055da:	2803      	cmp	r0, #3
100055dc:	d813      	bhi.n	10005606 <PalCfgLoadData+0x2c>
100055de:	e8df f000 	tbb	[pc, r0]
100055e2:	0502      	.short	0x0502
100055e4:	0f0c      	.short	0x0f0c
    case PAL_CFG_ID_BD_ADDR:
      palCfgLoadBdAddress(pBuf);
100055e6:	4608      	mov	r0, r1
100055e8:	f7ff bfc7 	b.w	1000557a <palCfgLoadBdAddress>
  *pPhy2mSup          = TRUE;
100055ec:	2301      	movs	r3, #1
100055ee:	700b      	strb	r3, [r1, #0]
  *pPhyCodedSup       = TRUE;
100055f0:	704b      	strb	r3, [r1, #1]
  *pStableModIdxTxSup = FALSE;
100055f2:	2300      	movs	r3, #0
100055f4:	708b      	strb	r3, [r1, #2]
  *pStableModIdxRxSup = FALSE;
100055f6:	70cb      	strb	r3, [r1, #3]
}
100055f8:	4770      	bx	lr
    case PAL_CFG_ID_BLE_PHY:
      palCfgGetBlePhyFeatures(pBuf, pBuf + 1, pBuf + 2, pBuf + 3);
      break;

    case PAL_CFG_ID_LL_PARAM:
      palCfgLoadLlParams(pBuf);
100055fa:	4608      	mov	r0, r1
100055fc:	f7ff bf9e 	b.w	1000553c <palCfgLoadLlParams>
      break;

    case PAL_CFG_ID_MAC_ADDR:
      palCfgLoadExtMac154Address(pBuf);
10005600:	4608      	mov	r0, r1
10005602:	f7ff bfd5 	b.w	100055b0 <palCfgLoadExtMac154Address>
      break;

    default:
      break;
  }
}
10005606:	4770      	bx	lr

10005608 <palCryptoAesEcb>:
/**************************************************************************************************
  Functions
**************************************************************************************************/

static void palCryptoAesEcb(const uint8_t* key, const uint8_t* pt, uint8_t* ct)
{
10005608:	b570      	push	{r4, r5, r6, lr}
1000560a:	b08c      	sub	sp, #48	; 0x30
1000560c:	4614      	mov	r4, r2
1000560e:	aa04      	add	r2, sp, #16
10005610:	4605      	mov	r5, r0

  uint8_t ptTemp[PAL_CRYPTO_AES_BLOCK_SIZE];
  uint8_t ctTemp[PAL_CRYPTO_AES_BLOCK_SIZE];
  int i;

  for(i = 0; i < PAL_CRYPTO_AES_BLOCK_SIZE; i++) {
10005612:	f101 0310 	add.w	r3, r1, #16
10005616:	4616      	mov	r6, r2
    ptTemp[i] = pt[PAL_CRYPTO_AES_BLOCK_SIZE-i-1];
10005618:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
1000561c:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0; i < PAL_CRYPTO_AES_BLOCK_SIZE; i++) {
10005620:	428b      	cmp	r3, r1
10005622:	d1f9      	bne.n	10005618 <palCryptoAesEcb+0x10>
  }

  MXC_TPU_Cipher_Config(MXC_TPU_MODE_ECB, MXC_TPU_CIPHER_AES128);
10005624:	2101      	movs	r1, #1
10005626:	2000      	movs	r0, #0
10005628:	f001 fe1e 	bl	10007268 <MXC_TPU_Cipher_Config>

  MXC_TPU_Cipher_AES_Encrypt((const char*)ptTemp, NULL, (const char*)key, MXC_TPU_CIPHER_AES128, 
1000562c:	ab08      	add	r3, sp, #32
1000562e:	9302      	str	r3, [sp, #8]
10005630:	2100      	movs	r1, #0
10005632:	2310      	movs	r3, #16
10005634:	e9cd 1300 	strd	r1, r3, [sp]
10005638:	462a      	mov	r2, r5
1000563a:	2301      	movs	r3, #1
1000563c:	4630      	mov	r0, r6
1000563e:	f001 fe2f 	bl	100072a0 <MXC_TPU_Cipher_AES_Encrypt>
    MXC_TPU_MODE_ECB, AES_DATA_LEN, (char*)ctTemp);

  for(i = 0; i < PAL_CRYPTO_AES_BLOCK_SIZE; i++) {
10005642:	1e63      	subs	r3, r4, #1
10005644:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
10005648:	340f      	adds	r4, #15
    ct[i] = ctTemp[PAL_CRYPTO_AES_BLOCK_SIZE-i-1];
1000564a:	f812 1901 	ldrb.w	r1, [r2], #-1
1000564e:	f803 1f01 	strb.w	r1, [r3, #1]!
  for(i = 0; i < PAL_CRYPTO_AES_BLOCK_SIZE; i++) {
10005652:	42a3      	cmp	r3, r4
10005654:	d1f9      	bne.n	1000564a <palCryptoAesEcb+0x42>
  }
}
10005656:	b00c      	add	sp, #48	; 0x30
10005658:	bd70      	pop	{r4, r5, r6, pc}
	...

1000565c <PalCryptoInit>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void PalCryptoInit(void)
{
1000565c:	b510      	push	{r4, lr}
  uint32_t key[4];
  uint32_t in[4];
  uint32_t out[4];

  /* Seed RNG */
  palCryptoCb.rngW = 0x733c9fe6;
1000565e:	4b2b      	ldr	r3, [pc, #172]	; (1000570c <PalCryptoInit+0xb0>)
10005660:	4c2b      	ldr	r4, [pc, #172]	; (10005710 <PalCryptoInit+0xb4>)
  palCryptoCb.rngX = 0x90b15126;
  palCryptoCb.rngY = 0x4a497de3;
  palCryptoCb.rngZ = 0xf3a82809;
10005662:	4a2c      	ldr	r2, [pc, #176]	; (10005714 <PalCryptoInit+0xb8>)
  palCryptoCb.rngW = 0x733c9fe6;
10005664:	6023      	str	r3, [r4, #0]
  palCryptoCb.rngX = 0x90b15126;
10005666:	f103 53eb 	add.w	r3, r3, #492830720	; 0x1d600000
1000566a:	f503 13a5 	add.w	r3, r3, #1351680	; 0x14a000
1000566e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
10005672:	6063      	str	r3, [r4, #4]
  palCryptoCb.rngZ = 0xf3a82809;
10005674:	4b28      	ldr	r3, [pc, #160]	; (10005718 <PalCryptoInit+0xbc>)
{
10005676:	b08c      	sub	sp, #48	; 0x30
  palCryptoCb.rngZ = 0xf3a82809;
10005678:	e9c4 2302 	strd	r2, r3, [r4, #8]

  /* Use TRNG to seed the RNG */
  MXC_TRNG_Init();
1000567c:	f001 fed7 	bl	1000742e <MXC_TRNG_Init>
  MXC_TPU_Init(MXC_SYS_PERIPH_CLOCK_TPU);
10005680:	200e      	movs	r0, #14
10005682:	f001 fdb0 	bl	100071e6 <MXC_TPU_Init>

  MXC_TRNG_Random((uint8_t*)key, 16);
10005686:	2110      	movs	r1, #16
10005688:	4668      	mov	r0, sp
1000568a:	f001 fee7 	bl	1000745c <MXC_TRNG_Random>
  MXC_TRNG_Random((uint8_t*)in, 16);
1000568e:	2110      	movs	r1, #16
10005690:	eb0d 0001 	add.w	r0, sp, r1
10005694:	f001 fee2 	bl	1000745c <MXC_TRNG_Random>

  key[0] ^= 0xa0cc5ea4;
10005698:	9a00      	ldr	r2, [sp, #0]
1000569a:	4b20      	ldr	r3, [pc, #128]	; (1000571c <PalCryptoInit+0xc0>)
1000569c:	4053      	eors	r3, r2
1000569e:	9300      	str	r3, [sp, #0]
  key[1] ^= 0x2980e0c4;
100056a0:	9a01      	ldr	r2, [sp, #4]
100056a2:	4b1f      	ldr	r3, [pc, #124]	; (10005720 <PalCryptoInit+0xc4>)
100056a4:	4053      	eors	r3, r2
100056a6:	9301      	str	r3, [sp, #4]
  key[2] ^= 0xdd617602;
100056a8:	9a02      	ldr	r2, [sp, #8]
100056aa:	4b1e      	ldr	r3, [pc, #120]	; (10005724 <PalCryptoInit+0xc8>)
100056ac:	4053      	eors	r3, r2
100056ae:	9302      	str	r3, [sp, #8]
  key[3] ^= 0xe1e21e73;
100056b0:	9a03      	ldr	r2, [sp, #12]
100056b2:	4b1d      	ldr	r3, [pc, #116]	; (10005728 <PalCryptoInit+0xcc>)
100056b4:	4053      	eors	r3, r2
100056b6:	9303      	str	r3, [sp, #12]

  in[0] ^= 0x7a7f37da;
100056b8:	9a04      	ldr	r2, [sp, #16]
100056ba:	4b1c      	ldr	r3, [pc, #112]	; (1000572c <PalCryptoInit+0xd0>)
100056bc:	4053      	eors	r3, r2
100056be:	9304      	str	r3, [sp, #16]
  in[1] ^= 0x017e0fd9;
100056c0:	9a05      	ldr	r2, [sp, #20]
100056c2:	4b1b      	ldr	r3, [pc, #108]	; (10005730 <PalCryptoInit+0xd4>)
100056c4:	4053      	eors	r3, r2
100056c6:	9305      	str	r3, [sp, #20]
  in[2] ^= 0x133e23cc;
100056c8:	9a06      	ldr	r2, [sp, #24]
100056ca:	4b1a      	ldr	r3, [pc, #104]	; (10005734 <PalCryptoInit+0xd8>)
100056cc:	4053      	eors	r3, r2
100056ce:	9306      	str	r3, [sp, #24]
  in[3] ^= 0x46a4e91a;
100056d0:	9a07      	ldr	r2, [sp, #28]
100056d2:	4b19      	ldr	r3, [pc, #100]	; (10005738 <PalCryptoInit+0xdc>)
100056d4:	4053      	eors	r3, r2
100056d6:	9307      	str	r3, [sp, #28]

  MXC_TRNG_Shutdown();
100056d8:	f001 feb1 	bl	1000743e <MXC_TRNG_Shutdown>

  palCryptoAesEcb((const uint8_t*)key, (const uint8_t *)in, (uint8_t *)out);
100056dc:	aa08      	add	r2, sp, #32
100056de:	a904      	add	r1, sp, #16
100056e0:	4668      	mov	r0, sp
100056e2:	f7ff ff91 	bl	10005608 <palCryptoAesEcb>

  palCryptoCb.rngW ^= out[0];
100056e6:	6823      	ldr	r3, [r4, #0]
100056e8:	9a08      	ldr	r2, [sp, #32]
100056ea:	4053      	eors	r3, r2
100056ec:	6023      	str	r3, [r4, #0]
  palCryptoCb.rngX ^= out[1];
100056ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
100056f0:	6863      	ldr	r3, [r4, #4]
100056f2:	4053      	eors	r3, r2
100056f4:	6063      	str	r3, [r4, #4]
  palCryptoCb.rngY ^= out[2];
100056f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100056f8:	68a3      	ldr	r3, [r4, #8]
100056fa:	4053      	eors	r3, r2
100056fc:	60a3      	str	r3, [r4, #8]
  palCryptoCb.rngZ ^= out[3];
100056fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10005700:	68e3      	ldr	r3, [r4, #12]
10005702:	4053      	eors	r3, r2
10005704:	60e3      	str	r3, [r4, #12]
}
10005706:	b00c      	add	sp, #48	; 0x30
10005708:	bd10      	pop	{r4, pc}
1000570a:	bf00      	nop
1000570c:	733c9fe6 	.word	0x733c9fe6
10005710:	200112f8 	.word	0x200112f8
10005714:	4a497de3 	.word	0x4a497de3
10005718:	f3a82809 	.word	0xf3a82809
1000571c:	a0cc5ea4 	.word	0xa0cc5ea4
10005720:	2980e0c4 	.word	0x2980e0c4
10005724:	dd617602 	.word	0xdd617602
10005728:	e1e21e73 	.word	0xe1e21e73
1000572c:	7a7f37da 	.word	0x7a7f37da
10005730:	017e0fd9 	.word	0x017e0fd9
10005734:	133e23cc 	.word	0x133e23cc
10005738:	46a4e91a 	.word	0x46a4e91a

1000573c <palLedOff>:
 */
/*************************************************************************************************/
static void palLedOff(uint8_t led)
{
  /* Make sure we have enough LEDs */
  if(num_leds > led) {
1000573c:	4b03      	ldr	r3, [pc, #12]	; (1000574c <palLedOff+0x10>)
1000573e:	681b      	ldr	r3, [r3, #0]
10005740:	4298      	cmp	r0, r3
10005742:	d201      	bcs.n	10005748 <palLedOff+0xc>
    LED_Off(led);
10005744:	f7fe bec0 	b.w	100044c8 <LED_Off>
  }
}
10005748:	4770      	bx	lr
1000574a:	bf00      	nop
1000574c:	100105f4 	.word	0x100105f4

10005750 <palLedOn>:
  if(num_leds > led) {
10005750:	4b03      	ldr	r3, [pc, #12]	; (10005760 <palLedOn+0x10>)
10005752:	681b      	ldr	r3, [r3, #0]
10005754:	4298      	cmp	r0, r3
10005756:	d201      	bcs.n	1000575c <palLedOn+0xc>
    LED_On(led);
10005758:	f7fe be98 	b.w	1000448c <LED_On>
}
1000575c:	4770      	bx	lr
1000575e:	bf00      	nop
10005760:	100105f4 	.word	0x100105f4

10005764 <PalLedInit>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void PalLedInit(void)
{
10005764:	b508      	push	{r3, lr}
  LED_Init();
10005766:	f7fe fecd 	bl	10004504 <LED_Init>
  palLedCb.init = TRUE;
1000576a:	4b02      	ldr	r3, [pc, #8]	; (10005774 <PalLedInit+0x10>)
1000576c:	2201      	movs	r2, #1
1000576e:	701a      	strb	r2, [r3, #0]
}
10005770:	bd08      	pop	{r3, pc}
10005772:	bf00      	nop
10005774:	20000bdc 	.word	0x20000bdc

10005778 <PalLedOn>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void PalLedOn(uint8_t ledId)
{
10005778:	b538      	push	{r3, r4, r5, lr}
  if(!palLedCb.init) {
1000577a:	4b0e      	ldr	r3, [pc, #56]	; (100057b4 <PalLedOn+0x3c>)
1000577c:	781b      	ldrb	r3, [r3, #0]
{
1000577e:	4604      	mov	r4, r0
  if(!palLedCb.init) {
10005780:	b18b      	cbz	r3, 100057a6 <PalLedOn+0x2e>
    return;
  }

  switch (ledId) {
10005782:	2830      	cmp	r0, #48	; 0x30
10005784:	d010      	beq.n	100057a8 <PalLedOn+0x30>
10005786:	2831      	cmp	r0, #49	; 0x31
10005788:	d012      	beq.n	100057b0 <PalLedOn+0x38>
    default:
      break;
  }

#if (PAL_BB_LED_ENABLED == 1)
    if(ledId & 0x80){
1000578a:	0622      	lsls	r2, r4, #24
1000578c:	d50b      	bpl.n	100057a6 <PalLedOn+0x2e>
      /* Remap the mask for the BB LEDs */
      int i;
      for(i = 0; i < 7; i++) {
1000578e:	2500      	movs	r5, #0
        if(ledId & (0x1 << i)) {
10005790:	fa44 f305 	asr.w	r3, r4, r5
10005794:	07db      	lsls	r3, r3, #31
10005796:	d503      	bpl.n	100057a0 <PalLedOn+0x28>
          palLedOn(2+i);
10005798:	1ca8      	adds	r0, r5, #2
1000579a:	b2c0      	uxtb	r0, r0
1000579c:	f7ff ffd8 	bl	10005750 <palLedOn>
      for(i = 0; i < 7; i++) {
100057a0:	3501      	adds	r5, #1
100057a2:	2d07      	cmp	r5, #7
100057a4:	d1f4      	bne.n	10005790 <PalLedOn+0x18>
        }
      }
    }
#endif
}
100057a6:	bd38      	pop	{r3, r4, r5, pc}
      palLedOn(1);    /* D2: green */
100057a8:	2001      	movs	r0, #1
      palLedOn(0);    /* D1: red */
100057aa:	f7ff ffd1 	bl	10005750 <palLedOn>
      break;
100057ae:	e7ec      	b.n	1000578a <PalLedOn+0x12>
      palLedOn(0);    /* D1: red */
100057b0:	2000      	movs	r0, #0
100057b2:	e7fa      	b.n	100057aa <PalLedOn+0x32>
100057b4:	20000bdc 	.word	0x20000bdc

100057b8 <PalLedOff>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void PalLedOff(uint8_t ledId)
{
100057b8:	b538      	push	{r3, r4, r5, lr}
  if(!palLedCb.init) {
100057ba:	4b0e      	ldr	r3, [pc, #56]	; (100057f4 <PalLedOff+0x3c>)
100057bc:	781b      	ldrb	r3, [r3, #0]
{
100057be:	4604      	mov	r4, r0
  if(!palLedCb.init) {
100057c0:	b18b      	cbz	r3, 100057e6 <PalLedOff+0x2e>
    return;
  }

  switch (ledId) {
100057c2:	2830      	cmp	r0, #48	; 0x30
100057c4:	d010      	beq.n	100057e8 <PalLedOff+0x30>
100057c6:	2831      	cmp	r0, #49	; 0x31
100057c8:	d012      	beq.n	100057f0 <PalLedOff+0x38>
    default:
      break;
  }

#if (PAL_BB_LED_ENABLED == 1)
    if(ledId & 0x80){
100057ca:	0622      	lsls	r2, r4, #24
100057cc:	d50b      	bpl.n	100057e6 <PalLedOff+0x2e>
      /* Remap the mask for the BB LEDs */
      int i;
      for(i = 0; i < 7; i++) {
100057ce:	2500      	movs	r5, #0
        if(ledId & (0x1 << i)) {
100057d0:	fa44 f305 	asr.w	r3, r4, r5
100057d4:	07db      	lsls	r3, r3, #31
100057d6:	d503      	bpl.n	100057e0 <PalLedOff+0x28>
          palLedOff(2+i);
100057d8:	1ca8      	adds	r0, r5, #2
100057da:	b2c0      	uxtb	r0, r0
100057dc:	f7ff ffae 	bl	1000573c <palLedOff>
      for(i = 0; i < 7; i++) {
100057e0:	3501      	adds	r5, #1
100057e2:	2d07      	cmp	r5, #7
100057e4:	d1f4      	bne.n	100057d0 <PalLedOff+0x18>
        }
      }
    }
#endif
}
100057e6:	bd38      	pop	{r3, r4, r5, pc}
      palLedOff(1);   /* D2: green */
100057e8:	2001      	movs	r0, #1
      palLedOff(0);   /* D1: red */
100057ea:	f7ff ffa7 	bl	1000573c <palLedOff>
      break;
100057ee:	e7ec      	b.n	100057ca <PalLedOff+0x12>
      palLedOff(0);   /* D1: red */
100057f0:	2000      	movs	r0, #0
100057f2:	e7fa      	b.n	100057ea <PalLedOff+0x32>
100057f4:	20000bdc 	.word	0x20000bdc

100057f8 <PalRtcInit>:
/*!
 *  \brief  Tickless timer initialization routine.
 */
/*************************************************************************************************/
void PalRtcInit(void)
{
100057f8:	b507      	push	{r0, r1, r2, lr}
  /* Init WUT */
  mxc_wut_cfg_t cfg;
  cfg.mode = MXC_WUT_MODE_COMPARE;
100057fa:	2305      	movs	r3, #5
100057fc:	f88d 3000 	strb.w	r3, [sp]
  cfg.cmp_cnt = PAL_MAX_RTC_COUNTER_VAL;

  MXC_WUT_Init(MXC_WUT_PRES_1);
10005800:	2000      	movs	r0, #0
  cfg.cmp_cnt = PAL_MAX_RTC_COUNTER_VAL;
10005802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10005806:	9301      	str	r3, [sp, #4]
  MXC_WUT_Init(MXC_WUT_PRES_1);
10005808:	f002 f9b2 	bl	10007b70 <MXC_WUT_Init>
  MXC_WUT_Config(&cfg);
1000580c:	4668      	mov	r0, sp
1000580e:	f002 f9c3 	bl	10007b98 <MXC_WUT_Config>
  MXC_LP_EnableWUTAlarmWakeup();
10005812:	f001 f867 	bl	100068e4 <MXC_LP_EnableWUTAlarmWakeup>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10005816:	4b07      	ldr	r3, [pc, #28]	; (10005834 <PalRtcInit+0x3c>)
10005818:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1000581c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
10005820:	605a      	str	r2, [r3, #4]

  NVIC_ClearPendingIRQ(WUT_IRQn);
  NVIC_EnableIRQ(WUT_IRQn);

  /* Enable WUT */
  MXC_WUT_Enable();
10005822:	f002 f9b3 	bl	10007b8c <MXC_WUT_Enable>

  palRtcCb.state = PAL_RTC_STATE_READY;
10005826:	4b04      	ldr	r3, [pc, #16]	; (10005838 <PalRtcInit+0x40>)
10005828:	2201      	movs	r2, #1
1000582a:	701a      	strb	r2, [r3, #0]
}
1000582c:	b003      	add	sp, #12
1000582e:	f85d fb04 	ldr.w	pc, [sp], #4
10005832:	bf00      	nop
10005834:	e000e100 	.word	0xe000e100
10005838:	20000bdd 	.word	0x20000bdd

1000583c <DMA0_IRQHandler>:
/*!
 *  \brief  DMA interrupt handlers.
 */
/*************************************************************************************************/
void DMA0_IRQHandler(void)
{
1000583c:	b508      	push	{r3, lr}
  PalLedOn(PAL_LED_ID_CPU_ACTIVE);
1000583e:	2030      	movs	r0, #48	; 0x30
10005840:	f7ff ff9a 	bl	10005778 <PalLedOn>
  MXC_DMA_Handler(MXC_DMA0); /* DMA channel 0 is associated with DMA instance 0 */
}
10005844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MXC_DMA_Handler(MXC_DMA0); /* DMA channel 0 is associated with DMA instance 0 */
10005848:	4801      	ldr	r0, [pc, #4]	; (10005850 <DMA0_IRQHandler+0x14>)
1000584a:	f000 be63 	b.w	10006514 <MXC_DMA_Handler>
1000584e:	bf00      	nop
10005850:	40028000 	.word	0x40028000

10005854 <DMA1_IRQHandler>:
10005854:	f7ff bff2 	b.w	1000583c <DMA0_IRQHandler>

10005858 <DMA2_IRQHandler>:
10005858:	f7ff bff0 	b.w	1000583c <DMA0_IRQHandler>

1000585c <DMA3_IRQHandler>:
1000585c:	f7ff bfee 	b.w	1000583c <DMA0_IRQHandler>

10005860 <DMA4_IRQHandler>:
10005860:	f7ff bfec 	b.w	1000583c <DMA0_IRQHandler>

10005864 <DMA5_IRQHandler>:
10005864:	f7ff bfea 	b.w	1000583c <DMA0_IRQHandler>

10005868 <DMA6_IRQHandler>:
10005868:	f7ff bfe8 	b.w	1000583c <DMA0_IRQHandler>

1000586c <DMA7_IRQHandler>:
1000586c:	f7ff bfe6 	b.w	1000583c <DMA0_IRQHandler>

10005870 <PalSysInit>:
/*!
 *  \brief      Common platform initialization.
 */
/*************************************************************************************************/
void PalSysInit(void)
{
10005870:	b507      	push	{r0, r1, r2, lr}
  /* Delay to prevent lockup when debugging */
#ifdef DEBUG
  volatile int i;
  for(i = 0; i < 0x3FFFFF; i++) {}
10005872:	2300      	movs	r3, #0
10005874:	4a0f      	ldr	r2, [pc, #60]	; (100058b4 <PalSysInit+0x44>)
10005876:	9301      	str	r3, [sp, #4]
10005878:	9b01      	ldr	r3, [sp, #4]
1000587a:	4293      	cmp	r3, r2
1000587c:	dd16      	ble.n	100058ac <PalSysInit+0x3c>
#endif

  palSysAssertCount = 0;
1000587e:	4a0e      	ldr	r2, [pc, #56]	; (100058b8 <PalSysInit+0x48>)
10005880:	2300      	movs	r3, #0
10005882:	6013      	str	r3, [r2, #0]
  PalSysAssertTrapEnable = TRUE;
10005884:	4a0d      	ldr	r2, [pc, #52]	; (100058bc <PalSysInit+0x4c>)
10005886:	2101      	movs	r1, #1
10005888:	7011      	strb	r1, [r2, #0]
  palSysBusyCount = 0;
1000588a:	4a0d      	ldr	r2, [pc, #52]	; (100058c0 <PalSysInit+0x50>)
1000588c:	6013      	str	r3, [r2, #0]
#ifdef DEBUG
  PalLedInit();
1000588e:	f7ff ff69 	bl	10005764 <PalLedInit>
  PalLedOff(PAL_LED_ID_ERROR);
10005892:	2031      	movs	r0, #49	; 0x31
10005894:	f7ff ff90 	bl	100057b8 <PalLedOff>
  PalLedOn(PAL_LED_ID_CPU_ACTIVE);
10005898:	2030      	movs	r0, #48	; 0x30
1000589a:	f7ff ff6d 	bl	10005778 <PalLedOn>
#endif
  PalCryptoInit();
1000589e:	f7ff fedd 	bl	1000565c <PalCryptoInit>
  PalRtcInit();
}
100058a2:	b003      	add	sp, #12
100058a4:	f85d eb04 	ldr.w	lr, [sp], #4
  PalRtcInit();
100058a8:	f7ff bfa6 	b.w	100057f8 <PalRtcInit>
  for(i = 0; i < 0x3FFFFF; i++) {}
100058ac:	9b01      	ldr	r3, [sp, #4]
100058ae:	3301      	adds	r3, #1
100058b0:	9301      	str	r3, [sp, #4]
100058b2:	e7e1      	b.n	10005878 <PalSysInit+0x8>
100058b4:	003ffffe 	.word	0x003ffffe
100058b8:	20000be0 	.word	0x20000be0
100058bc:	20000bde 	.word	0x20000bde
100058c0:	20000be4 	.word	0x20000be4

100058c4 <PalSysAssertTrap>:
/*!
 *  \brief      System fault trap.
 */
/*************************************************************************************************/
void PalSysAssertTrap(void)
{
100058c4:	b508      	push	{r3, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100058c6:	b672      	cpsid	i

  PalEnterCs();
  PalLedOn(PAL_LED_ID_ERROR);
100058c8:	2031      	movs	r0, #49	; 0x31
100058ca:	f7ff ff55 	bl	10005778 <PalLedOn>
  palSysAssertCount++;
100058ce:	4a05      	ldr	r2, [pc, #20]	; (100058e4 <PalSysAssertTrap+0x20>)
100058d0:	6813      	ldr	r3, [r2, #0]
100058d2:	3301      	adds	r3, #1
100058d4:	6013      	str	r3, [r2, #0]
  while (PalSysAssertTrapEnable);
100058d6:	4a04      	ldr	r2, [pc, #16]	; (100058e8 <PalSysAssertTrap+0x24>)
100058d8:	7813      	ldrb	r3, [r2, #0]
100058da:	2b00      	cmp	r3, #0
100058dc:	d1fc      	bne.n	100058d8 <PalSysAssertTrap+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
100058de:	b662      	cpsie	i
  PalExitCs();
}
100058e0:	bd08      	pop	{r3, pc}
100058e2:	bf00      	nop
100058e4:	20000be0 	.word	0x20000be0
100058e8:	20000bde 	.word	0x20000bde

100058ec <TMR0_IRQHandler>:
#elif (PAL_TMR_IDX == 1)
void TMR1_IRQHandler(void)
#else
void TMR0_IRQHandler(void)
#endif
{
100058ec:	b510      	push	{r4, lr}
  PalLedOn(PAL_LED_ID_CPU_ACTIVE);

  /* Check hardware status */
  PAL_TIMER_CHECK(palTimerCb.state == PAL_TIMER_STATE_BUSY);
100058ee:	4c0b      	ldr	r4, [pc, #44]	; (1000591c <TMR0_IRQHandler+0x30>)
  PalLedOn(PAL_LED_ID_CPU_ACTIVE);
100058f0:	2030      	movs	r0, #48	; 0x30
100058f2:	f7ff ff41 	bl	10005778 <PalLedOn>
  PAL_TIMER_CHECK(palTimerCb.state == PAL_TIMER_STATE_BUSY);
100058f6:	7823      	ldrb	r3, [r4, #0]
100058f8:	2b02      	cmp	r3, #2
100058fa:	d000      	beq.n	100058fe <TMR0_IRQHandler+0x12>
100058fc:	e7fe      	b.n	100058fc <TMR0_IRQHandler+0x10>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
100058fe:	4b08      	ldr	r3, [pc, #32]	; (10005920 <TMR0_IRQHandler+0x34>)

  /* Disable and clear PAL_TMR interrupt */
  NVIC_DisableIRQ(PAL_TMR_IRQn);
  MXC_TMR_ClearFlags(PAL_TMR);
10005900:	4808      	ldr	r0, [pc, #32]	; (10005924 <TMR0_IRQHandler+0x38>)
10005902:	2220      	movs	r2, #32
10005904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
10005908:	f001 fc68 	bl	100071dc <MXC_TMR_ClearFlags>

  palTimerCb.state = PAL_TIMER_STATE_READY;
1000590c:	2301      	movs	r3, #1
1000590e:	7023      	strb	r3, [r4, #0]

  if (palTimerCb.expCback) {
10005910:	6863      	ldr	r3, [r4, #4]
10005912:	b113      	cbz	r3, 1000591a <TMR0_IRQHandler+0x2e>
    palTimerCb.expCback();
  }
}
10005914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    palTimerCb.expCback();
10005918:	4718      	bx	r3
}
1000591a:	bd10      	pop	{r4, pc}
1000591c:	20000be8 	.word	0x20000be8
10005920:	e000e100 	.word	0xe000e100
10005924:	40010000 	.word	0x40010000

10005928 <TMR1_IRQHandler>:
#elif (PAL_SLEEP_TMR_IDX == 1)
void TMR1_IRQHandler(void)
#else
void TMR0_IRQHandler(void)
#endif
{
10005928:	b508      	push	{r3, lr}
  PalLedOn(PAL_LED_ID_CPU_ACTIVE);
1000592a:	2030      	movs	r0, #48	; 0x30
1000592c:	f7ff ff24 	bl	10005778 <PalLedOn>
10005930:	4b04      	ldr	r3, [pc, #16]	; (10005944 <TMR1_IRQHandler+0x1c>)

  /* Disable and clear PAL_TMR interrupt */
  NVIC_DisableIRQ(PAL_SLEEP_TMR_IRQn);
  MXC_TMR_ClearFlags(PAL_SLEEP_TMR);
10005932:	4805      	ldr	r0, [pc, #20]	; (10005948 <TMR1_IRQHandler+0x20>)
10005934:	2240      	movs	r2, #64	; 0x40
10005936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
1000593a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MXC_TMR_ClearFlags(PAL_SLEEP_TMR);
1000593e:	f001 bc4d 	b.w	100071dc <MXC_TMR_ClearFlags>
10005942:	bf00      	nop
10005944:	e000e100 	.word	0xe000e100
10005948:	40011000 	.word	0x40011000

1000594c <I2C0_IRQHandler>:
**************************************************************************************************/

/*************************************************************************************************/
void I2C0_IRQHandler(void)
{
  MXC_I2C_AsyncHandler(MXC_I2C0_BUS0);
1000594c:	4801      	ldr	r0, [pc, #4]	; (10005954 <I2C0_IRQHandler+0x8>)
1000594e:	f001 b8ed 	b.w	10006b2c <MXC_I2C_AsyncHandler>
10005952:	bf00      	nop
10005954:	4001d000 	.word	0x4001d000

10005958 <I2C1_IRQHandler>:
}

/*************************************************************************************************/
void I2C1_IRQHandler(void)
{
  MXC_I2C_AsyncHandler(MXC_I2C1_BUS0);
10005958:	4801      	ldr	r0, [pc, #4]	; (10005960 <I2C1_IRQHandler+0x8>)
1000595a:	f001 b8e7 	b.w	10006b2c <MXC_I2C_AsyncHandler>
1000595e:	bf00      	nop
10005960:	4001e000 	.word	0x4001e000

10005964 <I2C2_IRQHandler>:
}

/*************************************************************************************************/
void I2C2_IRQHandler(void)
{
  MXC_I2C_AsyncHandler(MXC_I2C2_BUS0);
10005964:	4801      	ldr	r0, [pc, #4]	; (1000596c <I2C2_IRQHandler+0x8>)
10005966:	f001 b8e1 	b.w	10006b2c <MXC_I2C_AsyncHandler>
1000596a:	bf00      	nop
1000596c:	4001f000 	.word	0x4001f000

10005970 <palUartCallback>:
 */
/*************************************************************************************************/
void palUartCallback(int ch, int error)
{
  int i;
  for(i = 0; i < PAL_UARTS; i++) {
10005970:	4a16      	ldr	r2, [pc, #88]	; (100059cc <palUartCallback+0x5c>)
{
10005972:	b510      	push	{r4, lr}
  for(i = 0; i < PAL_UARTS; i++) {
10005974:	2300      	movs	r3, #0
{
10005976:	4604      	mov	r4, r0
10005978:	4611      	mov	r1, r2
    /* Find the corresponding rqeuest and call the callback */
    if((ch == palUartCb[i].readCh) && (palUartCb[i].state != PAL_UART_STATE_UNINIT)) {
1000597a:	6910      	ldr	r0, [r2, #16]
1000597c:	42a0      	cmp	r0, r4
1000597e:	d10f      	bne.n	100059a0 <palUartCallback+0x30>
10005980:	7810      	ldrb	r0, [r2, #0]
10005982:	b168      	cbz	r0, 100059a0 <palUartCallback+0x30>
      palUartCb[i].readCh = -1;
10005984:	2214      	movs	r2, #20
10005986:	fb02 1303 	mla	r3, r2, r3, r1
1000598a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000598e:	611a      	str	r2, [r3, #16]
      if(palUartCb[i].rdCback != NULL) {
10005990:	685b      	ldr	r3, [r3, #4]
10005992:	b103      	cbz	r3, 10005996 <palUartCallback+0x26>
        palUartCb[i].rdCback();
10005994:	4798      	blx	r3
      }

      MXC_DMA_ReleaseChannel(ch);
10005996:	4620      	mov	r0, r4
      
      MXC_DMA_ReleaseChannel(ch);
      return;
    }
  }
}
10005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      MXC_DMA_ReleaseChannel(ch);
1000599c:	f000 bd94 	b.w	100064c8 <MXC_DMA_ReleaseChannel>
    if((ch == palUartCb[i].writeCh) && (palUartCb[i].state != PAL_UART_STATE_UNINIT)) {
100059a0:	68d0      	ldr	r0, [r2, #12]
100059a2:	42a0      	cmp	r0, r4
100059a4:	d10b      	bne.n	100059be <palUartCallback+0x4e>
100059a6:	7810      	ldrb	r0, [r2, #0]
100059a8:	b148      	cbz	r0, 100059be <palUartCallback+0x4e>
      palUartCb[i].writeCh = -1;
100059aa:	2214      	movs	r2, #20
100059ac:	4353      	muls	r3, r2
100059ae:	18ca      	adds	r2, r1, r3
100059b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100059b4:	60d0      	str	r0, [r2, #12]
      palUartCb[i].state = PAL_UART_STATE_READY;
100059b6:	2001      	movs	r0, #1
100059b8:	54c8      	strb	r0, [r1, r3]
      if(palUartCb[i].wrCback != NULL) {
100059ba:	6893      	ldr	r3, [r2, #8]
100059bc:	e7e9      	b.n	10005992 <palUartCallback+0x22>
  for(i = 0; i < PAL_UARTS; i++) {
100059be:	3301      	adds	r3, #1
100059c0:	2b03      	cmp	r3, #3
100059c2:	f102 0214 	add.w	r2, r2, #20
100059c6:	d1d8      	bne.n	1000597a <palUartCallback+0xa>
}
100059c8:	bd10      	pop	{r4, pc}
100059ca:	bf00      	nop
100059cc:	20000bf4 	.word	0x20000bf4

100059d0 <PalUartInit>:
 */
/*************************************************************************************************/
static int palUartGetNum(PalUartId_t uartId)
{
  uint8_t uartNum;
  switch (uartId) {
100059d0:	2802      	cmp	r0, #2
 *
 *  Initialize UART peripheral with \a pCfg values.
 */
/*************************************************************************************************/
void PalUartInit(PalUartId_t id, const PalUartConfig_t *pCfg)
{
100059d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100059d4:	460d      	mov	r5, r1
100059d6:	d857      	bhi.n	10005a88 <PalUartInit+0xb8>
  return uartNum;
100059d8:	4b32      	ldr	r3, [pc, #200]	; (10005aa4 <PalUartInit+0xd4>)
100059da:	5c1f      	ldrb	r7, [r3, r0]
  int uartNum = palUartGetNum(id);
  sys_map_t uartMap = palUartGetMap(id);
  int result;
  mxc_uart_regs_t *uart = MXC_UART_GET_UART(uartNum);
100059dc:	2f00      	cmp	r7, #0
100059de:	d15b      	bne.n	10005a98 <PalUartInit+0xc8>
100059e0:	4c31      	ldr	r4, [pc, #196]	; (10005aa8 <PalUartInit+0xd8>)
    PAL_SYS_ASSERT(0);
    return;
  }

  /* Save the callback */
  palUartCb[uartNum].rdCback = pCfg->rdCback;
100059e2:	4e32      	ldr	r6, [pc, #200]	; (10005aac <PalUartInit+0xdc>)
100059e4:	682a      	ldr	r2, [r5, #0]
  palUartCb[uartNum].wrCback = pCfg->wrCback;
  palUartCb[uartNum].readCh = -1;
  palUartCb[uartNum].writeCh = -1;

  /* Initialize the UART */
  result = MXC_UART_Init(uart, pCfg->baud, uartMap);
100059e6:	68a9      	ldr	r1, [r5, #8]
  palUartCb[uartNum].rdCback = pCfg->rdCback;
100059e8:	2314      	movs	r3, #20
100059ea:	fb03 6307 	mla	r3, r3, r7, r6
  result = MXC_UART_Init(uart, pCfg->baud, uartMap);
100059ee:	4620      	mov	r0, r4
  palUartCb[uartNum].rdCback = pCfg->rdCback;
100059f0:	605a      	str	r2, [r3, #4]
  palUartCb[uartNum].wrCback = pCfg->wrCback;
100059f2:	686a      	ldr	r2, [r5, #4]
100059f4:	609a      	str	r2, [r3, #8]
  palUartCb[uartNum].readCh = -1;
100059f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  palUartCb[uartNum].writeCh = -1;
100059fa:	e9c3 2203 	strd	r2, r2, [r3, #12]
  result = MXC_UART_Init(uart, pCfg->baud, uartMap);
100059fe:	2200      	movs	r2, #0
10005a00:	f001 fd7c 	bl	100074fc <MXC_UART_Init>
  (void)result;
  PAL_SYS_ASSERT(result >= 0);
10005a04:	2800      	cmp	r0, #0
10005a06:	da01      	bge.n	10005a0c <PalUartInit+0x3c>
10005a08:	f7ff ff5c 	bl	100058c4 <PalSysAssertTrap>
  
  /* Disable UART interrupts */
  MXC_UART_DisableInt(uart, 0xFFFFFFFF);
10005a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10005a10:	4620      	mov	r0, r4
10005a12:	f001 fe07 	bl	10007624 <MXC_UART_DisableInt>
  MXC_UART_ClearFlags(uart, 0xFFFFFFFF);
10005a16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10005a1a:	4620      	mov	r0, r4
10005a1c:	f001 fe00 	bl	10007620 <MXC_UART_ClearFlags>

  MXC_UART_SetDataSize(uart, 8);
10005a20:	2108      	movs	r1, #8
10005a22:	4620      	mov	r0, r4
10005a24:	f001 fdb0 	bl	10007588 <MXC_UART_SetDataSize>
  MXC_UART_SetStopBits(uart, MXC_UART_STOP_1);
10005a28:	2100      	movs	r1, #0
10005a2a:	4620      	mov	r0, r4
10005a2c:	f001 fdae 	bl	1000758c <MXC_UART_SetStopBits>
  MXC_UART_SetParity(uart, MXC_UART_PARITY_DISABLE);
10005a30:	2100      	movs	r1, #0
10005a32:	4620      	mov	r0, r4
10005a34:	f001 fdac 	bl	10007590 <MXC_UART_SetParity>
  if(pCfg->hwFlow) {
10005a38:	7b2b      	ldrb	r3, [r5, #12]
10005a3a:	b12b      	cbz	r3, 10005a48 <PalUartInit+0x78>
    MXC_UART_SetFlowCtrl(uart, MXC_UART_FLOW_EN_LOW, 1, uartMap);
10005a3c:	2201      	movs	r2, #1
10005a3e:	2300      	movs	r3, #0
10005a40:	4611      	mov	r1, r2
10005a42:	4620      	mov	r0, r4
10005a44:	f001 fda6 	bl	10007594 <MXC_UART_SetFlowCtrl>
  }

  /* Initialize DMA for UART */
  MXC_DMA_Init(MXC_DMA0);
10005a48:	4819      	ldr	r0, [pc, #100]	; (10005ab0 <PalUartInit+0xe0>)
10005a4a:	f000 fd05 	bl	10006458 <MXC_DMA_Init>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
10005a4e:	4b19      	ldr	r3, [pc, #100]	; (10005ab4 <PalUartInit+0xe4>)
10005a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10005a54:	601a      	str	r2, [r3, #0]
10005a56:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
10005a5a:	601a      	str	r2, [r3, #0]
10005a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
10005a60:	601a      	str	r2, [r3, #0]
10005a62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
10005a66:	601a      	str	r2, [r3, #0]
10005a68:	2210      	movs	r2, #16
10005a6a:	609a      	str	r2, [r3, #8]
10005a6c:	2220      	movs	r2, #32
10005a6e:	609a      	str	r2, [r3, #8]
10005a70:	2240      	movs	r2, #64	; 0x40
10005a72:	609a      	str	r2, [r3, #8]
10005a74:	2280      	movs	r2, #128	; 0x80
10005a76:	609a      	str	r2, [r3, #8]
10005a78:	f44f 7280 	mov.w	r2, #256	; 0x100
10005a7c:	609a      	str	r2, [r3, #8]
  NVIC_EnableIRQ(DMA5_IRQn);
  NVIC_EnableIRQ(DMA6_IRQn);
  NVIC_EnableIRQ(DMA7_IRQn);
  NVIC_EnableIRQ(DMA8_IRQn);

  palUartCb[uartNum].state = PAL_UART_STATE_READY;
10005a7e:	2314      	movs	r3, #20
10005a80:	437b      	muls	r3, r7
10005a82:	2201      	movs	r2, #1
10005a84:	54f2      	strb	r2, [r6, r3]
}
10005a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      PAL_SYS_ASSERT(0);
10005a88:	f7ff ff1c 	bl	100058c4 <PalSysAssertTrap>
      PAL_SYS_ASSERT(0);
10005a8c:	f7ff ff1a 	bl	100058c4 <PalSysAssertTrap>
}
10005a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PAL_SYS_ASSERT(0);
10005a94:	f7ff bf16 	b.w	100058c4 <PalSysAssertTrap>
  mxc_uart_regs_t *uart = MXC_UART_GET_UART(uartNum);
10005a98:	4c07      	ldr	r4, [pc, #28]	; (10005ab8 <PalUartInit+0xe8>)
10005a9a:	4b08      	ldr	r3, [pc, #32]	; (10005abc <PalUartInit+0xec>)
10005a9c:	2f01      	cmp	r7, #1
10005a9e:	bf18      	it	ne
10005aa0:	461c      	movne	r4, r3
10005aa2:	e79e      	b.n	100059e2 <PalUartInit+0x12>
10005aa4:	100109c1 	.word	0x100109c1
10005aa8:	40042000 	.word	0x40042000
10005aac:	20000bf4 	.word	0x20000bf4
10005ab0:	40028000 	.word	0x40028000
10005ab4:	e000e100 	.word	0xe000e100
10005ab8:	40043000 	.word	0x40043000
10005abc:	40044000 	.word	0x40044000

10005ac0 <PalUartGetState>:
  switch (uartId) {
10005ac0:	2802      	cmp	r0, #2
 *
 *  Return the current state.
 */
/*************************************************************************************************/
PalUartState_t PalUartGetState(PalUartId_t id)
{
10005ac2:	b508      	push	{r3, lr}
10005ac4:	d806      	bhi.n	10005ad4 <PalUartGetState+0x14>
  return uartNum;
10005ac6:	4b06      	ldr	r3, [pc, #24]	; (10005ae0 <PalUartGetState+0x20>)
10005ac8:	5c1a      	ldrb	r2, [r3, r0]
  if(uartNum < 0) {
    PAL_SYS_ASSERT(0);
    return PAL_UART_STATE_ERROR;
  }

  return palUartCb[uartNum].state;
10005aca:	2314      	movs	r3, #20
10005acc:	4353      	muls	r3, r2
10005ace:	4a05      	ldr	r2, [pc, #20]	; (10005ae4 <PalUartGetState+0x24>)
10005ad0:	5cd0      	ldrb	r0, [r2, r3]
}
10005ad2:	bd08      	pop	{r3, pc}
      PAL_SYS_ASSERT(0);
10005ad4:	f7ff fef6 	bl	100058c4 <PalSysAssertTrap>
    PAL_SYS_ASSERT(0);
10005ad8:	f7ff fef4 	bl	100058c4 <PalSysAssertTrap>
    return PAL_UART_STATE_ERROR;
10005adc:	2000      	movs	r0, #0
10005ade:	e7f8      	b.n	10005ad2 <PalUartGetState+0x12>
10005ae0:	100109c1 	.word	0x100109c1
10005ae4:	20000bf4 	.word	0x20000bf4

10005ae8 <PalUartReadData>:
 *  \a UartInitInfo_t::rdCback to signal read completion. Alway call this function to setup buffer
 *  when boot up or after a reading is done
 */
/*************************************************************************************************/
void PalUartReadData(PalUartId_t id, uint8_t *pData, uint16_t len)
{
10005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10005aec:	2802      	cmp	r0, #2
10005aee:	b08c      	sub	sp, #48	; 0x30
10005af0:	4688      	mov	r8, r1
10005af2:	4617      	mov	r7, r2
10005af4:	d84b      	bhi.n	10005b8e <PalUartReadData+0xa6>
  return uartNum;
10005af6:	4b2e      	ldr	r3, [pc, #184]	; (10005bb0 <PalUartReadData+0xc8>)
10005af8:	5c1d      	ldrb	r5, [r3, r0]
  int uartNum = palUartGetNum(id);
  int dmaCh;
  mxc_uart_regs_t* uart = MXC_UART_GET_UART(uartNum);
10005afa:	2d00      	cmp	r5, #0
10005afc:	d14e      	bne.n	10005b9c <PalUartReadData+0xb4>
10005afe:	4e2d      	ldr	r6, [pc, #180]	; (10005bb4 <PalUartReadData+0xcc>)
    PAL_SYS_ASSERT(0);
    return;
  }

  /* Acquire the DMA channel */
  WsfCsEnter();
10005b00:	f7ff fad2 	bl	100050a8 <WsfCsEnter>
  dmaCh = MXC_DMA_AcquireChannel(MXC_DMA0);
10005b04:	482c      	ldr	r0, [pc, #176]	; (10005bb8 <PalUartReadData+0xd0>)
10005b06:	f000 fcd1 	bl	100064ac <MXC_DMA_AcquireChannel>
10005b0a:	4604      	mov	r4, r0
  WsfCsExit();
10005b0c:	f7ff fae4 	bl	100050d8 <WsfCsExit>

  if((dmaCh < 0) || (dmaCh > 7)) {
10005b10:	2c07      	cmp	r4, #7
10005b12:	d83e      	bhi.n	10005b92 <PalUartReadData+0xaa>
    PAL_SYS_ASSERT(0);
    return;
  }

  /* Save the channel number */
  palUartCb[uartNum].readCh = dmaCh;
10005b14:	4a29      	ldr	r2, [pc, #164]	; (10005bbc <PalUartReadData+0xd4>)

  /* Setup the DMA transfer */
  config.ch = dmaCh;
10005b16:	9408      	str	r4, [sp, #32]
  palUartCb[uartNum].readCh = dmaCh;
10005b18:	2314      	movs	r3, #20
10005b1a:	fb03 2305 	mla	r3, r3, r5, r2
  config.srcinc_en = 0;
  config.dstinc_en = 1;

  srcdst.ch = dmaCh;
  srcdst.dest = (void*)pData;
  srcdst.len = len;
10005b1e:	e9cd 8706 	strd	r8, r7, [sp, #24]
  palUartCb[uartNum].readCh = dmaCh;
10005b22:	611c      	str	r4, [r3, #16]
  config.srcwd = MXC_DMA_WIDTH_BYTE;
10005b24:	2300      	movs	r3, #0
10005b26:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  config.srcinc_en = 0;
10005b2a:	930a      	str	r3, [sp, #40]	; 0x28
  config.dstinc_en = 1;
10005b2c:	2301      	movs	r3, #1

  /* Select the appropriate DMA request type */
  switch (uartNum) {
10005b2e:	429d      	cmp	r5, r3
  config.dstinc_en = 1;
10005b30:	930b      	str	r3, [sp, #44]	; 0x2c
  srcdst.ch = dmaCh;
10005b32:	9404      	str	r4, [sp, #16]
  switch (uartNum) {
10005b34:	d038      	beq.n	10005ba8 <PalUartReadData+0xc0>
10005b36:	2d02      	cmp	r5, #2
10005b38:	d038      	beq.n	10005bac <PalUartReadData+0xc4>
    case 0:
      config.reqsel = MXC_DMA_REQUEST_UART0RX;
10005b3a:	2340      	movs	r3, #64	; 0x40
    case 1:
      config.reqsel = MXC_DMA_REQUEST_UART1RX;
      break;
        
    case 2:
      config.reqsel = MXC_DMA_REQUEST_UART2RX;
10005b3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    default:
      PAL_SYS_ASSERT(0);
      return;
  }

  MXC_DMA_ConfigChannel(config, srcdst);
10005b40:	ab04      	add	r3, sp, #16
10005b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10005b44:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
10005b48:	ab0c      	add	r3, sp, #48	; 0x30
10005b4a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
10005b4e:	f000 fcbd 	bl	100064cc <MXC_DMA_ConfigChannel>
  MXC_DMA_SetCallback(dmaCh, palUartCallback);
10005b52:	491b      	ldr	r1, [pc, #108]	; (10005bc0 <PalUartReadData+0xd8>)
10005b54:	4620      	mov	r0, r4
10005b56:	f000 fcc5 	bl	100064e4 <MXC_DMA_SetCallback>
  MXC_DMA_EnableInt(dmaCh);
10005b5a:	4620      	mov	r0, r4
10005b5c:	f000 fcc6 	bl	100064ec <MXC_DMA_EnableInt>

  MXC_DMA0->ch[dmaCh].cfg |= MXC_F_DMA_CFG_CTZIEN;
10005b60:	0163      	lsls	r3, r4, #5
10005b62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
10005b66:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  uart->dma |= ((1 << MXC_F_UART_DMA_RXDMA_LEVEL_POS) | MXC_F_UART_DMA_RXDMA_EN);

  /* Start the transfer */
  MXC_DMA_Start(dmaCh);
10005b6a:	4620      	mov	r0, r4
  MXC_DMA0->ch[dmaCh].cfg |= MXC_F_DMA_CFG_CTZIEN;
10005b6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
10005b70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
10005b74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  uart->dma |= ((1 << MXC_F_UART_DMA_RXDMA_LEVEL_POS) | MXC_F_UART_DMA_RXDMA_EN);
10005b78:	6a33      	ldr	r3, [r6, #32]
10005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005b7e:	f043 0302 	orr.w	r3, r3, #2
10005b82:	6233      	str	r3, [r6, #32]
}
10005b84:	b00c      	add	sp, #48	; 0x30
10005b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  MXC_DMA_Start(dmaCh);
10005b8a:	f000 bcc1 	b.w	10006510 <MXC_DMA_Start>
      PAL_SYS_ASSERT(0);
10005b8e:	f7ff fe99 	bl	100058c4 <PalSysAssertTrap>
}
10005b92:	b00c      	add	sp, #48	; 0x30
10005b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PAL_SYS_ASSERT(0);
10005b98:	f7ff be94 	b.w	100058c4 <PalSysAssertTrap>
  mxc_uart_regs_t* uart = MXC_UART_GET_UART(uartNum);
10005b9c:	2d01      	cmp	r5, #1
10005b9e:	bf16      	itet	ne
10005ba0:	4e08      	ldrne	r6, [pc, #32]	; (10005bc4 <PalUartReadData+0xdc>)
10005ba2:	4e09      	ldreq	r6, [pc, #36]	; (10005bc8 <PalUartReadData+0xe0>)
10005ba4:	2502      	movne	r5, #2
10005ba6:	e7ab      	b.n	10005b00 <PalUartReadData+0x18>
      config.reqsel = MXC_DMA_REQUEST_UART1RX;
10005ba8:	2350      	movs	r3, #80	; 0x50
10005baa:	e7c7      	b.n	10005b3c <PalUartReadData+0x54>
      config.reqsel = MXC_DMA_REQUEST_UART2RX;
10005bac:	23e0      	movs	r3, #224	; 0xe0
10005bae:	e7c5      	b.n	10005b3c <PalUartReadData+0x54>
10005bb0:	100109c1 	.word	0x100109c1
10005bb4:	40042000 	.word	0x40042000
10005bb8:	40028000 	.word	0x40028000
10005bbc:	20000bf4 	.word	0x20000bf4
10005bc0:	10005971 	.word	0x10005971
10005bc4:	40044000 	.word	0x40044000
10005bc8:	40043000 	.word	0x40043000

10005bcc <PalUartWriteData>:
 *
 *  Assign buffer and length and transmit data.
 */
/*************************************************************************************************/
void PalUartWriteData(PalUartId_t id, const uint8_t *pData, uint16_t len)
{
10005bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10005bd0:	2802      	cmp	r0, #2
10005bd2:	b08c      	sub	sp, #48	; 0x30
10005bd4:	4688      	mov	r8, r1
10005bd6:	4617      	mov	r7, r2
10005bd8:	d84e      	bhi.n	10005c78 <PalUartWriteData+0xac>
  return uartNum;
10005bda:	4b31      	ldr	r3, [pc, #196]	; (10005ca0 <PalUartWriteData+0xd4>)
10005bdc:	5c1d      	ldrb	r5, [r3, r0]
  int uartNum = palUartGetNum(id);
  int dmaCh;
  mxc_uart_regs_t* uart = MXC_UART_GET_UART(uartNum);
10005bde:	2d00      	cmp	r5, #0
10005be0:	d151      	bne.n	10005c86 <PalUartWriteData+0xba>
10005be2:	4e30      	ldr	r6, [pc, #192]	; (10005ca4 <PalUartWriteData+0xd8>)
    PAL_SYS_ASSERT(0);
    return;
  }

  /* Acquire the DMA channel */
  WsfCsEnter();
10005be4:	f7ff fa60 	bl	100050a8 <WsfCsEnter>
  dmaCh = MXC_DMA_AcquireChannel(MXC_DMA0);
10005be8:	482f      	ldr	r0, [pc, #188]	; (10005ca8 <PalUartWriteData+0xdc>)
10005bea:	f000 fc5f 	bl	100064ac <MXC_DMA_AcquireChannel>
10005bee:	4604      	mov	r4, r0
  WsfCsExit();
10005bf0:	f7ff fa72 	bl	100050d8 <WsfCsExit>

  if((dmaCh < 0) || (dmaCh > 7)) {
10005bf4:	2c07      	cmp	r4, #7
10005bf6:	d841      	bhi.n	10005c7c <PalUartWriteData+0xb0>
    PAL_SYS_ASSERT(0);
    return;
  }

  /* Save the channel number */
  palUartCb[uartNum].writeCh = dmaCh;
10005bf8:	4a2c      	ldr	r2, [pc, #176]	; (10005cac <PalUartWriteData+0xe0>)
  palUartCb[uartNum].state = PAL_UART_STATE_BUSY;

  /* Setup the DMA transfer */
  config.ch = dmaCh;
10005bfa:	9408      	str	r4, [sp, #32]
  palUartCb[uartNum].writeCh = dmaCh;
10005bfc:	2314      	movs	r3, #20
10005bfe:	436b      	muls	r3, r5
10005c00:	18d1      	adds	r1, r2, r3

  config.srcinc_en = 1;
  config.dstinc_en = 0;

  srcdst.ch = dmaCh;
  srcdst.source = (void*)pData;
10005c02:	e9cd 4804 	strd	r4, r8, [sp, #16]
  palUartCb[uartNum].writeCh = dmaCh;
10005c06:	60cc      	str	r4, [r1, #12]
  palUartCb[uartNum].state = PAL_UART_STATE_BUSY;
10005c08:	2102      	movs	r1, #2
10005c0a:	54d1      	strb	r1, [r2, r3]
  config.srcinc_en = 1;
10005c0c:	2201      	movs	r2, #1
  config.srcwd = MXC_DMA_WIDTH_BYTE;
10005c0e:	2300      	movs	r3, #0
  srcdst.len = len;

  /* Select the appropriate DMA request type */
  switch (uartNum) {
10005c10:	4295      	cmp	r5, r2
  config.dstinc_en = 0;
10005c12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  config.srcwd = MXC_DMA_WIDTH_BYTE;
10005c16:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  srcdst.len = len;
10005c1a:	9707      	str	r7, [sp, #28]
  switch (uartNum) {
10005c1c:	d039      	beq.n	10005c92 <PalUartWriteData+0xc6>
10005c1e:	428d      	cmp	r5, r1
10005c20:	d03a      	beq.n	10005c98 <PalUartWriteData+0xcc>
    case 0:
      config.reqsel = MXC_DMA_REQUEST_UART0TX;
10005c22:	f44f 7310 	mov.w	r3, #576	; 0x240
    case 1:
      config.reqsel = MXC_DMA_REQUEST_UART1TX;
      break;
        
    case 2:
      config.reqsel = MXC_DMA_REQUEST_UART2TX;
10005c26:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    default:
      PAL_SYS_ASSERT(0);
      return;
  }

  MXC_DMA_ConfigChannel(config, srcdst);
10005c2a:	ab04      	add	r3, sp, #16
10005c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
10005c2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
10005c32:	ab0c      	add	r3, sp, #48	; 0x30
10005c34:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
10005c38:	f000 fc48 	bl	100064cc <MXC_DMA_ConfigChannel>
  MXC_DMA_SetCallback(dmaCh, palUartCallback);
10005c3c:	491c      	ldr	r1, [pc, #112]	; (10005cb0 <PalUartWriteData+0xe4>)
10005c3e:	4620      	mov	r0, r4
10005c40:	f000 fc50 	bl	100064e4 <MXC_DMA_SetCallback>
  MXC_DMA_EnableInt(dmaCh);
10005c44:	4620      	mov	r0, r4
10005c46:	f000 fc51 	bl	100064ec <MXC_DMA_EnableInt>

  MXC_DMA0->ch[dmaCh].cfg |= MXC_F_DMA_CFG_CTZIEN;
10005c4a:	0163      	lsls	r3, r4, #5
10005c4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
10005c50:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  uart->dma |= ((2 << MXC_F_UART_DMA_TXDMA_LEVEL_POS) | MXC_F_UART_DMA_TXDMA_EN);

  /* Start the transfer */
  MXC_DMA_Start(dmaCh);
10005c54:	4620      	mov	r0, r4
  MXC_DMA0->ch[dmaCh].cfg |= MXC_F_DMA_CFG_CTZIEN;
10005c56:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
10005c5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
10005c5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  uart->dma |= ((2 << MXC_F_UART_DMA_TXDMA_LEVEL_POS) | MXC_F_UART_DMA_TXDMA_EN);
10005c62:	6a33      	ldr	r3, [r6, #32]
10005c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
10005c68:	f043 0301 	orr.w	r3, r3, #1
10005c6c:	6233      	str	r3, [r6, #32]
}
10005c6e:	b00c      	add	sp, #48	; 0x30
10005c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  MXC_DMA_Start(dmaCh);
10005c74:	f000 bc4c 	b.w	10006510 <MXC_DMA_Start>
      PAL_SYS_ASSERT(0);
10005c78:	f7ff fe24 	bl	100058c4 <PalSysAssertTrap>
}
10005c7c:	b00c      	add	sp, #48	; 0x30
10005c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PAL_SYS_ASSERT(0);
10005c82:	f7ff be1f 	b.w	100058c4 <PalSysAssertTrap>
  mxc_uart_regs_t* uart = MXC_UART_GET_UART(uartNum);
10005c86:	2d01      	cmp	r5, #1
10005c88:	bf16      	itet	ne
10005c8a:	4e0a      	ldrne	r6, [pc, #40]	; (10005cb4 <PalUartWriteData+0xe8>)
10005c8c:	4e0a      	ldreq	r6, [pc, #40]	; (10005cb8 <PalUartWriteData+0xec>)
10005c8e:	2502      	movne	r5, #2
10005c90:	e7a8      	b.n	10005be4 <PalUartWriteData+0x18>
      config.reqsel = MXC_DMA_REQUEST_UART1TX;
10005c92:	f44f 7314 	mov.w	r3, #592	; 0x250
10005c96:	e7c6      	b.n	10005c26 <PalUartWriteData+0x5a>
      config.reqsel = MXC_DMA_REQUEST_UART2TX;
10005c98:	f44f 7338 	mov.w	r3, #736	; 0x2e0
10005c9c:	e7c3      	b.n	10005c26 <PalUartWriteData+0x5a>
10005c9e:	bf00      	nop
10005ca0:	100109c1 	.word	0x100109c1
10005ca4:	40042000 	.word	0x40042000
10005ca8:	40028000 	.word	0x40028000
10005cac:	20000bf4 	.word	0x20000bf4
10005cb0:	10005971 	.word	0x10005971
10005cb4:	40044000 	.word	0x40044000
10005cb8:	40043000 	.word	0x40043000

10005cbc <Reset_Handler>:
10005cbc:	4842      	ldr	r0, [pc, #264]	; (10005dc8 <HTMR1_IRQHandler+0x4>)
10005cbe:	4685      	mov	sp, r0
10005cc0:	4842      	ldr	r0, [pc, #264]	; (10005dcc <HTMR1_IRQHandler+0x8>)
10005cc2:	4780      	blx	r0
10005cc4:	b980      	cbnz	r0, 10005ce8 <.SKIPRAMINIT>
10005cc6:	4942      	ldr	r1, [pc, #264]	; (10005dd0 <HTMR1_IRQHandler+0xc>)
10005cc8:	4a42      	ldr	r2, [pc, #264]	; (10005dd4 <HTMR1_IRQHandler+0x10>)
10005cca:	4b43      	ldr	r3, [pc, #268]	; (10005dd8 <HTMR1_IRQHandler+0x14>)
10005ccc:	1a9b      	subs	r3, r3, r2
10005cce:	dd03      	ble.n	10005cd8 <Reset_Handler+0x1c>
10005cd0:	3b04      	subs	r3, #4
10005cd2:	58c8      	ldr	r0, [r1, r3]
10005cd4:	50d0      	str	r0, [r2, r3]
10005cd6:	dcfb      	bgt.n	10005cd0 <Reset_Handler+0x14>
10005cd8:	4940      	ldr	r1, [pc, #256]	; (10005ddc <HTMR1_IRQHandler+0x18>)
10005cda:	4a41      	ldr	r2, [pc, #260]	; (10005de0 <HTMR1_IRQHandler+0x1c>)
10005cdc:	2000      	movs	r0, #0
10005cde:	4291      	cmp	r1, r2
10005ce0:	bfbc      	itt	lt
10005ce2:	f841 0b04 	strlt.w	r0, [r1], #4
10005ce6:	e7fa      	blt.n	10005cde <Reset_Handler+0x22>

10005ce8 <.SKIPRAMINIT>:
10005ce8:	483e      	ldr	r0, [pc, #248]	; (10005de4 <HTMR1_IRQHandler+0x20>)
10005cea:	4780      	blx	r0
10005cec:	483e      	ldr	r0, [pc, #248]	; (10005de8 <HTMR1_IRQHandler+0x24>)
10005cee:	4780      	blx	r0
10005cf0:	483e      	ldr	r0, [pc, #248]	; (10005dec <HTMR1_IRQHandler+0x28>)
10005cf2:	4780      	blx	r0

10005cf4 <.SPIN>:
10005cf4:	f7ff fffe 	bl	10005cf4 <.SPIN>
10005cf8:	e7fe      	b.n	10005cf8 <.SPIN+0x4>
10005cfa:	e7fe      	b.n	10005cfa <.SPIN+0x6>

10005cfc <MemManage_Handler>:
10005cfc:	e7fe      	b.n	10005cfc <MemManage_Handler>

10005cfe <BusFault_Handler>:
10005cfe:	e7fe      	b.n	10005cfe <BusFault_Handler>

10005d00 <UsageFault_Handler>:
10005d00:	e7fe      	b.n	10005d00 <UsageFault_Handler>
10005d02:	e7fe      	b.n	10005d02 <UsageFault_Handler+0x2>
10005d04:	e7fe      	b.n	10005d04 <UsageFault_Handler+0x4>

10005d06 <Default_Handler>:
10005d06:	e7fe      	b.n	10005d06 <Default_Handler>

10005d08 <PF_IRQHandler>:
10005d08:	e7fe      	b.n	10005d08 <PF_IRQHandler>

10005d0a <WDT0_IRQHandler>:
10005d0a:	e7fe      	b.n	10005d0a <WDT0_IRQHandler>

10005d0c <USB_IRQHandler>:
10005d0c:	e7fe      	b.n	10005d0c <USB_IRQHandler>

10005d0e <RTC_IRQHandler>:
10005d0e:	e7fe      	b.n	10005d0e <RTC_IRQHandler>

10005d10 <TRNG_IRQHandler>:
10005d10:	e7fe      	b.n	10005d10 <TRNG_IRQHandler>
10005d12:	e7fe      	b.n	10005d12 <TRNG_IRQHandler+0x2>
10005d14:	e7fe      	b.n	10005d14 <TRNG_IRQHandler+0x4>

10005d16 <TMR2_IRQHandler>:
10005d16:	e7fe      	b.n	10005d16 <TMR2_IRQHandler>

10005d18 <TMR3_IRQHandler>:
10005d18:	e7fe      	b.n	10005d18 <TMR3_IRQHandler>

10005d1a <TMR4_IRQHandler>:
10005d1a:	e7fe      	b.n	10005d1a <TMR4_IRQHandler>

10005d1c <TMR5_IRQHandler>:
10005d1c:	e7fe      	b.n	10005d1c <TMR5_IRQHandler>

10005d1e <RSV11_IRQHandler>:
10005d1e:	e7fe      	b.n	10005d1e <RSV11_IRQHandler>

10005d20 <RSV12_IRQHandler>:
10005d20:	e7fe      	b.n	10005d20 <RSV12_IRQHandler>
10005d22:	e7fe      	b.n	10005d22 <RSV12_IRQHandler+0x2>

10005d24 <UART0_IRQHandler>:
10005d24:	e7fe      	b.n	10005d24 <UART0_IRQHandler>

10005d26 <UART1_IRQHandler>:
10005d26:	e7fe      	b.n	10005d26 <UART1_IRQHandler>

10005d28 <SPI1_IRQHandler>:
10005d28:	e7fe      	b.n	10005d28 <SPI1_IRQHandler>

10005d2a <SPI2_IRQHandler>:
10005d2a:	e7fe      	b.n	10005d2a <SPI2_IRQHandler>

10005d2c <RSV18_IRQHandler>:
10005d2c:	e7fe      	b.n	10005d2c <RSV18_IRQHandler>

10005d2e <RSV19_IRQHandler>:
10005d2e:	e7fe      	b.n	10005d2e <RSV19_IRQHandler>

10005d30 <ADC_IRQHandler>:
10005d30:	e7fe      	b.n	10005d30 <ADC_IRQHandler>

10005d32 <RSV21_IRQHandler>:
10005d32:	e7fe      	b.n	10005d32 <RSV21_IRQHandler>

10005d34 <RSV22_IRQHandler>:
10005d34:	e7fe      	b.n	10005d34 <RSV22_IRQHandler>

10005d36 <FLC0_IRQHandler>:
10005d36:	e7fe      	b.n	10005d36 <FLC0_IRQHandler>
10005d38:	e7fe      	b.n	10005d38 <FLC0_IRQHandler+0x2>
10005d3a:	e7fe      	b.n	10005d3a <FLC0_IRQHandler+0x4>

10005d3c <RSV26_IRQHandler>:
10005d3c:	e7fe      	b.n	10005d3c <RSV26_IRQHandler>

10005d3e <TPU_IRQHandler>:
10005d3e:	e7fe      	b.n	10005d3e <TPU_IRQHandler>
10005d40:	e7fe      	b.n	10005d40 <TPU_IRQHandler+0x2>
10005d42:	e7fe      	b.n	10005d42 <TPU_IRQHandler+0x4>
10005d44:	e7fe      	b.n	10005d44 <TPU_IRQHandler+0x6>
10005d46:	e7fe      	b.n	10005d46 <TPU_IRQHandler+0x8>

10005d48 <RSV32_IRQHandler>:
10005d48:	e7fe      	b.n	10005d48 <RSV32_IRQHandler>

10005d4a <RSV33_IRQHandler>:
10005d4a:	e7fe      	b.n	10005d4a <RSV33_IRQHandler>

10005d4c <UART2_IRQHandler>:
10005d4c:	e7fe      	b.n	10005d4c <UART2_IRQHandler>

10005d4e <RSV35_IRQHandler>:
10005d4e:	e7fe      	b.n	10005d4e <RSV35_IRQHandler>
10005d50:	e7fe      	b.n	10005d50 <RSV35_IRQHandler+0x2>

10005d52 <RSV37_IRQHandler>:
10005d52:	e7fe      	b.n	10005d52 <RSV37_IRQHandler>

10005d54 <SPIXFC_IRQHandler>:
10005d54:	e7fe      	b.n	10005d54 <SPIXFC_IRQHandler>
10005d56:	e7fe      	b.n	10005d56 <SPIXFC_IRQHandler+0x2>
10005d58:	e7fe      	b.n	10005d58 <SPIXFC_IRQHandler+0x4>
10005d5a:	e7fe      	b.n	10005d5a <SPIXFC_IRQHandler+0x6>
10005d5c:	e7fe      	b.n	10005d5c <SPIXFC_IRQHandler+0x8>
10005d5e:	e7fe      	b.n	10005d5e <SPIXFC_IRQHandler+0xa>
10005d60:	e7fe      	b.n	10005d60 <SPIXFC_IRQHandler+0xc>
10005d62:	e7fe      	b.n	10005d62 <SPIXFC_IRQHandler+0xe>
10005d64:	e7fe      	b.n	10005d64 <SPIXFC_IRQHandler+0x10>
10005d66:	e7fe      	b.n	10005d66 <SPIXFC_IRQHandler+0x12>
10005d68:	e7fe      	b.n	10005d68 <SPIXFC_IRQHandler+0x14>
10005d6a:	e7fe      	b.n	10005d6a <SPIXFC_IRQHandler+0x16>
10005d6c:	e7fe      	b.n	10005d6c <SPIXFC_IRQHandler+0x18>
10005d6e:	e7fe      	b.n	10005d6e <SPIXFC_IRQHandler+0x1a>
10005d70:	e7fe      	b.n	10005d70 <SPIXFC_IRQHandler+0x1c>
10005d72:	e7fe      	b.n	10005d72 <SPIXFC_IRQHandler+0x1e>

10005d74 <GPIOWAKE_IRQHandler>:
10005d74:	e7fe      	b.n	10005d74 <GPIOWAKE_IRQHandler>

10005d76 <RSV55_IRQHandler>:
10005d76:	e7fe      	b.n	10005d76 <RSV55_IRQHandler>

10005d78 <SPI0_IRQHandler>:
10005d78:	e7fe      	b.n	10005d78 <SPI0_IRQHandler>

10005d7a <WDT1_IRQHandler>:
10005d7a:	e7fe      	b.n	10005d7a <WDT1_IRQHandler>

10005d7c <RSV58_IRQHandler>:
10005d7c:	e7fe      	b.n	10005d7c <RSV58_IRQHandler>

10005d7e <PT_IRQHandler>:
10005d7e:	e7fe      	b.n	10005d7e <PT_IRQHandler>

10005d80 <SDMA0_IRQHandler>:
10005d80:	e7fe      	b.n	10005d80 <SDMA0_IRQHandler>

10005d82 <RSV61_IRQHandler>:
10005d82:	e7fe      	b.n	10005d82 <RSV61_IRQHandler>
10005d84:	e7fe      	b.n	10005d84 <RSV61_IRQHandler+0x2>

10005d86 <RSV63_IRQHandler>:
10005d86:	e7fe      	b.n	10005d86 <RSV63_IRQHandler>

10005d88 <RSV64_IRQHandler>:
10005d88:	e7fe      	b.n	10005d88 <RSV64_IRQHandler>

10005d8a <RSV65_IRQHandler>:
10005d8a:	e7fe      	b.n	10005d8a <RSV65_IRQHandler>

10005d8c <SDHC_IRQHandler>:
10005d8c:	e7fe      	b.n	10005d8c <SDHC_IRQHandler>

10005d8e <OWM_IRQHandler>:
10005d8e:	e7fe      	b.n	10005d8e <OWM_IRQHandler>
10005d90:	e7fe      	b.n	10005d90 <OWM_IRQHandler+0x2>
10005d92:	e7fe      	b.n	10005d92 <OWM_IRQHandler+0x4>
10005d94:	e7fe      	b.n	10005d94 <OWM_IRQHandler+0x6>
10005d96:	e7fe      	b.n	10005d96 <OWM_IRQHandler+0x8>

10005d98 <DMA8_IRQHandler>:
10005d98:	e7fe      	b.n	10005d98 <DMA8_IRQHandler>

10005d9a <DMA9_IRQHandler>:
10005d9a:	e7fe      	b.n	10005d9a <DMA9_IRQHandler>

10005d9c <DMA10_IRQHandler>:
10005d9c:	e7fe      	b.n	10005d9c <DMA10_IRQHandler>

10005d9e <DMA11_IRQHandler>:
10005d9e:	e7fe      	b.n	10005d9e <DMA11_IRQHandler>

10005da0 <DMA12_IRQHandler>:
10005da0:	e7fe      	b.n	10005da0 <DMA12_IRQHandler>

10005da2 <DMA13_IRQHandler>:
10005da2:	e7fe      	b.n	10005da2 <DMA13_IRQHandler>

10005da4 <DMA14_IRQHandler>:
10005da4:	e7fe      	b.n	10005da4 <DMA14_IRQHandler>

10005da6 <DMA15_IRQHandler>:
10005da6:	e7fe      	b.n	10005da6 <DMA15_IRQHandler>

10005da8 <USBDMA_IRQHandler>:
10005da8:	e7fe      	b.n	10005da8 <USBDMA_IRQHandler>

10005daa <WDT2_IRQHandler>:
10005daa:	e7fe      	b.n	10005daa <WDT2_IRQHandler>

10005dac <ECC_IRQHandler>:
10005dac:	e7fe      	b.n	10005dac <ECC_IRQHandler>

10005dae <DVS_IRQHandler>:
10005dae:	e7fe      	b.n	10005dae <DVS_IRQHandler>

10005db0 <SIMO_IRQHandler>:
10005db0:	e7fe      	b.n	10005db0 <SIMO_IRQHandler>

10005db2 <SCA_IRQHandler>:
10005db2:	e7fe      	b.n	10005db2 <SCA_IRQHandler>

10005db4 <AUDIO_IRQHandler>:
10005db4:	e7fe      	b.n	10005db4 <AUDIO_IRQHandler>

10005db6 <FLC1_IRQHandler>:
10005db6:	e7fe      	b.n	10005db6 <FLC1_IRQHandler>

10005db8 <RSV88_IRQHandler>:
10005db8:	e7fe      	b.n	10005db8 <RSV88_IRQHandler>

10005dba <RSV89_IRQHandler>:
10005dba:	e7fe      	b.n	10005dba <RSV89_IRQHandler>

10005dbc <RSV90_IRQHandler>:
10005dbc:	e7fe      	b.n	10005dbc <RSV90_IRQHandler>

10005dbe <RSV91_IRQHandler>:
10005dbe:	e7fe      	b.n	10005dbe <RSV91_IRQHandler>

10005dc0 <RSV92_IRQHandler>:
10005dc0:	e7fe      	b.n	10005dc0 <RSV92_IRQHandler>

10005dc2 <HTMR0_IRQHandler>:
10005dc2:	e7fe      	b.n	10005dc2 <HTMR0_IRQHandler>

10005dc4 <HTMR1_IRQHandler>:
10005dc4:	e7fe      	b.n	10005dc4 <HTMR1_IRQHandler>
10005dc6:	0000      	.short	0x0000
10005dc8:	20020000 	.word	0x20020000
10005dcc:	10005e91 	.word	0x10005e91
10005dd0:	10010e28 	.word	0x10010e28
10005dd4:	20000000 	.word	0x20000000
10005dd8:	20000a58 	.word	0x20000a58
10005ddc:	20000a58 	.word	0x20000a58
10005de0:	20011330 	.word	0x20011330
10005de4:	10005e95 	.word	0x10005e95
10005de8:	100095c5 	.word	0x100095c5
10005dec:	10004289 	.word	0x10004289

10005df0 <_sbrk>:
 */
static char *heap_end = 0;
extern unsigned int __HeapBase;
extern unsigned int __HeapLimit;
caddr_t _sbrk(int incr)
{
10005df0:	b508      	push	{r3, lr}
    char *prev_heap_end;

    if (heap_end == 0) {
10005df2:	4b0a      	ldr	r3, [pc, #40]	; (10005e1c <_sbrk+0x2c>)
10005df4:	6819      	ldr	r1, [r3, #0]
{
10005df6:	4602      	mov	r2, r0
    if (heap_end == 0) {
10005df8:	b909      	cbnz	r1, 10005dfe <_sbrk+0xe>
        heap_end = (caddr_t)&__HeapBase;
10005dfa:	4909      	ldr	r1, [pc, #36]	; (10005e20 <_sbrk+0x30>)
10005dfc:	6019      	str	r1, [r3, #0]
    }
    prev_heap_end = heap_end;
10005dfe:	6818      	ldr	r0, [r3, #0]

    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10005e00:	4908      	ldr	r1, [pc, #32]	; (10005e24 <_sbrk+0x34>)
10005e02:	4402      	add	r2, r0
10005e04:	428a      	cmp	r2, r1
10005e06:	d906      	bls.n	10005e16 <_sbrk+0x26>
        errno = ENOMEM;
10005e08:	f003 fbbc 	bl	10009584 <__errno>
10005e0c:	230c      	movs	r3, #12
10005e0e:	6003      	str	r3, [r0, #0]
        return  (caddr_t) -1;
10005e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    heap_end += incr;

    return (caddr_t) prev_heap_end;
}
10005e14:	bd08      	pop	{r3, pc}
    heap_end += incr;
10005e16:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
10005e18:	e7fc      	b.n	10005e14 <_sbrk+0x24>
10005e1a:	bf00      	nop
10005e1c:	20000c30 	.word	0x20000c30
10005e20:	20011330 	.word	0x20011330
10005e24:	2001f000 	.word	0x2001f000

10005e28 <SystemCoreClockUpdate>:
__weak void SystemCoreClockUpdate(void)
{
    uint32_t base_freq, div, clk_src;

    // Determine the clock source and frequency
    clk_src = (MXC_GCR->clkcn & MXC_F_GCR_CLKCN_CLKSEL);
10005e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
10005e2c:	689b      	ldr	r3, [r3, #8]
10005e2e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
    switch (clk_src)
10005e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
10005e36:	d01c      	beq.n	10005e72 <SystemCoreClockUpdate+0x4a>
10005e38:	d811      	bhi.n	10005e5e <SystemCoreClockUpdate+0x36>
10005e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
10005e3e:	d01a      	beq.n	10005e76 <SystemCoreClockUpdate+0x4e>
10005e40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
            break;
        case MXC_S_GCR_CLKCN_CLKSEL_XTAL32M:
            base_freq = XTAL32M_FREQ;
            break;
        case MXC_S_GCR_CLKCN_CLKSEL_LIRC8:
            base_freq = LIRC8_FREQ;
10005e44:	4b0e      	ldr	r3, [pc, #56]	; (10005e80 <SystemCoreClockUpdate+0x58>)
10005e46:	bf08      	it	eq
10005e48:	f44f 53fa 	moveq.w	r3, #8000	; 0x1f40
	    // Values 001 and 111 are reserved, and should never be encountered.
	    base_freq = HIRC_FREQ;
            break;
    }
    // Clock divider is retrieved to compute system clock
    div = (MXC_GCR->clkcn & MXC_F_GCR_CLKCN_PSC) >> MXC_F_GCR_CLKCN_PSC_POS;
10005e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
10005e50:	6892      	ldr	r2, [r2, #8]
10005e52:	f3c2 1282 	ubfx	r2, r2, #6, #3

    SystemCoreClock = base_freq >> div;
10005e56:	40d3      	lsrs	r3, r2
10005e58:	4a0a      	ldr	r2, [pc, #40]	; (10005e84 <SystemCoreClockUpdate+0x5c>)
10005e5a:	6013      	str	r3, [r2, #0]
}
10005e5c:	4770      	bx	lr
    switch (clk_src)
10005e5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
10005e62:	d00a      	beq.n	10005e7a <SystemCoreClockUpdate+0x52>
10005e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
            base_freq = XTAL32K_FREQ;
10005e68:	4b05      	ldr	r3, [pc, #20]	; (10005e80 <SystemCoreClockUpdate+0x58>)
10005e6a:	bf08      	it	eq
10005e6c:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
10005e70:	e7ec      	b.n	10005e4c <SystemCoreClockUpdate+0x24>
            base_freq = HIRC96_FREQ;
10005e72:	4b05      	ldr	r3, [pc, #20]	; (10005e88 <SystemCoreClockUpdate+0x60>)
10005e74:	e7ea      	b.n	10005e4c <SystemCoreClockUpdate+0x24>
    switch (clk_src)
10005e76:	4b05      	ldr	r3, [pc, #20]	; (10005e8c <SystemCoreClockUpdate+0x64>)
10005e78:	e7e8      	b.n	10005e4c <SystemCoreClockUpdate+0x24>
            base_freq = HIRC8_FREQ;
10005e7a:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
10005e7e:	e7e5      	b.n	10005e4c <SystemCoreClockUpdate+0x24>
10005e80:	03938700 	.word	0x03938700
10005e84:	2000008c 	.word	0x2000008c
10005e88:	05b8d800 	.word	0x05b8d800
10005e8c:	01e84800 	.word	0x01e84800

10005e90 <PreInit>:
 */
__weak int PreInit(void)
{
    // Do nothing
    return 0;
}
10005e90:	2000      	movs	r0, #0
10005e92:	4770      	bx	lr

10005e94 <SystemInit>:
 * You may over-ride this function in your program by defining a custom 
 *  SystemInit(), but care should be taken to reproduce the initialization
 *  steps or a non-functional system may result.
 */
__weak void SystemInit(void)
{
10005e94:	b508      	push	{r3, lr}

    /* Configure the interrupt controller to use the application vector 
     * table in flash. Initially, VTOR points to the ROM's table.
     */
    SCB->VTOR = (unsigned long)&__isr_vector;
10005e96:	4b35      	ldr	r3, [pc, #212]	; (10005f6c <SystemInit+0xd8>)
10005e98:	4a35      	ldr	r2, [pc, #212]	; (10005f70 <SystemInit+0xdc>)
10005e9a:	609a      	str	r2, [r3, #8]

    /* We'd like to switch to the fast clock, but can only do so if the 
     * core's operating voltage (VregO_B) is high enough to support it
     * Otherwise, we need to remain on the slow clock
     */
    if((MXC_SIMO->vrego_b > 48) && (MXC_SIMO->buck_out_ready & 0x2)) {
10005e9c:	4b35      	ldr	r3, [pc, #212]	; (10005f74 <SystemInit+0xe0>)
10005e9e:	689a      	ldr	r2, [r3, #8]
10005ea0:	2a30      	cmp	r2, #48	; 0x30
10005ea2:	d90b      	bls.n	10005ebc <SystemInit+0x28>
10005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005ea6:	0799      	lsls	r1, r3, #30
10005ea8:	d508      	bpl.n	10005ebc <SystemInit+0x28>
        // Switch to fast clock on startup
        MXC_GCR->clkcn &= ~(MXC_S_GCR_CLKCN_PSC_DIV128);
10005eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        MXC_SYS_Clock_Select(MXC_SYS_CLOCK_HIRC96);
10005eae:	2004      	movs	r0, #4
        MXC_GCR->clkcn &= ~(MXC_S_GCR_CLKCN_PSC_DIV128);
10005eb0:	6893      	ldr	r3, [r2, #8]
10005eb2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
10005eb6:	6093      	str	r3, [r2, #8]
        MXC_SYS_Clock_Select(MXC_SYS_CLOCK_HIRC96);
10005eb8:	f000 fa1c 	bl	100062f4 <MXC_SYS_Clock_Select>

    /* Enable FPU on Cortex-M4, which occupies coprocessor slots 10 & 11
     * Grant full access, per "Table B3-24 CPACR bit assignments".
     * DDI0403D "ARMv7-M Architecture Reference Manual"
     */
    SCB->CPACR |= SCB_CPACR_CP10_Msk | SCB_CPACR_CP11_Msk;
10005ebc:	4a2b      	ldr	r2, [pc, #172]	; (10005f6c <SystemInit+0xd8>)
10005ebe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
10005ec2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10005ec6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
10005eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
10005ece:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();

    // Initialize backup mode entry point to safe default value.
    MXC_PWRSEQ->buretvec = (uint32_t)(Reset_Handler) | 1;
10005ed2:	4b29      	ldr	r3, [pc, #164]	; (10005f78 <SystemInit+0xe4>)
10005ed4:	4a29      	ldr	r2, [pc, #164]	; (10005f7c <SystemInit+0xe8>)
10005ed6:	f043 0301 	orr.w	r3, r3, #1
10005eda:	6493      	str	r3, [r2, #72]	; 0x48

    // FIXME Pre-production parts: Enable TME, disable ICache Read Buffer, disable TME
    *(uint32_t *)0x40000c00 = 1;
    *(uint32_t *)0x4000040c = (1<<6);
10005edc:	4b28      	ldr	r3, [pc, #160]	; (10005f80 <SystemInit+0xec>)
10005ede:	2240      	movs	r2, #64	; 0x40
10005ee0:	601a      	str	r2, [r3, #0]
    *(uint32_t *)0x40000c00 = 0;
10005ee2:	2200      	movs	r2, #0
10005ee4:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
10005ee8:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4

    // Flush and enable instruction cache
    MXC_ICC0->invalidate = 1;
10005eec:	f503 3325 	add.w	r3, r3, #168960	; 0x29400
10005ef0:	2201      	movs	r2, #1
10005ef2:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
    while (!(MXC_ICC0->cache_ctrl & MXC_F_ICC_CACHE_CTRL_RDY));
10005ef6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
10005efa:	03d2      	lsls	r2, r2, #15
10005efc:	d5fb      	bpl.n	10005ef6 <SystemInit+0x62>
    MXC_ICC0->cache_ctrl |= MXC_F_ICC_CACHE_CTRL_EN;
10005efe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
10005f02:	f042 0201 	orr.w	r2, r2, #1
10005f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    while (!(MXC_ICC0->cache_ctrl & MXC_F_ICC_CACHE_CTRL_RDY));
10005f0a:	4a1e      	ldr	r2, [pc, #120]	; (10005f84 <SystemInit+0xf0>)
10005f0c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
10005f10:	03db      	lsls	r3, r3, #15
10005f12:	d5fb      	bpl.n	10005f0c <SystemInit+0x78>

    SystemCoreClockUpdate();
10005f14:	f7ff ff88 	bl	10005e28 <SystemCoreClockUpdate>

    // Set all GPIO to 25K pullup mode by default
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
10005f18:	2000      	movs	r0, #0
10005f1a:	f000 f983 	bl	10006224 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
10005f1e:	2001      	movs	r0, #1
10005f20:	f000 f980 	bl	10006224 <MXC_SYS_ClockEnable>
    MXC_GPIO0->vssel |= 0xFFFFFFFF;
10005f24:	4b18      	ldr	r3, [pc, #96]	; (10005f88 <SystemInit+0xf4>)
10005f26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
10005f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10005f2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    MXC_GPIO0->ps |= 0xFFFFFFFF;
10005f32:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
10005f36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    MXC_GPIO0->pad_cfg1 |= 0xFFFFFFFF;
10005f3a:	6e19      	ldr	r1, [r3, #96]	; 0x60
10005f3c:	661a      	str	r2, [r3, #96]	; 0x60
    MXC_GPIO0->pad_cfg2 &= ~(0xFFFFFFFF);
10005f3e:	6e59      	ldr	r1, [r3, #100]	; 0x64
10005f40:	2100      	movs	r1, #0
10005f42:	6659      	str	r1, [r3, #100]	; 0x64
    MXC_GPIO1->vssel |= 0xFFFFFFFF;
10005f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10005f48:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
10005f4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    MXC_GPIO1->ps |= 0xFFFFFFFF;
10005f50:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
10005f54:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    MXC_GPIO1->pad_cfg1 |= 0xFFFFFFFF;
10005f58:	6e18      	ldr	r0, [r3, #96]	; 0x60
10005f5a:	661a      	str	r2, [r3, #96]	; 0x60
    MXC_GPIO1->pad_cfg2 &= ~(0xFFFFFFFF);
10005f5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
10005f5e:	6659      	str	r1, [r3, #100]	; 0x64

    Board_Init();
10005f60:	f7fe fa22 	bl	100043a8 <Board_Init>
	
	PalSysInit();
10005f64:	f7ff fc84 	bl	10005870 <PalSysInit>
}
10005f68:	bd08      	pop	{r3, pc}
10005f6a:	bf00      	nop
10005f6c:	e000ed00 	.word	0xe000ed00
10005f70:	10004000 	.word	0x10004000
10005f74:	40004400 	.word	0x40004400
10005f78:	10005cbd 	.word	0x10005cbd
10005f7c:	40006800 	.word	0x40006800
10005f80:	4000040c 	.word	0x4000040c
10005f84:	4002a000 	.word	0x4002a000
10005f88:	40008000 	.word	0x40008000

10005f8c <MXC_DelayInit>:
    }
}

/* ************************************************************************** */
static void MXC_DelayInit(unsigned long us)
{
10005f8c:	b538      	push	{r3, r4, r5, lr}
    uint32_t starttick, reload, ticks, lastticks;
    
    // Record the current tick value and clear the overflow flag
    starttick = SysTick->VAL;
10005f8e:	4b19      	ldr	r3, [pc, #100]	; (10005ff4 <MXC_DelayInit+0x68>)
    
    // Save the state of control register (and clear the overflow flag)
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10005f90:	4919      	ldr	r1, [pc, #100]	; (10005ff8 <MXC_DelayInit+0x6c>)
    starttick = SysTick->VAL;
10005f92:	689c      	ldr	r4, [r3, #8]
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10005f94:	681a      	ldr	r2, [r3, #0]
10005f96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
10005f9a:	600a      	str	r2, [r1, #0]
    
    // If the SysTick is not running, configure and start it
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk)) {
10005f9c:	681a      	ldr	r2, [r3, #0]
10005f9e:	07d2      	lsls	r2, r2, #31
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10005fa0:	bf5b      	ittet	pl
10005fa2:	f06f 447f 	mvnpl.w	r4, #4278190080	; 0xff000000
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10005fa6:	2205      	movpl	r2, #5
        starttick = SysTick_VAL_CURRENT_Msk;
        reload = SysTick_LOAD_RELOAD_Msk + 1;
    }
    else {
        reload = SysTick->LOAD + 1; // get the current reload value
10005fa8:	685d      	ldrmi	r5, [r3, #4]
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10005faa:	605c      	strpl	r4, [r3, #4]
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
10005fac:	bf5c      	itt	pl
10005fae:	609c      	strpl	r4, [r3, #8]
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10005fb0:	601a      	strpl	r2, [r3, #0]
    }
    
    // Calculate the total number of ticks to delay
    ticks = (uint32_t)(((uint64_t) us * (uint64_t) SystemCoreClock) / 1000000);
10005fb2:	4b12      	ldr	r3, [pc, #72]	; (10005ffc <MXC_DelayInit+0x70>)
10005fb4:	4a12      	ldr	r2, [pc, #72]	; (10006000 <MXC_DelayInit+0x74>)
10005fb6:	6819      	ldr	r1, [r3, #0]
10005fb8:	f04f 0300 	mov.w	r3, #0
10005fbc:	fba0 0101 	umull	r0, r1, r0, r1
        reload = SysTick_LOAD_RELOAD_Msk + 1;
10005fc0:	bf54      	ite	pl
10005fc2:	f04f 7580 	movpl.w	r5, #16777216	; 0x1000000
        reload = SysTick->LOAD + 1; // get the current reload value
10005fc6:	3501      	addmi	r5, #1
    ticks = (uint32_t)(((uint64_t) us * (uint64_t) SystemCoreClock) / 1000000);
10005fc8:	f00a f934 	bl	10010234 <__aeabi_uldivmod>
    
    // How many overflows of the SysTick will occur
    overflows = ticks / reload;
10005fcc:	4a0d      	ldr	r2, [pc, #52]	; (10006004 <MXC_DelayInit+0x78>)
10005fce:	fbb0 f3f5 	udiv	r3, r0, r5
    
    // How many remaining ticks after the last overflow
    lastticks = ticks % reload;
10005fd2:	fb05 0013 	mls	r0, r5, r3, r0
    
    // Check if there will be another overflow due to the current value of the SysTick
    if (lastticks >= starttick) {
10005fd6:	4284      	cmp	r4, r0
    overflows = ticks / reload;
10005fd8:	6013      	str	r3, [r2, #0]
        overflows++;
10005fda:	bf98      	it	ls
10005fdc:	6813      	ldrls	r3, [r2, #0]
10005fde:	490a      	ldr	r1, [pc, #40]	; (10006008 <MXC_DelayInit+0x7c>)
        endtick = reload - (lastticks - starttick);
10005fe0:	bf9c      	itt	ls
10005fe2:	1964      	addls	r4, r4, r5
        overflows++;
10005fe4:	3301      	addls	r3, #1
    }
    else {
        endtick = starttick - lastticks;
10005fe6:	eba4 0400 	sub.w	r4, r4, r0
        overflows++;
10005fea:	bf98      	it	ls
10005fec:	6013      	strls	r3, [r2, #0]
        endtick = starttick - lastticks;
10005fee:	600c      	str	r4, [r1, #0]
    }
}
10005ff0:	bd38      	pop	{r3, r4, r5, pc}
10005ff2:	bf00      	nop
10005ff4:	e000e010 	.word	0xe000e010
10005ff8:	20000c38 	.word	0x20000c38
10005ffc:	2000008c 	.word	0x2000008c
10006000:	000f4240 	.word	0x000f4240
10006004:	20000090 	.word	0x20000090
10006008:	20000c3c 	.word	0x20000c3c

1000600c <MXC_DelayAsync>:

/* ************************************************************************** */
int MXC_DelayAsync(unsigned long us, mxc_delay_complete_t callback)
{
1000600c:	b510      	push	{r4, lr}
    cbFunc = callback;
1000600e:	4a0b      	ldr	r2, [pc, #44]	; (1000603c <MXC_DelayAsync+0x30>)
    
    // Check if timeout currently ongoing
    if (overflows > 0) {
10006010:	4c0b      	ldr	r4, [pc, #44]	; (10006040 <MXC_DelayAsync+0x34>)
    cbFunc = callback;
10006012:	6011      	str	r1, [r2, #0]
    if (overflows > 0) {
10006014:	6822      	ldr	r2, [r4, #0]
10006016:	2a00      	cmp	r2, #0
10006018:	dc0d      	bgt.n	10006036 <MXC_DelayAsync+0x2a>
        return E_BUSY;
    }
    
    // Check if there is nothing to do
    if (us == 0) {
1000601a:	b908      	cbnz	r0, 10006020 <MXC_DelayAsync+0x14>
    // Enable SysTick interrupt if necessary
    if (overflows > 0) {
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
    }
    
    return E_NO_ERROR;
1000601c:	2000      	movs	r0, #0
}
1000601e:	bd10      	pop	{r4, pc}
    MXC_DelayInit(us);
10006020:	f7ff ffb4 	bl	10005f8c <MXC_DelayInit>
    if (overflows > 0) {
10006024:	6823      	ldr	r3, [r4, #0]
10006026:	2b00      	cmp	r3, #0
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
10006028:	bfc1      	itttt	gt
1000602a:	4a06      	ldrgt	r2, [pc, #24]	; (10006044 <MXC_DelayAsync+0x38>)
1000602c:	6813      	ldrgt	r3, [r2, #0]
1000602e:	f043 0302 	orrgt.w	r3, r3, #2
10006032:	6013      	strgt	r3, [r2, #0]
10006034:	e7f2      	b.n	1000601c <MXC_DelayAsync+0x10>
        return E_BUSY;
10006036:	f06f 0005 	mvn.w	r0, #5
1000603a:	e7f0      	b.n	1000601e <MXC_DelayAsync+0x12>
1000603c:	20000c34 	.word	0x20000c34
10006040:	20000090 	.word	0x20000090
10006044:	e000e010 	.word	0xe000e010

10006048 <MXC_DelayAbort>:
    return E_BUSY;
}

/* ************************************************************************** */
void MXC_DelayAbort(void)
{
10006048:	b510      	push	{r4, lr}
    if (cbFunc != NULL) {
1000604a:	4c08      	ldr	r4, [pc, #32]	; (1000606c <MXC_DelayAbort+0x24>)
1000604c:	6823      	ldr	r3, [r4, #0]
1000604e:	b123      	cbz	r3, 1000605a <MXC_DelayAbort+0x12>
        cbFunc(E_ABORT);
10006050:	f06f 000f 	mvn.w	r0, #15
10006054:	4798      	blx	r3
        cbFunc = NULL;
10006056:	2300      	movs	r3, #0
10006058:	6023      	str	r3, [r4, #0]
    }
    
    SysTick->CTRL = ctrl_save;
1000605a:	4b05      	ldr	r3, [pc, #20]	; (10006070 <MXC_DelayAbort+0x28>)
1000605c:	681a      	ldr	r2, [r3, #0]
1000605e:	4b05      	ldr	r3, [pc, #20]	; (10006074 <MXC_DelayAbort+0x2c>)
10006060:	601a      	str	r2, [r3, #0]
    overflows = -1;
10006062:	4b05      	ldr	r3, [pc, #20]	; (10006078 <MXC_DelayAbort+0x30>)
10006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10006068:	601a      	str	r2, [r3, #0]
}
1000606a:	bd10      	pop	{r4, pc}
1000606c:	20000c34 	.word	0x20000c34
10006070:	20000c38 	.word	0x20000c38
10006074:	e000e010 	.word	0xe000e010
10006078:	20000090 	.word	0x20000090

1000607c <MXC_DelayCheck>:
{
1000607c:	b538      	push	{r3, r4, r5, lr}
    if (overflows < 0) {
1000607e:	4b11      	ldr	r3, [pc, #68]	; (100060c4 <MXC_DelayCheck+0x48>)
10006080:	681a      	ldr	r2, [r3, #0]
10006082:	2a00      	cmp	r2, #0
10006084:	da0a      	bge.n	1000609c <MXC_DelayCheck+0x20>
        if (cbFunc != NULL) {
10006086:	4d10      	ldr	r5, [pc, #64]	; (100060c8 <MXC_DelayCheck+0x4c>)
10006088:	682b      	ldr	r3, [r5, #0]
1000608a:	b913      	cbnz	r3, 10006092 <MXC_DelayCheck+0x16>
        return E_NO_ERROR;
1000608c:	2400      	movs	r4, #0
}
1000608e:	4620      	mov	r0, r4
10006090:	bd38      	pop	{r3, r4, r5, pc}
            cbFunc(E_NO_ERROR);
10006092:	2000      	movs	r0, #0
10006094:	4798      	blx	r3
            cbFunc = NULL;
10006096:	2400      	movs	r4, #0
            cbFunc = NULL;
10006098:	602c      	str	r4, [r5, #0]
1000609a:	e7f8      	b.n	1000608e <MXC_DelayCheck+0x12>
    if ((overflows == 0) && (SysTick->VAL <= endtick)) {
1000609c:	681c      	ldr	r4, [r3, #0]
1000609e:	b974      	cbnz	r4, 100060be <MXC_DelayCheck+0x42>
100060a0:	4b0a      	ldr	r3, [pc, #40]	; (100060cc <MXC_DelayCheck+0x50>)
100060a2:	689a      	ldr	r2, [r3, #8]
100060a4:	4b0a      	ldr	r3, [pc, #40]	; (100060d0 <MXC_DelayCheck+0x54>)
100060a6:	681b      	ldr	r3, [r3, #0]
100060a8:	429a      	cmp	r2, r3
100060aa:	d808      	bhi.n	100060be <MXC_DelayCheck+0x42>
        if (cbFunc != NULL) {
100060ac:	4d06      	ldr	r5, [pc, #24]	; (100060c8 <MXC_DelayCheck+0x4c>)
        MXC_DelayAbort();
100060ae:	f7ff ffcb 	bl	10006048 <MXC_DelayAbort>
        if (cbFunc != NULL) {
100060b2:	682b      	ldr	r3, [r5, #0]
100060b4:	2b00      	cmp	r3, #0
100060b6:	d0e9      	beq.n	1000608c <MXC_DelayCheck+0x10>
            cbFunc(E_NO_ERROR);
100060b8:	4620      	mov	r0, r4
100060ba:	4798      	blx	r3
100060bc:	e7ec      	b.n	10006098 <MXC_DelayCheck+0x1c>
    return E_BUSY;
100060be:	f06f 0405 	mvn.w	r4, #5
100060c2:	e7e4      	b.n	1000608e <MXC_DelayCheck+0x12>
100060c4:	20000090 	.word	0x20000090
100060c8:	20000c34 	.word	0x20000c34
100060cc:	e000e010 	.word	0xe000e010
100060d0:	20000c3c 	.word	0x20000c3c

100060d4 <MXC_SYS_GetUSN>:

/* **** Functions **** */

/* ************************************************************************** */
int MXC_SYS_GetUSN(uint8_t *usn, uint8_t *checksum)
{
100060d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100060d8:	4604      	mov	r4, r0
100060da:	b088      	sub	sp, #32
    uint32_t *infoblock = (uint32_t*)MXC_INFO0_MEM_BASE;

    /* Read the USN from the info block */
    MXC_FLC_UnlockInfoBlock(MXC_INFO0_MEM_BASE);
100060dc:	f04f 5084 	mov.w	r0, #276824064	; 0x10800000

    memset(usn, 0, MXC_SYS_USN_CHECKSUM_LEN);
100060e0:	2610      	movs	r6, #16
{
100060e2:	460d      	mov	r5, r1
    MXC_FLC_UnlockInfoBlock(MXC_INFO0_MEM_BASE);
100060e4:	f000 fc36 	bl	10006954 <MXC_FLC_UnlockInfoBlock>
    memset(usn, 0, MXC_SYS_USN_CHECKSUM_LEN);
100060e8:	4632      	mov	r2, r6
100060ea:	2100      	movs	r1, #0
100060ec:	4620      	mov	r0, r4
100060ee:	f003 fb8f 	bl	10009810 <memset>

    usn[0]  = (infoblock[0] & 0x007F8000) >> 15;
100060f2:	f04f 5184 	mov.w	r1, #276824064	; 0x10800000
    usn[1]  = (infoblock[0] & 0x7F800000) >> 23;
    usn[2]  = (infoblock[1] & 0x0000007F) << 1;
100060f6:	4a36      	ldr	r2, [pc, #216]	; (100061d0 <MXC_SYS_GetUSN+0xfc>)
    usn[0]  = (infoblock[0] & 0x007F8000) >> 15;
100060f8:	680b      	ldr	r3, [r1, #0]
    usn[3]  = (infoblock[1] & 0x00007F80) >> 7;
    usn[4]  = (infoblock[1] & 0x007F8000) >> 15;
    usn[5]  = (infoblock[1] & 0x7F800000) >> 23;
    usn[6]  = (infoblock[2] & 0x007F8000) >> 15;
    usn[7]  = (infoblock[2] & 0x7F800000) >> 23;
    usn[8]  = (infoblock[3] & 0x0000007F) << 1;
100060fa:	4f36      	ldr	r7, [pc, #216]	; (100061d4 <MXC_SYS_GetUSN+0x100>)
    usn[0]  = (infoblock[0] & 0x007F8000) >> 15;
100060fc:	0bdb      	lsrs	r3, r3, #15
100060fe:	7023      	strb	r3, [r4, #0]
    usn[1]  = (infoblock[0] & 0x7F800000) >> 23;
10006100:	680b      	ldr	r3, [r1, #0]
10006102:	0ddb      	lsrs	r3, r3, #23
10006104:	7063      	strb	r3, [r4, #1]
    usn[2]  = (infoblock[1] & 0x0000007F) << 1;
10006106:	6813      	ldr	r3, [r2, #0]
10006108:	005b      	lsls	r3, r3, #1
1000610a:	b2db      	uxtb	r3, r3
1000610c:	70a3      	strb	r3, [r4, #2]
    usn[2] |= (infoblock[0] & 0x80000000) >> 31;
1000610e:	6809      	ldr	r1, [r1, #0]
10006110:	ea43 73d1 	orr.w	r3, r3, r1, lsr #31
10006114:	70a3      	strb	r3, [r4, #2]
    usn[3]  = (infoblock[1] & 0x00007F80) >> 7;
10006116:	6813      	ldr	r3, [r2, #0]
10006118:	09db      	lsrs	r3, r3, #7
1000611a:	70e3      	strb	r3, [r4, #3]
    usn[4]  = (infoblock[1] & 0x007F8000) >> 15;
1000611c:	6813      	ldr	r3, [r2, #0]
1000611e:	0bdb      	lsrs	r3, r3, #15
10006120:	7123      	strb	r3, [r4, #4]
    usn[5]  = (infoblock[1] & 0x7F800000) >> 23;
10006122:	6813      	ldr	r3, [r2, #0]
10006124:	0ddb      	lsrs	r3, r3, #23
10006126:	7163      	strb	r3, [r4, #5]
    usn[6]  = (infoblock[2] & 0x007F8000) >> 15;
10006128:	6853      	ldr	r3, [r2, #4]
1000612a:	0bdb      	lsrs	r3, r3, #15
1000612c:	71a3      	strb	r3, [r4, #6]
    usn[7]  = (infoblock[2] & 0x7F800000) >> 23;
1000612e:	6853      	ldr	r3, [r2, #4]
10006130:	0ddb      	lsrs	r3, r3, #23
10006132:	71e3      	strb	r3, [r4, #7]
    usn[8]  = (infoblock[3] & 0x0000007F) << 1;
10006134:	683b      	ldr	r3, [r7, #0]
10006136:	005b      	lsls	r3, r3, #1
10006138:	b2db      	uxtb	r3, r3
    usn[6]  = (infoblock[2] & 0x007F8000) >> 15;
1000613a:	3204      	adds	r2, #4
    usn[8]  = (infoblock[3] & 0x0000007F) << 1;
1000613c:	7223      	strb	r3, [r4, #8]
    usn[8] |= (infoblock[2] & 0x80000000) >> 31;
1000613e:	6812      	ldr	r2, [r2, #0]
10006140:	ea43 73d2 	orr.w	r3, r3, r2, lsr #31
10006144:	7223      	strb	r3, [r4, #8]
    usn[9]  = (infoblock[3] & 0x00007F80) >> 7;
10006146:	683b      	ldr	r3, [r7, #0]
10006148:	09db      	lsrs	r3, r3, #7
1000614a:	7263      	strb	r3, [r4, #9]
    usn[10] = (infoblock[3] & 0x007F8000) >> 15;
1000614c:	683b      	ldr	r3, [r7, #0]
1000614e:	0bdb      	lsrs	r3, r3, #15
10006150:	72a3      	strb	r3, [r4, #10]

    // Compute the checksum
    if(checksum != NULL) {
10006152:	b375      	cbz	r5, 100061b2 <MXC_SYS_GetUSN+0xde>
        uint8_t info_checksum[2];
        uint8_t key[MXC_SYS_USN_CHECKSUM_LEN];

        /* Initialize the remainder of the USN and key */
        memset(key, 0, MXC_SYS_USN_CHECKSUM_LEN);
10006154:	4632      	mov	r2, r6
10006156:	2100      	movs	r1, #0
10006158:	eb0d 0006 	add.w	r0, sp, r6
1000615c:	f003 fb58 	bl	10009810 <memset>
        memset(checksum, 0, MXC_SYS_USN_CHECKSUM_LEN);
10006160:	4632      	mov	r2, r6
10006162:	2100      	movs	r1, #0
10006164:	4628      	mov	r0, r5
10006166:	f003 fb53 	bl	10009810 <memset>

        /* Read the checksum from the info block */
        info_checksum[0] = ((infoblock[3] & 0x7F800000) >> 23);
1000616a:	683b      	ldr	r3, [r7, #0]
1000616c:	f3c3 58c7 	ubfx	r8, r3, #23, #8
        info_checksum[1] = ((infoblock[4] & 0x007F8000) >> 15);
10006170:	4b19      	ldr	r3, [pc, #100]	; (100061d8 <MXC_SYS_GetUSN+0x104>)

        MXC_TPU_Cipher_Config(MXC_TPU_MODE_ECB, MXC_TPU_CIPHER_AES128);
10006172:	2101      	movs	r1, #1
10006174:	2000      	movs	r0, #0
        info_checksum[1] = ((infoblock[4] & 0x007F8000) >> 15);
10006176:	681f      	ldr	r7, [r3, #0]
        MXC_TPU_Cipher_Config(MXC_TPU_MODE_ECB, MXC_TPU_CIPHER_AES128);
10006178:	f001 f876 	bl	10007268 <MXC_TPU_Cipher_Config>
        MXC_TPU_Cipher_AES_Encrypt((const char *)usn, NULL, (const char *)key, MXC_TPU_CIPHER_AES128, MXC_TPU_MODE_ECB, MXC_AES_DATA_LEN, (char*)checksum);
1000617c:	2100      	movs	r1, #0
1000617e:	2301      	movs	r3, #1
10006180:	e9cd 6501 	strd	r6, r5, [sp, #4]
10006184:	9100      	str	r1, [sp, #0]
10006186:	eb0d 0206 	add.w	r2, sp, r6
1000618a:	4620      	mov	r0, r4
1000618c:	f001 f888 	bl	100072a0 <MXC_TPU_Cipher_AES_Encrypt>

        /* Verify the checksum */
        if((checksum[1] != info_checksum[0]) ||
10006190:	786b      	ldrb	r3, [r5, #1]
10006192:	4543      	cmp	r3, r8
        info_checksum[1] = ((infoblock[4] & 0x007F8000) >> 15);
10006194:	f3c7 37c7 	ubfx	r7, r7, #15, #8
        if((checksum[1] != info_checksum[0]) ||
10006198:	d102      	bne.n	100061a0 <MXC_SYS_GetUSN+0xcc>
1000619a:	782b      	ldrb	r3, [r5, #0]
1000619c:	42bb      	cmp	r3, r7
1000619e:	d008      	beq.n	100061b2 <MXC_SYS_GetUSN+0xde>
            (checksum[0] != info_checksum[1])) {

            MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
100061a0:	f04f 5084 	mov.w	r0, #276824064	; 0x10800000
100061a4:	f000 fbe4 	bl	10006970 <MXC_FLC_LockInfoBlock>
            return E_UNKNOWN;
100061a8:	f06f 0007 	mvn.w	r0, #7
    usn[12] = ((infoblock[4] & 0x007F8000) >> 15);

    MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);

    return E_NO_ERROR;
}
100061ac:	b008      	add	sp, #32
100061ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usn[11] = ((infoblock[3] & 0x7F800000) >> 23);
100061b2:	4b08      	ldr	r3, [pc, #32]	; (100061d4 <MXC_SYS_GetUSN+0x100>)
100061b4:	681b      	ldr	r3, [r3, #0]
100061b6:	0ddb      	lsrs	r3, r3, #23
100061b8:	72e3      	strb	r3, [r4, #11]
    usn[12] = ((infoblock[4] & 0x007F8000) >> 15);
100061ba:	4b07      	ldr	r3, [pc, #28]	; (100061d8 <MXC_SYS_GetUSN+0x104>)
100061bc:	681b      	ldr	r3, [r3, #0]
100061be:	0bdb      	lsrs	r3, r3, #15
100061c0:	7323      	strb	r3, [r4, #12]
    MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
100061c2:	f04f 5084 	mov.w	r0, #276824064	; 0x10800000
100061c6:	f000 fbd3 	bl	10006970 <MXC_FLC_LockInfoBlock>
    return E_NO_ERROR;
100061ca:	2000      	movs	r0, #0
100061cc:	e7ee      	b.n	100061ac <MXC_SYS_GetUSN+0xd8>
100061ce:	bf00      	nop
100061d0:	10800004 	.word	0x10800004
100061d4:	1080000c 	.word	0x1080000c
100061d8:	10800010 	.word	0x10800010

100061dc <MXC_SYS_IsClockEnabled>:

/* ************************************************************************** */
int MXC_SYS_IsClockEnabled (mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 for the perckcn1 register. */
    if (clock > 31) {
100061dc:	281f      	cmp	r0, #31
100061de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
        clock -= 32;
100061e2:	bf85      	ittet	hi
100061e4:	3820      	subhi	r0, #32
        return ! (MXC_GCR->perckcn1& (0x1 << clock));
100061e6:	6c9a      	ldrhi	r2, [r3, #72]	; 0x48
    }
    else {
        return ! (MXC_GCR->perckcn0 & (0x1 << clock));
100061e8:	6a5a      	ldrls	r2, [r3, #36]	; 0x24
        return ! (MXC_GCR->perckcn1& (0x1 << clock));
100061ea:	b2c0      	uxtbhi	r0, r0
        return ! (MXC_GCR->perckcn0 & (0x1 << clock));
100061ec:	2301      	movs	r3, #1
100061ee:	fa03 f000 	lsl.w	r0, r3, r0
100061f2:	4210      	tst	r0, r2
100061f4:	bf0c      	ite	eq
100061f6:	4618      	moveq	r0, r3
100061f8:	2000      	movne	r0, #0
    }
}
100061fa:	4770      	bx	lr

100061fc <MXC_SYS_ClockDisable>:

/* ************************************************************************** */
void MXC_SYS_ClockDisable (mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 for the perckcn1 register. */
    if (clock > 31) {
100061fc:	281f      	cmp	r0, #31
100061fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
10006202:	d908      	bls.n	10006216 <MXC_SYS_ClockDisable+0x1a>
        clock -= 32;
10006204:	3820      	subs	r0, #32
        MXC_GCR->perckcn1 |= (0x1 << clock);
10006206:	6c91      	ldr	r1, [r2, #72]	; 0x48
10006208:	b2c0      	uxtb	r0, r0
1000620a:	2301      	movs	r3, #1
1000620c:	fa03 f000 	lsl.w	r0, r3, r0
10006210:	4308      	orrs	r0, r1
10006212:	6490      	str	r0, [r2, #72]	; 0x48
10006214:	4770      	bx	lr
    }
    else {
        MXC_GCR->perckcn0 |= (0x1 << clock);
10006216:	6a51      	ldr	r1, [r2, #36]	; 0x24
10006218:	2301      	movs	r3, #1
1000621a:	fa03 f000 	lsl.w	r0, r3, r0
1000621e:	4308      	orrs	r0, r1
10006220:	6250      	str	r0, [r2, #36]	; 0x24
    }
}
10006222:	4770      	bx	lr

10006224 <MXC_SYS_ClockEnable>:

/* ************************************************************************** */
void MXC_SYS_ClockEnable (mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 for the perckcn1 register. */
    if (clock > 31) {
10006224:	281f      	cmp	r0, #31
10006226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1000622a:	d909      	bls.n	10006240 <MXC_SYS_ClockEnable+0x1c>
        clock -= 32;
1000622c:	3820      	subs	r0, #32
        MXC_GCR->perckcn1 &= ~ (0x1 << clock);
1000622e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10006230:	b2c0      	uxtb	r0, r0
10006232:	2101      	movs	r1, #1
10006234:	fa01 f000 	lsl.w	r0, r1, r0
10006238:	ea22 0000 	bic.w	r0, r2, r0
1000623c:	6498      	str	r0, [r3, #72]	; 0x48
1000623e:	4770      	bx	lr
    }
    else {
        MXC_GCR->perckcn0 &= ~ (0x1 << clock);
10006240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10006242:	2101      	movs	r1, #1
10006244:	fa01 f000 	lsl.w	r0, r1, r0
10006248:	ea22 0000 	bic.w	r0, r2, r0
1000624c:	6258      	str	r0, [r3, #36]	; 0x24
    }
}
1000624e:	4770      	bx	lr

10006250 <MXC_SYS_Clock_Timeout>:
    return E_NO_ERROR;
}

/* ************************************************************************** */
int MXC_SYS_Clock_Timeout(uint32_t ready)
{
10006250:	b538      	push	{r3, r4, r5, lr}
    // Start timeout, wait for ready
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10006252:	2100      	movs	r1, #0
{
10006254:	4604      	mov	r4, r0
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10006256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000625a:	f7ff fed7 	bl	1000600c <MXC_DelayAsync>

    do {
        if (MXC_GCR->clkcn & ready) {
1000625e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
10006262:	68ab      	ldr	r3, [r5, #8]
10006264:	4223      	tst	r3, r4
10006266:	d003      	beq.n	10006270 <MXC_SYS_Clock_Timeout+0x20>
            MXC_DelayAbort();
10006268:	f7ff feee 	bl	10006048 <MXC_DelayAbort>
            return E_NO_ERROR;
1000626c:	2000      	movs	r0, #0
    while (MXC_DelayCheck() == E_BUSY);



    return E_TIME_OUT;
}
1000626e:	bd38      	pop	{r3, r4, r5, pc}
    while (MXC_DelayCheck() == E_BUSY);
10006270:	f7ff ff04 	bl	1000607c <MXC_DelayCheck>
10006274:	3006      	adds	r0, #6
10006276:	d0f4      	beq.n	10006262 <MXC_SYS_Clock_Timeout+0x12>
    return E_TIME_OUT;
10006278:	f06f 0009 	mvn.w	r0, #9
1000627c:	e7f7      	b.n	1000626e <MXC_SYS_Clock_Timeout+0x1e>

1000627e <MXC_SYS_ClockSourceEnable>:
    switch(clock) {
1000627e:	2806      	cmp	r0, #6
10006280:	d805      	bhi.n	1000628e <MXC_SYS_ClockSourceEnable+0x10>
10006282:	e8df f000 	tbb	[pc, r0]
10006286:	041a      	.short	0x041a
10006288:	11073523 	.word	0x11073523
1000628c:	2c          	.byte	0x2c
1000628d:	00          	.byte	0x00
            return E_NO_ERROR;
1000628e:	f06f 0002 	mvn.w	r0, #2
10006292:	4770      	bx	lr
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC96M_EN;
10006294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC96M_RDY);
10006298:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC96M_EN;
1000629c:	6893      	ldr	r3, [r2, #8]
1000629e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
100062a2:	6093      	str	r3, [r2, #8]
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32K_RDY);
100062a4:	f7ff bfd4 	b.w	10006250 <MXC_SYS_Clock_Timeout>
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC8M_EN;
100062a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC8M_RDY);
100062ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC8M_EN;
100062b0:	6893      	ldr	r3, [r2, #8]
100062b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100062b6:	6093      	str	r3, [r2, #8]
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC8M_RDY);
100062b8:	e7f4      	b.n	100062a4 <MXC_SYS_ClockSourceEnable+0x26>
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC_EN;
100062ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC_RDY);
100062be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC_EN;
100062c2:	6893      	ldr	r3, [r2, #8]
100062c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
100062c8:	6093      	str	r3, [r2, #8]
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC_RDY);
100062ca:	e7eb      	b.n	100062a4 <MXC_SYS_ClockSourceEnable+0x26>
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_X32M_EN;
100062cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32M_RDY);
100062d0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_X32M_EN;
100062d4:	6893      	ldr	r3, [r2, #8]
100062d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100062da:	6093      	str	r3, [r2, #8]
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32M_RDY);
100062dc:	e7e2      	b.n	100062a4 <MXC_SYS_ClockSourceEnable+0x26>
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_X32K_EN;
100062de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32K_RDY);
100062e2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
            MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_X32K_EN;
100062e6:	6893      	ldr	r3, [r2, #8]
100062e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100062ec:	6093      	str	r3, [r2, #8]
            return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32K_RDY);
100062ee:	e7d9      	b.n	100062a4 <MXC_SYS_ClockSourceEnable+0x26>
            return E_NO_ERROR;
100062f0:	2000      	movs	r0, #0
}
100062f2:	4770      	bx	lr

100062f4 <MXC_SYS_Clock_Select>:

/* ************************************************************************** */
int MXC_SYS_Clock_Select (mxc_sys_system_clock_t clock)
{
100062f4:	b538      	push	{r3, r4, r5, lr}
    uint32_t current_clock;
    
    // Save the current system clock
    current_clock = MXC_GCR->clkcn & MXC_F_GCR_CLKCN_CLKSEL;
100062f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
100062fa:	689d      	ldr	r5, [r3, #8]
    
    switch (clock) {
100062fc:	2806      	cmp	r0, #6
100062fe:	f200 8090 	bhi.w	10006422 <MXC_SYS_Clock_Select+0x12e>
10006302:	e8df f000 	tbb	[pc, r0]
10006306:	8e44      	.short	0x8e44
10006308:	2e046e58 	.word	0x2e046e58
1000630c:	75          	.byte	0x75
1000630d:	00          	.byte	0x00
        case MXC_SYS_CLOCK_HIRC96:
            // Enable HIRC96 clock
            if(!(MXC_GCR->clkcn & MXC_F_GCR_CLKCN_HIRC96M_EN)) {
1000630e:	689a      	ldr	r2, [r3, #8]
10006310:	0312      	lsls	r2, r2, #12
10006312:	d518      	bpl.n	10006346 <MXC_SYS_Clock_Select+0x52>
                    return E_TIME_OUT;
                }
            }
            
            // Set HIRC96 clock as System Clock
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_HIRC96);
10006314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
10006318:	6893      	ldr	r3, [r2, #8]
1000631a:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
1000631e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
                    return E_TIME_OUT;
                }
            }
            
            // Set HIRC8 clock as System Clock
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_HIRC8);
10006322:	6093      	str	r3, [r2, #8]
        default:
            return E_BAD_PARAM;
    }
    
    // Wait for system clock to be ready
    if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_CKRDY) != E_NO_ERROR) {
10006324:	f44f 5000 	mov.w	r0, #8192	; 0x2000
10006328:	f7ff ff92 	bl	10006250 <MXC_SYS_Clock_Timeout>
1000632c:	4604      	mov	r4, r0
1000632e:	2800      	cmp	r0, #0
10006330:	d074      	beq.n	1000641c <MXC_SYS_Clock_Select+0x128>
    
        // Restore the old system clock if timeout
        MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, current_clock);
10006332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    current_clock = MXC_GCR->clkcn & MXC_F_GCR_CLKCN_CLKSEL;
10006336:	f405 6560 	and.w	r5, r5, #3584	; 0xe00
        MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, current_clock);
1000633a:	6893      	ldr	r3, [r2, #8]
1000633c:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
10006340:	432b      	orrs	r3, r5
10006342:	6093      	str	r3, [r2, #8]
10006344:	e009      	b.n	1000635a <MXC_SYS_Clock_Select+0x66>
                MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC96M_EN;
10006346:	689a      	ldr	r2, [r3, #8]
10006348:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
1000634c:	609a      	str	r2, [r3, #8]
                if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC96M_RDY) != E_NO_ERROR) {
1000634e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
10006352:	f7ff ff7d 	bl	10006250 <MXC_SYS_Clock_Timeout>
10006356:	2800      	cmp	r0, #0
10006358:	d0dc      	beq.n	10006314 <MXC_SYS_Clock_Select+0x20>
        
        return E_TIME_OUT;
1000635a:	f06f 0409 	mvn.w	r4, #9

    // Update the system core clock
    SystemCoreClockUpdate();
    
    return E_NO_ERROR;
}
1000635e:	4620      	mov	r0, r4
10006360:	bd38      	pop	{r3, r4, r5, pc}
            if(!(MXC_GCR->clkcn & MXC_F_GCR_CLKCN_HIRC8M_EN)) {
10006362:	689a      	ldr	r2, [r3, #8]
10006364:	02d4      	lsls	r4, r2, #11
10006366:	d507      	bpl.n	10006378 <MXC_SYS_Clock_Select+0x84>
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_HIRC8);
10006368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1000636c:	6893      	ldr	r3, [r2, #8]
1000636e:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
10006372:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
10006376:	e7d4      	b.n	10006322 <MXC_SYS_Clock_Select+0x2e>
                MXC_GCR->clkcn |=MXC_F_GCR_CLKCN_HIRC8M_EN;
10006378:	689a      	ldr	r2, [r3, #8]
1000637a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
1000637e:	609a      	str	r2, [r3, #8]
                if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC8M_RDY) != E_NO_ERROR) {
10006380:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
10006384:	f7ff ff64 	bl	10006250 <MXC_SYS_Clock_Timeout>
10006388:	2800      	cmp	r0, #0
1000638a:	d0ed      	beq.n	10006368 <MXC_SYS_Clock_Select+0x74>
1000638c:	e7e5      	b.n	1000635a <MXC_SYS_Clock_Select+0x66>
            if(!(MXC_GCR->clkcn & MXC_F_GCR_CLKCN_HIRC_EN)) {
1000638e:	689a      	ldr	r2, [r3, #8]
10006390:	0350      	lsls	r0, r2, #13
10006392:	d505      	bpl.n	100063a0 <MXC_SYS_Clock_Select+0xac>
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_HIRC);
10006394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
10006398:	6893      	ldr	r3, [r2, #8]
1000639a:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
1000639e:	e7c0      	b.n	10006322 <MXC_SYS_Clock_Select+0x2e>
                MXC_GCR->clkcn |=MXC_F_GCR_CLKCN_HIRC_EN;
100063a0:	689a      	ldr	r2, [r3, #8]
100063a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
100063a6:	609a      	str	r2, [r3, #8]
                if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC_RDY) != E_NO_ERROR) {
100063a8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
100063ac:	f7ff ff50 	bl	10006250 <MXC_SYS_Clock_Timeout>
100063b0:	2800      	cmp	r0, #0
100063b2:	d0ef      	beq.n	10006394 <MXC_SYS_Clock_Select+0xa0>
100063b4:	e7d1      	b.n	1000635a <MXC_SYS_Clock_Select+0x66>
            if(!(MXC_GCR->clkcn & MXC_F_GCR_CLKCN_X32M_EN)) {
100063b6:	689a      	ldr	r2, [r3, #8]
100063b8:	03d1      	lsls	r1, r2, #15
100063ba:	d507      	bpl.n	100063cc <MXC_SYS_Clock_Select+0xd8>
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_XTAL32M);
100063bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
100063c0:	6893      	ldr	r3, [r2, #8]
100063c2:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
100063c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100063ca:	e7aa      	b.n	10006322 <MXC_SYS_Clock_Select+0x2e>
                MXC_GCR->clkcn |=MXC_F_GCR_CLKCN_X32M_EN;
100063cc:	689a      	ldr	r2, [r3, #8]
100063ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
100063d2:	609a      	str	r2, [r3, #8]
                if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32M_RDY) != E_NO_ERROR) {
100063d4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
100063d8:	f7ff ff3a 	bl	10006250 <MXC_SYS_Clock_Timeout>
100063dc:	2800      	cmp	r0, #0
100063de:	d0ed      	beq.n	100063bc <MXC_SYS_Clock_Select+0xc8>
100063e0:	e7bb      	b.n	1000635a <MXC_SYS_Clock_Select+0x66>
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_LIRC8);
100063e2:	689a      	ldr	r2, [r3, #8]
100063e4:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
100063e8:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
100063ec:	609a      	str	r2, [r3, #8]
            break;
100063ee:	e799      	b.n	10006324 <MXC_SYS_Clock_Select+0x30>
            if(!(MXC_GCR->clkcn & MXC_F_GCR_CLKCN_X32K_EN)) {
100063f0:	689a      	ldr	r2, [r3, #8]
100063f2:	0392      	lsls	r2, r2, #14
100063f4:	d507      	bpl.n	10006406 <MXC_SYS_Clock_Select+0x112>
            MXC_SETFIELD(MXC_GCR->clkcn, MXC_F_GCR_CLKCN_CLKSEL, MXC_S_GCR_CLKCN_CLKSEL_XTAL32K);
100063f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
100063fa:	6893      	ldr	r3, [r2, #8]
100063fc:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
10006400:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
10006404:	e78d      	b.n	10006322 <MXC_SYS_Clock_Select+0x2e>
                MXC_GCR->clkcn |=MXC_F_GCR_CLKCN_X32K_EN;
10006406:	689a      	ldr	r2, [r3, #8]
10006408:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
1000640c:	609a      	str	r2, [r3, #8]
                if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_X32K_RDY) != E_NO_ERROR) {
1000640e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
10006412:	f7ff ff1d 	bl	10006250 <MXC_SYS_Clock_Timeout>
10006416:	2800      	cmp	r0, #0
10006418:	d0ed      	beq.n	100063f6 <MXC_SYS_Clock_Select+0x102>
1000641a:	e79e      	b.n	1000635a <MXC_SYS_Clock_Select+0x66>
    SystemCoreClockUpdate();
1000641c:	f7ff fd04 	bl	10005e28 <SystemCoreClockUpdate>
    return E_NO_ERROR;
10006420:	e79d      	b.n	1000635e <MXC_SYS_Clock_Select+0x6a>
    current_clock = MXC_GCR->clkcn & MXC_F_GCR_CLKCN_CLKSEL;
10006422:	f06f 0402 	mvn.w	r4, #2
10006426:	e79a      	b.n	1000635e <MXC_SYS_Clock_Select+0x6a>

10006428 <MXC_SYS_Reset_Periph>:

/* ************************************************************************** */
void MXC_SYS_Reset_Periph (mxc_sys_reset_t reset)
{
    /* The mxc_sys_reset_t enum uses enum values that are the offset by 32 for the rstr1 register. */
    if (reset > 31) {
10006428:	281f      	cmp	r0, #31
1000642a:	f04f 0301 	mov.w	r3, #1
1000642e:	d90a      	bls.n	10006446 <MXC_SYS_Reset_Periph+0x1e>
        reset -= 32;
10006430:	3820      	subs	r0, #32
        MXC_GCR->rstr1 = (0x1 << reset);
10006432:	b2c0      	uxtb	r0, r0
10006434:	fa03 f000 	lsl.w	r0, r3, r0
10006438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1000643c:	6458      	str	r0, [r3, #68]	; 0x44
		while (MXC_GCR->rstr1 & (0x1 << reset));
1000643e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10006440:	4210      	tst	r0, r2
10006442:	d1fc      	bne.n	1000643e <MXC_SYS_Reset_Periph+0x16>
10006444:	4770      	bx	lr
    }
    else {
        MXC_GCR->rstr0 = (0x1 << reset);
10006446:	fa03 f000 	lsl.w	r0, r3, r0
1000644a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1000644e:	6058      	str	r0, [r3, #4]
		while (MXC_GCR->rstr0 & (0x1 << reset));
10006450:	685a      	ldr	r2, [r3, #4]
10006452:	4210      	tst	r0, r2
10006454:	d1fc      	bne.n	10006450 <MXC_SYS_Reset_Periph+0x28>
    }
}
10006456:	4770      	bx	lr

10006458 <MXC_DMA_Init>:

     return NULL;
}

int MXC_DMA_Init(mxc_dma_regs_t* dma)
{
10006458:	b538      	push	{r3, r4, r5, lr}
    switch(MXC_DMA_GET_IDX(dma)) {
1000645a:	4b12      	ldr	r3, [pc, #72]	; (100064a4 <MXC_DMA_Init+0x4c>)
1000645c:	4298      	cmp	r0, r3
{
1000645e:	4604      	mov	r4, r0
    switch(MXC_DMA_GET_IDX(dma)) {
10006460:	d10f      	bne.n	10006482 <MXC_DMA_Init+0x2a>
        case 0:
            if(!MXC_SYS_IsClockEnabled(MXC_SYS_PERIPH_CLOCK_DMA)) {
10006462:	2005      	movs	r0, #5
10006464:	f7ff feba 	bl	100061dc <MXC_SYS_IsClockEnabled>
10006468:	4605      	mov	r5, r0
1000646a:	b928      	cbnz	r0, 10006478 <MXC_DMA_Init+0x20>
                MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_DMA);
1000646c:	2005      	movs	r0, #5
1000646e:	f7ff fed9 	bl	10006224 <MXC_SYS_ClockEnable>
                MXC_SYS_Reset_Periph(MXC_SYS_RESET_DMA0);
10006472:	4628      	mov	r0, r5
            }
            break;
        case 1:
            if(!MXC_SYS_IsClockEnabled(MXC_SYS_PERIPH_CLOCK_DMA1)) {
                MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_DMA1);
                MXC_SYS_Reset_Periph(MXC_SYS_RESET_DMA1);
10006474:	f7ff ffd8 	bl	10006428 <MXC_SYS_Reset_Periph>
            break;
        default:
            return E_BAD_PARAM;
    }

    return MXC_DMA_RevA_Init((mxc_dma_reva_regs_t*) dma);
10006478:	4620      	mov	r0, r4
}
1000647a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MXC_DMA_RevA_Init((mxc_dma_reva_regs_t*) dma);
1000647e:	f000 b855 	b.w	1000652c <MXC_DMA_RevA_Init>
    switch(MXC_DMA_GET_IDX(dma)) {
10006482:	4b09      	ldr	r3, [pc, #36]	; (100064a8 <MXC_DMA_Init+0x50>)
10006484:	4298      	cmp	r0, r3
10006486:	d109      	bne.n	1000649c <MXC_DMA_Init+0x44>
            if(!MXC_SYS_IsClockEnabled(MXC_SYS_PERIPH_CLOCK_DMA1)) {
10006488:	2035      	movs	r0, #53	; 0x35
1000648a:	f7ff fea7 	bl	100061dc <MXC_SYS_IsClockEnabled>
1000648e:	2800      	cmp	r0, #0
10006490:	d1f2      	bne.n	10006478 <MXC_DMA_Init+0x20>
                MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_DMA1);
10006492:	2035      	movs	r0, #53	; 0x35
10006494:	f7ff fec6 	bl	10006224 <MXC_SYS_ClockEnable>
                MXC_SYS_Reset_Periph(MXC_SYS_RESET_DMA1);
10006498:	201b      	movs	r0, #27
1000649a:	e7eb      	b.n	10006474 <MXC_DMA_Init+0x1c>
}
1000649c:	f06f 0002 	mvn.w	r0, #2
100064a0:	bd38      	pop	{r3, r4, r5, pc}
100064a2:	bf00      	nop
100064a4:	40028000 	.word	0x40028000
100064a8:	40035000 	.word	0x40035000

100064ac <MXC_DMA_AcquireChannel>:

int MXC_DMA_AcquireChannel(mxc_dma_regs_t* dma)
{
    if(MXC_DMA_GET_IDX(dma) == -1) {
100064ac:	4b05      	ldr	r3, [pc, #20]	; (100064c4 <MXC_DMA_AcquireChannel+0x18>)
100064ae:	4298      	cmp	r0, r3
100064b0:	d003      	beq.n	100064ba <MXC_DMA_AcquireChannel+0xe>
100064b2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
100064b6:	4298      	cmp	r0, r3
100064b8:	d101      	bne.n	100064be <MXC_DMA_AcquireChannel+0x12>
        return E_BAD_PARAM;
    }

    return MXC_DMA_RevA_AcquireChannel((mxc_dma_reva_regs_t*) dma);
100064ba:	f000 b899 	b.w	100065f0 <MXC_DMA_RevA_AcquireChannel>
}
100064be:	f06f 0002 	mvn.w	r0, #2
100064c2:	4770      	bx	lr
100064c4:	40028000 	.word	0x40028000

100064c8 <MXC_DMA_ReleaseChannel>:

int MXC_DMA_ReleaseChannel(int ch)
{
    return MXC_DMA_RevA_ReleaseChannel(ch);
100064c8:	f000 b8dc 	b.w	10006684 <MXC_DMA_RevA_ReleaseChannel>

100064cc <MXC_DMA_ConfigChannel>:
}

int MXC_DMA_ConfigChannel(mxc_dma_config_t config, mxc_dma_srcdst_t srcdst)
{
100064cc:	b410      	push	{r4}
100064ce:	b085      	sub	sp, #20
100064d0:	466c      	mov	r4, sp
100064d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return MXC_DMA_RevA_ConfigChannel(config, srcdst);
100064d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
}
100064da:	b005      	add	sp, #20
100064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MXC_DMA_RevA_ConfigChannel(config, srcdst);
100064e0:	f000 b912 	b.w	10006708 <MXC_DMA_RevA_ConfigChannel>

100064e4 <MXC_DMA_SetCallback>:
    return MXC_DMA_RevA_GetSrcReload(srcdst);
}

int MXC_DMA_SetCallback(int ch, void(*callback)(int, int))
{
    return MXC_DMA_RevA_SetCallback(ch, callback);
100064e4:	f000 b94a 	b.w	1000677c <MXC_DMA_RevA_SetCallback>

100064e8 <MXC_DMA_ChannelClearFlags>:
    return MXC_DMA_RevA_ChannelGetFlags(ch);
}

int MXC_DMA_ChannelClearFlags(int ch, int flags)
{
    return MXC_DMA_RevA_ChannelClearFlags(ch, flags);
100064e8:	f000 b97e 	b.w	100067e8 <MXC_DMA_RevA_ChannelClearFlags>

100064ec <MXC_DMA_EnableInt>:
     if(ch < (MXC_DMA_CHANNELS / MXC_DMA_INSTANCES)) {
100064ec:	2807      	cmp	r0, #7
}

int MXC_DMA_EnableInt(int ch)
{
100064ee:	4601      	mov	r1, r0
     if(ch < (MXC_DMA_CHANNELS / MXC_DMA_INSTANCES)) {
100064f0:	dd07      	ble.n	10006502 <MXC_DMA_EnableInt+0x16>
     else if (ch >= (MXC_DMA_CHANNELS / MXC_DMA_INSTANCES) && ch < MXC_DMA_CHANNELS) {
100064f2:	f1a0 0308 	sub.w	r3, r0, #8
100064f6:	2b07      	cmp	r3, #7
        return MXC_DMA1;
100064f8:	4803      	ldr	r0, [pc, #12]	; (10006508 <MXC_DMA_EnableInt+0x1c>)
100064fa:	bf88      	it	hi
100064fc:	2000      	movhi	r0, #0
    mxc_dma_regs_t* dma = getDMAInstance(ch);
    return MXC_DMA_RevA_EnableInt((mxc_dma_reva_regs_t*) dma, ch);
100064fe:	f000 b94d 	b.w	1000679c <MXC_DMA_RevA_EnableInt>
        return MXC_DMA0;
10006502:	4802      	ldr	r0, [pc, #8]	; (1000650c <MXC_DMA_EnableInt+0x20>)
10006504:	e7fb      	b.n	100064fe <MXC_DMA_EnableInt+0x12>
10006506:	bf00      	nop
10006508:	40035000 	.word	0x40035000
1000650c:	40028000 	.word	0x40028000

10006510 <MXC_DMA_Start>:
    return MXC_DMA_RevA_DisableInt((mxc_dma_reva_regs_t*) dma, ch);
}

int MXC_DMA_Start(int ch)
{
    return MXC_DMA_RevA_Start(ch);
10006510:	f000 b980 	b.w	10006814 <MXC_DMA_RevA_Start>

10006514 <MXC_DMA_Handler>:
    return MXC_DMA_RevA_GetCHRegs(ch);
}

void MXC_DMA_Handler(mxc_dma_regs_t* dma)
{
    if(MXC_DMA_GET_IDX(dma) != -1) {
10006514:	4b04      	ldr	r3, [pc, #16]	; (10006528 <MXC_DMA_Handler+0x14>)
10006516:	4298      	cmp	r0, r3
10006518:	d003      	beq.n	10006522 <MXC_DMA_Handler+0xe>
1000651a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
1000651e:	4298      	cmp	r0, r3
10006520:	d101      	bne.n	10006526 <MXC_DMA_Handler+0x12>
        MXC_DMA_RevA_Handler((mxc_dma_reva_regs_t*) dma);
10006522:	f000 b999 	b.w	10006858 <MXC_DMA_RevA_Handler>
    }
}
10006526:	4770      	bx	lr
10006528:	40028000 	.word	0x40028000

1000652c <MXC_DMA_RevA_Init>:
int MXC_DMA_RevA_Init(mxc_dma_reva_regs_t *dma)
{
    int i, numCh, offset;
#if TARGET_NUM == 32665
    numCh = MXC_DMA_CH_OFFSET;
    offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
1000652c:	4b2b      	ldr	r3, [pc, #172]	; (100065dc <MXC_DMA_RevA_Init+0xb0>)
1000652e:	4298      	cmp	r0, r3
{
10006530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10006534:	4607      	mov	r7, r0
    offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
10006536:	d02c      	beq.n	10006592 <MXC_DMA_RevA_Init+0x66>
10006538:	4e29      	ldr	r6, [pc, #164]	; (100065e0 <MXC_DMA_RevA_Init+0xb4>)
1000653a:	42b0      	cmp	r0, r6
1000653c:	bf0c      	ite	eq
1000653e:	2601      	moveq	r6, #1
10006540:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
#else
    numCh = MXC_DMA_CHANNELS;
    offset = 0;
#endif
    
    if(dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma)]) {
10006544:	4b27      	ldr	r3, [pc, #156]	; (100065e4 <MXC_DMA_RevA_Init+0xb8>)
10006546:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
1000654a:	00f4      	lsls	r4, r6, #3
    if(dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma)]) {
1000654c:	4698      	mov	r8, r3
1000654e:	2a00      	cmp	r2, #0
10006550:	d13e      	bne.n	100065d0 <MXC_DMA_RevA_Init+0xa4>
        return E_BAD_STATE;
    }
    
#ifndef __riscv
        /* Initialize mutex */
        MXC_FreeLock(&dma_lock);
10006552:	4825      	ldr	r0, [pc, #148]	; (100065e8 <MXC_DMA_RevA_Init+0xbc>)
10006554:	f001 fc19 	bl	10007d8a <MXC_FreeLock>
        
        if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10006558:	4823      	ldr	r0, [pc, #140]	; (100065e8 <MXC_DMA_RevA_Init+0xbc>)
1000655a:	2101      	movs	r1, #1
1000655c:	f001 fc07 	bl	10007d6e <MXC_GetLock>
10006560:	4605      	mov	r5, r0
10006562:	bbc0      	cbnz	r0, 100065d6 <MXC_DMA_RevA_Init+0xaa>
            return E_BUSY;
        }
#endif
    
    /* Ensure all channels are disabled at start, clear flags, init handles */
    dma->inten = 0;
10006564:	4b21      	ldr	r3, [pc, #132]	; (100065ec <MXC_DMA_RevA_Init+0xc0>)
10006566:	6038      	str	r0, [r7, #0]
    
    for(i = offset; i < (offset + numCh); i++) {
10006568:	2214      	movs	r2, #20
1000656a:	fb02 3304 	mla	r3, r2, r4, r3
1000656e:	f104 0c08 	add.w	ip, r4, #8
        dma_resource[i].valid = 0;
10006572:	4601      	mov	r1, r0
    for(i = offset; i < (offset + numCh); i++) {
10006574:	4564      	cmp	r4, ip
10006576:	f103 0314 	add.w	r3, r3, #20
1000657a:	d10c      	bne.n	10006596 <MXC_DMA_RevA_Init+0x6a>
        dma_resource[i].regs->status = dma_resource[i].regs->status;
        
        dma_resource[i].cb = NULL;
    }
    
    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma)]++;
1000657c:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
#ifndef __riscv
        MXC_FreeLock(&dma_lock);
10006580:	4819      	ldr	r0, [pc, #100]	; (100065e8 <MXC_DMA_RevA_Init+0xbc>)
    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma)]++;
10006582:	3301      	adds	r3, #1
10006584:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
        MXC_FreeLock(&dma_lock);
10006588:	f001 fbff 	bl	10007d8a <MXC_FreeLock>
#endif
    
    return E_NO_ERROR;
}
1000658c:	4628      	mov	r0, r5
1000658e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
10006592:	2600      	movs	r6, #0
10006594:	e7d6      	b.n	10006544 <MXC_DMA_RevA_Init+0x18>
        dma_resource[i].regs = (mxc_dma_reva_ch_regs_t*) &(dma->ch[(i % numCh)]);
10006596:	4260      	negs	r0, r4
10006598:	f000 0007 	and.w	r0, r0, #7
1000659c:	f004 0207 	and.w	r2, r4, #7
100065a0:	bf58      	it	pl
100065a2:	4242      	negpl	r2, r0
100065a4:	f102 0008 	add.w	r0, r2, #8
100065a8:	eb07 1242 	add.w	r2, r7, r2, lsl #5
100065ac:	eb07 1040 	add.w	r0, r7, r0, lsl #5
        dma_resource[i].id = i;
100065b0:	f843 4c0c 	str.w	r4, [r3, #-12]
        dma_resource[i].regs = (mxc_dma_reva_ch_regs_t*) &(dma->ch[(i % numCh)]);
100065b4:	f843 0c08 	str.w	r0, [r3, #-8]
        dma_resource[i].instance = 0;
100065b8:	e943 1105 	strd	r1, r1, [r3, #-20]
        dma_resource[i].regs->ctrl = 0;
100065bc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        dma_resource[i].regs->status = dma_resource[i].regs->status;
100065c0:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
100065c4:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
    for(i = offset; i < (offset + numCh); i++) {
100065c8:	3401      	adds	r4, #1
        dma_resource[i].cb = NULL;
100065ca:	f843 1c04 	str.w	r1, [r3, #-4]
    for(i = offset; i < (offset + numCh); i++) {
100065ce:	e7d1      	b.n	10006574 <MXC_DMA_RevA_Init+0x48>
        return E_BAD_STATE;
100065d0:	f06f 0506 	mvn.w	r5, #6
100065d4:	e7da      	b.n	1000658c <MXC_DMA_RevA_Init+0x60>
            return E_BUSY;
100065d6:	f06f 0505 	mvn.w	r5, #5
100065da:	e7d7      	b.n	1000658c <MXC_DMA_RevA_Init+0x60>
100065dc:	40028000 	.word	0x40028000
100065e0:	40035000 	.word	0x40035000
100065e4:	20000c40 	.word	0x20000c40
100065e8:	20000c48 	.word	0x20000c48
100065ec:	20000c4c 	.word	0x20000c4c

100065f0 <MXC_DMA_RevA_AcquireChannel>:

int MXC_DMA_RevA_AcquireChannel(mxc_dma_reva_regs_t* dma)
{
100065f0:	b538      	push	{r3, r4, r5, lr}
    int i, channel, numCh, offset;
    
    /* Check for initialization */
    if(!dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma)]) {
100065f2:	4b20      	ldr	r3, [pc, #128]	; (10006674 <MXC_DMA_RevA_AcquireChannel+0x84>)
100065f4:	4298      	cmp	r0, r3
100065f6:	d022      	beq.n	1000663e <MXC_DMA_RevA_AcquireChannel+0x4e>
100065f8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
100065fc:	4298      	cmp	r0, r3
100065fe:	bf0c      	ite	eq
10006600:	2301      	moveq	r3, #1
10006602:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
10006606:	4a1c      	ldr	r2, [pc, #112]	; (10006678 <MXC_DMA_RevA_AcquireChannel+0x88>)
10006608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000660c:	b363      	cbz	r3, 10006668 <MXC_DMA_RevA_AcquireChannel+0x78>
        return E_BAD_STATE;
    }
    
#if TARGET_NUM == 32665
    numCh = MXC_DMA_CH_OFFSET;
    offset = MXC_DMA_CH_OFFSET * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
1000660e:	4b19      	ldr	r3, [pc, #100]	; (10006674 <MXC_DMA_RevA_AcquireChannel+0x84>)
10006610:	4298      	cmp	r0, r3
10006612:	d016      	beq.n	10006642 <MXC_DMA_RevA_AcquireChannel+0x52>
10006614:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
10006618:	4298      	cmp	r0, r3
1000661a:	bf0c      	ite	eq
1000661c:	2408      	moveq	r4, #8
1000661e:	f06f 0407 	mvnne.w	r4, #7
    offset = 0;
#endif

#ifndef __riscv
    /* If DMA is locked return busy */
    if(MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10006622:	4816      	ldr	r0, [pc, #88]	; (1000667c <MXC_DMA_RevA_AcquireChannel+0x8c>)
10006624:	2101      	movs	r1, #1
10006626:	f001 fba2 	bl	10007d6e <MXC_GetLock>
1000662a:	bb00      	cbnz	r0, 1000666e <MXC_DMA_RevA_AcquireChannel+0x7e>
#endif
    /* Default is no channel available */
    channel = E_NONE_AVAIL;
    
    for(i = offset; i < (offset + numCh); i++) {
        if(!dma_resource[i].valid) {
1000662c:	4b14      	ldr	r3, [pc, #80]	; (10006680 <MXC_DMA_RevA_AcquireChannel+0x90>)
1000662e:	f104 0008 	add.w	r0, r4, #8
10006632:	2514      	movs	r5, #20
    for(i = offset; i < (offset + numCh); i++) {
10006634:	4284      	cmp	r4, r0
10006636:	d106      	bne.n	10006646 <MXC_DMA_RevA_AcquireChannel+0x56>
    channel = E_NONE_AVAIL;
10006638:	f06f 040d 	mvn.w	r4, #13
1000663c:	e00d      	b.n	1000665a <MXC_DMA_RevA_AcquireChannel+0x6a>
    if(!dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma)]) {
1000663e:	2300      	movs	r3, #0
10006640:	e7e1      	b.n	10006606 <MXC_DMA_RevA_AcquireChannel+0x16>
    offset = MXC_DMA_CH_OFFSET * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
10006642:	2400      	movs	r4, #0
10006644:	e7ed      	b.n	10006622 <MXC_DMA_RevA_AcquireChannel+0x32>
        if(!dma_resource[i].valid) {
10006646:	fb05 f104 	mul.w	r1, r5, r4
1000664a:	58ca      	ldr	r2, [r1, r3]
1000664c:	b952      	cbnz	r2, 10006664 <MXC_DMA_RevA_AcquireChannel+0x74>
            /* Found one */
            channel = i;
            dma_resource[i].valid = 1;
1000664e:	1858      	adds	r0, r3, r1
10006650:	2501      	movs	r5, #1
10006652:	505d      	str	r5, [r3, r1]
            dma_resource[i].regs->ctrl = 0;
10006654:	68c3      	ldr	r3, [r0, #12]
10006656:	601a      	str	r2, [r3, #0]
            dma_resource[i].regs->cntrld = 0; /* Used by DMA_Start() to conditionally set RLDEN */
10006658:	61da      	str	r2, [r3, #28]
            break;
        }
    }
#ifndef __riscv
    MXC_FreeLock(&dma_lock);
1000665a:	4808      	ldr	r0, [pc, #32]	; (1000667c <MXC_DMA_RevA_AcquireChannel+0x8c>)
1000665c:	f001 fb95 	bl	10007d8a <MXC_FreeLock>
#endif

    return channel;
}
10006660:	4620      	mov	r0, r4
10006662:	bd38      	pop	{r3, r4, r5, pc}
    for(i = offset; i < (offset + numCh); i++) {
10006664:	3401      	adds	r4, #1
10006666:	e7e5      	b.n	10006634 <MXC_DMA_RevA_AcquireChannel+0x44>
        return E_BAD_STATE;
10006668:	f06f 0406 	mvn.w	r4, #6
1000666c:	e7f8      	b.n	10006660 <MXC_DMA_RevA_AcquireChannel+0x70>
        return E_BUSY;
1000666e:	f06f 0405 	mvn.w	r4, #5
10006672:	e7f5      	b.n	10006660 <MXC_DMA_RevA_AcquireChannel+0x70>
10006674:	40028000 	.word	0x40028000
10006678:	20000c40 	.word	0x20000c40
1000667c:	20000c48 	.word	0x20000c48
10006680:	20000c4c 	.word	0x20000c4c

10006684 <MXC_DMA_RevA_ReleaseChannel>:

int MXC_DMA_RevA_ReleaseChannel(int ch)
{
    if(CHECK_HANDLE(ch)) {
10006684:	280f      	cmp	r0, #15
{
10006686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(CHECK_HANDLE(ch)) {
10006688:	d816      	bhi.n	100066b8 <MXC_DMA_RevA_ReleaseChannel+0x34>
1000668a:	2314      	movs	r3, #20
1000668c:	4e0d      	ldr	r6, [pc, #52]	; (100066c4 <MXC_DMA_RevA_ReleaseChannel+0x40>)
1000668e:	fb03 f500 	mul.w	r5, r3, r0
10006692:	1977      	adds	r7, r6, r5
10006694:	5973      	ldr	r3, [r6, r5]
10006696:	b17b      	cbz	r3, 100066b8 <MXC_DMA_RevA_ReleaseChannel+0x34>
        if(MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10006698:	480b      	ldr	r0, [pc, #44]	; (100066c8 <MXC_DMA_RevA_ReleaseChannel+0x44>)
1000669a:	2101      	movs	r1, #1
1000669c:	f001 fb67 	bl	10007d6e <MXC_GetLock>
100066a0:	4604      	mov	r4, r0
100066a2:	b960      	cbnz	r0, 100066be <MXC_DMA_RevA_ReleaseChannel+0x3a>
            return E_BUSY;
        }
        
        dma_resource[ch].valid = 0;
        dma_resource[ch].regs->ctrl = 0;
100066a4:	68fb      	ldr	r3, [r7, #12]
        dma_resource[ch].valid = 0;
100066a6:	5170      	str	r0, [r6, r5]
        dma_resource[ch].regs->ctrl = 0;
100066a8:	6018      	str	r0, [r3, #0]
        dma_resource[ch].regs->status = dma_resource[ch].regs->status;
100066aa:	685a      	ldr	r2, [r3, #4]
        MXC_FreeLock(&dma_lock);
100066ac:	4806      	ldr	r0, [pc, #24]	; (100066c8 <MXC_DMA_RevA_ReleaseChannel+0x44>)
        dma_resource[ch].regs->status = dma_resource[ch].regs->status;
100066ae:	605a      	str	r2, [r3, #4]
        MXC_FreeLock(&dma_lock);
100066b0:	f001 fb6b 	bl	10007d8a <MXC_FreeLock>
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
}
100066b4:	4620      	mov	r0, r4
100066b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return E_BAD_PARAM;
100066b8:	f06f 0402 	mvn.w	r4, #2
100066bc:	e7fa      	b.n	100066b4 <MXC_DMA_RevA_ReleaseChannel+0x30>
            return E_BUSY;
100066be:	f06f 0405 	mvn.w	r4, #5
100066c2:	e7f7      	b.n	100066b4 <MXC_DMA_RevA_ReleaseChannel+0x30>
100066c4:	20000c4c 	.word	0x20000c4c
100066c8:	20000c48 	.word	0x20000c48

100066cc <MXC_DMA_RevA_SetSrcDst>:
    return E_NO_ERROR;
}


int MXC_DMA_RevA_SetSrcDst(mxc_dma_srcdst_t srcdst)
{
100066cc:	b084      	sub	sp, #16
100066ce:	f10d 0c10 	add.w	ip, sp, #16
100066d2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
100066d6:	9900      	ldr	r1, [sp, #0]
    if(CHECK_HANDLE(srcdst.ch)) {
100066d8:	290f      	cmp	r1, #15
100066da:	d80f      	bhi.n	100066fc <MXC_DMA_RevA_SetSrcDst+0x30>
100066dc:	2314      	movs	r3, #20
100066de:	4a09      	ldr	r2, [pc, #36]	; (10006704 <MXC_DMA_RevA_SetSrcDst+0x38>)
100066e0:	434b      	muls	r3, r1
100066e2:	18d1      	adds	r1, r2, r3
100066e4:	58d3      	ldr	r3, [r2, r3]
100066e6:	b14b      	cbz	r3, 100066fc <MXC_DMA_RevA_SetSrcDst+0x30>
        dma_resource[srcdst.ch].regs->src = (unsigned int) srcdst.source;
100066e8:	68cb      	ldr	r3, [r1, #12]
100066ea:	9a01      	ldr	r2, [sp, #4]
100066ec:	609a      	str	r2, [r3, #8]
        dma_resource[srcdst.ch].regs->dst = (unsigned int) srcdst.dest;
100066ee:	9a02      	ldr	r2, [sp, #8]
100066f0:	60da      	str	r2, [r3, #12]
        dma_resource[srcdst.ch].regs->cnt = srcdst.len;
100066f2:	9a03      	ldr	r2, [sp, #12]
100066f4:	611a      	str	r2, [r3, #16]
    }
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
100066f6:	2000      	movs	r0, #0
}
100066f8:	b004      	add	sp, #16
100066fa:	4770      	bx	lr
        return E_BAD_PARAM;
100066fc:	f06f 0002 	mvn.w	r0, #2
10006700:	e7fa      	b.n	100066f8 <MXC_DMA_RevA_SetSrcDst+0x2c>
10006702:	bf00      	nop
10006704:	20000c4c 	.word	0x20000c4c

10006708 <MXC_DMA_RevA_ConfigChannel>:
{
10006708:	b410      	push	{r4}
1000670a:	b085      	sub	sp, #20
1000670c:	ac04      	add	r4, sp, #16
1000670e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
10006712:	9b00      	ldr	r3, [sp, #0]
    if(CHECK_HANDLE(config.ch)) {
10006714:	2b0f      	cmp	r3, #15
10006716:	d828      	bhi.n	1000676a <MXC_DMA_RevA_ConfigChannel+0x62>
10006718:	2114      	movs	r1, #20
1000671a:	4a17      	ldr	r2, [pc, #92]	; (10006778 <MXC_DMA_RevA_ConfigChannel+0x70>)
1000671c:	4359      	muls	r1, r3
1000671e:	5853      	ldr	r3, [r2, r1]
10006720:	b31b      	cbz	r3, 1000676a <MXC_DMA_RevA_ConfigChannel+0x62>
             ((config.srcinc_en ? MXC_F_DMA_REVA_CTRL_SRCINC : 0)   |
10006722:	9b02      	ldr	r3, [sp, #8]
10006724:	2b00      	cmp	r3, #0
              (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0)   |
10006726:	9b03      	ldr	r3, [sp, #12]
             ((config.srcinc_en ? MXC_F_DMA_REVA_CTRL_SRCINC : 0)   |
10006728:	bf14      	ite	ne
1000672a:	f44f 2480 	movne.w	r4, #262144	; 0x40000
1000672e:	2400      	moveq	r4, #0
              (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0)   |
10006730:	2b00      	cmp	r3, #0
              (config.dstwd << MXC_F_DMA_REVA_CTRL_DSTWD_POS));
10006732:	f89d 3007 	ldrb.w	r3, [sp, #7]
        dma_resource[config.ch].regs->ctrl =
10006736:	440a      	add	r2, r1
              (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10006738:	f89d 1006 	ldrb.w	r1, [sp, #6]
        dma_resource[config.ch].regs->ctrl =
1000673c:	68d2      	ldr	r2, [r2, #12]
              (config.dstwd << MXC_F_DMA_REVA_CTRL_DSTWD_POS));
1000673e:	ea4f 5303 	mov.w	r3, r3, lsl #20
              (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10006742:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              config.reqsel |
10006746:	f8bd 1004 	ldrh.w	r1, [sp, #4]
              (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
1000674a:	ea43 0301 	orr.w	r3, r3, r1
              (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0)   |
1000674e:	bf14      	ite	ne
10006750:	f44f 0080 	movne.w	r0, #4194304	; 0x400000
10006754:	2000      	moveq	r0, #0
              (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10006756:	4323      	orrs	r3, r4
10006758:	4303      	orrs	r3, r0
        dma_resource[config.ch].regs->ctrl =
1000675a:	6013      	str	r3, [r2, #0]
    return MXC_DMA_RevA_SetSrcDst(srcdst);
1000675c:	ab06      	add	r3, sp, #24
1000675e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
}
10006760:	b005      	add	sp, #20
10006762:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MXC_DMA_RevA_SetSrcDst(srcdst);
10006766:	f7ff bfb1 	b.w	100066cc <MXC_DMA_RevA_SetSrcDst>
}
1000676a:	f06f 0002 	mvn.w	r0, #2
1000676e:	b005      	add	sp, #20
10006770:	f85d 4b04 	ldr.w	r4, [sp], #4
10006774:	4770      	bx	lr
10006776:	bf00      	nop
10006778:	20000c4c 	.word	0x20000c4c

1000677c <MXC_DMA_RevA_SetCallback>:
}


int MXC_DMA_RevA_SetCallback(int ch, void(*callback)(int, int))
{
    if(CHECK_HANDLE(ch)) {
1000677c:	280f      	cmp	r0, #15
1000677e:	d808      	bhi.n	10006792 <MXC_DMA_RevA_SetCallback+0x16>
10006780:	2314      	movs	r3, #20
10006782:	4a05      	ldr	r2, [pc, #20]	; (10006798 <MXC_DMA_RevA_SetCallback+0x1c>)
10006784:	4358      	muls	r0, r3
10006786:	1813      	adds	r3, r2, r0
10006788:	5812      	ldr	r2, [r2, r0]
1000678a:	b112      	cbz	r2, 10006792 <MXC_DMA_RevA_SetCallback+0x16>
        /* Callback for interrupt handler, no checking is done, as NULL is valid for(none)  */
        dma_resource[ch].cb = callback;
1000678c:	6119      	str	r1, [r3, #16]
    }
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
1000678e:	2000      	movs	r0, #0
10006790:	4770      	bx	lr
        return E_BAD_PARAM;
10006792:	f06f 0002 	mvn.w	r0, #2
}
10006796:	4770      	bx	lr
10006798:	20000c4c 	.word	0x20000c4c

1000679c <MXC_DMA_RevA_EnableInt>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_EnableInt(mxc_dma_reva_regs_t *dma, int ch)
{
    if(CHECK_HANDLE(ch)) {
1000679c:	290f      	cmp	r1, #15
1000679e:	d80e      	bhi.n	100067be <MXC_DMA_RevA_EnableInt+0x22>
100067a0:	2314      	movs	r3, #20
100067a2:	4a08      	ldr	r2, [pc, #32]	; (100067c4 <MXC_DMA_RevA_EnableInt+0x28>)
100067a4:	434b      	muls	r3, r1
100067a6:	58d3      	ldr	r3, [r2, r3]
100067a8:	b14b      	cbz	r3, 100067be <MXC_DMA_RevA_EnableInt+0x22>
      #if TARGET_NUM == 32665
        ch %= MXC_DMA_CH_OFFSET;
      #endif
    	dma->inten |= (1 << ch);
100067aa:	6802      	ldr	r2, [r0, #0]
100067ac:	2301      	movs	r3, #1
        ch %= MXC_DMA_CH_OFFSET;
100067ae:	f001 0107 	and.w	r1, r1, #7
    	dma->inten |= (1 << ch);
100067b2:	fa03 f101 	lsl.w	r1, r3, r1
100067b6:	4311      	orrs	r1, r2
100067b8:	6001      	str	r1, [r0, #0]
    }
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
100067ba:	2000      	movs	r0, #0
100067bc:	4770      	bx	lr
        return E_BAD_PARAM;
100067be:	f06f 0002 	mvn.w	r0, #2
}
100067c2:	4770      	bx	lr
100067c4:	20000c4c 	.word	0x20000c4c

100067c8 <MXC_DMA_RevA_ChannelGetFlags>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_ChannelGetFlags(int ch)
{
    if(CHECK_HANDLE(ch)) {
100067c8:	280f      	cmp	r0, #15
100067ca:	d808      	bhi.n	100067de <MXC_DMA_RevA_ChannelGetFlags+0x16>
100067cc:	2314      	movs	r3, #20
100067ce:	4a05      	ldr	r2, [pc, #20]	; (100067e4 <MXC_DMA_RevA_ChannelGetFlags+0x1c>)
100067d0:	4358      	muls	r0, r3
100067d2:	1813      	adds	r3, r2, r0
100067d4:	5812      	ldr	r2, [r2, r0]
100067d6:	b112      	cbz	r2, 100067de <MXC_DMA_RevA_ChannelGetFlags+0x16>
        return dma_resource[ch].regs->status;
100067d8:	68db      	ldr	r3, [r3, #12]
100067da:	6858      	ldr	r0, [r3, #4]
100067dc:	4770      	bx	lr
    }
    else {
        return E_BAD_PARAM;
100067de:	f06f 0002 	mvn.w	r0, #2
    }
    
    return E_NO_ERROR;
}
100067e2:	4770      	bx	lr
100067e4:	20000c4c 	.word	0x20000c4c

100067e8 <MXC_DMA_RevA_ChannelClearFlags>:

int MXC_DMA_RevA_ChannelClearFlags(int ch, int flags)
{
    if(CHECK_HANDLE(ch)) {
100067e8:	280f      	cmp	r0, #15
100067ea:	d80d      	bhi.n	10006808 <MXC_DMA_RevA_ChannelClearFlags+0x20>
100067ec:	2314      	movs	r3, #20
100067ee:	4a08      	ldr	r2, [pc, #32]	; (10006810 <MXC_DMA_RevA_ChannelClearFlags+0x28>)
100067f0:	4358      	muls	r0, r3
100067f2:	1813      	adds	r3, r2, r0
100067f4:	5812      	ldr	r2, [r2, r0]
100067f6:	b13a      	cbz	r2, 10006808 <MXC_DMA_RevA_ChannelClearFlags+0x20>
        dma_resource[ch].regs->status |= (flags & 0x5F);  // Mask for Interrupt flags 
100067f8:	68db      	ldr	r3, [r3, #12]
100067fa:	685a      	ldr	r2, [r3, #4]
100067fc:	f001 015f 	and.w	r1, r1, #95	; 0x5f
10006800:	4311      	orrs	r1, r2
10006802:	6059      	str	r1, [r3, #4]
    }
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
10006804:	2000      	movs	r0, #0
10006806:	4770      	bx	lr
        return E_BAD_PARAM;
10006808:	f06f 0002 	mvn.w	r0, #2
}
1000680c:	4770      	bx	lr
1000680e:	bf00      	nop
10006810:	20000c4c 	.word	0x20000c4c

10006814 <MXC_DMA_RevA_Start>:

int MXC_DMA_RevA_Start(int ch)
{
    if(CHECK_HANDLE(ch)) {
10006814:	280f      	cmp	r0, #15
{
10006816:	b538      	push	{r3, r4, r5, lr}
10006818:	4604      	mov	r4, r0
    if(CHECK_HANDLE(ch)) {
1000681a:	d818      	bhi.n	1000684e <MXC_DMA_RevA_Start+0x3a>
1000681c:	2314      	movs	r3, #20
1000681e:	4a0d      	ldr	r2, [pc, #52]	; (10006854 <MXC_DMA_RevA_Start+0x40>)
10006820:	4343      	muls	r3, r0
10006822:	18d5      	adds	r5, r2, r3
10006824:	58d3      	ldr	r3, [r2, r3]
10006826:	b193      	cbz	r3, 1000684e <MXC_DMA_RevA_Start+0x3a>
        MXC_DMA_ChannelClearFlags(ch, MXC_DMA_RevA_ChannelGetFlags(ch));
10006828:	f7ff ffce 	bl	100067c8 <MXC_DMA_RevA_ChannelGetFlags>
1000682c:	4601      	mov	r1, r0
1000682e:	4620      	mov	r0, r4
10006830:	f7ff fe5a 	bl	100064e8 <MXC_DMA_ChannelClearFlags>
        
        if(dma_resource[ch].regs->cntrld) {
10006834:	68eb      	ldr	r3, [r5, #12]
10006836:	69d8      	ldr	r0, [r3, #28]
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_EN | MXC_F_DMA_REVA_CTRL_RLDEN);
10006838:	681a      	ldr	r2, [r3, #0]
        if(dma_resource[ch].regs->cntrld) {
1000683a:	b120      	cbz	r0, 10006846 <MXC_DMA_RevA_Start+0x32>
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_EN | MXC_F_DMA_REVA_CTRL_RLDEN);
1000683c:	f042 0203 	orr.w	r2, r2, #3
10006840:	601a      	str	r2, [r3, #0]
    }
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
10006842:	2000      	movs	r0, #0
}
10006844:	bd38      	pop	{r3, r4, r5, pc}
            dma_resource[ch].regs->ctrl |= MXC_F_DMA_REVA_CTRL_EN;
10006846:	f042 0201 	orr.w	r2, r2, #1
1000684a:	601a      	str	r2, [r3, #0]
1000684c:	e7fa      	b.n	10006844 <MXC_DMA_RevA_Start+0x30>
        return E_BAD_PARAM;
1000684e:	f06f 0002 	mvn.w	r0, #2
10006852:	e7f7      	b.n	10006844 <MXC_DMA_RevA_Start+0x30>
10006854:	20000c4c 	.word	0x20000c4c

10006858 <MXC_DMA_RevA_Handler>:
        return NULL;
    }
}

void MXC_DMA_RevA_Handler(mxc_dma_reva_regs_t *dma)
{
10006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int numCh = MXC_DMA_CHANNELS / MXC_DMA_INSTANCES;
    int offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
1000685a:	4b1a      	ldr	r3, [pc, #104]	; (100068c4 <MXC_DMA_RevA_Handler+0x6c>)
1000685c:	4298      	cmp	r0, r3
1000685e:	d00e      	beq.n	1000687e <MXC_DMA_RevA_Handler+0x26>
10006860:	4c19      	ldr	r4, [pc, #100]	; (100068c8 <MXC_DMA_RevA_Handler+0x70>)
10006862:	42a0      	cmp	r0, r4
10006864:	bf0c      	ite	eq
10006866:	2401      	moveq	r4, #1
10006868:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
1000686c:	00e4      	lsls	r4, r4, #3
    /* Do callback, if enabled */
    for(int i = offset; i < (offset + numCh); i++) {
        if(CHECK_HANDLE(i)) {
1000686e:	4b17      	ldr	r3, [pc, #92]	; (100068cc <MXC_DMA_RevA_Handler+0x74>)
10006870:	f104 0508 	add.w	r5, r4, #8
10006874:	2614      	movs	r6, #20
            if(dma->intfl &(0x1 << (i % numCh))) {
10006876:	2701      	movs	r7, #1
    for(int i = offset; i < (offset + numCh); i++) {
10006878:	42ac      	cmp	r4, r5
1000687a:	d102      	bne.n	10006882 <MXC_DMA_RevA_Handler+0x2a>
                MXC_DMA_ChannelClearFlags(i, MXC_DMA_RevA_ChannelGetFlags(i));
                break;
            }
        }
    }
}
1000687c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t*) dma);
1000687e:	2400      	movs	r4, #0
10006880:	e7f4      	b.n	1000686c <MXC_DMA_RevA_Handler+0x14>
        if(CHECK_HANDLE(i)) {
10006882:	2c0f      	cmp	r4, #15
10006884:	d81b      	bhi.n	100068be <MXC_DMA_RevA_Handler+0x66>
10006886:	fb06 f104 	mul.w	r1, r6, r4
1000688a:	58ca      	ldr	r2, [r1, r3]
1000688c:	b1ba      	cbz	r2, 100068be <MXC_DMA_RevA_Handler+0x66>
            if(dma->intfl &(0x1 << (i % numCh))) {
1000688e:	f8d0 c004 	ldr.w	ip, [r0, #4]
10006892:	f004 0207 	and.w	r2, r4, #7
10006896:	fa07 f202 	lsl.w	r2, r7, r2
1000689a:	ea12 0f0c 	tst.w	r2, ip
1000689e:	d00e      	beq.n	100068be <MXC_DMA_RevA_Handler+0x66>
                if(dma_resource[i].cb != NULL) {
100068a0:	440b      	add	r3, r1
100068a2:	691b      	ldr	r3, [r3, #16]
100068a4:	b113      	cbz	r3, 100068ac <MXC_DMA_RevA_Handler+0x54>
                    dma_resource[i].cb(i, E_NO_ERROR);
100068a6:	2100      	movs	r1, #0
100068a8:	4620      	mov	r0, r4
100068aa:	4798      	blx	r3
                MXC_DMA_ChannelClearFlags(i, MXC_DMA_RevA_ChannelGetFlags(i));
100068ac:	4620      	mov	r0, r4
100068ae:	f7ff ff8b 	bl	100067c8 <MXC_DMA_RevA_ChannelGetFlags>
100068b2:	4601      	mov	r1, r0
100068b4:	4620      	mov	r0, r4
}
100068b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                MXC_DMA_ChannelClearFlags(i, MXC_DMA_RevA_ChannelGetFlags(i));
100068ba:	f7ff be15 	b.w	100064e8 <MXC_DMA_ChannelClearFlags>
    for(int i = offset; i < (offset + numCh); i++) {
100068be:	3401      	adds	r4, #1
100068c0:	e7da      	b.n	10006878 <MXC_DMA_RevA_Handler+0x20>
100068c2:	bf00      	nop
100068c4:	40028000 	.word	0x40028000
100068c8:	40035000 	.word	0x40035000
100068cc:	20000c4c 	.word	0x20000c4c

100068d0 <MXC_LP_ClearWakeStatus>:

/***** Functions *****/
void MXC_LP_ClearWakeStatus(void)
{
    /* Write 1 to clear */
    MXC_PWRSEQ->lpwkst0 = 0xFFFFFFFF;
100068d0:	4b03      	ldr	r3, [pc, #12]	; (100068e0 <MXC_LP_ClearWakeStatus+0x10>)
100068d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
100068d6:	605a      	str	r2, [r3, #4]
    MXC_PWRSEQ->lpwkst1 = 0xFFFFFFFF;
100068d8:	60da      	str	r2, [r3, #12]
    MXC_PWRSEQ->lppwst  = 0xFFFFFFFF;
100068da:	631a      	str	r2, [r3, #48]	; 0x30
}
100068dc:	4770      	bx	lr
100068de:	bf00      	nop
100068e0:	40006800 	.word	0x40006800

100068e4 <MXC_LP_EnableWUTAlarmWakeup>:
    }
}

void MXC_LP_EnableWUTAlarmWakeup (void)
{
    MXC_GCR->pm |= MXC_F_GCR_PM_WUTWKEN;
100068e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
100068e8:	68d3      	ldr	r3, [r2, #12]
100068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100068ee:	60d3      	str	r3, [r2, #12]
}
100068f0:	4770      	bx	lr
	...

100068f4 <MXC_LP_EnterSleepMode>:
{
    MXC_SETFIELD(MXC_PWRSEQ->lpcn, MXC_F_PWRSEQ_LPCN_RAMRET, ramRetained);
}

void MXC_LP_EnterSleepMode(void)
{
100068f4:	b508      	push	{r3, lr}
	MXC_LP_ClearWakeStatus();
100068f6:	f7ff ffeb 	bl	100068d0 <MXC_LP_ClearWakeStatus>
    
    /* Clear SLEEPDEEP bit */
    SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
100068fa:	4a03      	ldr	r2, [pc, #12]	; (10006908 <MXC_LP_EnterSleepMode+0x14>)
100068fc:	6913      	ldr	r3, [r2, #16]
100068fe:	f023 0304 	bic.w	r3, r3, #4
10006902:	6113      	str	r3, [r2, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
10006904:	bf30      	wfi
    
    /* Go into Sleep mode and wait for an interrupt to wake the processor */
    __WFI();
}
10006906:	bd08      	pop	{r3, pc}
10006908:	e000ed00 	.word	0xe000ed00

1000690c <MXC_FLC_ME14_GetByAddress>:

//******************************************************************************
int MXC_FLC_ME14_GetByAddress (mxc_flc_regs_t **flc, uint32_t addr)
{

    if (addr < MXC_FLASH1_MEM_BASE && addr >= MXC_FLASH0_MEM_BASE) {
1000690c:	f101 4370 	add.w	r3, r1, #4026531840	; 0xf0000000
10006910:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10006914:	d203      	bcs.n	1000691e <MXC_FLC_ME14_GetByAddress+0x12>
        *flc =  MXC_FLC0;
10006916:	4b0d      	ldr	r3, [pc, #52]	; (1000694c <MXC_FLC_ME14_GetByAddress+0x40>)
    }
    else if (addr >= MXC_FLASH1_MEM_BASE &&
             addr < (MXC_FLASH1_MEM_BASE + MXC_FLASH_MEM_SIZE)) {
        *flc = MXC_FLC1;
10006918:	6003      	str	r3, [r0, #0]
    }
    else {
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
1000691a:	2000      	movs	r0, #0
1000691c:	4770      	bx	lr
    else if (addr >= MXC_FLASH1_MEM_BASE &&
1000691e:	f101 436f 	add.w	r3, r1, #4009754624	; 0xef000000
10006922:	f503 0378 	add.w	r3, r3, #16252928	; 0xf80000
10006926:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
1000692a:	d201      	bcs.n	10006930 <MXC_FLC_ME14_GetByAddress+0x24>
        *flc = MXC_FLC1;
1000692c:	4b08      	ldr	r3, [pc, #32]	; (10006950 <MXC_FLC_ME14_GetByAddress+0x44>)
1000692e:	e7f3      	b.n	10006918 <MXC_FLC_ME14_GetByAddress+0xc>
    else if (addr >= MXC_INFO0_MEM_BASE &&
10006930:	f1a1 5184 	sub.w	r1, r1, #276824064	; 0x10800000
10006934:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
10006938:	d3ed      	bcc.n	10006916 <MXC_FLC_ME14_GetByAddress+0xa>
    else if (addr >= MXC_INFO1_MEM_BASE &&
1000693a:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
1000693e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
10006942:	d3f3      	bcc.n	1000692c <MXC_FLC_ME14_GetByAddress+0x20>
        return E_BAD_PARAM;
10006944:	f06f 0002 	mvn.w	r0, #2
}
10006948:	4770      	bx	lr
1000694a:	bf00      	nop
1000694c:	40029000 	.word	0x40029000
10006950:	40029400 	.word	0x40029400

10006954 <MXC_FLC_UnlockInfoBlock>:
{
    return MXC_FLC_RevA_ClearFlags (flags);
}

int MXC_FLC_UnlockInfoBlock (uint32_t address)
{
10006954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006956:	4601      	mov	r1, r0
    int err;
    mxc_flc_regs_t *flc;
    
    if ( (err = MXC_FLC_ME14_GetByAddress (&flc, address)) != E_NO_ERROR) {
10006958:	9001      	str	r0, [sp, #4]
1000695a:	a803      	add	r0, sp, #12
1000695c:	f7ff ffd6 	bl	1000690c <MXC_FLC_ME14_GetByAddress>
10006960:	b918      	cbnz	r0, 1000696a <MXC_FLC_UnlockInfoBlock+0x16>
        return err;
    }
    
    return MXC_FLC_RevA_UnlockInfoBlock ((mxc_flc_reva_regs_t*)flc, address);
10006962:	9901      	ldr	r1, [sp, #4]
10006964:	9803      	ldr	r0, [sp, #12]
10006966:	f000 f811 	bl	1000698c <MXC_FLC_RevA_UnlockInfoBlock>
}
1000696a:	b005      	add	sp, #20
1000696c:	f85d fb04 	ldr.w	pc, [sp], #4

10006970 <MXC_FLC_LockInfoBlock>:

int MXC_FLC_LockInfoBlock (uint32_t address)
{
10006970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006972:	4601      	mov	r1, r0
    int err;
    mxc_flc_regs_t *flc;
    
    if ( (err = MXC_FLC_ME14_GetByAddress (&flc, address)) != E_NO_ERROR) {
10006974:	9001      	str	r0, [sp, #4]
10006976:	a803      	add	r0, sp, #12
10006978:	f7ff ffc8 	bl	1000690c <MXC_FLC_ME14_GetByAddress>
1000697c:	b918      	cbnz	r0, 10006986 <MXC_FLC_LockInfoBlock+0x16>
        return err;
    }
    
    return MXC_FLC_RevA_LockInfoBlock ((mxc_flc_reva_regs_t*)flc, address);
1000697e:	9901      	ldr	r1, [sp, #4]
10006980:	9803      	ldr	r0, [sp, #12]
10006982:	f000 f823 	bl	100069cc <MXC_FLC_RevA_LockInfoBlock>
}
10006986:	b005      	add	sp, #20
10006988:	f85d fb04 	ldr.w	pc, [sp], #4

1000698c <MXC_FLC_RevA_UnlockInfoBlock>:
}

//******************************************************************************
int MXC_FLC_RevA_UnlockInfoBlock (mxc_flc_reva_regs_t *flc, uint32_t address)
{
    if ((address < MXC_INFO_MEM_BASE) || (address >= (MXC_INFO_MEM_BASE + (MXC_INFO_MEM_SIZE * 2)))) {
1000698c:	f1a1 5184 	sub.w	r1, r1, #276824064	; 0x10800000
10006990:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
10006994:	d214      	bcs.n	100069c0 <MXC_FLC_RevA_UnlockInfoBlock+0x34>
        return E_BAD_PARAM;
    }

    /* Make sure the info block is locked */
    flc->actrl = 0x1234;
10006996:	f241 2334 	movw	r3, #4660	; 0x1234
1000699a:	6403      	str	r3, [r0, #64]	; 0x40
    
    /* Write the unlock sequence */
    flc->actrl = 0x3a7f5ca3;
1000699c:	f103 5369 	add.w	r3, r3, #977272832	; 0x3a400000
100069a0:	f503 137d 	add.w	r3, r3, #4145152	; 0x3f4000
100069a4:	f603 236f 	addw	r3, r3, #2671	; 0xa6f
100069a8:	6403      	str	r3, [r0, #64]	; 0x40
    flc->actrl = 0xa1e34f20;
100069aa:	f103 43d0 	add.w	r3, r3, #1744830464	; 0x68000000
100069ae:	f5a3 031c 	sub.w	r3, r3, #10223616	; 0x9c0000
100069b2:	f6a3 5383 	subw	r3, r3, #3459	; 0xd83
100069b6:	6403      	str	r3, [r0, #64]	; 0x40
    flc->actrl = 0x9608b2c1;
100069b8:	4b03      	ldr	r3, [pc, #12]	; (100069c8 <MXC_FLC_RevA_UnlockInfoBlock+0x3c>)
100069ba:	6403      	str	r3, [r0, #64]	; 0x40
    
    return E_NO_ERROR;
100069bc:	2000      	movs	r0, #0
100069be:	4770      	bx	lr
        return E_BAD_PARAM;
100069c0:	f06f 0002 	mvn.w	r0, #2
}
100069c4:	4770      	bx	lr
100069c6:	bf00      	nop
100069c8:	9608b2c1 	.word	0x9608b2c1

100069cc <MXC_FLC_RevA_LockInfoBlock>:

//******************************************************************************
int MXC_FLC_RevA_LockInfoBlock (mxc_flc_reva_regs_t *flc, uint32_t address)
{
    if ((address < MXC_INFO_MEM_BASE) || (address >= (MXC_INFO_MEM_BASE + (MXC_INFO_MEM_SIZE * 2)))) {
100069cc:	f1a1 5184 	sub.w	r1, r1, #276824064	; 0x10800000
100069d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        return E_BAD_PARAM;
    }
    
    flc->actrl = 0xDEADBEEF;
100069d4:	bf3d      	ittte	cc
100069d6:	4b03      	ldrcc	r3, [pc, #12]	; (100069e4 <MXC_FLC_RevA_LockInfoBlock+0x18>)
100069d8:	6403      	strcc	r3, [r0, #64]	; 0x40
    return E_NO_ERROR;
100069da:	2000      	movcc	r0, #0
        return E_BAD_PARAM;
100069dc:	f06f 0002 	mvncs.w	r0, #2
}
100069e0:	4770      	bx	lr
100069e2:	bf00      	nop
100069e4:	deadbeef 	.word	0xdeadbeef

100069e8 <MXC_GPIO_Config>:
    
    return E_NO_ERROR;
}

int MXC_GPIO_Config (const mxc_gpio_cfg_t *cfg)
{
100069e8:	b538      	push	{r3, r4, r5, lr}
    int error;
    mxc_gpio_regs_t *gpio = cfg->port;

    // Configure alternate function
    error = MXC_GPIO_RevA_SetAF ((mxc_gpio_reva_regs_t*)gpio, cfg->func, cfg->mask);
100069ea:	e9d0 4200 	ldrd	r4, r2, [r0]
100069ee:	7a01      	ldrb	r1, [r0, #8]
{
100069f0:	4605      	mov	r5, r0
    error = MXC_GPIO_RevA_SetAF ((mxc_gpio_reva_regs_t*)gpio, cfg->func, cfg->mask);
100069f2:	4620      	mov	r0, r4
100069f4:	f000 f86c 	bl	10006ad0 <MXC_GPIO_RevA_SetAF>
    
    if(error != E_NO_ERROR) {
100069f8:	2800      	cmp	r0, #0
100069fa:	d144      	bne.n	10006a86 <MXC_GPIO_Config+0x9e>
        return error;
    }

    // Configure the pad
    switch (cfg->pad) {
100069fc:	7a6b      	ldrb	r3, [r5, #9]
100069fe:	2b04      	cmp	r3, #4
10006a00:	d83f      	bhi.n	10006a82 <MXC_GPIO_Config+0x9a>
10006a02:	e8df f003 	tbb	[pc, r3]
10006a06:	2203      	.short	0x2203
10006a08:	1336      	.short	0x1336
10006a0a:	2e          	.byte	0x2e
10006a0b:	00          	.byte	0x00
    case MXC_GPIO_PAD_NONE:
    	gpio->pad_cfg1 &= ~cfg->mask;
10006a0c:	6e22      	ldr	r2, [r4, #96]	; 0x60
10006a0e:	6869      	ldr	r1, [r5, #4]
10006a10:	ea22 0201 	bic.w	r2, r2, r1
10006a14:	6622      	str	r2, [r4, #96]	; 0x60
    	gpio->pad_cfg2 &= ~cfg->mask;
10006a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006a18:	ea23 0301 	bic.w	r3, r3, r1
10006a1c:	6663      	str	r3, [r4, #100]	; 0x64
    return MXC_GPIO_RevA_GetFlags ((mxc_gpio_reva_regs_t*) port);
}

int MXC_GPIO_SetVSSEL (mxc_gpio_regs_t* port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
    return MXC_GPIO_RevA_SetVSSEL ((mxc_gpio_reva_regs_t*)port, vssel, mask);
10006a1e:	686a      	ldr	r2, [r5, #4]
10006a20:	7aa9      	ldrb	r1, [r5, #10]
10006a22:	4620      	mov	r0, r4
}
10006a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MXC_GPIO_RevA_SetVSSEL ((mxc_gpio_reva_regs_t*)port, vssel, mask);
10006a28:	f000 b840 	b.w	10006aac <MXC_GPIO_RevA_SetVSSEL>
    	gpio->pad_cfg1 |=  cfg->mask;
10006a2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
10006a2e:	686a      	ldr	r2, [r5, #4]
10006a30:	4313      	orrs	r3, r2
10006a32:	6623      	str	r3, [r4, #96]	; 0x60
    	gpio->pad_cfg2 &= ~cfg->mask;
10006a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006a36:	ea23 0302 	bic.w	r3, r3, r2
    	gpio->pad_cfg2 |=  cfg->mask;
10006a3a:	6663      	str	r3, [r4, #100]	; 0x64
        gpio->ps &= ~cfg->mask;
10006a3c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
10006a40:	ea23 0302 	bic.w	r3, r3, r2
        gpio->ps |= cfg->mask;
10006a44:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        break;
10006a48:	e7e9      	b.n	10006a1e <MXC_GPIO_Config+0x36>
    	gpio->pad_cfg1 |=  cfg->mask;
10006a4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
10006a4c:	686b      	ldr	r3, [r5, #4]
10006a4e:	431a      	orrs	r2, r3
10006a50:	6622      	str	r2, [r4, #96]	; 0x60
    	gpio->pad_cfg2 &= ~cfg->mask;
10006a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
10006a54:	ea22 0203 	bic.w	r2, r2, r3
    	gpio->pad_cfg2 |=  cfg->mask;
10006a58:	6662      	str	r2, [r4, #100]	; 0x64
        gpio->ps |= cfg->mask;
10006a5a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
10006a5e:	4313      	orrs	r3, r2
10006a60:	e7f0      	b.n	10006a44 <MXC_GPIO_Config+0x5c>
    	gpio->pad_cfg1 &= ~cfg->mask;
10006a62:	6e23      	ldr	r3, [r4, #96]	; 0x60
10006a64:	686a      	ldr	r2, [r5, #4]
10006a66:	ea23 0302 	bic.w	r3, r3, r2
10006a6a:	6623      	str	r3, [r4, #96]	; 0x60
    	gpio->pad_cfg2 |=  cfg->mask;
10006a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006a6e:	4313      	orrs	r3, r2
10006a70:	e7e3      	b.n	10006a3a <MXC_GPIO_Config+0x52>
    	gpio->pad_cfg1 &= ~cfg->mask;
10006a72:	6e22      	ldr	r2, [r4, #96]	; 0x60
10006a74:	686b      	ldr	r3, [r5, #4]
10006a76:	ea22 0203 	bic.w	r2, r2, r3
10006a7a:	6622      	str	r2, [r4, #96]	; 0x60
    	gpio->pad_cfg2 |=  cfg->mask;
10006a7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
10006a7e:	431a      	orrs	r2, r3
10006a80:	e7ea      	b.n	10006a58 <MXC_GPIO_Config+0x70>
    switch (cfg->pad) {
10006a82:	f06f 0002 	mvn.w	r0, #2
}
10006a86:	bd38      	pop	{r3, r4, r5, pc}

10006a88 <MXC_GPIO_OutSet>:
    MXC_GPIO_RevA_OutSet ((mxc_gpio_reva_regs_t*)port, mask);
10006a88:	f000 b808 	b.w	10006a9c <MXC_GPIO_RevA_OutSet>

10006a8c <MXC_GPIO_OutClr>:
    MXC_GPIO_RevA_OutClr ((mxc_gpio_reva_regs_t*)port, mask);
10006a8c:	f000 b808 	b.w	10006aa0 <MXC_GPIO_RevA_OutClr>

10006a90 <MXC_GPIO_Handler>:
    MXC_GPIO_Common_Handler (port);
10006a90:	f001 b980 	b.w	10007d94 <MXC_GPIO_Common_Handler>

10006a94 <MXC_GPIO_ClearFlags>:
    MXC_GPIO_RevA_ClearFlags ((mxc_gpio_reva_regs_t*) port, flags);
10006a94:	f000 b806 	b.w	10006aa4 <MXC_GPIO_RevA_ClearFlags>

10006a98 <MXC_GPIO_GetFlags>:
    return MXC_GPIO_RevA_GetFlags ((mxc_gpio_reva_regs_t*) port);
10006a98:	f000 b806 	b.w	10006aa8 <MXC_GPIO_RevA_GetFlags>

10006a9c <MXC_GPIO_RevA_OutSet>:
    return (port->in & mask);
}

void MXC_GPIO_RevA_OutSet (mxc_gpio_reva_regs_t* port, uint32_t mask)
{
    port->out_set = mask;
10006a9c:	61c1      	str	r1, [r0, #28]
}
10006a9e:	4770      	bx	lr

10006aa0 <MXC_GPIO_RevA_OutClr>:

void MXC_GPIO_RevA_OutClr (mxc_gpio_reva_regs_t* port, uint32_t mask)
{
    port->out_clr = mask;
10006aa0:	6201      	str	r1, [r0, #32]
}
10006aa2:	4770      	bx	lr

10006aa4 <MXC_GPIO_RevA_ClearFlags>:
    port->inten_clr = mask;
}

void MXC_GPIO_RevA_ClearFlags (mxc_gpio_reva_regs_t* port, uint32_t flags)
{
	port->intfl_clr = flags;
10006aa4:	6481      	str	r1, [r0, #72]	; 0x48
}
10006aa6:	4770      	bx	lr

10006aa8 <MXC_GPIO_RevA_GetFlags>:

uint32_t MXC_GPIO_RevA_GetFlags (mxc_gpio_reva_regs_t* port)
{
    return port->intfl;
10006aa8:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
10006aaa:	4770      	bx	lr

10006aac <MXC_GPIO_RevA_SetVSSEL>:

int MXC_GPIO_RevA_SetVSSEL (mxc_gpio_reva_regs_t* port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
    // Configure the vssel
    switch (vssel) {
10006aac:	b121      	cbz	r1, 10006ab8 <MXC_GPIO_RevA_SetVSSEL+0xc>
10006aae:	2901      	cmp	r1, #1
10006ab0:	d00a      	beq.n	10006ac8 <MXC_GPIO_RevA_SetVSSEL+0x1c>
10006ab2:	f06f 0002 	mvn.w	r0, #2
10006ab6:	4770      	bx	lr
    case MXC_GPIO_VSSEL_VDDIO:
        port->vssel &= ~mask;
10006ab8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
10006abc:	ea23 0202 	bic.w	r2, r3, r2
        break;
        
    case MXC_GPIO_VSSEL_VDDIOH:
        port->vssel |= mask;
10006ac0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
        
    default:
        return E_BAD_PARAM;
    }
    
    return E_NO_ERROR;
10006ac4:	2000      	movs	r0, #0
}
10006ac6:	4770      	bx	lr
        port->vssel |= mask;
10006ac8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
10006acc:	431a      	orrs	r2, r3
10006ace:	e7f7      	b.n	10006ac0 <MXC_GPIO_RevA_SetVSSEL+0x14>

10006ad0 <MXC_GPIO_RevA_SetAF>:

int MXC_GPIO_RevA_SetAF (mxc_gpio_reva_regs_t* port, mxc_gpio_func_t func, uint32_t mask)
{
	//This is required for new devices going forward.
	port->inen |=  mask;
10006ad0:	6b03      	ldr	r3, [r0, #48]	; 0x30
10006ad2:	4313      	orrs	r3, r2
10006ad4:	6303      	str	r3, [r0, #48]	; 0x30
	
    switch (func) {
10006ad6:	2905      	cmp	r1, #5
10006ad8:	d817      	bhi.n	10006b0a <MXC_GPIO_RevA_SetAF+0x3a>
10006ada:	e8df f001 	tbb	[pc, r1]
10006ade:	0903      	.short	0x0903
10006ae0:	14120f0b 	.word	0x14120f0b
    case MXC_GPIO_FUNC_IN:
        port->outen_clr  = mask;
10006ae4:	6142      	str	r2, [r0, #20]
        port->en2_clr    = mask;
        break;
        
    case MXC_GPIO_FUNC_OUT:
        port->outen_set  = mask;
        port->en0_set    = mask;
10006ae6:	6042      	str	r2, [r0, #4]
        port->en1_clr    = mask;
10006ae8:	6702      	str	r2, [r0, #112]	; 0x70
        port->en2_clr    = mask;
10006aea:	67c2      	str	r2, [r0, #124]	; 0x7c
  #endif
    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;    
10006aec:	2000      	movs	r0, #0
        break;
10006aee:	4770      	bx	lr
        port->outen_set  = mask;
10006af0:	6102      	str	r2, [r0, #16]
10006af2:	e7f8      	b.n	10006ae6 <MXC_GPIO_RevA_SetAF+0x16>
        port->en2_clr    = mask;
10006af4:	67c2      	str	r2, [r0, #124]	; 0x7c
        port->en1_clr    = mask;
10006af6:	6702      	str	r2, [r0, #112]	; 0x70
        port->en0_clr    = mask;
10006af8:	6082      	str	r2, [r0, #8]
        break;
10006afa:	e7f7      	b.n	10006aec <MXC_GPIO_RevA_SetAF+0x1c>
        port->en2_clr    = mask;
10006afc:	67c2      	str	r2, [r0, #124]	; 0x7c
        port->en1_set    = mask;
10006afe:	66c2      	str	r2, [r0, #108]	; 0x6c
10006b00:	e7fa      	b.n	10006af8 <MXC_GPIO_RevA_SetAF+0x28>
        port->en2_set    = mask;
10006b02:	6782      	str	r2, [r0, #120]	; 0x78
10006b04:	e7f7      	b.n	10006af6 <MXC_GPIO_RevA_SetAF+0x26>
        port->en2_set    = mask;
10006b06:	6782      	str	r2, [r0, #120]	; 0x78
10006b08:	e7f9      	b.n	10006afe <MXC_GPIO_RevA_SetAF+0x2e>
	port->inen |=  mask;
10006b0a:	f06f 0002 	mvn.w	r0, #2
}
10006b0e:	4770      	bx	lr

10006b10 <MXC_I2C_Start>:
/* ************************************************************************* */
/* Low-level functions                                                       */
/* ************************************************************************* */
int MXC_I2C_Start (mxc_i2c_regs_t* i2c)
{
    return MXC_I2C_RevA_Start ((mxc_i2c_reva_regs_t*) i2c);
10006b10:	f000 b812 	b.w	10006b38 <MXC_I2C_RevA_Start>

10006b14 <MXC_I2C_Stop>:
}

int MXC_I2C_Stop (mxc_i2c_regs_t* i2c)
{
    return MXC_I2C_RevA_Stop ((mxc_i2c_reva_regs_t*) i2c);
10006b14:	f000 b823 	b.w	10006b5e <MXC_I2C_RevA_Stop>

10006b18 <MXC_I2C_ReadRXFIFO>:
    return MXC_I2C_RevA_Read ((mxc_i2c_reva_regs_t*) i2c, bytes, len, ack);
}

int MXC_I2C_ReadRXFIFO (mxc_i2c_regs_t* i2c, volatile unsigned char* bytes, unsigned int len)
{
    return MXC_I2C_RevA_ReadRXFIFO ((mxc_i2c_reva_regs_t*) i2c, bytes, len);
10006b18:	f000 b82f 	b.w	10006b7a <MXC_I2C_RevA_ReadRXFIFO>

10006b1c <MXC_I2C_WriteTXFIFO>:
    return MXC_I2C_RevA_GetRXFIFOAvailable ((mxc_i2c_reva_regs_t*) i2c);
}

int MXC_I2C_WriteTXFIFO (mxc_i2c_regs_t* i2c, volatile unsigned char* bytes, unsigned int len)
{
    return MXC_I2C_RevA_WriteTXFIFO ((mxc_i2c_reva_regs_t*) i2c, bytes, len);
10006b1c:	f000 b840 	b.w	10006ba0 <MXC_I2C_RevA_WriteTXFIFO>

10006b20 <MXC_I2C_ClearRXFIFO>:
    return MXC_I2C_RevA_GetTXFIFOAvailable ((mxc_i2c_reva_regs_t*) i2c);
}

void MXC_I2C_ClearRXFIFO (mxc_i2c_regs_t* i2c)
{
    MXC_I2C_RevA_ClearRXFIFO ((mxc_i2c_reva_regs_t*) i2c);
10006b20:	f000 b851 	b.w	10006bc6 <MXC_I2C_RevA_ClearRXFIFO>

10006b24 <MXC_I2C_ClearTXFIFO>:
}

void MXC_I2C_ClearTXFIFO (mxc_i2c_regs_t* i2c)
{
    MXC_I2C_RevA_ClearTXFIFO ((mxc_i2c_reva_regs_t*) i2c);
10006b24:	f000 b857 	b.w	10006bd6 <MXC_I2C_RevA_ClearTXFIFO>

10006b28 <MXC_I2C_ClearFlags>:
    return MXC_I2C_RevA_GetFlags ((mxc_i2c_reva_regs_t*) i2c, flags0, flags1);
}

void MXC_I2C_ClearFlags (mxc_i2c_regs_t* i2c, unsigned int flags0, unsigned int flags1)
{
    MXC_I2C_RevA_ClearFlags ((mxc_i2c_reva_regs_t*) i2c, flags0, flags1);
10006b28:	f000 b85d 	b.w	10006be6 <MXC_I2C_RevA_ClearFlags>

10006b2c <MXC_I2C_AsyncHandler>:
    return MXC_I2C_RevA_GetTXThreshold ((mxc_i2c_reva_regs_t*) i2c);
}

void MXC_I2C_AsyncHandler (mxc_i2c_regs_t* i2c)
{
    MXC_I2C_RevA_AsyncHandler ((mxc_i2c_reva_regs_t*) i2c, interruptCheck);
10006b2c:	4b01      	ldr	r3, [pc, #4]	; (10006b34 <MXC_I2C_AsyncHandler+0x8>)
10006b2e:	6819      	ldr	r1, [r3, #0]
10006b30:	f000 bb18 	b.w	10007164 <MXC_I2C_RevA_AsyncHandler>
10006b34:	20000094 	.word	0x20000094

10006b38 <MXC_I2C_RevA_Start>:
/* ************************************************************************* */
/* Low-level functions                                                       */
/* ************************************************************************* */
int MXC_I2C_RevA_Start (mxc_i2c_reva_regs_t* i2c)
{
    if (i2c == NULL) {
10006b38:	b170      	cbz	r0, 10006b58 <MXC_I2C_RevA_Start+0x20>
        return E_NULL_PTR;
    }
    
    // If we have an incomplete transfer, we need to do a restart
    if (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_START) {
10006b3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
10006b3c:	f013 0301 	ands.w	r3, r3, #1
10006b40:	d005      	beq.n	10006b4e <MXC_I2C_RevA_Start+0x16>
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10006b42:	6b03      	ldr	r3, [r0, #48]	; 0x30
10006b44:	f043 0302 	orr.w	r3, r3, #2
10006b48:	6303      	str	r3, [r0, #48]	; 0x30
    }
    else {
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START; // No check for start generation
    }
    
    return E_NO_ERROR;
10006b4a:	2000      	movs	r0, #0
10006b4c:	4770      	bx	lr
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START; // No check for start generation
10006b4e:	6b02      	ldr	r2, [r0, #48]	; 0x30
10006b50:	f042 0201 	orr.w	r2, r2, #1
10006b54:	6302      	str	r2, [r0, #48]	; 0x30
10006b56:	e7f8      	b.n	10006b4a <MXC_I2C_RevA_Start+0x12>
        return E_NULL_PTR;
10006b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
10006b5c:	4770      	bx	lr

10006b5e <MXC_I2C_RevA_Stop>:

int MXC_I2C_RevA_Stop (mxc_i2c_reva_regs_t* i2c)
{
    if (i2c == NULL) {
10006b5e:	b148      	cbz	r0, 10006b74 <MXC_I2C_RevA_Stop+0x16>
        return E_NULL_PTR;
    }

    i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10006b60:	6b03      	ldr	r3, [r0, #48]	; 0x30
10006b62:	f043 0304 	orr.w	r3, r3, #4
10006b66:	6303      	str	r3, [r0, #48]	; 0x30
    
    while (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_STOP);
10006b68:	6b03      	ldr	r3, [r0, #48]	; 0x30
10006b6a:	f013 0304 	ands.w	r3, r3, #4
10006b6e:	d1fb      	bne.n	10006b68 <MXC_I2C_RevA_Stop+0xa>
    
    return E_NO_ERROR;
10006b70:	4618      	mov	r0, r3
10006b72:	4770      	bx	lr
        return E_NULL_PTR;
10006b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
10006b78:	4770      	bx	lr

10006b7a <MXC_I2C_RevA_ReadRXFIFO>:
    *len = read;
    return MXC_I2C_ReadByte ((mxc_i2c_regs_t*) i2c, & (bytes[read]), ack);
}

int MXC_I2C_RevA_ReadRXFIFO (mxc_i2c_reva_regs_t* i2c, volatile unsigned char* bytes, unsigned int len)
{
10006b7a:	b510      	push	{r4, lr}
    unsigned read = 0;
    
    if ((i2c == NULL) || (bytes == NULL)) {
10006b7c:	b168      	cbz	r0, 10006b9a <MXC_I2C_RevA_ReadRXFIFO+0x20>
10006b7e:	b161      	cbz	r1, 10006b9a <MXC_I2C_RevA_ReadRXFIFO+0x20>
10006b80:	2300      	movs	r3, #0
        return E_NULL_PTR;
    }
    
    while ( (len > read) && (! (i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10006b82:	429a      	cmp	r2, r3
10006b84:	d101      	bne.n	10006b8a <MXC_I2C_RevA_ReadRXFIFO+0x10>
        bytes[read++] = i2c->fifo;
    }
    
    return read;
10006b86:	4618      	mov	r0, r3
}
10006b88:	bd10      	pop	{r4, pc}
    while ( (len > read) && (! (i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10006b8a:	6844      	ldr	r4, [r0, #4]
10006b8c:	07a4      	lsls	r4, r4, #30
10006b8e:	d4fa      	bmi.n	10006b86 <MXC_I2C_RevA_ReadRXFIFO+0xc>
        bytes[read++] = i2c->fifo;
10006b90:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
10006b92:	b2e4      	uxtb	r4, r4
10006b94:	54cc      	strb	r4, [r1, r3]
10006b96:	3301      	adds	r3, #1
10006b98:	e7f3      	b.n	10006b82 <MXC_I2C_RevA_ReadRXFIFO+0x8>
        return E_NULL_PTR;
10006b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006b9e:	e7f3      	b.n	10006b88 <MXC_I2C_RevA_ReadRXFIFO+0xe>

10006ba0 <MXC_I2C_RevA_WriteTXFIFO>:
        
    return (i2c->rxctrl1 & MXC_F_I2C_REVA_RXCTRL1_LVL) >> MXC_F_I2C_REVA_RXCTRL1_LVL_POS;
}

int MXC_I2C_RevA_WriteTXFIFO (mxc_i2c_reva_regs_t* i2c, volatile unsigned char* bytes, unsigned int len)
{
10006ba0:	b510      	push	{r4, lr}
    unsigned written = 0;
    
    if ((i2c == NULL) || (bytes == NULL)) {
10006ba2:	b168      	cbz	r0, 10006bc0 <MXC_I2C_RevA_WriteTXFIFO+0x20>
10006ba4:	b161      	cbz	r1, 10006bc0 <MXC_I2C_RevA_WriteTXFIFO+0x20>
10006ba6:	2300      	movs	r3, #0
        return E_NULL_PTR;
    }

    while ( (len > written) && (! (i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
10006ba8:	429a      	cmp	r2, r3
10006baa:	d101      	bne.n	10006bb0 <MXC_I2C_RevA_WriteTXFIFO+0x10>
        i2c->fifo = bytes[written++];
    }
    
    return written;
10006bac:	4618      	mov	r0, r3
}
10006bae:	bd10      	pop	{r4, pc}
    while ( (len > written) && (! (i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
10006bb0:	6844      	ldr	r4, [r0, #4]
10006bb2:	06e4      	lsls	r4, r4, #27
10006bb4:	d4fa      	bmi.n	10006bac <MXC_I2C_RevA_WriteTXFIFO+0xc>
        i2c->fifo = bytes[written++];
10006bb6:	5ccc      	ldrb	r4, [r1, r3]
10006bb8:	b2e4      	uxtb	r4, r4
10006bba:	62c4      	str	r4, [r0, #44]	; 0x2c
10006bbc:	3301      	adds	r3, #1
10006bbe:	e7f3      	b.n	10006ba8 <MXC_I2C_RevA_WriteTXFIFO+0x8>
        return E_NULL_PTR;
10006bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10006bc4:	e7f3      	b.n	10006bae <MXC_I2C_RevA_WriteTXFIFO+0xe>

10006bc6 <MXC_I2C_RevA_ClearRXFIFO>:
    return txFIFOlen - ( (i2c->txctrl1 & MXC_F_I2C_REVA_TXCTRL1_LVL) >> MXC_F_I2C_REVA_TXCTRL1_LVL_POS);
}

void MXC_I2C_RevA_ClearRXFIFO (mxc_i2c_reva_regs_t* i2c)
{
    i2c->rxctrl0 |= MXC_F_I2C_REVA_RXCTRL0_FLUSH;
10006bc6:	69c3      	ldr	r3, [r0, #28]
10006bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10006bcc:	61c3      	str	r3, [r0, #28]
    
    while (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_FLUSH);
10006bce:	69c3      	ldr	r3, [r0, #28]
10006bd0:	061b      	lsls	r3, r3, #24
10006bd2:	d4fc      	bmi.n	10006bce <MXC_I2C_RevA_ClearRXFIFO+0x8>
}
10006bd4:	4770      	bx	lr

10006bd6 <MXC_I2C_RevA_ClearTXFIFO>:

void MXC_I2C_RevA_ClearTXFIFO (mxc_i2c_reva_regs_t* i2c)
{ 
    i2c->txctrl0 |= MXC_F_I2C_REVA_TXCTRL0_FLUSH;
10006bd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
10006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10006bdc:	6243      	str	r3, [r0, #36]	; 0x24
    
    while (i2c->txctrl0 & MXC_F_I2C_REVA_TXCTRL0_FLUSH);
10006bde:	6a43      	ldr	r3, [r0, #36]	; 0x24
10006be0:	061b      	lsls	r3, r3, #24
10006be2:	d4fc      	bmi.n	10006bde <MXC_I2C_RevA_ClearTXFIFO+0x8>
}
10006be4:	4770      	bx	lr

10006be6 <MXC_I2C_RevA_ClearFlags>:
    return E_NO_ERROR;
}

void MXC_I2C_RevA_ClearFlags (mxc_i2c_reva_regs_t* i2c, unsigned int flags0, unsigned int flags1)
{
    i2c->intfl0 = flags0;
10006be6:	6081      	str	r1, [r0, #8]
    i2c->intfl1 = flags1;
10006be8:	6102      	str	r2, [r0, #16]
}
10006bea:	4770      	bx	lr

10006bec <MXC_I2C_RevA_AsyncCallback>:

void MXC_I2C_RevA_AsyncCallback (mxc_i2c_reva_regs_t* i2c, int retVal)
{
    // Don't need to check for return value as this function is not accessible to user
    // i2c is already cheked for NULL from where this function is being called
    mxc_i2c_reva_req_t* req = (mxc_i2c_reva_req_t*) AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)];
10006bec:	4b16      	ldr	r3, [pc, #88]	; (10006c48 <MXC_I2C_RevA_AsyncCallback+0x5c>)
10006bee:	4298      	cmp	r0, r3
10006bf0:	d01d      	beq.n	10006c2e <MXC_I2C_RevA_AsyncCallback+0x42>
10006bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006bf6:	4298      	cmp	r0, r3
10006bf8:	d01b      	beq.n	10006c32 <MXC_I2C_RevA_AsyncCallback+0x46>
10006bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006bfe:	4298      	cmp	r0, r3
10006c00:	d019      	beq.n	10006c36 <MXC_I2C_RevA_AsyncCallback+0x4a>
10006c02:	f503 237e 	add.w	r3, r3, #1040384	; 0xfe000
10006c06:	4298      	cmp	r0, r3
10006c08:	d017      	beq.n	10006c3a <MXC_I2C_RevA_AsyncCallback+0x4e>
10006c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006c0e:	4298      	cmp	r0, r3
10006c10:	d016      	beq.n	10006c40 <MXC_I2C_RevA_AsyncCallback+0x54>
10006c12:	4a0e      	ldr	r2, [pc, #56]	; (10006c4c <MXC_I2C_RevA_AsyncCallback+0x60>)
10006c14:	f248 0302 	movw	r3, #32770	; 0x8002
10006c18:	4290      	cmp	r0, r2
10006c1a:	bf0c      	ite	eq
10006c1c:	4618      	moveq	r0, r3
10006c1e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
10006c22:	4b0b      	ldr	r3, [pc, #44]	; (10006c50 <MXC_I2C_RevA_AsyncCallback+0x64>)
10006c24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    
    if (req->callback != NULL) {
10006c28:	69c3      	ldr	r3, [r0, #28]
10006c2a:	b163      	cbz	r3, 10006c46 <MXC_I2C_RevA_AsyncCallback+0x5a>
        req->callback(req, retVal);
10006c2c:	4718      	bx	r3
    mxc_i2c_reva_req_t* req = (mxc_i2c_reva_req_t*) AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)];
10006c2e:	2000      	movs	r0, #0
10006c30:	e7f7      	b.n	10006c22 <MXC_I2C_RevA_AsyncCallback+0x36>
10006c32:	2001      	movs	r0, #1
10006c34:	e7f5      	b.n	10006c22 <MXC_I2C_RevA_AsyncCallback+0x36>
10006c36:	2002      	movs	r0, #2
10006c38:	e7f3      	b.n	10006c22 <MXC_I2C_RevA_AsyncCallback+0x36>
10006c3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
10006c3e:	e7f0      	b.n	10006c22 <MXC_I2C_RevA_AsyncCallback+0x36>
10006c40:	f248 0001 	movw	r0, #32769	; 0x8001
10006c44:	e7ed      	b.n	10006c22 <MXC_I2C_RevA_AsyncCallback+0x36>
    }
}
10006c46:	4770      	bx	lr
10006c48:	4001d000 	.word	0x4001d000
10006c4c:	4011f000 	.word	0x4011f000
10006c50:	20011314 	.word	0x20011314

10006c54 <MXC_I2C_RevA_AsyncStop>:
    i2c->inten0 = 0;
    i2c->inten1 = 0;
    
    // Don't need to check for return value as this function is not accessible to user
    // i2c is already cheked for NULL from where this function is being called
    AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006c54:	4a17      	ldr	r2, [pc, #92]	; (10006cb4 <MXC_I2C_RevA_AsyncStop+0x60>)
    i2c->inten0 = 0;
10006c56:	2300      	movs	r3, #0
    AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006c58:	4290      	cmp	r0, r2
    i2c->inten0 = 0;
10006c5a:	60c3      	str	r3, [r0, #12]
    i2c->inten1 = 0;
10006c5c:	6143      	str	r3, [r0, #20]
    AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006c5e:	d01c      	beq.n	10006c9a <MXC_I2C_RevA_AsyncStop+0x46>
10006c60:	4b15      	ldr	r3, [pc, #84]	; (10006cb8 <MXC_I2C_RevA_AsyncStop+0x64>)
10006c62:	4298      	cmp	r0, r3
10006c64:	d01b      	beq.n	10006c9e <MXC_I2C_RevA_AsyncStop+0x4a>
10006c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006c6a:	4298      	cmp	r0, r3
10006c6c:	d019      	beq.n	10006ca2 <MXC_I2C_RevA_AsyncStop+0x4e>
10006c6e:	f503 237e 	add.w	r3, r3, #1040384	; 0xfe000
10006c72:	4298      	cmp	r0, r3
10006c74:	d017      	beq.n	10006ca6 <MXC_I2C_RevA_AsyncStop+0x52>
10006c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006c7a:	4298      	cmp	r0, r3
10006c7c:	d016      	beq.n	10006cac <MXC_I2C_RevA_AsyncStop+0x58>
10006c7e:	f502 1281 	add.w	r2, r2, #1056768	; 0x102000
10006c82:	f248 0302 	movw	r3, #32770	; 0x8002
10006c86:	4290      	cmp	r0, r2
10006c88:	bf0c      	ite	eq
10006c8a:	4618      	moveq	r0, r3
10006c8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
10006c90:	4b0a      	ldr	r3, [pc, #40]	; (10006cbc <MXC_I2C_RevA_AsyncStop+0x68>)
10006c92:	2200      	movs	r2, #0
10006c94:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
10006c98:	4770      	bx	lr
    AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006c9a:	4618      	mov	r0, r3
10006c9c:	e7f8      	b.n	10006c90 <MXC_I2C_RevA_AsyncStop+0x3c>
10006c9e:	2001      	movs	r0, #1
10006ca0:	e7f6      	b.n	10006c90 <MXC_I2C_RevA_AsyncStop+0x3c>
10006ca2:	2002      	movs	r0, #2
10006ca4:	e7f4      	b.n	10006c90 <MXC_I2C_RevA_AsyncStop+0x3c>
10006ca6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
10006caa:	e7f1      	b.n	10006c90 <MXC_I2C_RevA_AsyncStop+0x3c>
10006cac:	f248 0001 	movw	r0, #32769	; 0x8001
10006cb0:	e7ee      	b.n	10006c90 <MXC_I2C_RevA_AsyncStop+0x3c>
10006cb2:	bf00      	nop
10006cb4:	4001d000 	.word	0x4001d000
10006cb8:	4001e000 	.word	0x4001e000
10006cbc:	20011314 	.word	0x20011314

10006cc0 <MXC_I2C_RevA_MasterAsyncHandler>:
    MXC_I2C_RevA_AsyncStop(i2c);
}

void MXC_I2C_RevA_MasterAsyncHandler(int i2cNum)
{
    unsigned int written = AsyncWritten[i2cNum];
10006cc0:	4a64      	ldr	r2, [pc, #400]	; (10006e54 <MXC_I2C_RevA_MasterAsyncHandler+0x194>)
    unsigned int read = AsyncRead[i2cNum];
10006cc2:	4b65      	ldr	r3, [pc, #404]	; (10006e58 <MXC_I2C_RevA_MasterAsyncHandler+0x198>)
{
10006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int written = AsyncWritten[i2cNum];
10006cc8:	f852 8020 	ldr.w	r8, [r2, r0, lsl #2]
    unsigned int read = AsyncRead[i2cNum];
10006ccc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
{
10006cd0:	4606      	mov	r6, r0
10006cd2:	4692      	mov	sl, r2
10006cd4:	4699      	mov	r9, r3
    mxc_i2c_reva_regs_t* i2c = (mxc_i2c_reva_regs_t*) MXC_I2C_GET_BASE (i2cNum);
10006cd6:	2800      	cmp	r0, #0
10006cd8:	f000 808f 	beq.w	10006dfa <MXC_I2C_RevA_MasterAsyncHandler+0x13a>
10006cdc:	2801      	cmp	r0, #1
10006cde:	f000 808e 	beq.w	10006dfe <MXC_I2C_RevA_MasterAsyncHandler+0x13e>
10006ce2:	2802      	cmp	r0, #2
10006ce4:	f000 808d 	beq.w	10006e02 <MXC_I2C_RevA_MasterAsyncHandler+0x142>
10006ce8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
10006cec:	f000 808b 	beq.w	10006e06 <MXC_I2C_RevA_MasterAsyncHandler+0x146>
10006cf0:	f248 0301 	movw	r3, #32769	; 0x8001
10006cf4:	4298      	cmp	r0, r3
10006cf6:	f000 8088 	beq.w	10006e0a <MXC_I2C_RevA_MasterAsyncHandler+0x14a>
10006cfa:	4c58      	ldr	r4, [pc, #352]	; (10006e5c <MXC_I2C_RevA_MasterAsyncHandler+0x19c>)
10006cfc:	f248 0302 	movw	r3, #32770	; 0x8002
10006d00:	4298      	cmp	r0, r3
10006d02:	bf18      	it	ne
10006d04:	2400      	movne	r4, #0
    mxc_i2c_reva_req_t* req = (mxc_i2c_reva_req_t*) AsyncRequests[i2cNum];
10006d06:	4b56      	ldr	r3, [pc, #344]	; (10006e60 <MXC_I2C_RevA_MasterAsyncHandler+0x1a0>)
10006d08:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
    
    if (req->tx_len > written) {
10006d0c:	68ea      	ldr	r2, [r5, #12]
10006d0e:	4542      	cmp	r2, r8
10006d10:	d91d      	bls.n	10006d4e <MXC_I2C_RevA_MasterAsyncHandler+0x8e>
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10006d12:	68a3      	ldr	r3, [r4, #8]
10006d14:	0699      	lsls	r1, r3, #26
10006d16:	d509      	bpl.n	10006d2c <MXC_I2C_RevA_MasterAsyncHandler+0x6c>
            written += MXC_I2C_WriteTXFIFO ((mxc_i2c_regs_t*) i2c, &req->tx_buf[written], req->tx_len - written);
10006d18:	68a9      	ldr	r1, [r5, #8]
10006d1a:	eba2 0208 	sub.w	r2, r2, r8
10006d1e:	4441      	add	r1, r8
10006d20:	4620      	mov	r0, r4
10006d22:	f7ff fefb 	bl	10006b1c <MXC_I2C_WriteTXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10006d26:	2320      	movs	r3, #32
            written += MXC_I2C_WriteTXFIFO ((mxc_i2c_regs_t*) i2c, &req->tx_buf[written], req->tx_len - written);
10006d28:	4480      	add	r8, r0
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10006d2a:	60a3      	str	r3, [r4, #8]
        }
        
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10006d2c:	68a3      	ldr	r3, [r4, #8]
10006d2e:	f413 4ffe 	tst.w	r3, #32512	; 0x7f00
10006d32:	d00c      	beq.n	10006d4e <MXC_I2C_RevA_MasterAsyncHandler+0x8e>
            req->tx_len = written;
10006d34:	f8c5 800c 	str.w	r8, [r5, #12]
            MXC_I2C_Stop ((mxc_i2c_regs_t*) i2c);
10006d38:	4620      	mov	r0, r4
10006d3a:	f7ff feeb 	bl	10006b14 <MXC_I2C_Stop>
            MXC_I2C_RevA_AsyncCallback (i2c, E_COMM_ERR);
10006d3e:	4620      	mov	r0, r4
10006d40:	f06f 0108 	mvn.w	r1, #8
10006d44:	f7ff ff52 	bl	10006bec <MXC_I2C_RevA_AsyncCallback>
            MXC_I2C_RevA_AsyncStop (i2c);
10006d48:	4620      	mov	r0, r4
10006d4a:	f7ff ff83 	bl	10006c54 <MXC_I2C_RevA_AsyncStop>
        }
    }
    
    if (req->rx_len > read) {
10006d4e:	696a      	ldr	r2, [r5, #20]
10006d50:	42ba      	cmp	r2, r7
10006d52:	d933      	bls.n	10006dbc <MXC_I2C_RevA_MasterAsyncHandler+0xfc>
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
10006d54:	68a3      	ldr	r3, [r4, #8]
10006d56:	f013 0f11 	tst.w	r3, #17
10006d5a:	d008      	beq.n	10006d6e <MXC_I2C_RevA_MasterAsyncHandler+0xae>
            read += MXC_I2C_ReadRXFIFO ((mxc_i2c_regs_t*) i2c, &req->rx_buf[read], req->rx_len - read);
10006d5c:	6929      	ldr	r1, [r5, #16]
10006d5e:	1bd2      	subs	r2, r2, r7
10006d60:	4439      	add	r1, r7
10006d62:	4620      	mov	r0, r4
10006d64:	f7ff fed8 	bl	10006b18 <MXC_I2C_ReadRXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10006d68:	2310      	movs	r3, #16
            read += MXC_I2C_ReadRXFIFO ((mxc_i2c_regs_t*) i2c, &req->rx_buf[read], req->rx_len - read);
10006d6a:	4407      	add	r7, r0
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10006d6c:	60a3      	str	r3, [r4, #8]
        }
        
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10006d6e:	68a3      	ldr	r3, [r4, #8]
10006d70:	f413 4ffe 	tst.w	r3, #32512	; 0x7f00
10006d74:	d00b      	beq.n	10006d8e <MXC_I2C_RevA_MasterAsyncHandler+0xce>
            req->rx_len = read;
10006d76:	616f      	str	r7, [r5, #20]
            MXC_I2C_Stop ((mxc_i2c_regs_t*) i2c);
10006d78:	4620      	mov	r0, r4
10006d7a:	f7ff fecb 	bl	10006b14 <MXC_I2C_Stop>
            MXC_I2C_RevA_AsyncCallback (i2c, E_COMM_ERR);
10006d7e:	4620      	mov	r0, r4
10006d80:	f06f 0108 	mvn.w	r1, #8
10006d84:	f7ff ff32 	bl	10006bec <MXC_I2C_RevA_AsyncCallback>
            MXC_I2C_RevA_AsyncStop (i2c);
10006d88:	4620      	mov	r0, r4
10006d8a:	f7ff ff63 	bl	10006c54 <MXC_I2C_RevA_AsyncStop>
        }
        
        if ( (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE) && (req->rx_len < read)) {
10006d8e:	68a3      	ldr	r3, [r4, #8]
10006d90:	07db      	lsls	r3, r3, #31
10006d92:	d513      	bpl.n	10006dbc <MXC_I2C_RevA_MasterAsyncHandler+0xfc>
10006d94:	696b      	ldr	r3, [r5, #20]
10006d96:	42bb      	cmp	r3, r7
10006d98:	d210      	bcs.n	10006dbc <MXC_I2C_RevA_MasterAsyncHandler+0xfc>
            if ( (req->rx_len-read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10006d9a:	1bdb      	subs	r3, r3, r7
10006d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
                i2c->rxctrl1 = 0;
10006da0:	bf88      	it	hi
10006da2:	2300      	movhi	r3, #0
            }
            else {
                i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
10006da4:	6223      	str	r3, [r4, #32]
            }
            
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10006da6:	6b23      	ldr	r3, [r4, #48]	; 0x30
10006da8:	f043 0302 	orr.w	r3, r3, #2
10006dac:	6323      	str	r3, [r4, #48]	; 0x30
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10006dae:	2301      	movs	r3, #1
10006db0:	60a3      	str	r3, [r4, #8]
            i2c->fifo = (req->addr << 1) | 0x1;         // Load slave address with read bit.
10006db2:	686b      	ldr	r3, [r5, #4]
10006db4:	005b      	lsls	r3, r3, #1
10006db6:	f043 0301 	orr.w	r3, r3, #1
10006dba:	62e3      	str	r3, [r4, #44]	; 0x2c
        }
    }
    
    if ( (req->tx_len == written) && (read == 0)) {
10006dbc:	68eb      	ldr	r3, [r5, #12]
10006dbe:	4543      	cmp	r3, r8
10006dc0:	d13e      	bne.n	10006e40 <MXC_I2C_RevA_MasterAsyncHandler+0x180>
10006dc2:	b327      	cbz	r7, 10006e0e <MXC_I2C_RevA_MasterAsyncHandler+0x14e>
        MXC_I2C_Start ((mxc_i2c_regs_t*) i2c); // Start or Restart as needed
        
        i2c->fifo = (req->addr << 1) | 0x1;     // Load slave address with read bit.
    }
    
    if ( (req->tx_len == written) && (req->rx_len == read)) {
10006dc4:	696b      	ldr	r3, [r5, #20]
10006dc6:	42bb      	cmp	r3, r7
10006dc8:	d13a      	bne.n	10006e40 <MXC_I2C_RevA_MasterAsyncHandler+0x180>
        i2c->inten0 &= ~ (MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE);
10006dca:	68e3      	ldr	r3, [r4, #12]
10006dcc:	f023 0311 	bic.w	r3, r3, #17
10006dd0:	60e3      	str	r3, [r4, #12]
        
        if (req->restart) {
10006dd2:	69ab      	ldr	r3, [r5, #24]
10006dd4:	2b00      	cmp	r3, #0
10006dd6:	d039      	beq.n	10006e4c <MXC_I2C_RevA_MasterAsyncHandler+0x18c>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10006dd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
10006dda:	f043 0302 	orr.w	r3, r3, #2
        }
        else {
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10006dde:	6323      	str	r3, [r4, #48]	; 0x30
        }
        
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10006de0:	68a1      	ldr	r1, [r4, #8]
10006de2:	f411 41fe 	ands.w	r1, r1, #32512	; 0x7f00
            MXC_I2C_RevA_AsyncCallback (i2c, E_COMM_ERR);
        }
        else {
            MXC_I2C_RevA_AsyncCallback(i2c, E_NO_ERROR);
10006de6:	4620      	mov	r0, r4
            MXC_I2C_RevA_AsyncCallback (i2c, E_COMM_ERR);
10006de8:	bf18      	it	ne
10006dea:	f06f 0108 	mvnne.w	r1, #8
            MXC_I2C_RevA_AsyncCallback(i2c, E_NO_ERROR);
10006dee:	f7ff fefd 	bl	10006bec <MXC_I2C_RevA_AsyncCallback>
        }
        
        MXC_I2C_RevA_AsyncStop(i2c);
10006df2:	4620      	mov	r0, r4
10006df4:	f7ff ff2e 	bl	10006c54 <MXC_I2C_RevA_AsyncStop>
10006df8:	e022      	b.n	10006e40 <MXC_I2C_RevA_MasterAsyncHandler+0x180>
    mxc_i2c_reva_regs_t* i2c = (mxc_i2c_reva_regs_t*) MXC_I2C_GET_BASE (i2cNum);
10006dfa:	4c1a      	ldr	r4, [pc, #104]	; (10006e64 <MXC_I2C_RevA_MasterAsyncHandler+0x1a4>)
10006dfc:	e783      	b.n	10006d06 <MXC_I2C_RevA_MasterAsyncHandler+0x46>
10006dfe:	4c1a      	ldr	r4, [pc, #104]	; (10006e68 <MXC_I2C_RevA_MasterAsyncHandler+0x1a8>)
10006e00:	e781      	b.n	10006d06 <MXC_I2C_RevA_MasterAsyncHandler+0x46>
10006e02:	4c1a      	ldr	r4, [pc, #104]	; (10006e6c <MXC_I2C_RevA_MasterAsyncHandler+0x1ac>)
10006e04:	e77f      	b.n	10006d06 <MXC_I2C_RevA_MasterAsyncHandler+0x46>
10006e06:	4c1a      	ldr	r4, [pc, #104]	; (10006e70 <MXC_I2C_RevA_MasterAsyncHandler+0x1b0>)
10006e08:	e77d      	b.n	10006d06 <MXC_I2C_RevA_MasterAsyncHandler+0x46>
10006e0a:	4c1a      	ldr	r4, [pc, #104]	; (10006e74 <MXC_I2C_RevA_MasterAsyncHandler+0x1b4>)
10006e0c:	e77b      	b.n	10006d06 <MXC_I2C_RevA_MasterAsyncHandler+0x46>
        i2c->inten0 &= ~MXC_F_I2C_REVA_INTEN0_TX_THD;
10006e0e:	68e3      	ldr	r3, [r4, #12]
10006e10:	696a      	ldr	r2, [r5, #20]
10006e12:	f023 0320 	bic.w	r3, r3, #32
10006e16:	60e3      	str	r3, [r4, #12]
        i2c->inten0 |= MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE;
10006e18:	68e3      	ldr	r3, [r4, #12]
        if ( (req->rx_len) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10006e1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        i2c->inten0 |= MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE;
10006e1e:	f043 0311 	orr.w	r3, r3, #17
10006e22:	60e3      	str	r3, [r4, #12]
        MXC_I2C_Start ((mxc_i2c_regs_t*) i2c); // Start or Restart as needed
10006e24:	4620      	mov	r0, r4
            i2c->rxctrl1 = 0;
10006e26:	bf8c      	ite	hi
10006e28:	6227      	strhi	r7, [r4, #32]
            i2c->rxctrl1 = (req->rx_len); // 0 for 256, otherwise number of bytes to read
10006e2a:	6222      	strls	r2, [r4, #32]
        MXC_I2C_Start ((mxc_i2c_regs_t*) i2c); // Start or Restart as needed
10006e2c:	f7ff fe70 	bl	10006b10 <MXC_I2C_Start>
        i2c->fifo = (req->addr << 1) | 0x1;     // Load slave address with read bit.
10006e30:	686b      	ldr	r3, [r5, #4]
10006e32:	005b      	lsls	r3, r3, #1
10006e34:	f043 0301 	orr.w	r3, r3, #1
10006e38:	62e3      	str	r3, [r4, #44]	; 0x2c
    if ( (req->tx_len == written) && (req->rx_len == read)) {
10006e3a:	68eb      	ldr	r3, [r5, #12]
10006e3c:	4543      	cmp	r3, r8
10006e3e:	d0c1      	beq.n	10006dc4 <MXC_I2C_RevA_MasterAsyncHandler+0x104>
    }
    
    AsyncWritten[i2cNum] = written;
10006e40:	f84a 8026 	str.w	r8, [sl, r6, lsl #2]
    AsyncRead[i2cNum] = read;
10006e44:	f849 7026 	str.w	r7, [r9, r6, lsl #2]
}
10006e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10006e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
10006e4e:	f043 0304 	orr.w	r3, r3, #4
10006e52:	e7c4      	b.n	10006dde <MXC_I2C_RevA_MasterAsyncHandler+0x11e>
10006e54:	20011308 	.word	0x20011308
10006e58:	20011320 	.word	0x20011320
10006e5c:	4011f000 	.word	0x4011f000
10006e60:	20011314 	.word	0x20011314
10006e64:	4001d000 	.word	0x4001d000
10006e68:	4001e000 	.word	0x4001e000
10006e6c:	4001f000 	.word	0x4001f000
10006e70:	4011d000 	.word	0x4011d000
10006e74:	4011e000 	.word	0x4011e000

10006e78 <MXC_I2C_RevA_SlaveAsyncHandler>:

unsigned int MXC_I2C_RevA_SlaveAsyncHandler (mxc_i2c_reva_regs_t* i2c, mxc_i2c_reva_slave_handler_t callback, unsigned int interruptEnables, int* retVal)
{
10006e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // I2C_EVT_RX_THRESH
    // I2C_EVT_TX_THRESH
    // I2C_EVT_TRANS_COMP
    // I2C_EVT_UNDERFLOW
    // I2C_EVT_OVERFLOW
    if (!(interruptEnables & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH| MXC_F_I2C_REVA_INTFL0_ADDR_MATCH))) {
10006e7c:	4fb4      	ldr	r7, [pc, #720]	; (10007150 <MXC_I2C_RevA_SlaveAsyncHandler+0x2d8>)
    uint32_t tFlags = i2c->intfl0;
10006e7e:	f8d0 9008 	ldr.w	r9, [r0, #8]
    uint32_t readFlag = i2c->ctrl & MXC_F_I2C_REVA_CTRL_READ;
10006e82:	f8d0 a000 	ldr.w	sl, [r0]
{
10006e86:	4698      	mov	r8, r3
    if (!(interruptEnables & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH| MXC_F_I2C_REVA_INTFL0_ADDR_MATCH))) {
10006e88:	4017      	ands	r7, r2
    *retVal = E_NO_ERROR;
10006e8a:	2300      	movs	r3, #0
{
10006e8c:	4604      	mov	r4, r0
10006e8e:	460e      	mov	r6, r1
10006e90:	4615      	mov	r5, r2
    *retVal = E_NO_ERROR;
10006e92:	f8c8 3000 	str.w	r3, [r8]
    if (!(interruptEnables & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH| MXC_F_I2C_REVA_INTFL0_ADDR_MATCH))) {
10006e96:	2f00      	cmp	r7, #0
10006e98:	f040 80aa 	bne.w	10006ff0 <MXC_I2C_RevA_SlaveAsyncHandler+0x178>
        // The STOPERR/STARTERR interrupt that's enabled here could fire before we are addressed
        // (fires anytime a stop/start is detected out of sequence).
        if (tFlags & MXC_I2C_REVA_ERROR) {
10006e9c:	f419 42fe 	ands.w	r2, r9, #32512	; 0x7f00
10006ea0:	f000 80e0 	beq.w	10007064 <MXC_I2C_RevA_SlaveAsyncHandler+0x1ec>
            *retVal = E_COMM_ERR;
10006ea4:	f06f 0308 	mvn.w	r3, #8
10006ea8:	f8c8 3000 	str.w	r3, [r8]
            callback (i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10006eac:	4642      	mov	r2, r8
10006eae:	2104      	movs	r1, #4
10006eb0:	47b0      	blx	r6
            MXC_I2C_ClearFlags ((mxc_i2c_regs_t*) i2c, MXC_I2C_REVA_INTFL0_MASK, MXC_I2C_REVA_INTFL1_MASK); // Clear all I2C Interrupts
10006eb2:	2207      	movs	r2, #7
10006eb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
10006eb8:	4620      	mov	r0, r4
10006eba:	f7ff fe35 	bl	10006b28 <MXC_I2C_ClearFlags>
            MXC_I2C_ClearTXFIFO ((mxc_i2c_regs_t*) i2c);
10006ebe:	4620      	mov	r0, r4
10006ec0:	f7ff fe30 	bl	10006b24 <MXC_I2C_ClearTXFIFO>
            MXC_I2C_ClearRXFIFO ((mxc_i2c_regs_t*) i2c);
10006ec4:	4620      	mov	r0, r4
10006ec6:	f7ff fe2b 	bl	10006b20 <MXC_I2C_ClearRXFIFO>
            interruptEnables = 0;
            AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006eca:	4ba2      	ldr	r3, [pc, #648]	; (10007154 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
10006ecc:	429c      	cmp	r4, r3
10006ece:	f000 80bd 	beq.w	1000704c <MXC_I2C_RevA_SlaveAsyncHandler+0x1d4>
10006ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006ed6:	429c      	cmp	r4, r3
10006ed8:	f000 80ba 	beq.w	10007050 <MXC_I2C_RevA_SlaveAsyncHandler+0x1d8>
10006edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006ee0:	429c      	cmp	r4, r3
10006ee2:	f000 80b7 	beq.w	10007054 <MXC_I2C_RevA_SlaveAsyncHandler+0x1dc>
10006ee6:	f503 237e 	add.w	r3, r3, #1040384	; 0xfe000
10006eea:	429c      	cmp	r4, r3
10006eec:	f000 80b4 	beq.w	10007058 <MXC_I2C_RevA_SlaveAsyncHandler+0x1e0>
10006ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006ef4:	429c      	cmp	r4, r3
10006ef6:	f000 80b2 	beq.w	1000705e <MXC_I2C_RevA_SlaveAsyncHandler+0x1e6>
10006efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006efe:	f248 0102 	movw	r1, #32770	; 0x8002
10006f02:	429c      	cmp	r4, r3
10006f04:	bf18      	it	ne
10006f06:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
10006f0a:	4b93      	ldr	r3, [pc, #588]	; (10007158 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10006f0c:	2500      	movs	r5, #0
10006f0e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
                callback (i2c, MXC_I2C_REVA_EVT_OVERFLOW, NULL);
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_RX_OV;
            }
        }
        
        if (interruptEnables & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL1_TX_UN | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT)) {
10006f12:	f248 0322 	movw	r3, #32802	; 0x8022
10006f16:	421d      	tst	r5, r3
10006f18:	d040      	beq.n	10006f9c <MXC_I2C_RevA_SlaveAsyncHandler+0x124>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10006f1a:	f019 0f20 	tst.w	r9, #32
10006f1e:	d005      	beq.n	10006f2c <MXC_I2C_RevA_SlaveAsyncHandler+0xb4>
                callback (i2c, MXC_I2C_REVA_EVT_TX_THRESH, NULL);
10006f20:	2200      	movs	r2, #0
10006f22:	2103      	movs	r1, #3
10006f24:	4620      	mov	r0, r4
10006f26:	47b0      	blx	r6
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10006f28:	2320      	movs	r3, #32
10006f2a:	60a3      	str	r3, [r4, #8]
            }
            
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
10006f2c:	6923      	ldr	r3, [r4, #16]
10006f2e:	079b      	lsls	r3, r3, #30
10006f30:	d505      	bpl.n	10006f3e <MXC_I2C_RevA_SlaveAsyncHandler+0xc6>
                callback (i2c, MXC_I2C_REVA_EVT_UNDERFLOW, NULL);
10006f32:	2200      	movs	r2, #0
10006f34:	2105      	movs	r1, #5
10006f36:	4620      	mov	r0, r4
10006f38:	47b0      	blx	r6
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
10006f3a:	2302      	movs	r3, #2
10006f3c:	6123      	str	r3, [r4, #16]
            }
            
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10006f3e:	f419 4f00 	tst.w	r9, #32768	; 0x8000
10006f42:	d02b      	beq.n	10006f9c <MXC_I2C_RevA_SlaveAsyncHandler+0x124>
                *retVal = E_NO_ERROR;
10006f44:	2500      	movs	r5, #0
                callback (i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10006f46:	4642      	mov	r2, r8
                *retVal = E_NO_ERROR;
10006f48:	f8c8 5000 	str.w	r5, [r8]
                callback (i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10006f4c:	2104      	movs	r1, #4
10006f4e:	4620      	mov	r0, r4
10006f50:	47b0      	blx	r6
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
                interruptEnables = 0;
                AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006f52:	4a80      	ldr	r2, [pc, #512]	; (10007154 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10006f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006f58:	4294      	cmp	r4, r2
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10006f5a:	60a3      	str	r3, [r4, #8]
                AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006f5c:	f000 8098 	beq.w	10007090 <MXC_I2C_RevA_SlaveAsyncHandler+0x218>
10006f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
10006f64:	4294      	cmp	r4, r2
10006f66:	f000 8095 	beq.w	10007094 <MXC_I2C_RevA_SlaveAsyncHandler+0x21c>
10006f6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
10006f6e:	4294      	cmp	r4, r2
10006f70:	f000 8092 	beq.w	10007098 <MXC_I2C_RevA_SlaveAsyncHandler+0x220>
10006f74:	f502 227e 	add.w	r2, r2, #1040384	; 0xfe000
10006f78:	4294      	cmp	r4, r2
10006f7a:	d00b      	beq.n	10006f94 <MXC_I2C_RevA_SlaveAsyncHandler+0x11c>
10006f7c:	4b77      	ldr	r3, [pc, #476]	; (1000715c <MXC_I2C_RevA_SlaveAsyncHandler+0x2e4>)
10006f7e:	429c      	cmp	r4, r3
10006f80:	f000 808c 	beq.w	1000709c <MXC_I2C_RevA_SlaveAsyncHandler+0x224>
10006f84:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
10006f88:	f248 0302 	movw	r3, #32770	; 0x8002
10006f8c:	4294      	cmp	r4, r2
10006f8e:	bf18      	it	ne
10006f90:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
10006f94:	4a70      	ldr	r2, [pc, #448]	; (10007158 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10006f96:	2500      	movs	r5, #0
10006f98:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            }
        }
        
        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
10006f9c:	f019 0f40 	tst.w	r9, #64	; 0x40
10006fa0:	d026      	beq.n	10006ff0 <MXC_I2C_RevA_SlaveAsyncHandler+0x178>
            *retVal = E_NO_ERROR;
10006fa2:	2500      	movs	r5, #0
10006fa4:	f8c8 5000 	str.w	r5, [r8]
            callback (i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10006fa8:	4642      	mov	r2, r8
10006faa:	2104      	movs	r1, #4
10006fac:	4620      	mov	r0, r4
10006fae:	47b0      	blx	r6
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_STOP;
10006fb0:	2340      	movs	r3, #64	; 0x40
10006fb2:	60a3      	str	r3, [r4, #8]
            interruptEnables = 0;
            AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10006fb4:	4b67      	ldr	r3, [pc, #412]	; (10007154 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
10006fb6:	429c      	cmp	r4, r3
10006fb8:	d073      	beq.n	100070a2 <MXC_I2C_RevA_SlaveAsyncHandler+0x22a>
10006fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006fbe:	429c      	cmp	r4, r3
10006fc0:	d071      	beq.n	100070a6 <MXC_I2C_RevA_SlaveAsyncHandler+0x22e>
10006fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006fc6:	429c      	cmp	r4, r3
10006fc8:	d06f      	beq.n	100070aa <MXC_I2C_RevA_SlaveAsyncHandler+0x232>
10006fca:	f503 237e 	add.w	r3, r3, #1040384	; 0xfe000
10006fce:	429c      	cmp	r4, r3
10006fd0:	d06d      	beq.n	100070ae <MXC_I2C_RevA_SlaveAsyncHandler+0x236>
10006fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10006fd6:	429c      	cmp	r4, r3
10006fd8:	d06c      	beq.n	100070b4 <MXC_I2C_RevA_SlaveAsyncHandler+0x23c>
10006fda:	4a61      	ldr	r2, [pc, #388]	; (10007160 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e8>)
10006fdc:	f248 0302 	movw	r3, #32770	; 0x8002
10006fe0:	4294      	cmp	r4, r2
10006fe2:	bf18      	it	ne
10006fe4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
10006fe8:	4a5b      	ldr	r2, [pc, #364]	; (10007158 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10006fea:	2500      	movs	r5, #0
10006fec:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        }
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH) {
10006ff0:	f419 0f80 	tst.w	r9, #4194304	; 0x400000
10006ff4:	d00a      	beq.n	1000700c <MXC_I2C_RevA_SlaveAsyncHandler+0x194>
        callback (i2c, MXC_I2C_REVA_EVT_MASTER_WR, NULL);
10006ff6:	2200      	movs	r2, #0
10006ff8:	4611      	mov	r1, r2
10006ffa:	4620      	mov	r0, r4
10006ffc:	47b0      	blx	r6
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH;
10006ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
10007002:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10007004:	2308      	movs	r3, #8
10007006:	60a3      	str	r3, [r4, #8]
        interruptEnables = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL1_RX_OV | MXC_I2C_REVA_ERROR;
10007008:	f647 7511 	movw	r5, #32529	; 0x7f11
    }
    
    if (tFlags & MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH) {
1000700c:	f419 0f00 	tst.w	r9, #8388608	; 0x800000
10007010:	d00a      	beq.n	10007028 <MXC_I2C_RevA_SlaveAsyncHandler+0x1b0>
        callback (i2c, MXC_I2C_REVA_EVT_MASTER_RD, NULL);
10007012:	2200      	movs	r2, #0
10007014:	2101      	movs	r1, #1
10007016:	4620      	mov	r0, r4
10007018:	47b0      	blx	r6
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH;
1000701a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
1000701e:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10007020:	2308      	movs	r3, #8
10007022:	60a3      	str	r3, [r4, #8]
        interruptEnables = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL1_TX_UN | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT | MXC_I2C_REVA_ERROR;
10007024:	f64f 7522 	movw	r5, #65314	; 0xff22
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_ADDR_MATCH){
10007028:	f019 0708 	ands.w	r7, r9, #8
1000702c:	d04e      	beq.n	100070cc <MXC_I2C_RevA_SlaveAsyncHandler+0x254>
        if (readFlag & MXC_F_I2C_REVA_CTRL_READ) {
1000702e:	f41a 6200 	ands.w	r2, sl, #2048	; 0x800
10007032:	d042      	beq.n	100070ba <MXC_I2C_RevA_SlaveAsyncHandler+0x242>
            callback (i2c, MXC_I2C_REVA_EVT_MASTER_RD, NULL);
10007034:	2200      	movs	r2, #0
10007036:	2101      	movs	r1, #1
10007038:	4620      	mov	r0, r4
1000703a:	47b0      	blx	r6
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
1000703c:	2308      	movs	r3, #8
1000703e:	60a3      	str	r3, [r4, #8]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
            interruptEnables = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL1_TX_UN | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT | MXC_I2C_REVA_ERROR;
10007040:	f64f 7522 	movw	r5, #65314	; 0xff22
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10007044:	60a3      	str	r3, [r4, #8]
        interruptEnables = 0;
        AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;    
    }
    
    return interruptEnables;
}
10007046:	4628      	mov	r0, r5
10007048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
1000704c:	4639      	mov	r1, r7
1000704e:	e75c      	b.n	10006f0a <MXC_I2C_RevA_SlaveAsyncHandler+0x92>
10007050:	2101      	movs	r1, #1
10007052:	e75a      	b.n	10006f0a <MXC_I2C_RevA_SlaveAsyncHandler+0x92>
10007054:	2102      	movs	r1, #2
10007056:	e758      	b.n	10006f0a <MXC_I2C_RevA_SlaveAsyncHandler+0x92>
10007058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
1000705c:	e755      	b.n	10006f0a <MXC_I2C_RevA_SlaveAsyncHandler+0x92>
1000705e:	f248 0101 	movw	r1, #32769	; 0x8001
10007062:	e752      	b.n	10006f0a <MXC_I2C_RevA_SlaveAsyncHandler+0x92>
        if (interruptEnables & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL1_RX_OV)) {
10007064:	f015 0f11 	tst.w	r5, #17
10007068:	f43f af53 	beq.w	10006f12 <MXC_I2C_RevA_SlaveAsyncHandler+0x9a>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_RX_THD) {
1000706c:	f019 0f10 	tst.w	r9, #16
10007070:	d003      	beq.n	1000707a <MXC_I2C_RevA_SlaveAsyncHandler+0x202>
                callback (i2c, MXC_I2C_REVA_EVT_RX_THRESH, NULL);
10007072:	2102      	movs	r1, #2
10007074:	47b0      	blx	r6
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10007076:	2310      	movs	r3, #16
10007078:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
1000707a:	6923      	ldr	r3, [r4, #16]
1000707c:	07da      	lsls	r2, r3, #31
1000707e:	f57f af48 	bpl.w	10006f12 <MXC_I2C_RevA_SlaveAsyncHandler+0x9a>
                callback (i2c, MXC_I2C_REVA_EVT_OVERFLOW, NULL);
10007082:	2200      	movs	r2, #0
10007084:	2106      	movs	r1, #6
10007086:	4620      	mov	r0, r4
10007088:	47b0      	blx	r6
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_RX_OV;
1000708a:	2301      	movs	r3, #1
1000708c:	6123      	str	r3, [r4, #16]
1000708e:	e740      	b.n	10006f12 <MXC_I2C_RevA_SlaveAsyncHandler+0x9a>
                AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
10007090:	462b      	mov	r3, r5
10007092:	e77f      	b.n	10006f94 <MXC_I2C_RevA_SlaveAsyncHandler+0x11c>
10007094:	2301      	movs	r3, #1
10007096:	e77d      	b.n	10006f94 <MXC_I2C_RevA_SlaveAsyncHandler+0x11c>
10007098:	2302      	movs	r3, #2
1000709a:	e77b      	b.n	10006f94 <MXC_I2C_RevA_SlaveAsyncHandler+0x11c>
1000709c:	f248 0301 	movw	r3, #32769	; 0x8001
100070a0:	e778      	b.n	10006f94 <MXC_I2C_RevA_SlaveAsyncHandler+0x11c>
            AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;
100070a2:	462b      	mov	r3, r5
100070a4:	e7a0      	b.n	10006fe8 <MXC_I2C_RevA_SlaveAsyncHandler+0x170>
100070a6:	2301      	movs	r3, #1
100070a8:	e79e      	b.n	10006fe8 <MXC_I2C_RevA_SlaveAsyncHandler+0x170>
100070aa:	2302      	movs	r3, #2
100070ac:	e79c      	b.n	10006fe8 <MXC_I2C_RevA_SlaveAsyncHandler+0x170>
100070ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
100070b2:	e799      	b.n	10006fe8 <MXC_I2C_RevA_SlaveAsyncHandler+0x170>
100070b4:	f248 0301 	movw	r3, #32769	; 0x8001
100070b8:	e796      	b.n	10006fe8 <MXC_I2C_RevA_SlaveAsyncHandler+0x170>
            callback (i2c, MXC_I2C_REVA_EVT_MASTER_WR, NULL);
100070ba:	4611      	mov	r1, r2
100070bc:	4620      	mov	r0, r4
100070be:	47b0      	blx	r6
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
100070c0:	2308      	movs	r3, #8
100070c2:	60a3      	str	r3, [r4, #8]
            interruptEnables = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL1_RX_OV | MXC_I2C_REVA_ERROR;            
100070c4:	f647 7511 	movw	r5, #32529	; 0x7f11
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
100070c8:	60a3      	str	r3, [r4, #8]
            interruptEnables = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL1_RX_OV | MXC_I2C_REVA_ERROR;            
100070ca:	e7bc      	b.n	10007046 <MXC_I2C_RevA_SlaveAsyncHandler+0x1ce>
    } else if (tFlags & MXC_I2C_REVA_ERROR) {
100070cc:	f419 4ffe 	tst.w	r9, #32512	; 0x7f00
100070d0:	d0b9      	beq.n	10007046 <MXC_I2C_RevA_SlaveAsyncHandler+0x1ce>
        *retVal = E_COMM_ERR;
100070d2:	f06f 0308 	mvn.w	r3, #8
        callback (i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
100070d6:	4642      	mov	r2, r8
100070d8:	2104      	movs	r1, #4
        *retVal = E_COMM_ERR;
100070da:	f8c8 3000 	str.w	r3, [r8]
        callback (i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
100070de:	4620      	mov	r0, r4
100070e0:	47b0      	blx	r6
    i2c->intfl0 = flags0;
100070e2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
100070e6:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = flags1;
100070e8:	2307      	movs	r3, #7
100070ea:	6123      	str	r3, [r4, #16]
        MXC_I2C_RevA_ClearTXFIFO(i2c);
100070ec:	4620      	mov	r0, r4
100070ee:	f7ff fd72 	bl	10006bd6 <MXC_I2C_RevA_ClearTXFIFO>
        MXC_I2C_RevA_ClearRXFIFO(i2c);
100070f2:	f7ff fd68 	bl	10006bc6 <MXC_I2C_RevA_ClearRXFIFO>
        AsyncRequests[MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c)] = NULL;    
100070f6:	4b17      	ldr	r3, [pc, #92]	; (10007154 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
100070f8:	429c      	cmp	r4, r3
100070fa:	d01d      	beq.n	10007138 <MXC_I2C_RevA_SlaveAsyncHandler+0x2c0>
100070fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007100:	429c      	cmp	r4, r3
10007102:	d01b      	beq.n	1000713c <MXC_I2C_RevA_SlaveAsyncHandler+0x2c4>
10007104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007108:	429c      	cmp	r4, r3
1000710a:	d019      	beq.n	10007140 <MXC_I2C_RevA_SlaveAsyncHandler+0x2c8>
1000710c:	f503 237e 	add.w	r3, r3, #1040384	; 0xfe000
10007110:	429c      	cmp	r4, r3
10007112:	d017      	beq.n	10007144 <MXC_I2C_RevA_SlaveAsyncHandler+0x2cc>
10007114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007118:	429c      	cmp	r4, r3
1000711a:	d016      	beq.n	1000714a <MXC_I2C_RevA_SlaveAsyncHandler+0x2d2>
1000711c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007120:	f248 0002 	movw	r0, #32770	; 0x8002
10007124:	429c      	cmp	r4, r3
10007126:	bf0c      	ite	eq
10007128:	4604      	moveq	r4, r0
1000712a:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
1000712e:	4b0a      	ldr	r3, [pc, #40]	; (10007158 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10007130:	2500      	movs	r5, #0
10007132:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
10007136:	e786      	b.n	10007046 <MXC_I2C_RevA_SlaveAsyncHandler+0x1ce>
10007138:	463c      	mov	r4, r7
1000713a:	e7f8      	b.n	1000712e <MXC_I2C_RevA_SlaveAsyncHandler+0x2b6>
1000713c:	2401      	movs	r4, #1
1000713e:	e7f6      	b.n	1000712e <MXC_I2C_RevA_SlaveAsyncHandler+0x2b6>
10007140:	2402      	movs	r4, #2
10007142:	e7f4      	b.n	1000712e <MXC_I2C_RevA_SlaveAsyncHandler+0x2b6>
10007144:	f44f 4400 	mov.w	r4, #32768	; 0x8000
10007148:	e7f1      	b.n	1000712e <MXC_I2C_RevA_SlaveAsyncHandler+0x2b6>
1000714a:	f248 0401 	movw	r4, #32769	; 0x8001
1000714e:	e7ee      	b.n	1000712e <MXC_I2C_RevA_SlaveAsyncHandler+0x2b6>
10007150:	00c00008 	.word	0x00c00008
10007154:	4001d000 	.word	0x4001d000
10007158:	20011314 	.word	0x20011314
1000715c:	4011e000 	.word	0x4011e000
10007160:	4011f000 	.word	0x4011f000

10007164 <MXC_I2C_RevA_AsyncHandler>:

void MXC_I2C_RevA_AsyncHandler (mxc_i2c_reva_regs_t* i2c, uint32_t interruptCheck)
{
    int i2cNum = MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c);
10007164:	4b1b      	ldr	r3, [pc, #108]	; (100071d4 <MXC_I2C_RevA_AsyncHandler+0x70>)
10007166:	4298      	cmp	r0, r3
{
10007168:	b513      	push	{r0, r1, r4, lr}
1000716a:	4604      	mov	r4, r0
    int i2cNum = MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c);
1000716c:	d016      	beq.n	1000719c <MXC_I2C_RevA_AsyncHandler+0x38>
1000716e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007172:	4298      	cmp	r0, r3
10007174:	d01a      	beq.n	100071ac <MXC_I2C_RevA_AsyncHandler+0x48>
10007176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000717a:	4298      	cmp	r0, r3
1000717c:	d018      	beq.n	100071b0 <MXC_I2C_RevA_AsyncHandler+0x4c>
1000717e:	f503 237e 	add.w	r3, r3, #1040384	; 0xfe000
10007182:	4298      	cmp	r0, r3
10007184:	d016      	beq.n	100071b4 <MXC_I2C_RevA_AsyncHandler+0x50>
10007186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000718a:	4298      	cmp	r0, r3
1000718c:	d015      	beq.n	100071ba <MXC_I2C_RevA_AsyncHandler+0x56>
1000718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007192:	4298      	cmp	r0, r3
10007194:	d108      	bne.n	100071a8 <MXC_I2C_RevA_AsyncHandler+0x44>
10007196:	f248 0002 	movw	r0, #32770	; 0x8002
1000719a:	e000      	b.n	1000719e <MXC_I2C_RevA_AsyncHandler+0x3a>
1000719c:	2000      	movs	r0, #0
    
    if (i2cNum < 0) {
        return;
    }
    
    if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_MST_MODE) {
1000719e:	6823      	ldr	r3, [r4, #0]
100071a0:	079b      	lsls	r3, r3, #30
100071a2:	d50d      	bpl.n	100071c0 <MXC_I2C_RevA_AsyncHandler+0x5c>
        MXC_I2C_RevA_MasterAsyncHandler (i2cNum);
100071a4:	f7ff fd8c 	bl	10006cc0 <MXC_I2C_RevA_MasterAsyncHandler>
    }
    else {
        mxc_i2c_reva_slave_handler_t callback = (mxc_i2c_reva_slave_handler_t) AsyncRequests[i2cNum];
        i2c->inten0 = MXC_I2C_RevA_SlaveAsyncHandler (i2c, callback, i2c->inten0, &slaveRetVal);
    }
}
100071a8:	b002      	add	sp, #8
100071aa:	bd10      	pop	{r4, pc}
    int i2cNum = MXC_I2C_GET_IDX ((mxc_i2c_regs_t*) i2c);
100071ac:	2001      	movs	r0, #1
100071ae:	e7f6      	b.n	1000719e <MXC_I2C_RevA_AsyncHandler+0x3a>
100071b0:	2002      	movs	r0, #2
100071b2:	e7f4      	b.n	1000719e <MXC_I2C_RevA_AsyncHandler+0x3a>
100071b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
100071b8:	e7f1      	b.n	1000719e <MXC_I2C_RevA_AsyncHandler+0x3a>
100071ba:	f248 0001 	movw	r0, #32769	; 0x8001
100071be:	e7ee      	b.n	1000719e <MXC_I2C_RevA_AsyncHandler+0x3a>
        i2c->inten0 = MXC_I2C_RevA_SlaveAsyncHandler (i2c, callback, i2c->inten0, &slaveRetVal);
100071c0:	4905      	ldr	r1, [pc, #20]	; (100071d8 <MXC_I2C_RevA_AsyncHandler+0x74>)
100071c2:	68e2      	ldr	r2, [r4, #12]
100071c4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
100071c8:	ab01      	add	r3, sp, #4
100071ca:	4620      	mov	r0, r4
100071cc:	f7ff fe54 	bl	10006e78 <MXC_I2C_RevA_SlaveAsyncHandler>
100071d0:	60e0      	str	r0, [r4, #12]
100071d2:	e7e9      	b.n	100071a8 <MXC_I2C_RevA_AsyncHandler+0x44>
100071d4:	4001d000 	.word	0x4001d000
100071d8:	20011314 	.word	0x20011314

100071dc <MXC_TMR_ClearFlags>:
    return MXC_TMR_RevA_GetCount ((mxc_tmr_reva_regs_t*) tmr);
}

void MXC_TMR_ClearFlags (mxc_tmr_regs_t* tmr)
{
    MXC_TMR_RevA_ClearFlags ((mxc_tmr_reva_regs_t*) tmr);
100071dc:	f000 b800 	b.w	100071e0 <MXC_TMR_RevA_ClearFlags>

100071e0 <MXC_TMR_RevA_ClearFlags>:
void MXC_TMR_RevA_ClearFlags(mxc_tmr_reva_regs_t* tmr)
{
    int tmr_id = MXC_TMR_GET_IDX((mxc_tmr_regs_t*) tmr);
    MXC_ASSERT(tmr_id >= 0);

    tmr->intr = MXC_F_TMR_REVA_INTR_IRQ;
100071e0:	2301      	movs	r3, #1
100071e2:	60c3      	str	r3, [r0, #12]
}
100071e4:	4770      	bx	lr

100071e6 <MXC_TPU_Init>:
/* ************************************************************************* */

int MXC_TPU_Init(mxc_sys_periph_clock_t clock)
{
	/* The crypto clock needs to be turned on for crypto to work. */
	if ((MXC_GCR->clkcn & MXC_F_GCR_CLKCN_HIRC_EN) == 0) {
100071e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
100071ea:	b510      	push	{r4, lr}
	if ((MXC_GCR->clkcn & MXC_F_GCR_CLKCN_HIRC_EN) == 0) {
100071ec:	689a      	ldr	r2, [r3, #8]
100071ee:	0352      	lsls	r2, r2, #13
{
100071f0:	4604      	mov	r4, r0
	if ((MXC_GCR->clkcn & MXC_F_GCR_CLKCN_HIRC_EN) == 0) {
100071f2:	d505      	bpl.n	10007200 <MXC_TPU_Init+0x1a>
	    if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC_RDY ) != E_NO_ERROR) {
	        return E_TIME_OUT;
	    }
	}

	if (clock == MXC_SYS_PERIPH_CLOCK_TPU){
100071f4:	2c0e      	cmp	r4, #14
100071f6:	d110      	bne.n	1000721a <MXC_TPU_Init+0x34>
		MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TPU);
	}

	if (clock == MXC_SYS_PERIPH_CLOCK_TRNG){
		MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TRNG);
100071f8:	4620      	mov	r0, r4
100071fa:	f7ff f813 	bl	10006224 <MXC_SYS_ClockEnable>
100071fe:	e00e      	b.n	1000721e <MXC_TPU_Init+0x38>
	    MXC_GCR->clkcn |= MXC_F_GCR_CLKCN_HIRC_EN;
10007200:	689a      	ldr	r2, [r3, #8]
10007202:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
10007206:	609a      	str	r2, [r3, #8]
	    if (MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCN_HIRC_RDY ) != E_NO_ERROR) {
10007208:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
1000720c:	f7ff f820 	bl	10006250 <MXC_SYS_Clock_Timeout>
10007210:	2800      	cmp	r0, #0
10007212:	d0ef      	beq.n	100071f4 <MXC_TPU_Init+0xe>
	        return E_TIME_OUT;
10007214:	f06f 0009 	mvn.w	r0, #9
	}

	return E_NO_ERROR;
}
10007218:	bd10      	pop	{r4, pc}
	if (clock == MXC_SYS_PERIPH_CLOCK_TRNG){
1000721a:	2c22      	cmp	r4, #34	; 0x22
1000721c:	d0ec      	beq.n	100071f8 <MXC_TPU_Init+0x12>
	return E_NO_ERROR;
1000721e:	2000      	movs	r0, #0
10007220:	e7fa      	b.n	10007218 <MXC_TPU_Init+0x32>
	...

10007224 <MXC_TPU_Reset>:
    return E_NO_ERROR;
}

void MXC_TPU_Reset(void)
{
	MXC_TPU_RevA_Reset((mxc_tpu_reva_regs_t*) MXC_TPU);
10007224:	4801      	ldr	r0, [pc, #4]	; (1000722c <MXC_TPU_Reset+0x8>)
10007226:	f000 b84d 	b.w	100072c4 <MXC_TPU_RevA_Reset>
1000722a:	bf00      	nop
1000722c:	40001000 	.word	0x40001000

10007230 <MXC_TPU_Cipher_Get_Key_Size>:
/* ************************************************************************* */

unsigned int MXC_TPU_Cipher_Get_Key_Size(mxc_tpu_ciphersel_t cipher)
{
    // Key size indexed by 'opsel'
    switch(cipher)
10007230:	3801      	subs	r0, #1
10007232:	b2c0      	uxtb	r0, r0
10007234:	2804      	cmp	r0, #4
10007236:	bf9a      	itte	ls
10007238:	4b01      	ldrls	r3, [pc, #4]	; (10007240 <MXC_TPU_Cipher_Get_Key_Size+0x10>)
1000723a:	5c18      	ldrbls	r0, [r3, r0]
{
1000723c:	2000      	movhi	r0, #0
        case MXC_TPU_CIPHER_TDES:
            return 24;
    }
    // if returns this bad param was passed in or disable.
    return 0;
}
1000723e:	4770      	bx	lr
10007240:	100109c9 	.word	0x100109c9

10007244 <MXC_TPU_Cipher_Get_Block_Size>:

unsigned int MXC_TPU_Cipher_Get_Block_Size(mxc_tpu_ciphersel_t cipher)
{
    switch(cipher)
10007244:	3801      	subs	r0, #1
10007246:	b2c0      	uxtb	r0, r0
10007248:	2804      	cmp	r0, #4
1000724a:	bf9a      	itte	ls
1000724c:	4b01      	ldrls	r3, [pc, #4]	; (10007254 <MXC_TPU_Cipher_Get_Block_Size+0x10>)
1000724e:	5c18      	ldrbls	r0, [r3, r0]
{
10007250:	2000      	movhi	r0, #0
        case MXC_TPU_CIPHER_TDES:
            return DES_DATA_LEN;
    }
    // if returns this bad param was passed in or disable.
    return 0;
}
10007252:	4770      	bx	lr
10007254:	100109c4 	.word	0x100109c4

10007258 <MXC_TPU_Cipher_GetLength>:

unsigned int MXC_TPU_Cipher_GetLength(mxc_tpu_ciphersel_t cipher, unsigned int data_size)
{
	return MXC_TPU_RevA_Cipher_GetLength(cipher, data_size);
10007258:	f000 b84c 	b.w	100072f4 <MXC_TPU_RevA_Cipher_GetLength>

1000725c <MXC_TPU_Cipher_EncDecSelect>:
}

void MXC_TPU_Cipher_EncDecSelect(int enc)
{
1000725c:	4601      	mov	r1, r0
	MXC_TPU_RevA_Cipher_EncDecSelect((mxc_tpu_reva_regs_t*) MXC_TPU, enc);
1000725e:	4801      	ldr	r0, [pc, #4]	; (10007264 <MXC_TPU_Cipher_EncDecSelect+0x8>)
10007260:	f000 b854 	b.w	1000730c <MXC_TPU_RevA_Cipher_EncDecSelect>
10007264:	40001000 	.word	0x40001000

10007268 <MXC_TPU_Cipher_Config>:
}

int MXC_TPU_Cipher_Config(mxc_tpu_modesel_t mode, mxc_tpu_ciphersel_t cipher)
{
10007268:	460a      	mov	r2, r1
	return MXC_TPU_RevA_Cipher_Config((mxc_tpu_reva_regs_t*) MXC_TPU, (mxc_tpu_reva_modesel_t) mode, (mxc_tpu_reva_ciphersel_t) cipher);
1000726a:	4601      	mov	r1, r0
1000726c:	4801      	ldr	r0, [pc, #4]	; (10007274 <MXC_TPU_Cipher_Config+0xc>)
1000726e:	f000 b856 	b.w	1000731e <MXC_TPU_RevA_Cipher_Config>
10007272:	bf00      	nop
10007274:	40001000 	.word	0x40001000

10007278 <MXC_TPU_Cipher_DoOperation>:
}

int MXC_TPU_Cipher_DoOperation(const char *src, const char *iv, const char *key,
                             mxc_tpu_ciphersel_t cipher, mxc_tpu_modesel_t mode, unsigned int data_size, char *outptr)
{
10007278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return MXC_TPU_RevA_Cipher_DoOperation((mxc_tpu_reva_regs_t*) MXC_TPU, src, iv, key, cipher, mode, data_size, outptr);
1000727a:	9c08      	ldr	r4, [sp, #32]
1000727c:	9403      	str	r4, [sp, #12]
1000727e:	9c07      	ldr	r4, [sp, #28]
10007280:	9402      	str	r4, [sp, #8]
10007282:	f89d 4018 	ldrb.w	r4, [sp, #24]
10007286:	e9cd 3400 	strd	r3, r4, [sp]
1000728a:	4613      	mov	r3, r2
1000728c:	460a      	mov	r2, r1
1000728e:	4601      	mov	r1, r0
10007290:	4802      	ldr	r0, [pc, #8]	; (1000729c <MXC_TPU_Cipher_DoOperation+0x24>)
10007292:	f000 f850 	bl	10007336 <MXC_TPU_RevA_Cipher_DoOperation>
}
10007296:	b004      	add	sp, #16
10007298:	bd10      	pop	{r4, pc}
1000729a:	bf00      	nop
1000729c:	40001000 	.word	0x40001000

100072a0 <MXC_TPU_Cipher_AES_Encrypt>:
	return MXC_TPU_RevA_Cipher_TDES_Decrypt(ciphertext, iv, key, mode, data_size, outptr);
}

int MXC_TPU_Cipher_AES_Encrypt(const char *plaintext, const char *iv, const char *key,
							mxc_tpu_ciphersel_t cipher, mxc_tpu_modesel_t mode, unsigned int data_size, char *outptr)
{
100072a0:	b410      	push	{r4}
100072a2:	f89d 4004 	ldrb.w	r4, [sp, #4]
	return MXC_TPU_RevA_Cipher_AES_Encrypt(plaintext, iv, key, cipher, mode, data_size, outptr);
100072a6:	9401      	str	r4, [sp, #4]
}
100072a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return MXC_TPU_RevA_Cipher_AES_Encrypt(plaintext, iv, key, cipher, mode, data_size, outptr);
100072ac:	f000 b89e 	b.w	100073ec <MXC_TPU_RevA_Cipher_AES_Encrypt>

100072b0 <memcpy32>:
}

/* ************************************************************************ */
static void memcpy32(uint32_t * dst, uint32_t * src, unsigned int len)
{
    while (len) {
100072b0:	3904      	subs	r1, #4
100072b2:	4402      	add	r2, r0
100072b4:	4290      	cmp	r0, r2
100072b6:	d100      	bne.n	100072ba <memcpy32+0xa>
        *dst = *src;
        dst++;
        src++;
        len -= 4;
    }
}
100072b8:	4770      	bx	lr
        *dst = *src;
100072ba:	f851 3f04 	ldr.w	r3, [r1, #4]!
100072be:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
100072c2:	e7f7      	b.n	100072b4 <memcpy32+0x4>

100072c4 <MXC_TPU_RevA_Reset>:
                        MXC_F_TPU_REVA_CTRL_MAA_DONE;
}

// ************************************** Function to Clear Crypto Register ************************************
void MXC_TPU_RevA_Reset(mxc_tpu_reva_regs_t *tpu)
{
100072c4:	b510      	push	{r4, lr}
100072c6:	4604      	mov	r4, r0

    MXC_TPU_Init(MXC_SYS_PERIPH_CLOCK_TPU);
100072c8:	200e      	movs	r0, #14
100072ca:	f7ff ff8c 	bl	100071e6 <MXC_TPU_Init>
    
    // Reset Crypto Accelerator
    tpu->ctrl = MXC_F_TPU_REVA_CTRL_RST;
100072ce:	4622      	mov	r2, r4
100072d0:	2301      	movs	r3, #1
100072d2:	f842 3bd4 	str.w	r3, [r2], #212
        *dst = value;
100072d6:	2100      	movs	r1, #0
    tpu->ctrl = MXC_F_TPU_REVA_CTRL_RST;
100072d8:	4623      	mov	r3, r4
        *dst = value;
100072da:	f843 1b04 	str.w	r1, [r3], #4
    while (len) {
100072de:	429a      	cmp	r2, r3
100072e0:	d1fb      	bne.n	100072da <MXC_TPU_RevA_Reset+0x16>

    memset32((uint32_t *)tpu, 0, sizeof(mxc_tpu_reva_regs_t));

    // Set the legacy bit so done bits are W1C.
    tpu->ctrl |= MXC_F_TPU_REVA_CTRL_FLAG_MODE;
100072e2:	6823      	ldr	r3, [r4, #0]
100072e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
100072e8:	6023      	str	r3, [r4, #0]
    tpu->ctrl |= MXC_F_TPU_REVA_CTRL_DMA_DONE | MXC_F_TPU_REVA_CTRL_GLS_DONE |
100072ea:	6823      	ldr	r3, [r4, #0]
100072ec:	f043 53f8 	orr.w	r3, r3, #520093696	; 0x1f000000
100072f0:	6023      	str	r3, [r4, #0]

    MXC_TPU_RevA_Clear_Done_Flags(tpu);
}
100072f2:	bd10      	pop	{r4, pc}

100072f4 <MXC_TPU_RevA_Cipher_GetLength>:
/* Cipher functions                                                          */
/* ************************************************************************* */

// ************************************* Function to Get Number of Blocks **************************************
unsigned int MXC_TPU_RevA_Cipher_GetLength(mxc_tpu_ciphersel_t cipher, unsigned int data_size)
{
100072f4:	b510      	push	{r4, lr}
100072f6:	460c      	mov	r4, r1
    unsigned int numBlocks, block_size;
    block_size = MXC_TPU_Cipher_Get_Block_Size(cipher);
100072f8:	f7ff ffa4 	bl	10007244 <MXC_TPU_Cipher_Get_Block_Size>
    numBlocks = data_size / block_size;
100072fc:	fbb4 f3f0 	udiv	r3, r4, r0
    if ((data_size % block_size) > 0) {
10007300:	fb00 4013 	mls	r0, r0, r3, r4
10007304:	b100      	cbz	r0, 10007308 <MXC_TPU_RevA_Cipher_GetLength+0x14>
        numBlocks++;
10007306:	3301      	adds	r3, #1
    }

    return numBlocks;
}
10007308:	4618      	mov	r0, r3
1000730a:	bd10      	pop	{r4, pc}

1000730c <MXC_TPU_RevA_Cipher_EncDecSelect>:
// ************************ Function to Enable Encrypt/Decrypt Cipher Operation *******************************
void MXC_TPU_RevA_Cipher_EncDecSelect(mxc_tpu_reva_regs_t *tpu, int enc)
{
    // Enable Encryption/Decryption Operation
    if (enc) {
        tpu->cipher_ctrl &= ~MXC_F_TPU_REVA_CIPHER_CTRL_ENC;
1000730c:	6843      	ldr	r3, [r0, #4]
    if (enc) {
1000730e:	b119      	cbz	r1, 10007318 <MXC_TPU_RevA_Cipher_EncDecSelect+0xc>
        tpu->cipher_ctrl &= ~MXC_F_TPU_REVA_CIPHER_CTRL_ENC;
10007310:	f023 0301 	bic.w	r3, r3, #1
    } else {
        tpu->cipher_ctrl |= MXC_F_TPU_REVA_CIPHER_CTRL_ENC;
10007314:	6043      	str	r3, [r0, #4]
    }
}
10007316:	4770      	bx	lr
        tpu->cipher_ctrl |= MXC_F_TPU_REVA_CIPHER_CTRL_ENC;
10007318:	f043 0301 	orr.w	r3, r3, #1
1000731c:	e7fa      	b.n	10007314 <MXC_TPU_RevA_Cipher_EncDecSelect+0x8>

1000731e <MXC_TPU_RevA_Cipher_Config>:

// ******************************* Function to Configure Cipher Operation *************************************
int MXC_TPU_RevA_Cipher_Config(mxc_tpu_reva_regs_t *tpu, mxc_tpu_reva_modesel_t mode, mxc_tpu_reva_ciphersel_t cipher)
{
1000731e:	b570      	push	{r4, r5, r6, lr}
10007320:	4614      	mov	r4, r2
10007322:	4605      	mov	r5, r0
10007324:	460e      	mov	r6, r1


    // Select cipher mode ECB/CBC/CFB/CTR
    // Select cipher operation AES_128/192/256/DES/TDES
    // Select user cipher key
    tpu->cipher_ctrl = (mode << MXC_F_TPU_REVA_CIPHER_CTRL_MODE_POS) | (cipher <<
10007326:	0124      	lsls	r4, r4, #4
10007328:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    MXC_TPU_Reset();
1000732c:	f7ff ff7a 	bl	10007224 <MXC_TPU_Reset>
    tpu->cipher_ctrl = (mode << MXC_F_TPU_REVA_CIPHER_CTRL_MODE_POS) | (cipher <<
10007330:	606c      	str	r4, [r5, #4]
                              MXC_F_TPU_REVA_CIPHER_CTRL_CIPHER_POS) | MXC_S_TPU_REVA_CIPHER_CTRL_SRC_CIPHERKEY;

    return E_SUCCESS;
}
10007332:	2000      	movs	r0, #0
10007334:	bd70      	pop	{r4, r5, r6, pc}

10007336 <MXC_TPU_RevA_Cipher_DoOperation>:

// ************************************ Function to Test Cipher Algorithm ***********************************
int MXC_TPU_RevA_Cipher_DoOperation(mxc_tpu_reva_regs_t *tpu, const char *src, const char *iv, const char *key,
                       mxc_tpu_ciphersel_t cipher, mxc_tpu_modesel_t mode, unsigned int data_size, char *outptr)
{
10007336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000733a:	460e      	mov	r6, r1
1000733c:	e9dd 1a0e 	ldrd	r1, sl, [sp, #56]	; 0x38
10007340:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
10007344:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
10007348:	4604      	mov	r4, r0
1000734a:	4617      	mov	r7, r2
1000734c:	4698      	mov	r8, r3
    unsigned int keyLength, dataLength, numBlocks, i;

    if (data_size == 0) {
1000734e:	2900      	cmp	r1, #0
10007350:	d046      	beq.n	100073e0 <MXC_TPU_RevA_Cipher_DoOperation+0xaa>
        return E_INVALID;
    }

    // Check if src, key, iv is a null pointer
    if (src == NULL || (iv == NULL && mode != (mxc_tpu_modesel_t) MXC_TPU_REVA_MODE_ECB) || key == NULL) {
10007352:	2e00      	cmp	r6, #0
10007354:	d047      	beq.n	100073e6 <MXC_TPU_RevA_Cipher_DoOperation+0xb0>
10007356:	b912      	cbnz	r2, 1000735e <MXC_TPU_RevA_Cipher_DoOperation+0x28>
10007358:	f1bb 0f00 	cmp.w	fp, #0
1000735c:	d143      	bne.n	100073e6 <MXC_TPU_RevA_Cipher_DoOperation+0xb0>
1000735e:	f1b8 0f00 	cmp.w	r8, #0
10007362:	d040      	beq.n	100073e6 <MXC_TPU_RevA_Cipher_DoOperation+0xb0>
        return E_NULL_PTR;
    }

    numBlocks = MXC_TPU_Cipher_GetLength(cipher, data_size);
10007364:	4628      	mov	r0, r5
10007366:	f7ff ff77 	bl	10007258 <MXC_TPU_Cipher_GetLength>
1000736a:	4681      	mov	r9, r0

    keyLength = MXC_TPU_Cipher_Get_Key_Size(cipher);
1000736c:	4628      	mov	r0, r5
1000736e:	f7ff ff5f 	bl	10007230 <MXC_TPU_Cipher_Get_Key_Size>
10007372:	9001      	str	r0, [sp, #4]
    dataLength = MXC_TPU_Cipher_Get_Block_Size(cipher);
10007374:	4628      	mov	r0, r5
10007376:	f7ff ff65 	bl	10007244 <MXC_TPU_Cipher_Get_Block_Size>

    // Load key into cipher key register
    memcpy32((void *)&tpu->cipher_key[0], (void *)key, keyLength);
1000737a:	9a01      	ldr	r2, [sp, #4]
    dataLength = MXC_TPU_Cipher_Get_Block_Size(cipher);
1000737c:	4605      	mov	r5, r0
    memcpy32((void *)&tpu->cipher_key[0], (void *)key, keyLength);
1000737e:	4641      	mov	r1, r8
10007380:	f104 0060 	add.w	r0, r4, #96	; 0x60
10007384:	f7ff ff94 	bl	100072b0 <memcpy32>

    // Load Initial Vector if necessary
    if (mode != MXC_TPU_MODE_ECB) {
10007388:	f1bb 0f00 	cmp.w	fp, #0
1000738c:	d005      	beq.n	1000739a <MXC_TPU_RevA_Cipher_DoOperation+0x64>
        memcpy32((void *)&tpu->cipher_init[0], (void *)iv, dataLength);
1000738e:	462a      	mov	r2, r5
10007390:	4639      	mov	r1, r7
10007392:	f104 0050 	add.w	r0, r4, #80	; 0x50
10007396:	f7ff ff8b 	bl	100072b0 <memcpy32>
{
1000739a:	2700      	movs	r7, #0
        // Wait until ready for data
        while (!(tpu->ctrl & MXC_F_TPU_REVA_CTRL_RDY)) {
        }

        // Load plaintext into data in register to start the operation
        memcpy32((void *)&tpu->data_in[0], (void *)src, dataLength);
1000739c:	f104 0820 	add.w	r8, r4, #32
        // Wait until operation is complete
        while (!(tpu->ctrl & MXC_F_TPU_REVA_CTRL_CPH_DONE)) {
        }

        // Copy data out
        memcpy32((void *)outptr, (void *)&tpu->data_out[0], dataLength);
100073a0:	f104 0b30 	add.w	fp, r4, #48	; 0x30
    for (i = 0; i < numBlocks; i++) {
100073a4:	454f      	cmp	r7, r9
100073a6:	d103      	bne.n	100073b0 <MXC_TPU_RevA_Cipher_DoOperation+0x7a>
        
        // Clear done flag so reading of the next block will be gated properly.
        tpu->ctrl |= MXC_F_TPU_REVA_CTRL_CPH_DONE;
    }

    return E_SUCCESS;
100073a8:	2000      	movs	r0, #0
}
100073aa:	b003      	add	sp, #12
100073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (!(tpu->ctrl & MXC_F_TPU_REVA_CTRL_RDY)) {
100073b0:	6823      	ldr	r3, [r4, #0]
100073b2:	005a      	lsls	r2, r3, #1
100073b4:	d5fc      	bpl.n	100073b0 <MXC_TPU_RevA_Cipher_DoOperation+0x7a>
        memcpy32((void *)&tpu->data_in[0], (void *)src, dataLength);
100073b6:	462a      	mov	r2, r5
100073b8:	4631      	mov	r1, r6
100073ba:	4640      	mov	r0, r8
100073bc:	f7ff ff78 	bl	100072b0 <memcpy32>
        while (!(tpu->ctrl & MXC_F_TPU_REVA_CTRL_CPH_DONE)) {
100073c0:	6823      	ldr	r3, [r4, #0]
100073c2:	011b      	lsls	r3, r3, #4
100073c4:	d5fc      	bpl.n	100073c0 <MXC_TPU_RevA_Cipher_DoOperation+0x8a>
        memcpy32((void *)outptr, (void *)&tpu->data_out[0], dataLength);
100073c6:	4650      	mov	r0, sl
100073c8:	462a      	mov	r2, r5
100073ca:	4659      	mov	r1, fp
100073cc:	f7ff ff70 	bl	100072b0 <memcpy32>
        tpu->ctrl |= MXC_F_TPU_REVA_CTRL_CPH_DONE;
100073d0:	6823      	ldr	r3, [r4, #0]
100073d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
        src += dataLength;
100073d6:	442e      	add	r6, r5
        outptr += dataLength;
100073d8:	44aa      	add	sl, r5
        tpu->ctrl |= MXC_F_TPU_REVA_CTRL_CPH_DONE;
100073da:	6023      	str	r3, [r4, #0]
    for (i = 0; i < numBlocks; i++) {
100073dc:	3701      	adds	r7, #1
100073de:	e7e1      	b.n	100073a4 <MXC_TPU_RevA_Cipher_DoOperation+0x6e>
        return E_INVALID;
100073e0:	f06f 0003 	mvn.w	r0, #3
100073e4:	e7e1      	b.n	100073aa <MXC_TPU_RevA_Cipher_DoOperation+0x74>
        return E_NULL_PTR;
100073e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100073ea:	e7de      	b.n	100073aa <MXC_TPU_RevA_Cipher_DoOperation+0x74>

100073ec <MXC_TPU_RevA_Cipher_AES_Encrypt>:
    return MXC_TPU_Cipher_DoOperation(ciphertext, iv, key, (mxc_tpu_ciphersel_t) MXC_TPU_REVA_CIPHER_TDES, mode, data_size, outptr);
}

int MXC_TPU_RevA_Cipher_AES_Encrypt(const char *plaintext, const char *iv, const char *key,
                       mxc_tpu_ciphersel_t cipher, mxc_tpu_modesel_t mode, unsigned int data_size, char *outptr)
{
100073ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
100073f0:	461c      	mov	r4, r3
    if ((cipher != MXC_TPU_CIPHER_AES128) &&
100073f2:	3b01      	subs	r3, #1
100073f4:	2b02      	cmp	r3, #2
{
100073f6:	e9cd 2100 	strd	r2, r1, [sp]
100073fa:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
100073fe:	f89d 6020 	ldrb.w	r6, [sp, #32]
10007402:	4605      	mov	r5, r0
    if ((cipher != MXC_TPU_CIPHER_AES128) &&
10007404:	d80e      	bhi.n	10007424 <MXC_TPU_RevA_Cipher_AES_Encrypt+0x38>
        (cipher != MXC_TPU_CIPHER_AES256)) {
        return E_BAD_PARAM;
    }

    // Enable cipher encrypt/decrypt process
    MXC_TPU_Cipher_EncDecSelect(1);
10007406:	2001      	movs	r0, #1
10007408:	f7ff ff28 	bl	1000725c <MXC_TPU_Cipher_EncDecSelect>

    // Start the cipher operation
    return MXC_TPU_Cipher_DoOperation(plaintext, iv, key, cipher, mode, data_size, outptr);
1000740c:	e9dd 2100 	ldrd	r2, r1, [sp]
10007410:	4623      	mov	r3, r4
10007412:	4628      	mov	r0, r5
10007414:	e9cd 7809 	strd	r7, r8, [sp, #36]	; 0x24
10007418:	9608      	str	r6, [sp, #32]
}
1000741a:	b002      	add	sp, #8
1000741c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return MXC_TPU_Cipher_DoOperation(plaintext, iv, key, cipher, mode, data_size, outptr);
10007420:	f7ff bf2a 	b.w	10007278 <MXC_TPU_Cipher_DoOperation>
}
10007424:	f06f 0002 	mvn.w	r0, #2
10007428:	b002      	add	sp, #8
1000742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1000742e <MXC_TRNG_Init>:
/* ************************************************************************* */

/********************************************************/

int MXC_TRNG_Init()
{
1000742e:	b508      	push	{r3, lr}
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TRNG);
10007430:	2022      	movs	r0, #34	; 0x22
10007432:	f7fe fef7 	bl	10006224 <MXC_SYS_ClockEnable>
    
    MXC_TRNG_RevB_Init();
10007436:	f000 f813 	bl	10007460 <MXC_TRNG_RevB_Init>
    
    return E_NO_ERROR;
}
1000743a:	2000      	movs	r0, #0
1000743c:	bd08      	pop	{r3, pc}

1000743e <MXC_TRNG_Shutdown>:
{
    MXC_TRNG_RevB_DisableInt((mxc_trng_revb_regs_t*) MXC_TRNG);
}

int MXC_TRNG_Shutdown(void)
{
1000743e:	b510      	push	{r4, lr}
    int error = MXC_TRNG_RevB_Shutdown();
10007440:	f000 f810 	bl	10007464 <MXC_TRNG_RevB_Shutdown>
10007444:	4604      	mov	r4, r0
    
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_TRNG);
10007446:	2022      	movs	r0, #34	; 0x22
10007448:	f7fe fed8 	bl	100061fc <MXC_SYS_ClockDisable>
    
    return error;
}
1000744c:	4620      	mov	r0, r4
1000744e:	bd10      	pop	{r4, pc}

10007450 <MXC_TRNG_RandomInt>:
/* True Random Number Generator (TRNG) functions                             */
/* ************************************************************************* */

int MXC_TRNG_RandomInt(void)
{
    return MXC_TRNG_RevB_RandomInt((mxc_trng_revb_regs_t*) MXC_TRNG);
10007450:	4801      	ldr	r0, [pc, #4]	; (10007458 <MXC_TRNG_RandomInt+0x8>)
10007452:	f000 b809 	b.w	10007468 <MXC_TRNG_RevB_RandomInt>
10007456:	bf00      	nop
10007458:	4004d000 	.word	0x4004d000

1000745c <MXC_TRNG_Random>:
}

int MXC_TRNG_Random(uint8_t* data, uint32_t len)
{
    return MXC_TRNG_RevB_Random(data, len);
1000745c:	f000 b809 	b.w	10007472 <MXC_TRNG_RevB_Random>

10007460 <MXC_TRNG_RevB_Init>:
/* ************************************************************************* */

int MXC_TRNG_RevB_Init(void)
{
    return E_NO_ERROR;
}
10007460:	2000      	movs	r0, #0
10007462:	4770      	bx	lr

10007464 <MXC_TRNG_RevB_Shutdown>:
10007464:	2000      	movs	r0, #0
10007466:	4770      	bx	lr

10007468 <MXC_TRNG_RevB_RandomInt>:
/* True Random Number Generator(TRNG) functions                             */
/* ************************************************************************* */

int MXC_TRNG_RevB_RandomInt(mxc_trng_revb_regs_t* trng)
{
    while(!(trng->status & MXC_F_TRNG_REVB_STATUS_RDY));
10007468:	6843      	ldr	r3, [r0, #4]
1000746a:	07db      	lsls	r3, r3, #31
1000746c:	d5fc      	bpl.n	10007468 <MXC_TRNG_RevB_RandomInt>
    
    return (int) trng->data;
1000746e:	6880      	ldr	r0, [r0, #8]
}
10007470:	4770      	bx	lr

10007472 <MXC_TRNG_RevB_Random>:

int MXC_TRNG_RevB_Random(uint8_t* data, uint32_t len)
{
10007472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10007474:	460c      	mov	r4, r1
    unsigned int i, temp;
    
    if(data == NULL) {
10007476:	4606      	mov	r6, r0
10007478:	b1c0      	cbz	r0, 100074ac <MXC_TRNG_RevB_Random+0x3a>
1000747a:	f021 0703 	bic.w	r7, r1, #3
        return E_NULL_PTR;
    }
    
    for(i = 0; (i + 3) < len; i+=4) {
1000747e:	2500      	movs	r5, #0
10007480:	42bd      	cmp	r5, r7
10007482:	d10d      	bne.n	100074a0 <MXC_TRNG_RevB_Random+0x2e>
        temp = MXC_TRNG_RandomInt();
        memcpy(&(data[i]), (uint8_t*)(&temp), 4);
    }
    
    if(len & 0x03) {
10007484:	f014 0403 	ands.w	r4, r4, #3
10007488:	d013      	beq.n	100074b2 <MXC_TRNG_RevB_Random+0x40>
        temp = MXC_TRNG_RandomInt();
1000748a:	f7ff ffe1 	bl	10007450 <MXC_TRNG_RandomInt>
        memcpy(&(data[i]), (uint8_t*)(&temp), len & 0x03);
1000748e:	4622      	mov	r2, r4
        temp = MXC_TRNG_RandomInt();
10007490:	9001      	str	r0, [sp, #4]
        memcpy(&(data[i]), (uint8_t*)(&temp), len & 0x03);
10007492:	a901      	add	r1, sp, #4
10007494:	1970      	adds	r0, r6, r5
10007496:	f002 f8b9 	bl	1000960c <memcpy>
    }
    
    return E_NO_ERROR;
1000749a:	2000      	movs	r0, #0
}
1000749c:	b003      	add	sp, #12
1000749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = MXC_TRNG_RandomInt();
100074a0:	f7ff ffd6 	bl	10007450 <MXC_TRNG_RandomInt>
        memcpy(&(data[i]), (uint8_t*)(&temp), 4);
100074a4:	5170      	str	r0, [r6, r5]
        temp = MXC_TRNG_RandomInt();
100074a6:	9001      	str	r0, [sp, #4]
    for(i = 0; (i + 3) < len; i+=4) {
100074a8:	3504      	adds	r5, #4
100074aa:	e7e9      	b.n	10007480 <MXC_TRNG_RevB_Random+0xe>
        return E_NULL_PTR;
100074ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100074b0:	e7f4      	b.n	1000749c <MXC_TRNG_RevB_Random+0x2a>
    return E_NO_ERROR;
100074b2:	4620      	mov	r0, r4
100074b4:	e7f2      	b.n	1000749c <MXC_TRNG_RevB_Random+0x2a>
	...

100074b8 <MXC_UART_Shutdown>:
    
    return MXC_UART_RevA_Init ((mxc_uart_reva_regs_t*) uart, baud);
}

int MXC_UART_Shutdown (mxc_uart_regs_t* uart)
{
100074b8:	b508      	push	{r3, lr}
    switch (MXC_UART_GET_IDX (uart)) {
100074ba:	4b0d      	ldr	r3, [pc, #52]	; (100074f0 <MXC_UART_Shutdown+0x38>)
100074bc:	4298      	cmp	r0, r3
100074be:	d107      	bne.n	100074d0 <MXC_UART_Shutdown+0x18>
    case 0:
        MXC_SYS_Reset_Periph (MXC_SYS_RESET_UART0);
100074c0:	200b      	movs	r0, #11
100074c2:	f7fe ffb1 	bl	10006428 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable (MXC_SYS_PERIPH_CLOCK_UART0);
100074c6:	2009      	movs	r0, #9
        MXC_SYS_ClockDisable (MXC_SYS_PERIPH_CLOCK_UART1);
        break;
        
    case 2:
        MXC_SYS_Reset_Periph (MXC_SYS_RESET_UART2);
        MXC_SYS_ClockDisable (MXC_SYS_PERIPH_CLOCK_UART2);
100074c8:	f7fe fe98 	bl	100061fc <MXC_SYS_ClockDisable>
        break;
    }
    
    return E_NO_ERROR;
}
100074cc:	2000      	movs	r0, #0
100074ce:	bd08      	pop	{r3, pc}
    switch (MXC_UART_GET_IDX (uart)) {
100074d0:	4b08      	ldr	r3, [pc, #32]	; (100074f4 <MXC_UART_Shutdown+0x3c>)
100074d2:	4298      	cmp	r0, r3
100074d4:	d104      	bne.n	100074e0 <MXC_UART_Shutdown+0x28>
        MXC_SYS_Reset_Periph (MXC_SYS_RESET_UART1);
100074d6:	200c      	movs	r0, #12
100074d8:	f7fe ffa6 	bl	10006428 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable (MXC_SYS_PERIPH_CLOCK_UART1);
100074dc:	200a      	movs	r0, #10
100074de:	e7f3      	b.n	100074c8 <MXC_UART_Shutdown+0x10>
    switch (MXC_UART_GET_IDX (uart)) {
100074e0:	4b05      	ldr	r3, [pc, #20]	; (100074f8 <MXC_UART_Shutdown+0x40>)
100074e2:	4298      	cmp	r0, r3
100074e4:	d1f2      	bne.n	100074cc <MXC_UART_Shutdown+0x14>
        MXC_SYS_Reset_Periph (MXC_SYS_RESET_UART2);
100074e6:	201c      	movs	r0, #28
100074e8:	f7fe ff9e 	bl	10006428 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable (MXC_SYS_PERIPH_CLOCK_UART2);
100074ec:	2021      	movs	r0, #33	; 0x21
100074ee:	e7eb      	b.n	100074c8 <MXC_UART_Shutdown+0x10>
100074f0:	40042000 	.word	0x40042000
100074f4:	40043000 	.word	0x40043000
100074f8:	40044000 	.word	0x40044000

100074fc <MXC_UART_Init>:
{
100074fc:	b570      	push	{r4, r5, r6, lr}
100074fe:	4604      	mov	r4, r0
10007500:	460e      	mov	r6, r1
10007502:	4615      	mov	r5, r2
    retval = MXC_UART_Shutdown (uart);
10007504:	f7ff ffd8 	bl	100074b8 <MXC_UART_Shutdown>
    if (retval) {
10007508:	bb38      	cbnz	r0, 1000755a <MXC_UART_Init+0x5e>
    switch (MXC_UART_GET_IDX (uart)) {
1000750a:	4b14      	ldr	r3, [pc, #80]	; (1000755c <MXC_UART_Init+0x60>)
1000750c:	429c      	cmp	r4, r3
1000750e:	d102      	bne.n	10007516 <MXC_UART_Init+0x1a>
    	if(map==MAP_A){
10007510:	b16d      	cbz	r5, 1000752e <MXC_UART_Init+0x32>
    		MXC_GPIO_Config (&gpio_cfg_uart0b);
10007512:	4813      	ldr	r0, [pc, #76]	; (10007560 <MXC_UART_Init+0x64>)
10007514:	e00c      	b.n	10007530 <MXC_UART_Init+0x34>
    switch (MXC_UART_GET_IDX (uart)) {
10007516:	4b13      	ldr	r3, [pc, #76]	; (10007564 <MXC_UART_Init+0x68>)
10007518:	429c      	cmp	r4, r3
1000751a:	d102      	bne.n	10007522 <MXC_UART_Init+0x26>
    	if(map==MAP_A){
1000751c:	b19d      	cbz	r5, 10007546 <MXC_UART_Init+0x4a>
    		MXC_GPIO_Config (&gpio_cfg_uart1b);
1000751e:	4812      	ldr	r0, [pc, #72]	; (10007568 <MXC_UART_Init+0x6c>)
10007520:	e012      	b.n	10007548 <MXC_UART_Init+0x4c>
    switch (MXC_UART_GET_IDX (uart)) {
10007522:	4b12      	ldr	r3, [pc, #72]	; (1000756c <MXC_UART_Init+0x70>)
10007524:	429c      	cmp	r4, r3
10007526:	d108      	bne.n	1000753a <MXC_UART_Init+0x3e>
    	if(map==MAP_A){
10007528:	b195      	cbz	r5, 10007550 <MXC_UART_Init+0x54>
    		MXC_GPIO_Config (&gpio_cfg_uart2b);
1000752a:	4811      	ldr	r0, [pc, #68]	; (10007570 <MXC_UART_Init+0x74>)
1000752c:	e011      	b.n	10007552 <MXC_UART_Init+0x56>
    		MXC_GPIO_Config (&gpio_cfg_uart0a);
1000752e:	4811      	ldr	r0, [pc, #68]	; (10007574 <MXC_UART_Init+0x78>)
    		MXC_GPIO_Config (&gpio_cfg_uart0b);
10007530:	f7ff fa5a 	bl	100069e8 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable (MXC_SYS_PERIPH_CLOCK_UART0);
10007534:	2009      	movs	r0, #9
        MXC_SYS_ClockEnable (MXC_SYS_PERIPH_CLOCK_UART2);
10007536:	f7fe fe75 	bl	10006224 <MXC_SYS_ClockEnable>
    return MXC_UART_RevA_Init ((mxc_uart_reva_regs_t*) uart, baud);
1000753a:	4631      	mov	r1, r6
1000753c:	4620      	mov	r0, r4
}
1000753e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_UART_RevA_Init ((mxc_uart_reva_regs_t*) uart, baud);
10007542:	f000 b871 	b.w	10007628 <MXC_UART_RevA_Init>
    		MXC_GPIO_Config (&gpio_cfg_uart1a);
10007546:	480c      	ldr	r0, [pc, #48]	; (10007578 <MXC_UART_Init+0x7c>)
    		MXC_GPIO_Config (&gpio_cfg_uart1b);
10007548:	f7ff fa4e 	bl	100069e8 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable (MXC_SYS_PERIPH_CLOCK_UART1);
1000754c:	200a      	movs	r0, #10
1000754e:	e7f2      	b.n	10007536 <MXC_UART_Init+0x3a>
    		MXC_GPIO_Config (&gpio_cfg_uart2a);
10007550:	480a      	ldr	r0, [pc, #40]	; (1000757c <MXC_UART_Init+0x80>)
    		MXC_GPIO_Config (&gpio_cfg_uart2b);
10007552:	f7ff fa49 	bl	100069e8 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable (MXC_SYS_PERIPH_CLOCK_UART2);
10007556:	2021      	movs	r0, #33	; 0x21
10007558:	e7ed      	b.n	10007536 <MXC_UART_Init+0x3a>
}
1000755a:	bd70      	pop	{r4, r5, r6, pc}
1000755c:	40042000 	.word	0x40042000
10007560:	100109e8 	.word	0x100109e8
10007564:	40043000 	.word	0x40043000
10007568:	10010a18 	.word	0x10010a18
1000756c:	40044000 	.word	0x40044000
10007570:	10010a48 	.word	0x10010a48
10007574:	100109d0 	.word	0x100109d0
10007578:	10010a00 	.word	0x10010a00
1000757c:	10010a30 	.word	0x10010a30

10007580 <MXC_UART_SetFrequency>:
    return MXC_UART_RevA_ReadyForSleep ((mxc_uart_reva_regs_t*) uart);
}

int MXC_UART_SetFrequency (mxc_uart_regs_t* uart, unsigned int baud)
{
    return MXC_UART_RevA_SetFrequency ((mxc_uart_reva_regs_t*) uart, baud);
10007580:	f000 b87c 	b.w	1000767c <MXC_UART_RevA_SetFrequency>

10007584 <MXC_UART_GetFrequency>:
}

int MXC_UART_GetFrequency (mxc_uart_regs_t* uart)
{
    return MXC_UART_RevA_GetFrequency ((mxc_uart_reva_regs_t*) uart);
10007584:	f000 b902 	b.w	1000778c <MXC_UART_RevA_GetFrequency>

10007588 <MXC_UART_SetDataSize>:
}

int MXC_UART_SetDataSize (mxc_uart_regs_t* uart, int dataSize)
{
    return MXC_UART_RevA_SetDataSize ((mxc_uart_reva_regs_t*) uart, dataSize);
10007588:	f000 b954 	b.w	10007834 <MXC_UART_RevA_SetDataSize>

1000758c <MXC_UART_SetStopBits>:
}

int MXC_UART_SetStopBits (mxc_uart_regs_t* uart, mxc_uart_stop_t stopBits)
{
    return MXC_UART_RevA_SetStopBits ((mxc_uart_reva_regs_t*) uart, stopBits);
1000758c:	f000 b96e 	b.w	1000786c <MXC_UART_RevA_SetStopBits>

10007590 <MXC_UART_SetParity>:
}

int MXC_UART_SetParity (mxc_uart_regs_t* uart, mxc_uart_parity_t parity)
{
    return MXC_UART_RevA_SetParity ((mxc_uart_reva_regs_t*) uart, parity);
10007590:	f000 b98a 	b.w	100078a8 <MXC_UART_RevA_SetParity>

10007594 <MXC_UART_SetFlowCtrl>:
}

int MXC_UART_SetFlowCtrl (mxc_uart_regs_t* uart, mxc_uart_flow_t flowCtrl, int rtsThreshold, sys_map_t map)
{
10007594:	b570      	push	{r4, r5, r6, lr}
10007596:	4616      	mov	r6, r2
    switch (MXC_UART_GET_IDX (uart)) {
10007598:	4a10      	ldr	r2, [pc, #64]	; (100075dc <MXC_UART_SetFlowCtrl+0x48>)
1000759a:	4290      	cmp	r0, r2
{
1000759c:	4604      	mov	r4, r0
1000759e:	460d      	mov	r5, r1
    switch (MXC_UART_GET_IDX (uart)) {
100075a0:	d102      	bne.n	100075a8 <MXC_UART_SetFlowCtrl+0x14>
    case 0:
    	if(map==MAP_A){
100075a2:	b16b      	cbz	r3, 100075c0 <MXC_UART_SetFlowCtrl+0x2c>
    		MXC_GPIO_Config (&gpio_cfg_uart0a_flow);
    	}else{
    		MXC_GPIO_Config (&gpio_cfg_uart0b_flow);
100075a4:	480e      	ldr	r0, [pc, #56]	; (100075e0 <MXC_UART_SetFlowCtrl+0x4c>)
100075a6:	e00c      	b.n	100075c2 <MXC_UART_SetFlowCtrl+0x2e>
    switch (MXC_UART_GET_IDX (uart)) {
100075a8:	4a0e      	ldr	r2, [pc, #56]	; (100075e4 <MXC_UART_SetFlowCtrl+0x50>)
100075aa:	4290      	cmp	r0, r2
100075ac:	d102      	bne.n	100075b4 <MXC_UART_SetFlowCtrl+0x20>
    	}
        break;
        
    case 1:
    	if(map==MAP_A){
100075ae:	b18b      	cbz	r3, 100075d4 <MXC_UART_SetFlowCtrl+0x40>
    		MXC_GPIO_Config (&gpio_cfg_uart1a_flow);
    	}else{
    		MXC_GPIO_Config (&gpio_cfg_uart1b_flow);
100075b0:	480d      	ldr	r0, [pc, #52]	; (100075e8 <MXC_UART_SetFlowCtrl+0x54>)
100075b2:	e006      	b.n	100075c2 <MXC_UART_SetFlowCtrl+0x2e>
    switch (MXC_UART_GET_IDX (uart)) {
100075b4:	4a0d      	ldr	r2, [pc, #52]	; (100075ec <MXC_UART_SetFlowCtrl+0x58>)
100075b6:	4290      	cmp	r0, r2
100075b8:	d105      	bne.n	100075c6 <MXC_UART_SetFlowCtrl+0x32>
    	}
        break;
        
    case 2:
    	if(map==MAP_A){
100075ba:	b16b      	cbz	r3, 100075d8 <MXC_UART_SetFlowCtrl+0x44>
    		MXC_GPIO_Config (&gpio_cfg_uart2a_flow);
    	}else{
    		MXC_GPIO_Config (&gpio_cfg_uart2b_flow);
100075bc:	480c      	ldr	r0, [pc, #48]	; (100075f0 <MXC_UART_SetFlowCtrl+0x5c>)
100075be:	e000      	b.n	100075c2 <MXC_UART_SetFlowCtrl+0x2e>
    		MXC_GPIO_Config (&gpio_cfg_uart0a_flow);
100075c0:	480c      	ldr	r0, [pc, #48]	; (100075f4 <MXC_UART_SetFlowCtrl+0x60>)
    		MXC_GPIO_Config (&gpio_cfg_uart2b_flow);
100075c2:	f7ff fa11 	bl	100069e8 <MXC_GPIO_Config>
    	}
        break;
    }
    
    return MXC_UART_RevA_SetFlowCtrl ((mxc_uart_reva_regs_t*) uart, flowCtrl, rtsThreshold);
100075c6:	4632      	mov	r2, r6
100075c8:	4629      	mov	r1, r5
100075ca:	4620      	mov	r0, r4
}
100075cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_UART_RevA_SetFlowCtrl ((mxc_uart_reva_regs_t*) uart, flowCtrl, rtsThreshold);
100075d0:	f000 b9dc 	b.w	1000798c <MXC_UART_RevA_SetFlowCtrl>
    		MXC_GPIO_Config (&gpio_cfg_uart1a_flow);
100075d4:	4808      	ldr	r0, [pc, #32]	; (100075f8 <MXC_UART_SetFlowCtrl+0x64>)
100075d6:	e7f4      	b.n	100075c2 <MXC_UART_SetFlowCtrl+0x2e>
    		MXC_GPIO_Config (&gpio_cfg_uart2a_flow);
100075d8:	4808      	ldr	r0, [pc, #32]	; (100075fc <MXC_UART_SetFlowCtrl+0x68>)
100075da:	e7f2      	b.n	100075c2 <MXC_UART_SetFlowCtrl+0x2e>
100075dc:	40042000 	.word	0x40042000
100075e0:	100109f4 	.word	0x100109f4
100075e4:	40043000 	.word	0x40043000
100075e8:	10010a24 	.word	0x10010a24
100075ec:	40044000 	.word	0x40044000
100075f0:	10010a54 	.word	0x10010a54
100075f4:	100109dc 	.word	0x100109dc
100075f8:	10010a0c 	.word	0x10010a0c
100075fc:	10010a3c 	.word	0x10010a3c

10007600 <MXC_UART_ReadCharacterRaw>:
    return MXC_UART_RevA_AbortTransmission ((mxc_uart_reva_regs_t*) uart);
}

int MXC_UART_ReadCharacterRaw (mxc_uart_regs_t* uart)
{
    return MXC_UART_RevA_ReadCharacterRaw ((mxc_uart_reva_regs_t*) uart);
10007600:	f000 b9f8 	b.w	100079f4 <MXC_UART_RevA_ReadCharacterRaw>

10007604 <MXC_UART_WriteCharacterRaw>:
}

int MXC_UART_WriteCharacterRaw (mxc_uart_regs_t* uart, uint8_t character)
{
    return MXC_UART_RevA_WriteCharacterRaw ((mxc_uart_reva_regs_t*) uart, character);
10007604:	f000 ba0e 	b.w	10007a24 <MXC_UART_RevA_WriteCharacterRaw>

10007608 <MXC_UART_ReadCharacter>:
}

int MXC_UART_ReadCharacter (mxc_uart_regs_t* uart)
{
    return MXC_UART_Common_ReadCharacter (uart);
10007608:	f000 bbf0 	b.w	10007dec <MXC_UART_Common_ReadCharacter>

1000760c <MXC_UART_WriteCharacter>:
}

int MXC_UART_WriteCharacter (mxc_uart_regs_t* uart, uint8_t character)
{
    return MXC_UART_Common_WriteCharacter (uart, character);
1000760c:	f000 bbfa 	b.w	10007e04 <MXC_UART_Common_WriteCharacter>

10007610 <MXC_UART_GetRXFIFOAvailable>:
    return MXC_UART_RevA_ReadRXFIFODMA ((mxc_uart_reva_regs_t*) uart, dma, bytes, len, callback, config);
}

unsigned int MXC_UART_GetRXFIFOAvailable (mxc_uart_regs_t* uart)
{
    return MXC_UART_RevA_GetRXFIFOAvailable ((mxc_uart_reva_regs_t*) uart);
10007610:	f000 ba22 	b.w	10007a58 <MXC_UART_RevA_GetRXFIFOAvailable>

10007614 <MXC_UART_GetTXFIFOAvailable>:
    return MXC_UART_RevA_WriteTXFIFODMA ((mxc_uart_reva_regs_t*) uart, dma, bytes, len, callback, config);
}

unsigned int MXC_UART_GetTXFIFOAvailable (mxc_uart_regs_t* uart)
{
    return MXC_UART_RevA_GetTXFIFOAvailable ((mxc_uart_reva_regs_t*) uart);
10007614:	f000 ba24 	b.w	10007a60 <MXC_UART_RevA_GetTXFIFOAvailable>

10007618 <MXC_UART_SetRXThreshold>:
    MXC_UART_RevA_ClearTXFIFO ((mxc_uart_reva_regs_t*) uart);
}

int MXC_UART_SetRXThreshold (mxc_uart_regs_t* uart, unsigned int numBytes)
{
    return MXC_UART_RevA_SetRXThreshold ((mxc_uart_reva_regs_t*) uart, numBytes);
10007618:	f000 ba28 	b.w	10007a6c <MXC_UART_RevA_SetRXThreshold>

1000761c <MXC_UART_SetTXThreshold>:
    return MXC_UART_RevA_GetRXThreshold ((mxc_uart_reva_regs_t*) uart);
}

int MXC_UART_SetTXThreshold (mxc_uart_regs_t* uart, unsigned int numBytes)
{
    return MXC_UART_RevA_SetTXThreshold ((mxc_uart_reva_regs_t*) uart, numBytes);
1000761c:	f000 ba40 	b.w	10007aa0 <MXC_UART_RevA_SetTXThreshold>

10007620 <MXC_UART_ClearFlags>:
    return MXC_UART_RevA_GetFlags ((mxc_uart_reva_regs_t*) uart);
}

void MXC_UART_ClearFlags (mxc_uart_regs_t* uart, unsigned int flags)
{
    MXC_UART_RevA_ClearFlags ((mxc_uart_reva_regs_t*) uart, flags);
10007620:	f000 ba5a 	b.w	10007ad8 <MXC_UART_RevA_ClearFlags>

10007624 <MXC_UART_DisableInt>:
    MXC_UART_RevA_EnableInt ((mxc_uart_reva_regs_t*) uart, intEn);
}

void MXC_UART_DisableInt (mxc_uart_regs_t* uart, unsigned int intDis)
{
    MXC_UART_RevA_DisableInt ((mxc_uart_reva_regs_t*) uart, intDis);
10007624:	f000 ba6c 	b.w	10007b00 <MXC_UART_RevA_DisableInt>

10007628 <MXC_UART_RevA_Init>:

/* ************************************************************************* */
/* Control/Configuration functions                                           */
/* ************************************************************************* */
int MXC_UART_RevA_Init (mxc_uart_reva_regs_t* uart, unsigned int baud)
{
10007628:	b570      	push	{r4, r5, r6, lr}
1000762a:	460e      	mov	r6, r1
    int err;

    // Initialize UART
    // Set RX threshold to 1 byte
    if ((err = (MXC_UART_SetRXThreshold ((mxc_uart_regs_t*) uart, 1))) != E_NO_ERROR) {
1000762c:	2101      	movs	r1, #1
{
1000762e:	4605      	mov	r5, r0
    if ((err = (MXC_UART_SetRXThreshold ((mxc_uart_regs_t*) uart, 1))) != E_NO_ERROR) {
10007630:	f7ff fff2 	bl	10007618 <MXC_UART_SetRXThreshold>
10007634:	4604      	mov	r4, r0
10007636:	b9f8      	cbnz	r0, 10007678 <MXC_UART_RevA_Init+0x50>
        return err;
    }

    // Set TX threshold to 2 byte
    if ((err = (MXC_UART_SetTXThreshold ((mxc_uart_regs_t*) uart, 2))) != E_NO_ERROR) {
10007638:	2102      	movs	r1, #2
1000763a:	4628      	mov	r0, r5
1000763c:	f7ff ffee 	bl	1000761c <MXC_UART_SetTXThreshold>
10007640:	4604      	mov	r4, r0
10007642:	b9c8      	cbnz	r0, 10007678 <MXC_UART_RevA_Init+0x50>
        return err;
    }        
    
    // Set Datasize to 8 bits
    if ((err = (MXC_UART_SetDataSize ((mxc_uart_regs_t*) uart, 8))) != E_NO_ERROR) {
10007644:	2108      	movs	r1, #8
10007646:	4628      	mov	r0, r5
10007648:	f7ff ff9e 	bl	10007588 <MXC_UART_SetDataSize>
1000764c:	4604      	mov	r4, r0
1000764e:	b998      	cbnz	r0, 10007678 <MXC_UART_RevA_Init+0x50>
        return err;
    }         
    
    if ((err = (MXC_UART_SetParity ((mxc_uart_regs_t*) uart, MXC_UART_PARITY_DISABLE))) != E_NO_ERROR) {
10007650:	4601      	mov	r1, r0
10007652:	4628      	mov	r0, r5
10007654:	f7ff ff9c 	bl	10007590 <MXC_UART_SetParity>
10007658:	4604      	mov	r4, r0
1000765a:	b968      	cbnz	r0, 10007678 <MXC_UART_RevA_Init+0x50>
        return err;
    }
    
    if ((err = (MXC_UART_SetStopBits ((mxc_uart_regs_t*) uart, MXC_UART_STOP_1))) != E_NO_ERROR) {
1000765c:	4601      	mov	r1, r0
1000765e:	4628      	mov	r0, r5
10007660:	f7ff ff94 	bl	1000758c <MXC_UART_SetStopBits>
10007664:	4604      	mov	r4, r0
10007666:	b938      	cbnz	r0, 10007678 <MXC_UART_RevA_Init+0x50>
        return err;
    }
    
    uart->ctrl |= MXC_F_UART_REVA_CTRL_ENABLE;
10007668:	682b      	ldr	r3, [r5, #0]
1000766a:	f043 0301 	orr.w	r3, r3, #1
1000766e:	602b      	str	r3, [r5, #0]
    
    MXC_UART_SetFrequency ((mxc_uart_regs_t*) uart, baud);
10007670:	4631      	mov	r1, r6
10007672:	4628      	mov	r0, r5
10007674:	f7ff ff84 	bl	10007580 <MXC_UART_SetFrequency>

    return E_NO_ERROR;
}
10007678:	4620      	mov	r0, r4
1000767a:	bd70      	pop	{r4, r5, r6, pc}

1000767c <MXC_UART_RevA_SetFrequency>:
    float uartDiv;
    int periphClock;
    int prescale;
    int decimalDiv;
    
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
1000767c:	4b40      	ldr	r3, [pc, #256]	; (10007780 <MXC_UART_RevA_SetFrequency+0x104>)
1000767e:	4298      	cmp	r0, r3
{
10007680:	b430      	push	{r4, r5}
10007682:	ee07 1a10 	vmov	s14, r1
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007686:	d007      	beq.n	10007698 <MXC_UART_RevA_SetFrequency+0x1c>
10007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000768c:	4298      	cmp	r0, r3
1000768e:	d003      	beq.n	10007698 <MXC_UART_RevA_SetFrequency+0x1c>
10007690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007694:	4298      	cmp	r0, r3
10007696:	d122      	bne.n	100076de <MXC_UART_RevA_SetFrequency+0x62>
        return E_BAD_PARAM;
    }
    
    if (uart->ctrl & MXC_F_UART_REVA_CTRL_CLKSEL) {
10007698:	6803      	ldr	r3, [r0, #0]
1000769a:	041b      	lsls	r3, r3, #16
#else
        return E_BAD_PARAM;
#endif
    }
    else {
        periphClock = PeripheralClock;
1000769c:	bf5b      	ittet	pl
1000769e:	4b39      	ldrpl	r3, [pc, #228]	; (10007784 <MXC_UART_RevA_SetFrequency+0x108>)
100076a0:	681b      	ldrpl	r3, [r3, #0]
        periphClock = IBRO_FREQ;
100076a2:	f44f 03e1 	movmi.w	r3, #7372800	; 0x708000
        periphClock = PeripheralClock;
100076a6:	085b      	lsrpl	r3, r3, #1
    }
    
    uartDiv = (float) periphClock / baud;
100076a8:	ee07 3a90 	vmov	s15, r3
100076ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100076b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
100076b4:	2205      	movs	r2, #5
100076b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    
    // Find the largest value of prescale that keeps div > 1
    for (prescale = 8; prescale <= 128; prescale = prescale << 1) {
100076ba:	2308      	movs	r3, #8
        if (uartDiv / (float) prescale < 1) {
100076bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
100076c0:	ee07 3a10 	vmov	s14, r3
100076c4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
100076c8:	ee86 7a86 	vdiv.f32	s14, s13, s12
100076cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
100076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100076d4:	d507      	bpl.n	100076e6 <MXC_UART_RevA_SetFrequency+0x6a>

    if (prescale > 128) {
        prescale = 128;
    }
    
    if (prescale < 8) {
100076d6:	2b0e      	cmp	r3, #14
            prescale = prescale >> 1;
100076d8:	ea4f 0163 	mov.w	r1, r3, asr #1
    if (prescale < 8) {
100076dc:	dc08      	bgt.n	100076f0 <MXC_UART_RevA_SetFrequency+0x74>
        return E_BAD_PARAM;
100076de:	f06f 0002 	mvn.w	r0, #2
    MXC_SETFIELD (uart->baud0, MXC_F_UART_REVA_BAUD0_FACTOR, prescale);
    MXC_SETFIELD (uart->baud0, MXC_F_UART_REVA_BAUD0_IBAUD, (((int) uartDiv) << MXC_F_UART_REVA_BAUD0_IBAUD_POS));
    MXC_SETFIELD (uart->baud1, MXC_F_UART_REVA_BAUD1_DBAUD, decimalDiv);
    
    return MXC_UART_GetFrequency ((mxc_uart_regs_t*) uart);
}
100076e2:	bc30      	pop	{r4, r5}
100076e4:	4770      	bx	lr
    for (prescale = 8; prescale <= 128; prescale = prescale << 1) {
100076e6:	3a01      	subs	r2, #1
100076e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
100076ec:	d1e8      	bne.n	100076c0 <MXC_UART_RevA_SetFrequency+0x44>
        prescale = 128;
100076ee:	2180      	movs	r1, #128	; 0x80
    uartDiv /= prescale;
100076f0:	ee07 1a90 	vmov	s15, r1
100076f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
100076f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    decimalDiv = (int)((uartDiv - (int) uartDiv) * 128);
100076fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
10007700:	eef8 6ac7 	vcvt.f32.s32	s13, s14
10007704:	ee77 7ae6 	vsub.f32	s15, s15, s13
10007708:	eef0 6a67 	vmov.f32	s13, s15
1000770c:	eefe 6aec 	vcvt.s32.f32	s13, s13, #7
10007710:	ee16 3a90 	vmov	r3, s13
    if (decimalDiv > 3) {
10007714:	2b03      	cmp	r3, #3
        decimalDiv -= 3;
10007716:	bfcc      	ite	gt
10007718:	1eda      	subgt	r2, r3, #3
        decimalDiv += 3;
1000771a:	1cda      	addle	r2, r3, #3
    switch (prescale) {
1000771c:	2920      	cmp	r1, #32
1000771e:	d026      	beq.n	1000776e <MXC_UART_RevA_SetFrequency+0xf2>
10007720:	dc06      	bgt.n	10007730 <MXC_UART_RevA_SetFrequency+0xb4>
10007722:	2908      	cmp	r1, #8
10007724:	d025      	beq.n	10007772 <MXC_UART_RevA_SetFrequency+0xf6>
10007726:	2910      	cmp	r1, #16
10007728:	d025      	beq.n	10007776 <MXC_UART_RevA_SetFrequency+0xfa>
1000772a:	f06f 0007 	mvn.w	r0, #7
1000772e:	e7d8      	b.n	100076e2 <MXC_UART_RevA_SetFrequency+0x66>
10007730:	2940      	cmp	r1, #64	; 0x40
10007732:	d022      	beq.n	1000777a <MXC_UART_RevA_SetFrequency+0xfe>
10007734:	2980      	cmp	r1, #128	; 0x80
10007736:	d1f8      	bne.n	1000772a <MXC_UART_RevA_SetFrequency+0xae>
        prescale = 0;
10007738:	2300      	movs	r3, #0
    MXC_SETFIELD (uart->baud0, MXC_F_UART_REVA_BAUD0_FACTOR, prescale);
1000773a:	6941      	ldr	r1, [r0, #20]
    prescale <<= MXC_F_UART_REVA_BAUD0_FACTOR_POS;
1000773c:	041b      	lsls	r3, r3, #16
    MXC_SETFIELD (uart->baud0, MXC_F_UART_REVA_BAUD0_FACTOR, prescale);
1000773e:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
10007742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10007746:	430b      	orrs	r3, r1
10007748:	6143      	str	r3, [r0, #20]
    MXC_SETFIELD (uart->baud0, MXC_F_UART_REVA_BAUD0_IBAUD, (((int) uartDiv) << MXC_F_UART_REVA_BAUD0_IBAUD_POS));
1000774a:	6944      	ldr	r4, [r0, #20]
1000774c:	490e      	ldr	r1, [pc, #56]	; (10007788 <MXC_UART_RevA_SetFrequency+0x10c>)
1000774e:	ee17 3a10 	vmov	r3, s14
10007752:	400c      	ands	r4, r1
10007754:	f3c3 050b 	ubfx	r5, r3, #0, #12
10007758:	432c      	orrs	r4, r5
1000775a:	6144      	str	r4, [r0, #20]
    MXC_SETFIELD (uart->baud1, MXC_F_UART_REVA_BAUD1_DBAUD, decimalDiv);
1000775c:	6983      	ldr	r3, [r0, #24]
1000775e:	4019      	ands	r1, r3
10007760:	f3c2 030b 	ubfx	r3, r2, #0, #12
10007764:	430b      	orrs	r3, r1
}
10007766:	bc30      	pop	{r4, r5}
    MXC_SETFIELD (uart->baud1, MXC_F_UART_REVA_BAUD1_DBAUD, decimalDiv);
10007768:	6183      	str	r3, [r0, #24]
    return MXC_UART_GetFrequency ((mxc_uart_regs_t*) uart);
1000776a:	f7ff bf0b 	b.w	10007584 <MXC_UART_GetFrequency>
        prescale = 2;
1000776e:	2302      	movs	r3, #2
10007770:	e7e3      	b.n	1000773a <MXC_UART_RevA_SetFrequency+0xbe>
        prescale = 4;
10007772:	2304      	movs	r3, #4
10007774:	e7e1      	b.n	1000773a <MXC_UART_RevA_SetFrequency+0xbe>
    switch (prescale) {
10007776:	2303      	movs	r3, #3
10007778:	e7df      	b.n	1000773a <MXC_UART_RevA_SetFrequency+0xbe>
        prescale = 1;
1000777a:	2301      	movs	r3, #1
1000777c:	e7dd      	b.n	1000773a <MXC_UART_RevA_SetFrequency+0xbe>
1000777e:	bf00      	nop
10007780:	40042000 	.word	0x40042000
10007784:	2000008c 	.word	0x2000008c
10007788:	fffff000 	.word	0xfffff000

1000778c <MXC_UART_RevA_GetFrequency>:
{
    int periphClock = 0;
    float uartDiv = 0;
    float decimalDiv = 0;
    
    if (uart->ctrl & MXC_F_UART_REVA_CTRL_CLKSEL) {
1000778c:	6803      	ldr	r3, [r0, #0]
    }
    else {
        periphClock = PeripheralClock;
    }
    
    uartDiv += uart->baud0 & MXC_F_UART_REVA_BAUD0_IBAUD;
1000778e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 10007828 <MXC_UART_RevA_GetFrequency+0x9c>
    if (uart->ctrl & MXC_F_UART_REVA_CTRL_CLKSEL) {
10007792:	041b      	lsls	r3, r3, #16
        periphClock = PeripheralClock;
10007794:	bf5c      	itt	pl
10007796:	4b25      	ldrpl	r3, [pc, #148]	; (1000782c <MXC_UART_RevA_GetFrequency+0xa0>)
10007798:	681a      	ldrpl	r2, [r3, #0]
    uartDiv += uart->baud0 & MXC_F_UART_REVA_BAUD0_IBAUD;
1000779a:	6943      	ldr	r3, [r0, #20]
1000779c:	f3c3 030b 	ubfx	r3, r3, #0, #12
100077a0:	ee07 3a90 	vmov	s15, r3
    decimalDiv = uart->baud1 & MXC_F_UART_REVA_BAUD1_DBAUD;
100077a4:	6983      	ldr	r3, [r0, #24]
    uartDiv += uart->baud0 & MXC_F_UART_REVA_BAUD0_IBAUD;
100077a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    decimalDiv = uart->baud1 & MXC_F_UART_REVA_BAUD1_DBAUD;
100077aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    uartDiv += uart->baud0 & MXC_F_UART_REVA_BAUD0_IBAUD;
100077ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    decimalDiv = uart->baud1 & MXC_F_UART_REVA_BAUD1_DBAUD;
100077b2:	ee07 3a90 	vmov	s15, r3
100077b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Based on work around for Jira Bug: ME10-650
    // No way to tell if the SetFrequency function added or 
    //      subtracted 3 in this range
    if(decimalDiv > 3 && decimalDiv <= 6) {
100077ba:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
100077be:	eef4 7ae6 	vcmpe.f32	s15, s13
        periphClock = PeripheralClock;
100077c2:	bf54      	ite	pl
100077c4:	0852      	lsrpl	r2, r2, #1
        periphClock = IBRO_FREQ;
100077c6:	f44f 02e1 	movmi.w	r2, #7372800	; 0x708000
    if(decimalDiv > 3 && decimalDiv <= 6) {
100077ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100077ce:	eeb0 6a66 	vmov.f32	s12, s13
100077d2:	dd26      	ble.n	10007822 <MXC_UART_RevA_GetFrequency+0x96>
100077d4:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
100077d8:	eef4 7ae5 	vcmpe.f32	s15, s11
100077dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100077e0:	d81f      	bhi.n	10007822 <MXC_UART_RevA_GetFrequency+0x96>
    	decimalDiv -= 3;
100077e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    }
    else {
    	decimalDiv += 3;
    }

    uartDiv += decimalDiv / 128.0;
100077e6:	eddf 6a12 	vldr	s13, [pc, #72]	; 10007830 <MXC_UART_RevA_GetFrequency+0xa4>
    uartDiv *= (1 << (7 - (uart->baud0 & MXC_F_UART_REVA_BAUD0_FACTOR)));
100077ea:	6943      	ldr	r3, [r0, #20]
    uartDiv += decimalDiv / 128.0;
100077ec:	eea7 7aa6 	vfma.f32	s14, s15, s13
    uartDiv *= (1 << (7 - (uart->baud0 & MXC_F_UART_REVA_BAUD0_FACTOR)));
100077f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    uartDiv += decimalDiv / 128.0;
100077f4:	eef0 7a47 	vmov.f32	s15, s14

    return (int) ( (float) periphClock / uartDiv);
100077f8:	ee07 2a10 	vmov	s14, r2
    uartDiv *= (1 << (7 - (uart->baud0 & MXC_F_UART_REVA_BAUD0_FACTOR)));
100077fc:	f1c3 0207 	rsb	r2, r3, #7
10007800:	2301      	movs	r3, #1
10007802:	4093      	lsls	r3, r2
    return (int) ( (float) periphClock / uartDiv);
10007804:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    uartDiv *= (1 << (7 - (uart->baud0 & MXC_F_UART_REVA_BAUD0_FACTOR)));
10007808:	ee07 3a10 	vmov	s14, r3
1000780c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
10007810:	ee67 7a27 	vmul.f32	s15, s14, s15
    return (int) ( (float) periphClock / uartDiv);
10007814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
}
10007818:	eefd 7ac7 	vcvt.s32.f32	s15, s14
1000781c:	ee17 0a90 	vmov	r0, s15
10007820:	4770      	bx	lr
    	decimalDiv += 3;
10007822:	ee77 7a86 	vadd.f32	s15, s15, s12
10007826:	e7de      	b.n	100077e6 <MXC_UART_RevA_GetFrequency+0x5a>
10007828:	00000000 	.word	0x00000000
1000782c:	2000008c 	.word	0x2000008c
10007830:	3c000000 	.word	0x3c000000

10007834 <MXC_UART_RevA_SetDataSize>:

int MXC_UART_RevA_SetDataSize (mxc_uart_reva_regs_t* uart, int dataSize)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007834:	4b0c      	ldr	r3, [pc, #48]	; (10007868 <MXC_UART_RevA_SetDataSize+0x34>)
10007836:	4298      	cmp	r0, r3
10007838:	d007      	beq.n	1000784a <MXC_UART_RevA_SetDataSize+0x16>
1000783a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000783e:	4298      	cmp	r0, r3
10007840:	d003      	beq.n	1000784a <MXC_UART_RevA_SetDataSize+0x16>
10007842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007846:	4298      	cmp	r0, r3
10007848:	d10a      	bne.n	10007860 <MXC_UART_RevA_SetDataSize+0x2c>
        return E_BAD_PARAM;
    }
    
    if (dataSize < 5 || dataSize > 8) {
1000784a:	3905      	subs	r1, #5
1000784c:	2903      	cmp	r1, #3
1000784e:	d807      	bhi.n	10007860 <MXC_UART_RevA_SetDataSize+0x2c>
        return E_BAD_PARAM;
    }
    
    dataSize = (dataSize - 5) << MXC_F_UART_REVA_CTRL_CHAR_SIZE_POS;
    
    MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_CHAR_SIZE, dataSize);
10007850:	6803      	ldr	r3, [r0, #0]
10007852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10007856:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
1000785a:	6001      	str	r1, [r0, #0]
    
    return E_NO_ERROR;
1000785c:	2000      	movs	r0, #0
1000785e:	4770      	bx	lr
        return E_BAD_PARAM;
10007860:	f06f 0002 	mvn.w	r0, #2
}
10007864:	4770      	bx	lr
10007866:	bf00      	nop
10007868:	40042000 	.word	0x40042000

1000786c <MXC_UART_RevA_SetStopBits>:

int MXC_UART_RevA_SetStopBits (mxc_uart_reva_regs_t* uart, mxc_uart_stop_t stopBits)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
1000786c:	4b0d      	ldr	r3, [pc, #52]	; (100078a4 <MXC_UART_RevA_SetStopBits+0x38>)
1000786e:	4298      	cmp	r0, r3
10007870:	d007      	beq.n	10007882 <MXC_UART_RevA_SetStopBits+0x16>
10007872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007876:	4298      	cmp	r0, r3
10007878:	d003      	beq.n	10007882 <MXC_UART_RevA_SetStopBits+0x16>
1000787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000787e:	4298      	cmp	r0, r3
10007880:	d102      	bne.n	10007888 <MXC_UART_RevA_SetStopBits+0x1c>
        return E_BAD_PARAM;
    }
    
    switch (stopBits) {
10007882:	b121      	cbz	r1, 1000788e <MXC_UART_RevA_SetStopBits+0x22>
10007884:	2901      	cmp	r1, #1
10007886:	d008      	beq.n	1000789a <MXC_UART_RevA_SetStopBits+0x2e>
        return E_BAD_PARAM;
10007888:	f06f 0002 	mvn.w	r0, #2
        return E_BAD_PARAM;
        break;
    }
    
    return E_NO_ERROR;
}
1000788c:	4770      	bx	lr
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_STOPBITS, 0 << MXC_F_UART_REVA_CTRL_STOPBITS_POS);
1000788e:	6803      	ldr	r3, [r0, #0]
10007890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_STOPBITS, 1 << MXC_F_UART_REVA_CTRL_STOPBITS_POS);
10007894:	6003      	str	r3, [r0, #0]
    return E_NO_ERROR;
10007896:	2000      	movs	r0, #0
        break;
10007898:	4770      	bx	lr
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_STOPBITS, 1 << MXC_F_UART_REVA_CTRL_STOPBITS_POS);
1000789a:	6803      	ldr	r3, [r0, #0]
1000789c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100078a0:	e7f8      	b.n	10007894 <MXC_UART_RevA_SetStopBits+0x28>
100078a2:	bf00      	nop
100078a4:	40042000 	.word	0x40042000

100078a8 <MXC_UART_RevA_SetParity>:

int MXC_UART_RevA_SetParity (mxc_uart_reva_regs_t* uart, mxc_uart_parity_t parity)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
100078a8:	4b37      	ldr	r3, [pc, #220]	; (10007988 <MXC_UART_RevA_SetParity+0xe0>)
100078aa:	4298      	cmp	r0, r3
100078ac:	d007      	beq.n	100078be <MXC_UART_RevA_SetParity+0x16>
100078ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
100078b2:	4298      	cmp	r0, r3
100078b4:	d003      	beq.n	100078be <MXC_UART_RevA_SetParity+0x16>
100078b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
100078ba:	4298      	cmp	r0, r3
100078bc:	d160      	bne.n	10007980 <MXC_UART_RevA_SetParity+0xd8>
        return E_BAD_PARAM;
    }
    
    switch (parity) {
100078be:	290c      	cmp	r1, #12
100078c0:	d85e      	bhi.n	10007980 <MXC_UART_RevA_SetParity+0xd8>
100078c2:	e8df f001 	tbb	[pc, r1]
100078c6:	0d07      	.short	0x0d07
100078c8:	0d4d3925 	.word	0x0d4d3925
100078cc:	392f2519 	.word	0x392f2519
100078d0:	4d43      	.short	0x4d43
100078d2:	55          	.byte	0x55
100078d3:	00          	.byte	0x00
    case MXC_UART_PARITY_DISABLE:
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 0 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS );
100078d4:	6803      	ldr	r3, [r0, #0]
100078d6:	f023 0302 	bic.w	r3, r3, #2
        
    case MXC_UART_PARITY_EVEN:
    case MXC_UART_PARITY_EVEN_0:
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_EVEN);
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARMD, 0 << MXC_F_UART_REVA_CTRL_PARMD_POS);
100078da:	6003      	str	r3, [r0, #0]
    default:
        return E_BAD_PARAM;
        break;
    }
    
    return E_NO_ERROR;
100078dc:	2000      	movs	r0, #0
        break;
100078de:	4770      	bx	lr
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
100078e0:	6803      	ldr	r3, [r0, #0]
100078e2:	f043 0302 	orr.w	r3, r3, #2
100078e6:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_EVEN);
100078e8:	6803      	ldr	r3, [r0, #0]
100078ea:	f023 030c 	bic.w	r3, r3, #12
100078ee:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARMD, 0 << MXC_F_UART_REVA_CTRL_PARMD_POS);
100078f0:	6803      	ldr	r3, [r0, #0]
100078f2:	f023 0310 	bic.w	r3, r3, #16
100078f6:	e7f0      	b.n	100078da <MXC_UART_RevA_SetParity+0x32>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
100078f8:	6803      	ldr	r3, [r0, #0]
100078fa:	f043 0302 	orr.w	r3, r3, #2
100078fe:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_EVEN);
10007900:	6803      	ldr	r3, [r0, #0]
10007902:	f023 030c 	bic.w	r3, r3, #12
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_SPACE);
10007906:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARMD, 1 << MXC_F_UART_REVA_CTRL_PARMD_POS);
10007908:	6803      	ldr	r3, [r0, #0]
1000790a:	f043 0310 	orr.w	r3, r3, #16
1000790e:	e7e4      	b.n	100078da <MXC_UART_RevA_SetParity+0x32>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
10007910:	6803      	ldr	r3, [r0, #0]
10007912:	f043 0302 	orr.w	r3, r3, #2
10007916:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_ODD);
10007918:	6803      	ldr	r3, [r0, #0]
1000791a:	f023 030c 	bic.w	r3, r3, #12
1000791e:	f043 0304 	orr.w	r3, r3, #4
10007922:	e7e4      	b.n	100078ee <MXC_UART_RevA_SetParity+0x46>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
10007924:	6803      	ldr	r3, [r0, #0]
10007926:	f043 0302 	orr.w	r3, r3, #2
1000792a:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_ODD);
1000792c:	6803      	ldr	r3, [r0, #0]
1000792e:	f023 030c 	bic.w	r3, r3, #12
10007932:	f043 0304 	orr.w	r3, r3, #4
10007936:	e7e6      	b.n	10007906 <MXC_UART_RevA_SetParity+0x5e>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
10007938:	6803      	ldr	r3, [r0, #0]
1000793a:	f043 0302 	orr.w	r3, r3, #2
1000793e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_MARK);
10007940:	6803      	ldr	r3, [r0, #0]
10007942:	f023 030c 	bic.w	r3, r3, #12
10007946:	f043 0308 	orr.w	r3, r3, #8
1000794a:	e7d0      	b.n	100078ee <MXC_UART_RevA_SetParity+0x46>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
1000794c:	6803      	ldr	r3, [r0, #0]
1000794e:	f043 0302 	orr.w	r3, r3, #2
10007952:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_MARK);
10007954:	6803      	ldr	r3, [r0, #0]
10007956:	f023 030c 	bic.w	r3, r3, #12
1000795a:	f043 0308 	orr.w	r3, r3, #8
1000795e:	e7d2      	b.n	10007906 <MXC_UART_RevA_SetParity+0x5e>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
10007960:	6803      	ldr	r3, [r0, #0]
10007962:	f043 0302 	orr.w	r3, r3, #2
10007966:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_SPACE);
10007968:	6803      	ldr	r3, [r0, #0]
1000796a:	f043 030c 	orr.w	r3, r3, #12
1000796e:	e7be      	b.n	100078ee <MXC_UART_RevA_SetParity+0x46>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY_EN, 1 << MXC_F_UART_REVA_CTRL_PARITY_EN_POS);
10007970:	6803      	ldr	r3, [r0, #0]
10007972:	f043 0302 	orr.w	r3, r3, #2
10007976:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_PARITY, MXC_S_UART_REVA_CTRL_PARITY_SPACE);
10007978:	6803      	ldr	r3, [r0, #0]
1000797a:	f043 030c 	orr.w	r3, r3, #12
1000797e:	e7c2      	b.n	10007906 <MXC_UART_RevA_SetParity+0x5e>
    return E_NO_ERROR;
10007980:	f06f 0002 	mvn.w	r0, #2
}
10007984:	4770      	bx	lr
10007986:	bf00      	nop
10007988:	40042000 	.word	0x40042000

1000798c <MXC_UART_RevA_SetFlowCtrl>:

int MXC_UART_RevA_SetFlowCtrl (mxc_uart_reva_regs_t* uart, mxc_uart_flow_t flowCtrl, int rtsThreshold)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
1000798c:	4b18      	ldr	r3, [pc, #96]	; (100079f0 <MXC_UART_RevA_SetFlowCtrl+0x64>)
1000798e:	4298      	cmp	r0, r3
10007990:	d00a      	beq.n	100079a8 <MXC_UART_RevA_SetFlowCtrl+0x1c>
10007992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007996:	4298      	cmp	r0, r3
10007998:	d006      	beq.n	100079a8 <MXC_UART_RevA_SetFlowCtrl+0x1c>
1000799a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000799e:	4298      	cmp	r0, r3
100079a0:	d002      	beq.n	100079a8 <MXC_UART_RevA_SetFlowCtrl+0x1c>
        return E_BAD_PARAM;
    }
    
    switch (flowCtrl) {
100079a2:	f06f 0002 	mvn.w	r0, #2
    
    rtsThreshold <<= MXC_F_UART_REVA_THRESH_CTRL_RX_FIFO_THRESH_POS;
    MXC_SETFIELD (uart->thresh_ctrl, MXC_F_UART_REVA_THRESH_CTRL_RTS_FIFO_THRESH, rtsThreshold);
    
    return E_NO_ERROR;
}
100079a6:	4770      	bx	lr
    switch (flowCtrl) {
100079a8:	2901      	cmp	r1, #1
100079aa:	d010      	beq.n	100079ce <MXC_UART_RevA_SetFlowCtrl+0x42>
100079ac:	2902      	cmp	r1, #2
100079ae:	d016      	beq.n	100079de <MXC_UART_RevA_SetFlowCtrl+0x52>
100079b0:	2900      	cmp	r1, #0
100079b2:	d1f6      	bne.n	100079a2 <MXC_UART_RevA_SetFlowCtrl+0x16>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_FLOW_CTRL, 0 << MXC_F_UART_REVA_CTRL_FLOW_CTRL_POS);
100079b4:	6803      	ldr	r3, [r0, #0]
100079b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    if (rtsThreshold < 1 || rtsThreshold > MXC_UART_FIFO_DEPTH) {
100079ba:	3a01      	subs	r2, #1
100079bc:	2a1f      	cmp	r2, #31
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_FLOW_POL, 1 << MXC_F_UART_REVA_CTRL_FLOW_POL_POS);
100079be:	6003      	str	r3, [r0, #0]
    if (rtsThreshold < 1 || rtsThreshold > MXC_UART_FIFO_DEPTH) {
100079c0:	d8ef      	bhi.n	100079a2 <MXC_UART_RevA_SetFlowCtrl+0x16>
    MXC_SETFIELD (uart->thresh_ctrl, MXC_F_UART_REVA_THRESH_CTRL_RTS_FIFO_THRESH, rtsThreshold);
100079c2:	6843      	ldr	r3, [r0, #4]
100079c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
100079c8:	6043      	str	r3, [r0, #4]
    return E_NO_ERROR;
100079ca:	2000      	movs	r0, #0
100079cc:	4770      	bx	lr
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_FLOW_CTRL, 1 << MXC_F_UART_REVA_CTRL_FLOW_CTRL_POS);
100079ce:	6803      	ldr	r3, [r0, #0]
100079d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
100079d4:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_FLOW_POL, 0 << MXC_F_UART_REVA_CTRL_FLOW_POL_POS);
100079d6:	6803      	ldr	r3, [r0, #0]
100079d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
100079dc:	e7ed      	b.n	100079ba <MXC_UART_RevA_SetFlowCtrl+0x2e>
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_FLOW_CTRL, 1 << MXC_F_UART_REVA_CTRL_FLOW_CTRL_POS);
100079de:	6803      	ldr	r3, [r0, #0]
100079e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
100079e4:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD (uart->ctrl, MXC_F_UART_REVA_CTRL_FLOW_POL, 1 << MXC_F_UART_REVA_CTRL_FLOW_POL_POS);
100079e6:	6803      	ldr	r3, [r0, #0]
100079e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
100079ec:	e7e5      	b.n	100079ba <MXC_UART_RevA_SetFlowCtrl+0x2e>
100079ee:	bf00      	nop
100079f0:	40042000 	.word	0x40042000

100079f4 <MXC_UART_RevA_ReadCharacterRaw>:
    return E_NO_ERROR;
}

int MXC_UART_RevA_ReadCharacterRaw (mxc_uart_reva_regs_t* uart)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
100079f4:	4b0a      	ldr	r3, [pc, #40]	; (10007a20 <MXC_UART_RevA_ReadCharacterRaw+0x2c>)
100079f6:	4298      	cmp	r0, r3
100079f8:	d007      	beq.n	10007a0a <MXC_UART_RevA_ReadCharacterRaw+0x16>
100079fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
100079fe:	4298      	cmp	r0, r3
10007a00:	d003      	beq.n	10007a0a <MXC_UART_RevA_ReadCharacterRaw+0x16>
10007a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007a06:	4298      	cmp	r0, r3
10007a08:	d104      	bne.n	10007a14 <MXC_UART_RevA_ReadCharacterRaw+0x20>
        return E_BAD_PARAM;
    }
    
    if (uart->status & MXC_F_UART_REVA_STATUS_RX_EMPTY) {
10007a0a:	6883      	ldr	r3, [r0, #8]
10007a0c:	06db      	lsls	r3, r3, #27
10007a0e:	d404      	bmi.n	10007a1a <MXC_UART_RevA_ReadCharacterRaw+0x26>
        return E_UNDERFLOW;
    }
    
    return uart->fifo;
10007a10:	69c0      	ldr	r0, [r0, #28]
10007a12:	4770      	bx	lr
        return E_BAD_PARAM;
10007a14:	f06f 0002 	mvn.w	r0, #2
10007a18:	4770      	bx	lr
        return E_UNDERFLOW;
10007a1a:	f06f 000c 	mvn.w	r0, #12
}
10007a1e:	4770      	bx	lr
10007a20:	40042000 	.word	0x40042000

10007a24 <MXC_UART_RevA_WriteCharacterRaw>:

int MXC_UART_RevA_WriteCharacterRaw (mxc_uart_reva_regs_t* uart, uint8_t character)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007a24:	4b0b      	ldr	r3, [pc, #44]	; (10007a54 <MXC_UART_RevA_WriteCharacterRaw+0x30>)
10007a26:	4298      	cmp	r0, r3
10007a28:	d007      	beq.n	10007a3a <MXC_UART_RevA_WriteCharacterRaw+0x16>
10007a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007a2e:	4298      	cmp	r0, r3
10007a30:	d003      	beq.n	10007a3a <MXC_UART_RevA_WriteCharacterRaw+0x16>
10007a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007a36:	4298      	cmp	r0, r3
10007a38:	d106      	bne.n	10007a48 <MXC_UART_RevA_WriteCharacterRaw+0x24>
        return E_BAD_PARAM;
    }
    
    // Return error if the FIFO is full
    if (uart->status & MXC_F_UART_REVA_STATUS_TX_FULL) {
10007a3a:	6883      	ldr	r3, [r0, #8]
10007a3c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
10007a40:	d105      	bne.n	10007a4e <MXC_UART_RevA_WriteCharacterRaw+0x2a>
        return E_OVERFLOW;
    }
    
    uart->fifo = character;
10007a42:	61c1      	str	r1, [r0, #28]
    
    return E_NO_ERROR;
10007a44:	4618      	mov	r0, r3
10007a46:	4770      	bx	lr
        return E_BAD_PARAM;
10007a48:	f06f 0002 	mvn.w	r0, #2
10007a4c:	4770      	bx	lr
        return E_OVERFLOW;
10007a4e:	f06f 000b 	mvn.w	r0, #11
}
10007a52:	4770      	bx	lr
10007a54:	40042000 	.word	0x40042000

10007a58 <MXC_UART_RevA_GetRXFIFOAvailable>:
    return E_NO_ERROR;
}

unsigned int MXC_UART_RevA_GetRXFIFOAvailable (mxc_uart_reva_regs_t* uart)
{
    return (uart->status & MXC_F_UART_REVA_STATUS_RX_FIFO_CNT) >> MXC_F_UART_REVA_STATUS_RX_FIFO_CNT_POS;
10007a58:	6880      	ldr	r0, [r0, #8]
}
10007a5a:	f3c0 2005 	ubfx	r0, r0, #8, #6
10007a5e:	4770      	bx	lr

10007a60 <MXC_UART_RevA_GetTXFIFOAvailable>:
    return E_NO_ERROR;
}

unsigned int MXC_UART_RevA_GetTXFIFOAvailable (mxc_uart_reva_regs_t* uart)
{
    int txCnt = (uart->status & MXC_F_UART_REVA_STATUS_TX_FIFO_CNT) >> MXC_F_UART_REVA_STATUS_TX_FIFO_CNT_POS;
10007a60:	6880      	ldr	r0, [r0, #8]
10007a62:	f3c0 4005 	ubfx	r0, r0, #16, #6
    return MXC_UART_FIFO_DEPTH - txCnt;
}
10007a66:	f1c0 0020 	rsb	r0, r0, #32
10007a6a:	4770      	bx	lr

10007a6c <MXC_UART_RevA_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_UART_RevA_SetRXThreshold (mxc_uart_reva_regs_t* uart, unsigned int numBytes)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007a6c:	4b0b      	ldr	r3, [pc, #44]	; (10007a9c <MXC_UART_RevA_SetRXThreshold+0x30>)
10007a6e:	4298      	cmp	r0, r3
10007a70:	d007      	beq.n	10007a82 <MXC_UART_RevA_SetRXThreshold+0x16>
10007a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007a76:	4298      	cmp	r0, r3
10007a78:	d003      	beq.n	10007a82 <MXC_UART_RevA_SetRXThreshold+0x16>
10007a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007a7e:	4298      	cmp	r0, r3
10007a80:	d109      	bne.n	10007a96 <MXC_UART_RevA_SetRXThreshold+0x2a>
        return E_BAD_PARAM;
    }
    
    if (numBytes < 1 || numBytes > MXC_UART_FIFO_DEPTH) {
10007a82:	1e4b      	subs	r3, r1, #1
10007a84:	2b1f      	cmp	r3, #31
10007a86:	d806      	bhi.n	10007a96 <MXC_UART_RevA_SetRXThreshold+0x2a>
        return E_BAD_PARAM;
    }
    
    numBytes <<= MXC_F_UART_REVA_THRESH_CTRL_RX_FIFO_THRESH_POS;
    MXC_SETFIELD (uart->thresh_ctrl, MXC_F_UART_REVA_THRESH_CTRL_RX_FIFO_THRESH, numBytes);
10007a88:	6843      	ldr	r3, [r0, #4]
10007a8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10007a8e:	4319      	orrs	r1, r3
10007a90:	6041      	str	r1, [r0, #4]
    
    return E_NO_ERROR;
10007a92:	2000      	movs	r0, #0
10007a94:	4770      	bx	lr
        return E_BAD_PARAM;
10007a96:	f06f 0002 	mvn.w	r0, #2
}
10007a9a:	4770      	bx	lr
10007a9c:	40042000 	.word	0x40042000

10007aa0 <MXC_UART_RevA_SetTXThreshold>:
    return (uart->thresh_ctrl & MXC_F_UART_REVA_THRESH_CTRL_RX_FIFO_THRESH) >> MXC_F_UART_REVA_THRESH_CTRL_RX_FIFO_THRESH_POS;
}

int MXC_UART_RevA_SetTXThreshold (mxc_uart_reva_regs_t* uart, unsigned int numBytes)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007aa0:	4b0c      	ldr	r3, [pc, #48]	; (10007ad4 <MXC_UART_RevA_SetTXThreshold+0x34>)
10007aa2:	4298      	cmp	r0, r3
10007aa4:	d007      	beq.n	10007ab6 <MXC_UART_RevA_SetTXThreshold+0x16>
10007aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007aaa:	4298      	cmp	r0, r3
10007aac:	d003      	beq.n	10007ab6 <MXC_UART_RevA_SetTXThreshold+0x16>
10007aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007ab2:	4298      	cmp	r0, r3
10007ab4:	d10a      	bne.n	10007acc <MXC_UART_RevA_SetTXThreshold+0x2c>
        return E_BAD_PARAM;
    }
    
    if (numBytes < 1 || numBytes > MXC_UART_FIFO_DEPTH) {
10007ab6:	1e4b      	subs	r3, r1, #1
10007ab8:	2b1f      	cmp	r3, #31
10007aba:	d807      	bhi.n	10007acc <MXC_UART_RevA_SetTXThreshold+0x2c>
        return E_BAD_PARAM;
    }
    
    numBytes <<= MXC_F_UART_REVA_THRESH_CTRL_TX_FIFO_THRESH_POS;
    MXC_SETFIELD (uart->thresh_ctrl, MXC_F_UART_REVA_THRESH_CTRL_TX_FIFO_THRESH, numBytes);
10007abc:	6843      	ldr	r3, [r0, #4]
10007abe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
10007ac2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
10007ac6:	6041      	str	r1, [r0, #4]
    
    return E_NO_ERROR;
10007ac8:	2000      	movs	r0, #0
10007aca:	4770      	bx	lr
        return E_BAD_PARAM;
10007acc:	f06f 0002 	mvn.w	r0, #2
}
10007ad0:	4770      	bx	lr
10007ad2:	bf00      	nop
10007ad4:	40042000 	.word	0x40042000

10007ad8 <MXC_UART_RevA_ClearFlags>:
    return uart->int_fl;
}

int MXC_UART_RevA_ClearFlags (mxc_uart_reva_regs_t* uart, unsigned int flags)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007ad8:	4b08      	ldr	r3, [pc, #32]	; (10007afc <MXC_UART_RevA_ClearFlags+0x24>)
10007ada:	4298      	cmp	r0, r3
10007adc:	d007      	beq.n	10007aee <MXC_UART_RevA_ClearFlags+0x16>
10007ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007ae2:	4298      	cmp	r0, r3
10007ae4:	d003      	beq.n	10007aee <MXC_UART_RevA_ClearFlags+0x16>
10007ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007aea:	4298      	cmp	r0, r3
10007aec:	d102      	bne.n	10007af4 <MXC_UART_RevA_ClearFlags+0x1c>
        return E_BAD_PARAM;
    }
    
    uart->int_fl = flags;
10007aee:	6101      	str	r1, [r0, #16]
    
    return E_NO_ERROR;
10007af0:	2000      	movs	r0, #0
10007af2:	4770      	bx	lr
        return E_BAD_PARAM;
10007af4:	f06f 0002 	mvn.w	r0, #2
}
10007af8:	4770      	bx	lr
10007afa:	bf00      	nop
10007afc:	40042000 	.word	0x40042000

10007b00 <MXC_UART_RevA_DisableInt>:
    return E_NO_ERROR;
}

int MXC_UART_RevA_DisableInt (mxc_uart_reva_regs_t* uart, unsigned int intDis)
{
    if (MXC_UART_GET_IDX ((mxc_uart_regs_t*) uart) < 0) {
10007b00:	4b09      	ldr	r3, [pc, #36]	; (10007b28 <MXC_UART_RevA_DisableInt+0x28>)
10007b02:	4298      	cmp	r0, r3
10007b04:	d007      	beq.n	10007b16 <MXC_UART_RevA_DisableInt+0x16>
10007b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007b0a:	4298      	cmp	r0, r3
10007b0c:	d003      	beq.n	10007b16 <MXC_UART_RevA_DisableInt+0x16>
10007b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10007b12:	4298      	cmp	r0, r3
10007b14:	d105      	bne.n	10007b22 <MXC_UART_RevA_DisableInt+0x22>
        return E_BAD_PARAM;
    }
    
    uart->int_en &= ~intDis;
10007b16:	68c3      	ldr	r3, [r0, #12]
10007b18:	ea23 0101 	bic.w	r1, r3, r1
10007b1c:	60c1      	str	r1, [r0, #12]
    
    return E_NO_ERROR;
10007b1e:	2000      	movs	r0, #0
10007b20:	4770      	bx	lr
        return E_BAD_PARAM;
10007b22:	f06f 0002 	mvn.w	r0, #2
}
10007b26:	4770      	bx	lr
10007b28:	40042000 	.word	0x40042000

10007b2c <MXC_WUT_SetTrim>:
}

/* ************************************************************************** */
static void MXC_WUT_SetTrim(uint32_t trimValue)
{
    MXC_SETFIELD(MXC_TRIMSIR->rtc, MXC_F_TRIMSIR_RTC_RTCX1, (trimValue << MXC_F_TRIMSIR_RTC_RTCX1_POS));
10007b2c:	4a08      	ldr	r2, [pc, #32]	; (10007b50 <MXC_WUT_SetTrim+0x24>)
10007b2e:	6891      	ldr	r1, [r2, #8]
10007b30:	0403      	lsls	r3, r0, #16
10007b32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
10007b36:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
10007b3a:	430b      	orrs	r3, r1
10007b3c:	6093      	str	r3, [r2, #8]
    MXC_SETFIELD(MXC_TRIMSIR->rtc, MXC_F_TRIMSIR_RTC_RTCX2, (trimValue << MXC_F_TRIMSIR_RTC_RTCX2_POS));
10007b3e:	6893      	ldr	r3, [r2, #8]
10007b40:	0540      	lsls	r0, r0, #21
10007b42:	f000 7078 	and.w	r0, r0, #65011712	; 0x3e00000
10007b46:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
10007b4a:	4318      	orrs	r0, r3
10007b4c:	6090      	str	r0, [r2, #8]
}
10007b4e:	4770      	bx	lr
10007b50:	40005400 	.word	0x40005400

10007b54 <MXC_WUT_GetWUTSync>:
{
10007b54:	b570      	push	{r4, r5, r6, lr}
    MXC_WUT_RevA_Edge((mxc_wut_reva_regs_t*)MXC_WUT);
10007b56:	4d05      	ldr	r5, [pc, #20]	; (10007b6c <MXC_WUT_GetWUTSync+0x18>)
{
10007b58:	4606      	mov	r6, r0
    MXC_WUT_RevA_Edge((mxc_wut_reva_regs_t*)MXC_WUT);
10007b5a:	4628      	mov	r0, r5
{
10007b5c:	460c      	mov	r4, r1
    MXC_WUT_RevA_Edge((mxc_wut_reva_regs_t*)MXC_WUT);
10007b5e:	f000 f901 	bl	10007d64 <MXC_WUT_RevA_Edge>
    *wutCnt = MXC_WUT->cnt;
10007b62:	682b      	ldr	r3, [r5, #0]
10007b64:	6033      	str	r3, [r6, #0]
    *snapshot = MXC_WUT->snapshot;
10007b66:	6a2b      	ldr	r3, [r5, #32]
10007b68:	6023      	str	r3, [r4, #0]
}
10007b6a:	bd70      	pop	{r4, r5, r6, pc}
10007b6c:	40006400 	.word	0x40006400

10007b70 <MXC_WUT_Init>:
{
10007b70:	b507      	push	{r0, r1, r2, lr}
10007b72:	9001      	str	r0, [sp, #4]
    MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_XTAL32K);
10007b74:	2006      	movs	r0, #6
10007b76:	f7fe fb82 	bl	1000627e <MXC_SYS_ClockSourceEnable>
    MXC_WUT_RevA_Init((mxc_wut_reva_regs_t*) MXC_WUT, pres);
10007b7a:	9901      	ldr	r1, [sp, #4]
10007b7c:	4802      	ldr	r0, [pc, #8]	; (10007b88 <MXC_WUT_Init+0x18>)
}
10007b7e:	b003      	add	sp, #12
10007b80:	f85d eb04 	ldr.w	lr, [sp], #4
    MXC_WUT_RevA_Init((mxc_wut_reva_regs_t*) MXC_WUT, pres);
10007b84:	f000 b8c2 	b.w	10007d0c <MXC_WUT_RevA_Init>
10007b88:	40006400 	.word	0x40006400

10007b8c <MXC_WUT_Enable>:
    MXC_WUT_RevA_Enable((mxc_wut_reva_regs_t*) MXC_WUT);
10007b8c:	4801      	ldr	r0, [pc, #4]	; (10007b94 <MXC_WUT_Enable+0x8>)
10007b8e:	f000 b8d1 	b.w	10007d34 <MXC_WUT_RevA_Enable>
10007b92:	bf00      	nop
10007b94:	40006400 	.word	0x40006400

10007b98 <MXC_WUT_Config>:
{
10007b98:	4601      	mov	r1, r0
    MXC_WUT_RevA_Config((mxc_wut_reva_regs_t*) MXC_WUT, (mxc_wut_reva_cfg_t*) cfg);
10007b9a:	4801      	ldr	r0, [pc, #4]	; (10007ba0 <MXC_WUT_Config+0x8>)
10007b9c:	f000 b8cf 	b.w	10007d3e <MXC_WUT_RevA_Config>
10007ba0:	40006400 	.word	0x40006400

10007ba4 <MXC_WUT_IntClear>:
    MXC_WUT_RevA_IntClear((mxc_wut_reva_regs_t*) MXC_WUT);
10007ba4:	4801      	ldr	r0, [pc, #4]	; (10007bac <MXC_WUT_IntClear+0x8>)
10007ba6:	f000 b8da 	b.w	10007d5e <MXC_WUT_RevA_IntClear>
10007baa:	bf00      	nop
10007bac:	40006400 	.word	0x40006400

10007bb0 <MXC_WUT_Handler>:
    return E_NO_ERROR;
}

/* ************************************************************************** */
int MXC_WUT_Handler(void)
{
10007bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint64_t calcTicks;
    int trimComplete;
    mxc_wut_complete_cb_t cbTemp;

    /* Clear the interrupt flags */
    MXC_WUT_IntClear();
10007bb4:	f7ff fff6 	bl	10007ba4 <MXC_WUT_IntClear>

    if(!trimPending) {
10007bb8:	4b4a      	ldr	r3, [pc, #296]	; (10007ce4 <MXC_WUT_Handler+0x134>)
10007bba:	6818      	ldr	r0, [r3, #0]
10007bbc:	469b      	mov	fp, r3
10007bbe:	2800      	cmp	r0, #0
10007bc0:	f000 808a 	beq.w	10007cd8 <MXC_WUT_Handler+0x128>
        return E_NO_ERROR;
    }

    /* Store the snapshot */
    MXC_WUT_GetWUTSync(&wutCnt1, &snapshot1);
10007bc4:	a901      	add	r1, sp, #4
10007bc6:	4668      	mov	r0, sp
10007bc8:	f7ff ffc4 	bl	10007b54 <MXC_WUT_GetWUTSync>
    snapTicks = snapshot1 - snapshot0_async;
10007bcc:	4b46      	ldr	r3, [pc, #280]	; (10007ce8 <MXC_WUT_Handler+0x138>)
10007bce:	f8dd e004 	ldr.w	lr, [sp, #4]
10007bd2:	f8d3 c000 	ldr.w	ip, [r3]
    wutTicks = wutCnt1 - wutCnt0_async;
10007bd6:	4b45      	ldr	r3, [pc, #276]	; (10007cec <MXC_WUT_Handler+0x13c>)

    /* Calculate the ideal number of DBB ticks in WUT_TRIM_TICKS */
    calcTicks = ((uint64_t)wutTicks * (uint64_t)BB_CLK_RATE_HZ) / (uint64_t)32768;

    trimComplete = 0;
    trimValue = (MXC_TRIMSIR->rtc & MXC_F_TRIMSIR_RTC_RTCX1) >> MXC_F_TRIMSIR_RTC_RTCX1_POS;
10007bd8:	4945      	ldr	r1, [pc, #276]	; (10007cf0 <MXC_WUT_Handler+0x140>)
    wutTicks = wutCnt1 - wutCnt0_async;
10007bda:	681a      	ldr	r2, [r3, #0]
10007bdc:	9b00      	ldr	r3, [sp, #0]
    trimValue = (MXC_TRIMSIR->rtc & MXC_F_TRIMSIR_RTC_RTCX1) >> MXC_F_TRIMSIR_RTC_RTCX1_POS;
10007bde:	6889      	ldr	r1, [r1, #8]
10007be0:	f8df a124 	ldr.w	sl, [pc, #292]	; 10007d08 <MXC_WUT_Handler+0x158>
    wutTicks = wutCnt1 - wutCnt0_async;
10007be4:	1a9b      	subs	r3, r3, r2
    calcTicks = ((uint64_t)wutTicks * (uint64_t)BB_CLK_RATE_HZ) / (uint64_t)32768;
10007be6:	4a43      	ldr	r2, [pc, #268]	; (10007cf4 <MXC_WUT_Handler+0x144>)
10007be8:	fba3 8902 	umull	r8, r9, r3, r2
10007bec:	ea4f 32d8 	mov.w	r2, r8, lsr #15
10007bf0:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
10007bf4:	ea4f 33d9 	mov.w	r3, r9, lsr #15

    if(snapTicks > calcTicks) {
10007bf8:	f04f 0900 	mov.w	r9, #0
    snapTicks = snapshot1 - snapshot0_async;
10007bfc:	ebae 000c 	sub.w	r0, lr, ip
    if(snapTicks > calcTicks) {
10007c00:	454b      	cmp	r3, r9
10007c02:	bf08      	it	eq
10007c04:	4282      	cmpeq	r2, r0
    trimValue = (MXC_TRIMSIR->rtc & MXC_F_TRIMSIR_RTC_RTCX1) >> MXC_F_TRIMSIR_RTC_RTCX1_POS;
10007c06:	f3c1 4104 	ubfx	r1, r1, #16, #5
    if(snapTicks > calcTicks) {
10007c0a:	d231      	bcs.n	10007c70 <MXC_WUT_Handler+0xc0>
        /* See if we're closer to the calculated value */
        if((snapTicks - calcTicks) <= bestDiff_async) {
10007c0c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 10007d04 <MXC_WUT_Handler+0x154>
10007c10:	1a86      	subs	r6, r0, r2
10007c12:	eb69 0703 	sbc.w	r7, r9, r3
10007c16:	f8dc 4000 	ldr.w	r4, [ip]
10007c1a:	2500      	movs	r5, #0
10007c1c:	42bd      	cmp	r5, r7
10007c1e:	bf08      	it	eq
10007c20:	42b4      	cmpeq	r4, r6
            bestDiff_async = snapTicks - calcTicks;
10007c22:	bf22      	ittt	cs
10007c24:	1a82      	subcs	r2, r0, r2
            bestTrim_async = trimValue;
10007c26:	4b34      	ldrcs	r3, [pc, #208]	; (10007cf8 <MXC_WUT_Handler+0x148>)
            bestDiff_async = snapTicks - calcTicks;
10007c28:	f8cc 2000 	strcs.w	r2, [ip]
            /* We're maxed out on trim range */
            trimComplete = 1;
        }
        trimValue--;

        if(capAdded_async == 1) {
10007c2c:	4a33      	ldr	r2, [pc, #204]	; (10007cfc <MXC_WUT_Handler+0x14c>)
            bestTrim_async = trimValue;
10007c2e:	bf28      	it	cs
10007c30:	6019      	strcs	r1, [r3, #0]
        if(capAdded_async == 1) {
10007c32:	6813      	ldr	r3, [r2, #0]
10007c34:	2b01      	cmp	r3, #1
        if(trimValue == 0) {
10007c36:	bf18      	it	ne
10007c38:	fab1 f381 	clzne	r3, r1
        trimValue--;
10007c3c:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
            /* We've hit an inflection point */
            trimComplete = 1;
        }
        capAdded_async = -1;
10007c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        if(trimValue == 0) {
10007c44:	bf18      	it	ne
10007c46:	095b      	lsrne	r3, r3, #5
        capAdded_async = -1;
10007c48:	6011      	str	r1, [r2, #0]
        /* Just right */
        bestTrim_async = trimValue;
        trimComplete = 1;
    }

    if(trimComplete) {
10007c4a:	2b00      	cmp	r3, #0
10007c4c:	d135      	bne.n	10007cba <MXC_WUT_Handler+0x10a>

        return E_NO_ERROR;
    }

    /* Start the next step */
    MXC_WUT_SetTrim(trimValue);
10007c4e:	f7ff ff6d 	bl	10007b2c <MXC_WUT_SetTrim>
    MXC_WUT_GetWUTSync(&wutCnt0_async, &snapshot0_async);
10007c52:	4925      	ldr	r1, [pc, #148]	; (10007ce8 <MXC_WUT_Handler+0x138>)
10007c54:	4825      	ldr	r0, [pc, #148]	; (10007cec <MXC_WUT_Handler+0x13c>)
10007c56:	f7ff ff7d 	bl	10007b54 <MXC_WUT_GetWUTSync>

    if(cb_async != NULL) {
10007c5a:	f8da 3000 	ldr.w	r3, [sl]
10007c5e:	b123      	cbz	r3, 10007c6a <MXC_WUT_Handler+0xba>
        /* Prime the compare interrupt */
        MXC_WUT->cmp = MXC_WUT->cnt + WUT_TRIM_TICKS-1;
10007c60:	4a27      	ldr	r2, [pc, #156]	; (10007d00 <MXC_WUT_Handler+0x150>)
10007c62:	6813      	ldr	r3, [r2, #0]
10007c64:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
10007c68:	6053      	str	r3, [r2, #4]
    }

    /* Return E_BUSY to indicate the trim procedure is still running */
    return E_BUSY;
10007c6a:	f06f 0005 	mvn.w	r0, #5
10007c6e:	e033      	b.n	10007cd8 <MXC_WUT_Handler+0x128>
    } else if (snapTicks < calcTicks){
10007c70:	4599      	cmp	r9, r3
10007c72:	bf08      	it	eq
10007c74:	4290      	cmpeq	r0, r2
10007c76:	d21e      	bcs.n	10007cb6 <MXC_WUT_Handler+0x106>
        if((calcTicks - snapTicks) <= bestDiff_async) {
10007c78:	1a14      	subs	r4, r2, r0
10007c7a:	4822      	ldr	r0, [pc, #136]	; (10007d04 <MXC_WUT_Handler+0x154>)
10007c7c:	eb63 0509 	sbc.w	r5, r3, r9
10007c80:	6806      	ldr	r6, [r0, #0]
10007c82:	2700      	movs	r7, #0
10007c84:	42af      	cmp	r7, r5
10007c86:	bf08      	it	eq
10007c88:	42a6      	cmpeq	r6, r4
10007c8a:	d305      	bcc.n	10007c98 <MXC_WUT_Handler+0xe8>
            bestTrim_async = trimValue;
10007c8c:	4b1a      	ldr	r3, [pc, #104]	; (10007cf8 <MXC_WUT_Handler+0x148>)
            bestDiff_async = calcTicks - snapTicks;
10007c8e:	ebac 0c0e 	sub.w	ip, ip, lr
10007c92:	4462      	add	r2, ip
10007c94:	6002      	str	r2, [r0, #0]
            bestTrim_async = trimValue;
10007c96:	6019      	str	r1, [r3, #0]
        if(capAdded_async == -1) {
10007c98:	4a18      	ldr	r2, [pc, #96]	; (10007cfc <MXC_WUT_Handler+0x14c>)
10007c9a:	6813      	ldr	r3, [r2, #0]
10007c9c:	1c5c      	adds	r4, r3, #1
        trimValue++;
10007c9e:	f101 0001 	add.w	r0, r1, #1
        if(capAdded_async == -1) {
10007ca2:	f04f 0401 	mov.w	r4, #1
10007ca6:	d004      	beq.n	10007cb2 <MXC_WUT_Handler+0x102>
        if(trimValue == 0x1f) {
10007ca8:	391f      	subs	r1, #31
10007caa:	424b      	negs	r3, r1
10007cac:	414b      	adcs	r3, r1
        capAdded_async = 1;
10007cae:	6014      	str	r4, [r2, #0]
10007cb0:	e7cb      	b.n	10007c4a <MXC_WUT_Handler+0x9a>
            trimComplete = 1;
10007cb2:	4623      	mov	r3, r4
10007cb4:	e7fb      	b.n	10007cae <MXC_WUT_Handler+0xfe>
        bestTrim_async = trimValue;
10007cb6:	4b10      	ldr	r3, [pc, #64]	; (10007cf8 <MXC_WUT_Handler+0x148>)
10007cb8:	6019      	str	r1, [r3, #0]
        MXC_WUT_SetTrim(bestTrim_async);
10007cba:	4b0f      	ldr	r3, [pc, #60]	; (10007cf8 <MXC_WUT_Handler+0x148>)
10007cbc:	6818      	ldr	r0, [r3, #0]
10007cbe:	f7ff ff35 	bl	10007b2c <MXC_WUT_SetTrim>
        if(cb_async != NULL) {
10007cc2:	f8da 3000 	ldr.w	r3, [sl]
        trimPending = 0;
10007cc6:	2400      	movs	r4, #0
10007cc8:	f8cb 4000 	str.w	r4, [fp]
        if(cb_async != NULL) {
10007ccc:	b13b      	cbz	r3, 10007cde <MXC_WUT_Handler+0x12e>
            cbTemp(E_NO_ERROR);
10007cce:	4620      	mov	r0, r4
            cb_async = NULL;
10007cd0:	f8ca 4000 	str.w	r4, [sl]
            cbTemp(E_NO_ERROR);
10007cd4:	4798      	blx	r3
        return E_NO_ERROR;
10007cd6:	4620      	mov	r0, r4
}
10007cd8:	b003      	add	sp, #12
10007cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return E_NO_ERROR;
10007cde:	4618      	mov	r0, r3
10007ce0:	e7fa      	b.n	10007cd8 <MXC_WUT_Handler+0x128>
10007ce2:	bf00      	nop
10007ce4:	20000da0 	.word	0x20000da0
10007ce8:	20000d9c 	.word	0x20000d9c
10007cec:	20000da4 	.word	0x20000da4
10007cf0:	40005400 	.word	0x40005400
10007cf4:	000f4240 	.word	0x000f4240
10007cf8:	20000d90 	.word	0x20000d90
10007cfc:	20000d94 	.word	0x20000d94
10007d00:	40006400 	.word	0x40006400
10007d04:	20000d8c 	.word	0x20000d8c
10007d08:	20000d98 	.word	0x20000d98

10007d0c <MXC_WUT_RevA_Init>:

/* ************************************************************************** */
void MXC_WUT_RevA_Init(mxc_wut_reva_regs_t* wut, mxc_wut_reva_pres_t pres)
{
    // Disable timer and clear settings
    wut->ctrl = 0;
10007d0c:	2300      	movs	r3, #0
    
    // Clear interrupt flag
    wut->intfl = MXC_F_WUT_REVA_INTFL_IRQ_CLR;
10007d0e:	2201      	movs	r2, #1
    wut->ctrl = 0;
10007d10:	6103      	str	r3, [r0, #16]
    wut->intfl = MXC_F_WUT_REVA_INTFL_IRQ_CLR;
10007d12:	60c2      	str	r2, [r0, #12]
    
    // Set the prescaler
    wut->ctrl |= pres;
10007d14:	6902      	ldr	r2, [r0, #16]
10007d16:	4311      	orrs	r1, r2
    
    // Initialize the compare register
    wut->cmp = 0xFFFFFFFF;
10007d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    wut->ctrl |= pres;
10007d1c:	6101      	str	r1, [r0, #16]
    wut->cmp = 0xFFFFFFFF;
10007d1e:	6042      	str	r2, [r0, #4]
    
    // Initialize the local variables
    wut_count = 0;
10007d20:	4a02      	ldr	r2, [pc, #8]	; (10007d2c <MXC_WUT_RevA_Init+0x20>)
10007d22:	6013      	str	r3, [r2, #0]
    wut_snapshot = 0;
10007d24:	4a02      	ldr	r2, [pc, #8]	; (10007d30 <MXC_WUT_RevA_Init+0x24>)
10007d26:	6013      	str	r3, [r2, #0]
}
10007d28:	4770      	bx	lr
10007d2a:	bf00      	nop
10007d2c:	20000da8 	.word	0x20000da8
10007d30:	20000dac 	.word	0x20000dac

10007d34 <MXC_WUT_RevA_Enable>:
}

/* ************************************************************************** */
void MXC_WUT_RevA_Enable(mxc_wut_reva_regs_t* wut)
{
    wut->ctrl |= MXC_F_WUT_REVA_CTRL_TEN;
10007d34:	6903      	ldr	r3, [r0, #16]
10007d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10007d3a:	6103      	str	r3, [r0, #16]
}
10007d3c:	4770      	bx	lr

10007d3e <MXC_WUT_RevA_Config>:

/* ************************************************************************** */
void MXC_WUT_RevA_Config(mxc_wut_reva_regs_t* wut, const mxc_wut_reva_cfg_t* cfg)
{
    // Configure the timer
    wut->ctrl |= (wut->ctrl & ~(MXC_F_WUT_REVA_CTRL_TMODE | MXC_F_WUT_REVA_CTRL_TPOL)) |
10007d3e:	6902      	ldr	r2, [r0, #16]
               ((cfg->mode << MXC_F_WUT_REVA_CTRL_TMODE_POS) & MXC_F_WUT_REVA_CTRL_TMODE);
10007d40:	780b      	ldrb	r3, [r1, #0]
{
10007d42:	b510      	push	{r4, lr}
               ((cfg->mode << MXC_F_WUT_REVA_CTRL_TMODE_POS) & MXC_F_WUT_REVA_CTRL_TMODE);
10007d44:	f003 0307 	and.w	r3, r3, #7
    wut->ctrl |= (wut->ctrl & ~(MXC_F_WUT_REVA_CTRL_TMODE | MXC_F_WUT_REVA_CTRL_TPOL)) |
10007d48:	6904      	ldr	r4, [r0, #16]
10007d4a:	f022 0247 	bic.w	r2, r2, #71	; 0x47
10007d4e:	4313      	orrs	r3, r2
10007d50:	4323      	orrs	r3, r4
10007d52:	6103      	str	r3, [r0, #16]
               
    wut->cnt = 0x1;
10007d54:	2301      	movs	r3, #1
10007d56:	6003      	str	r3, [r0, #0]
    
    wut->cmp = cfg->cmp_cnt;
10007d58:	684b      	ldr	r3, [r1, #4]
10007d5a:	6043      	str	r3, [r0, #4]
}
10007d5c:	bd10      	pop	{r4, pc}

10007d5e <MXC_WUT_RevA_IntClear>:
}

/* ************************************************************************* */
void MXC_WUT_RevA_IntClear(mxc_wut_reva_regs_t* wut)
{
    wut->intfl = MXC_F_WUT_REVA_INTFL_IRQ_CLR;
10007d5e:	2301      	movs	r3, #1
10007d60:	60c3      	str	r3, [r0, #12]
}
10007d62:	4770      	bx	lr

10007d64 <MXC_WUT_RevA_Edge>:

/* ************************************************************************** */
void MXC_WUT_RevA_Edge(mxc_wut_reva_regs_t* wut)
{
    // Wait for a WUT edge
    uint32_t tmp = wut->cnt;
10007d64:	6803      	ldr	r3, [r0, #0]
    
    while (tmp == wut->cnt) {}
10007d66:	6802      	ldr	r2, [r0, #0]
10007d68:	429a      	cmp	r2, r3
10007d6a:	d0fc      	beq.n	10007d66 <MXC_WUT_RevA_Edge+0x2>
}
10007d6c:	4770      	bx	lr

10007d6e <MXC_GetLock>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
10007d6e:	e850 3f00 	ldrex	r3, [r0]
int MXC_GetLock(uint32_t* lock, uint32_t value)
{
    do {
    
        // Return if the lock is taken by a different thread
        if (__LDREXW((volatile unsigned long*) lock) != 0) {
10007d72:	b93b      	cbnz	r3, 10007d84 <MXC_GetLock+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
10007d74:	e840 1300 	strex	r3, r1, [r0]
            return E_BUSY;
        }
        
        // Attempt to take the lock
    }
    while (__STREXW(value, (volatile unsigned long*) lock) != 0);
10007d78:	2b00      	cmp	r3, #0
10007d7a:	d1f8      	bne.n	10007d6e <MXC_GetLock>
  __ASM volatile ("dmb");
10007d7c:	f3bf 8f5f 	dmb	sy
    
    // Do not start any other memory access until memory barrier is complete
    __DMB();
    
    return E_NO_ERROR;
10007d80:	4618      	mov	r0, r3
10007d82:	4770      	bx	lr
            return E_BUSY;
10007d84:	f06f 0005 	mvn.w	r0, #5
}
10007d88:	4770      	bx	lr

10007d8a <MXC_FreeLock>:
10007d8a:	f3bf 8f5f 	dmb	sy
/* ************************************************************************** */
void MXC_FreeLock(uint32_t* lock)
{
    // Ensure memory operations complete before releasing lock
    __DMB();
    *lock = 0;
10007d8e:	2300      	movs	r3, #0
10007d90:	6003      	str	r3, [r0, #0]
}
10007d92:	4770      	bx	lr

10007d94 <MXC_GPIO_Common_Handler>:
        mask >>= 1;
    }
}

void MXC_GPIO_Common_Handler(unsigned int port)
{
10007d94:	b570      	push	{r4, r5, r6, lr}
    uint32_t stat;
    unsigned int pin;
    
    MXC_ASSERT(port < MXC_CFG_GPIO_INSTANCES);
    
    mxc_gpio_regs_t* gpio = MXC_GPIO_GET_GPIO(port);
10007d96:	4605      	mov	r5, r0
10007d98:	b198      	cbz	r0, 10007dc2 <MXC_GPIO_Common_Handler+0x2e>
10007d9a:	2801      	cmp	r0, #1
10007d9c:	4e0f      	ldr	r6, [pc, #60]	; (10007ddc <MXC_GPIO_Common_Handler+0x48>)
10007d9e:	bf18      	it	ne
10007da0:	2600      	movne	r6, #0
    
    stat = MXC_GPIO_GetFlags(gpio);
10007da2:	4630      	mov	r0, r6
10007da4:	f7fe fe78 	bl	10006a98 <MXC_GPIO_GetFlags>
    MXC_GPIO_ClearFlags(gpio, stat);
10007da8:	4601      	mov	r1, r0
    stat = MXC_GPIO_GetFlags(gpio);
10007daa:	4604      	mov	r4, r0
    MXC_GPIO_ClearFlags(gpio, stat);
10007dac:	4630      	mov	r0, r6
10007dae:	f7fe fe71 	bl	10006a94 <MXC_GPIO_ClearFlags>
    
    pin = 0;
    
    while (stat) {
10007db2:	4e0b      	ldr	r6, [pc, #44]	; (10007de0 <MXC_GPIO_Common_Handler+0x4c>)
10007db4:	480b      	ldr	r0, [pc, #44]	; (10007de4 <MXC_GPIO_Common_Handler+0x50>)
10007db6:	eb06 16c5 	add.w	r6, r6, r5, lsl #7
10007dba:	eb00 15c5 	add.w	r5, r0, r5, lsl #7
10007dbe:	b914      	cbnz	r4, 10007dc6 <MXC_GPIO_Common_Handler+0x32>
        }
        
        pin++;
        stat >>= 1;
    }
}
10007dc0:	bd70      	pop	{r4, r5, r6, pc}
    mxc_gpio_regs_t* gpio = MXC_GPIO_GET_GPIO(port);
10007dc2:	4e09      	ldr	r6, [pc, #36]	; (10007de8 <MXC_GPIO_Common_Handler+0x54>)
10007dc4:	e7ed      	b.n	10007da2 <MXC_GPIO_Common_Handler+0xe>
        if (stat & 1) {
10007dc6:	07e3      	lsls	r3, r4, #31
10007dc8:	d503      	bpl.n	10007dd2 <MXC_GPIO_Common_Handler+0x3e>
            if (callback[port][pin]) {
10007dca:	682b      	ldr	r3, [r5, #0]
10007dcc:	b10b      	cbz	r3, 10007dd2 <MXC_GPIO_Common_Handler+0x3e>
                callback[port][pin](cbparam[port][pin]);
10007dce:	6830      	ldr	r0, [r6, #0]
10007dd0:	4798      	blx	r3
        stat >>= 1;
10007dd2:	0864      	lsrs	r4, r4, #1
10007dd4:	3604      	adds	r6, #4
10007dd6:	3504      	adds	r5, #4
10007dd8:	e7f1      	b.n	10007dbe <MXC_GPIO_Common_Handler+0x2a>
10007dda:	bf00      	nop
10007ddc:	40009000 	.word	0x40009000
10007de0:	20000eb0 	.word	0x20000eb0
10007de4:	20000db0 	.word	0x20000db0
10007de8:	40008000 	.word	0x40008000

10007dec <MXC_UART_Common_ReadCharacter>:

#include "uart_common.h"
#include "uart.h"

int MXC_UART_Common_ReadCharacter(mxc_uart_regs_t* uart)
{
10007dec:	b510      	push	{r4, lr}
10007dee:	4604      	mov	r4, r0
    // Wait until FIFO has a character ready.
    while (MXC_UART_GetRXFIFOAvailable(uart) < 1);
10007df0:	4620      	mov	r0, r4
10007df2:	f7ff fc0d 	bl	10007610 <MXC_UART_GetRXFIFOAvailable>
10007df6:	2800      	cmp	r0, #0
10007df8:	d0fa      	beq.n	10007df0 <MXC_UART_Common_ReadCharacter+0x4>
    
    // Read the character using the non-blocking function.
    return MXC_UART_ReadCharacterRaw(uart);
10007dfa:	4620      	mov	r0, r4
}
10007dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_UART_ReadCharacterRaw(uart);
10007e00:	f7ff bbfe 	b.w	10007600 <MXC_UART_ReadCharacterRaw>

10007e04 <MXC_UART_Common_WriteCharacter>:

int MXC_UART_Common_WriteCharacter(mxc_uart_regs_t* uart, uint8_t character)
{
10007e04:	b513      	push	{r0, r1, r4, lr}
10007e06:	4604      	mov	r4, r0
    // Wait until FIFO has space for the character.
    while (MXC_UART_GetTXFIFOAvailable(uart) < 1);
10007e08:	4620      	mov	r0, r4
10007e0a:	9101      	str	r1, [sp, #4]
10007e0c:	f7ff fc02 	bl	10007614 <MXC_UART_GetTXFIFOAvailable>
10007e10:	9901      	ldr	r1, [sp, #4]
10007e12:	2800      	cmp	r0, #0
10007e14:	d0f8      	beq.n	10007e08 <MXC_UART_Common_WriteCharacter+0x4>
    
    // Write the character using the non-blocking function.
    return MXC_UART_WriteCharacterRaw(uart, character);
10007e16:	4620      	mov	r0, r4
}
10007e18:	b002      	add	sp, #8
10007e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_UART_WriteCharacterRaw(uart, character);
10007e1e:	f7ff bbf1 	b.w	10007604 <MXC_UART_WriteCharacterRaw>

10007e22 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
10007e22:	b510      	push	{r4, lr}
10007e24:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
10007e26:	f000 ff3d 	bl	10008ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
10007e2a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
10007e2c:	f000 ff4a 	bl	10008cc4 <vPortExitCritical>

	return xReturn;
}
10007e30:	fab4 f084 	clz	r0, r4
10007e34:	0940      	lsrs	r0, r0, #5
10007e36:	bd10      	pop	{r4, pc}

10007e38 <prvCopyDataToQueue>:
{
10007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007e3a:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
10007e3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
10007e3e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
10007e40:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
10007e42:	b952      	cbnz	r2, 10007e5a <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
10007e44:	6807      	ldr	r7, [r0, #0]
10007e46:	bb47      	cbnz	r7, 10007e9a <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
10007e48:	6880      	ldr	r0, [r0, #8]
10007e4a:	f000 fd9d 	bl	10008988 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
10007e4e:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
10007e50:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
10007e52:	3601      	adds	r6, #1
10007e54:	63a6      	str	r6, [r4, #56]	; 0x38
}
10007e56:	4628      	mov	r0, r5
10007e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
10007e5a:	b965      	cbnz	r5, 10007e76 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
10007e5c:	6840      	ldr	r0, [r0, #4]
10007e5e:	f001 fbd5 	bl	1000960c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10007e62:	6863      	ldr	r3, [r4, #4]
10007e64:	6c22      	ldr	r2, [r4, #64]	; 0x40
10007e66:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10007e68:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10007e6a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10007e6c:	4293      	cmp	r3, r2
10007e6e:	d3f0      	bcc.n	10007e52 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
10007e70:	6823      	ldr	r3, [r4, #0]
10007e72:	6063      	str	r3, [r4, #4]
10007e74:	e7ed      	b.n	10007e52 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
10007e76:	68c0      	ldr	r0, [r0, #12]
10007e78:	f001 fbc8 	bl	1000960c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
10007e7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
10007e7e:	68e3      	ldr	r3, [r4, #12]
10007e80:	4251      	negs	r1, r2
10007e82:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10007e84:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
10007e86:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10007e88:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
10007e8a:	bf3e      	ittt	cc
10007e8c:	68a3      	ldrcc	r3, [r4, #8]
10007e8e:	185b      	addcc	r3, r3, r1
10007e90:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
10007e92:	2d02      	cmp	r5, #2
10007e94:	d101      	bne.n	10007e9a <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
10007e96:	b116      	cbz	r6, 10007e9e <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
10007e98:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
10007e9a:	2500      	movs	r5, #0
10007e9c:	e7d9      	b.n	10007e52 <prvCopyDataToQueue+0x1a>
10007e9e:	4635      	mov	r5, r6
10007ea0:	e7d7      	b.n	10007e52 <prvCopyDataToQueue+0x1a>

10007ea2 <prvCopyDataFromQueue>:
{
10007ea2:	4603      	mov	r3, r0
10007ea4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
10007ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
10007ea8:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
10007eaa:	b16a      	cbz	r2, 10007ec8 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10007eac:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
10007eae:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10007eb0:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
10007eb2:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
10007eb4:	bf28      	it	cs
10007eb6:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10007eb8:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
10007eba:	bf28      	it	cs
10007ebc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
10007ebe:	68d9      	ldr	r1, [r3, #12]
}
10007ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
10007ec4:	f001 bba2 	b.w	1000960c <memcpy>
}
10007ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
10007ecc:	4770      	bx	lr

10007ece <prvUnlockQueue>:
{
10007ece:	b570      	push	{r4, r5, r6, lr}
10007ed0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
10007ed2:	f000 fee7 	bl	10008ca4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
10007ed6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10007eda:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
10007ede:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
10007ee0:	2d00      	cmp	r5, #0
10007ee2:	dc14      	bgt.n	10007f0e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
10007ee4:	23ff      	movs	r3, #255	; 0xff
10007ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
10007eea:	f000 feeb 	bl	10008cc4 <vPortExitCritical>
	taskENTER_CRITICAL();
10007eee:	f000 fed9 	bl	10008ca4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
10007ef2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10007ef6:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
10007efa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
10007efc:	2d00      	cmp	r5, #0
10007efe:	dc12      	bgt.n	10007f26 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
10007f00:	23ff      	movs	r3, #255	; 0xff
10007f02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
10007f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
10007f0a:	f000 bedb 	b.w	10008cc4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10007f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
10007f10:	2b00      	cmp	r3, #0
10007f12:	d0e7      	beq.n	10007ee4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10007f14:	4630      	mov	r0, r6
10007f16:	f000 fcb3 	bl	10008880 <xTaskRemoveFromEventList>
10007f1a:	b108      	cbz	r0, 10007f20 <prvUnlockQueue+0x52>
						vTaskMissedYield();
10007f1c:	f000 fd1e 	bl	1000895c <vTaskMissedYield>
			--cTxLock;
10007f20:	3d01      	subs	r5, #1
10007f22:	b26d      	sxtb	r5, r5
10007f24:	e7dc      	b.n	10007ee0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10007f26:	6923      	ldr	r3, [r4, #16]
10007f28:	2b00      	cmp	r3, #0
10007f2a:	d0e9      	beq.n	10007f00 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10007f2c:	4630      	mov	r0, r6
10007f2e:	f000 fca7 	bl	10008880 <xTaskRemoveFromEventList>
10007f32:	b108      	cbz	r0, 10007f38 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
10007f34:	f000 fd12 	bl	1000895c <vTaskMissedYield>
				--cRxLock;
10007f38:	3d01      	subs	r5, #1
10007f3a:	b26d      	sxtb	r5, r5
10007f3c:	e7de      	b.n	10007efc <prvUnlockQueue+0x2e>
	...

10007f40 <xQueueGenericReset>:
{
10007f40:	b538      	push	{r3, r4, r5, lr}
10007f42:	4604      	mov	r4, r0
10007f44:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
10007f46:	f000 fead 	bl	10008ca4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10007f4a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
10007f4e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
10007f50:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10007f52:	434b      	muls	r3, r1
10007f54:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10007f56:	1a5b      	subs	r3, r3, r1
10007f58:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10007f5a:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10007f5c:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
10007f5e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
10007f60:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
10007f62:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
10007f64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
10007f68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
10007f6c:	b995      	cbnz	r5, 10007f94 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10007f6e:	6923      	ldr	r3, [r4, #16]
10007f70:	b163      	cbz	r3, 10007f8c <xQueueGenericReset+0x4c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10007f72:	f104 0010 	add.w	r0, r4, #16
10007f76:	f000 fc83 	bl	10008880 <xTaskRemoveFromEventList>
10007f7a:	b138      	cbz	r0, 10007f8c <xQueueGenericReset+0x4c>
					queueYIELD_IF_USING_PREEMPTION();
10007f7c:	4b0a      	ldr	r3, [pc, #40]	; (10007fa8 <xQueueGenericReset+0x68>)
10007f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10007f82:	601a      	str	r2, [r3, #0]
10007f84:	f3bf 8f4f 	dsb	sy
10007f88:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
10007f8c:	f000 fe9a 	bl	10008cc4 <vPortExitCritical>
}
10007f90:	2001      	movs	r0, #1
10007f92:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
10007f94:	f104 0010 	add.w	r0, r4, #16
10007f98:	f001 f932 	bl	10009200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
10007f9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
10007fa0:	f001 f92e 	bl	10009200 <vListInitialise>
10007fa4:	e7f2      	b.n	10007f8c <xQueueGenericReset+0x4c>
10007fa6:	bf00      	nop
10007fa8:	e000ed04 	.word	0xe000ed04

10007fac <xQueueGenericCreate>:
	{
10007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007fae:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007fb0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
10007fb2:	3050      	adds	r0, #80	; 0x50
	{
10007fb4:	460d      	mov	r5, r1
10007fb6:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
10007fb8:	f000 ff10 	bl	10008ddc <pvPortMalloc>
		if( pxNewQueue != NULL )
10007fbc:	4604      	mov	r4, r0
10007fbe:	b158      	cbz	r0, 10007fd8 <xQueueGenericCreate+0x2c>
	if( uxItemSize == ( UBaseType_t ) 0 )
10007fc0:	b165      	cbz	r5, 10007fdc <xQueueGenericCreate+0x30>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10007fc2:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
10007fc6:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
10007fca:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
10007fcc:	2101      	movs	r1, #1
10007fce:	4620      	mov	r0, r4
10007fd0:	f7ff ffb6 	bl	10007f40 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
10007fd4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
10007fd8:	4620      	mov	r0, r4
10007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007fdc:	4603      	mov	r3, r0
10007fde:	e7f2      	b.n	10007fc6 <xQueueGenericCreate+0x1a>

10007fe0 <xQueueGenericSend>:
{
10007fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
10007fe4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
10007fe8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 100080e0 <xQueueGenericSend+0x100>
{
10007fec:	9201      	str	r2, [sp, #4]
10007fee:	4604      	mov	r4, r0
10007ff0:	460f      	mov	r7, r1
10007ff2:	461e      	mov	r6, r3
		prvLockQueue( pxQueue );
10007ff4:	46c1      	mov	r9, r8
		taskENTER_CRITICAL();
10007ff6:	f000 fe55 	bl	10008ca4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
10007ffa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
10007ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
10007ffe:	429a      	cmp	r2, r3
10008000:	d301      	bcc.n	10008006 <xQueueGenericSend+0x26>
10008002:	2e02      	cmp	r6, #2
10008004:	d119      	bne.n	1000803a <xQueueGenericSend+0x5a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
10008006:	4632      	mov	r2, r6
10008008:	4639      	mov	r1, r7
1000800a:	4620      	mov	r0, r4
1000800c:	f7ff ff14 	bl	10007e38 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10008010:	6a63      	ldr	r3, [r4, #36]	; 0x24
10008012:	b11b      	cbz	r3, 1000801c <xQueueGenericSend+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10008014:	f104 0024 	add.w	r0, r4, #36	; 0x24
10008018:	f000 fc32 	bl	10008880 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
1000801c:	b138      	cbz	r0, 1000802e <xQueueGenericSend+0x4e>
						queueYIELD_IF_USING_PREEMPTION();
1000801e:	4b30      	ldr	r3, [pc, #192]	; (100080e0 <xQueueGenericSend+0x100>)
10008020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10008024:	601a      	str	r2, [r3, #0]
10008026:	f3bf 8f4f 	dsb	sy
1000802a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1000802e:	f000 fe49 	bl	10008cc4 <vPortExitCritical>
				return pdPASS;
10008032:	2001      	movs	r0, #1
}
10008034:	b004      	add	sp, #16
10008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
1000803a:	9d01      	ldr	r5, [sp, #4]
1000803c:	b91d      	cbnz	r5, 10008046 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
1000803e:	f000 fe41 	bl	10008cc4 <vPortExitCritical>
			return errQUEUE_FULL;
10008042:	2000      	movs	r0, #0
10008044:	e7f6      	b.n	10008034 <xQueueGenericSend+0x54>
				else if( xEntryTimeSet == pdFALSE )
10008046:	f1b8 0f00 	cmp.w	r8, #0
1000804a:	d102      	bne.n	10008052 <xQueueGenericSend+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1000804c:	a802      	add	r0, sp, #8
1000804e:	f000 fc51 	bl	100088f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
10008052:	f000 fe37 	bl	10008cc4 <vPortExitCritical>
		vTaskSuspendAll();
10008056:	f000 fa95 	bl	10008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1000805a:	f000 fe23 	bl	10008ca4 <vPortEnterCritical>
1000805e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
10008062:	2bff      	cmp	r3, #255	; 0xff
10008064:	bf08      	it	eq
10008066:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
1000806a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1000806e:	2bff      	cmp	r3, #255	; 0xff
10008070:	bf08      	it	eq
10008072:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
10008076:	f000 fe25 	bl	10008cc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1000807a:	a901      	add	r1, sp, #4
1000807c:	a802      	add	r0, sp, #8
1000807e:	f000 fc45 	bl	1000890c <xTaskCheckForTimeOut>
10008082:	bb30      	cbnz	r0, 100080d2 <xQueueGenericSend+0xf2>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
10008084:	f000 fe0e 	bl	10008ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
10008088:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1000808a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1000808c:	429a      	cmp	r2, r3
1000808e:	d10f      	bne.n	100080b0 <xQueueGenericSend+0xd0>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
10008090:	f000 fe18 	bl	10008cc4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
10008094:	9901      	ldr	r1, [sp, #4]
10008096:	f104 0010 	add.w	r0, r4, #16
1000809a:	f000 fbcd 	bl	10008838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1000809e:	4620      	mov	r0, r4
100080a0:	f7ff ff15 	bl	10007ece <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
100080a4:	f000 fb08 	bl	100086b8 <xTaskResumeAll>
100080a8:	b150      	cbz	r0, 100080c0 <xQueueGenericSend+0xe0>
{
100080aa:	f04f 0801 	mov.w	r8, #1
100080ae:	e7a2      	b.n	10007ff6 <xQueueGenericSend+0x16>
	taskEXIT_CRITICAL();
100080b0:	f000 fe08 	bl	10008cc4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
100080b4:	4620      	mov	r0, r4
100080b6:	f7ff ff0a 	bl	10007ece <prvUnlockQueue>
				( void ) xTaskResumeAll();
100080ba:	f000 fafd 	bl	100086b8 <xTaskResumeAll>
100080be:	e7f4      	b.n	100080aa <xQueueGenericSend+0xca>
					portYIELD_WITHIN_API();
100080c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
100080c4:	f8ca 3000 	str.w	r3, [sl]
100080c8:	f3bf 8f4f 	dsb	sy
100080cc:	f3bf 8f6f 	isb	sy
100080d0:	e7eb      	b.n	100080aa <xQueueGenericSend+0xca>
			prvUnlockQueue( pxQueue );
100080d2:	4620      	mov	r0, r4
100080d4:	f7ff fefb 	bl	10007ece <prvUnlockQueue>
			( void ) xTaskResumeAll();
100080d8:	f000 faee 	bl	100086b8 <xTaskResumeAll>
100080dc:	e7b1      	b.n	10008042 <xQueueGenericSend+0x62>
100080de:	bf00      	nop
100080e0:	e000ed04 	.word	0xe000ed04

100080e4 <xQueueGenericSendFromISR>:
{
100080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100080e6:	4604      	mov	r4, r0
100080e8:	4617      	mov	r7, r2

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
100080ea:	f3ef 8611 	mrs	r6, BASEPRI
100080ee:	f04f 02a0 	mov.w	r2, #160	; 0xa0
100080f2:	f382 8811 	msr	BASEPRI, r2
100080f6:	f3bf 8f6f 	isb	sy
100080fa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
100080fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
10008100:	6be2      	ldr	r2, [r4, #60]	; 0x3c
10008102:	4290      	cmp	r0, r2
10008104:	d301      	bcc.n	1000810a <xQueueGenericSendFromISR+0x26>
10008106:	2b02      	cmp	r3, #2
10008108:	d11e      	bne.n	10008148 <xQueueGenericSendFromISR+0x64>
			const int8_t cTxLock = pxQueue->cTxLock;
1000810a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1000810e:	461a      	mov	r2, r3
			const int8_t cTxLock = pxQueue->cTxLock;
10008110:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
10008112:	4620      	mov	r0, r4
10008114:	f7ff fe90 	bl	10007e38 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
10008118:	1c6b      	adds	r3, r5, #1
1000811a:	d110      	bne.n	1000813e <xQueueGenericSendFromISR+0x5a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1000811c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000811e:	b90b      	cbnz	r3, 10008124 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
10008120:	2001      	movs	r0, #1
10008122:	e009      	b.n	10008138 <xQueueGenericSendFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10008124:	f104 0024 	add.w	r0, r4, #36	; 0x24
10008128:	f000 fbaa 	bl	10008880 <xTaskRemoveFromEventList>
1000812c:	2800      	cmp	r0, #0
1000812e:	d0f7      	beq.n	10008120 <xQueueGenericSendFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
10008130:	2f00      	cmp	r7, #0
10008132:	d0f5      	beq.n	10008120 <xQueueGenericSendFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
10008134:	2001      	movs	r0, #1
10008136:	6038      	str	r0, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
10008138:	f386 8811 	msr	BASEPRI, r6
}
1000813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1000813e:	3501      	adds	r5, #1
10008140:	b26d      	sxtb	r5, r5
10008142:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
10008146:	e7eb      	b.n	10008120 <xQueueGenericSendFromISR+0x3c>
			xReturn = errQUEUE_FULL;
10008148:	2000      	movs	r0, #0
1000814a:	e7f5      	b.n	10008138 <xQueueGenericSendFromISR+0x54>

1000814c <xQueueReceive>:
{
1000814c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
10008150:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
10008152:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
10008154:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 10008238 <xQueueReceive+0xec>
{
10008158:	9201      	str	r2, [sp, #4]
1000815a:	4604      	mov	r4, r0
1000815c:	460e      	mov	r6, r1
		prvLockQueue( pxQueue );
1000815e:	46b8      	mov	r8, r7
		taskENTER_CRITICAL();
10008160:	f000 fda0 	bl	10008ca4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
10008164:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
10008166:	b1d5      	cbz	r5, 1000819e <xQueueReceive+0x52>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
10008168:	4631      	mov	r1, r6
1000816a:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1000816c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1000816e:	f7ff fe98 	bl	10007ea2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
10008172:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10008174:	6923      	ldr	r3, [r4, #16]
10008176:	b163      	cbz	r3, 10008192 <xQueueReceive+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10008178:	f104 0010 	add.w	r0, r4, #16
1000817c:	f000 fb80 	bl	10008880 <xTaskRemoveFromEventList>
10008180:	b138      	cbz	r0, 10008192 <xQueueReceive+0x46>
						queueYIELD_IF_USING_PREEMPTION();
10008182:	4b2d      	ldr	r3, [pc, #180]	; (10008238 <xQueueReceive+0xec>)
10008184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10008188:	601a      	str	r2, [r3, #0]
1000818a:	f3bf 8f4f 	dsb	sy
1000818e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
10008192:	f000 fd97 	bl	10008cc4 <vPortExitCritical>
				return pdPASS;
10008196:	2001      	movs	r0, #1
}
10008198:	b005      	add	sp, #20
1000819a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
1000819e:	9d01      	ldr	r5, [sp, #4]
100081a0:	b91d      	cbnz	r5, 100081aa <xQueueReceive+0x5e>
					taskEXIT_CRITICAL();
100081a2:	f000 fd8f 	bl	10008cc4 <vPortExitCritical>
				return errQUEUE_EMPTY;
100081a6:	2000      	movs	r0, #0
100081a8:	e7f6      	b.n	10008198 <xQueueReceive+0x4c>
				else if( xEntryTimeSet == pdFALSE )
100081aa:	b917      	cbnz	r7, 100081b2 <xQueueReceive+0x66>
					vTaskInternalSetTimeOutState( &xTimeOut );
100081ac:	a802      	add	r0, sp, #8
100081ae:	f000 fba1 	bl	100088f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
100081b2:	f000 fd87 	bl	10008cc4 <vPortExitCritical>
		vTaskSuspendAll();
100081b6:	f000 f9e5 	bl	10008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
100081ba:	f000 fd73 	bl	10008ca4 <vPortEnterCritical>
100081be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
100081c2:	2bff      	cmp	r3, #255	; 0xff
100081c4:	bf08      	it	eq
100081c6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
100081ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
100081ce:	2bff      	cmp	r3, #255	; 0xff
100081d0:	bf08      	it	eq
100081d2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
100081d6:	f000 fd75 	bl	10008cc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
100081da:	a901      	add	r1, sp, #4
100081dc:	a802      	add	r0, sp, #8
100081de:	f000 fb95 	bl	1000890c <xTaskCheckForTimeOut>
100081e2:	b9f0      	cbnz	r0, 10008222 <xQueueReceive+0xd6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
100081e4:	4620      	mov	r0, r4
100081e6:	f7ff fe1c 	bl	10007e22 <prvIsQueueEmpty>
100081ea:	b1a0      	cbz	r0, 10008216 <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
100081ec:	9901      	ldr	r1, [sp, #4]
100081ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
100081f2:	f000 fb21 	bl	10008838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
100081f6:	4620      	mov	r0, r4
100081f8:	f7ff fe69 	bl	10007ece <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
100081fc:	f000 fa5c 	bl	100086b8 <xTaskResumeAll>
10008200:	b938      	cbnz	r0, 10008212 <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
10008202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
10008206:	f8c9 3000 	str.w	r3, [r9]
1000820a:	f3bf 8f4f 	dsb	sy
1000820e:	f3bf 8f6f 	isb	sy
{
10008212:	2701      	movs	r7, #1
10008214:	e7a4      	b.n	10008160 <xQueueReceive+0x14>
				prvUnlockQueue( pxQueue );
10008216:	4620      	mov	r0, r4
10008218:	f7ff fe59 	bl	10007ece <prvUnlockQueue>
				( void ) xTaskResumeAll();
1000821c:	f000 fa4c 	bl	100086b8 <xTaskResumeAll>
10008220:	e7f7      	b.n	10008212 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
10008222:	4620      	mov	r0, r4
10008224:	f7ff fe53 	bl	10007ece <prvUnlockQueue>
			( void ) xTaskResumeAll();
10008228:	f000 fa46 	bl	100086b8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1000822c:	4620      	mov	r0, r4
1000822e:	f7ff fdf8 	bl	10007e22 <prvIsQueueEmpty>
10008232:	2800      	cmp	r0, #0
10008234:	d0ed      	beq.n	10008212 <xQueueReceive+0xc6>
10008236:	e7b6      	b.n	100081a6 <xQueueReceive+0x5a>
10008238:	e000ed04 	.word	0xe000ed04

1000823c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1000823c:	b570      	push	{r4, r5, r6, lr}
1000823e:	4604      	mov	r4, r0
10008240:	460d      	mov	r5, r1
10008242:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
10008244:	f000 fd2e 	bl	10008ca4 <vPortEnterCritical>
10008248:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1000824c:	2bff      	cmp	r3, #255	; 0xff
1000824e:	bf04      	itt	eq
10008250:	2300      	moveq	r3, #0
10008252:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
10008256:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1000825a:	2bff      	cmp	r3, #255	; 0xff
1000825c:	bf04      	itt	eq
1000825e:	2300      	moveq	r3, #0
10008260:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
10008264:	f000 fd2e 	bl	10008cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
10008268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000826a:	b92b      	cbnz	r3, 10008278 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1000826c:	4632      	mov	r2, r6
1000826e:	4629      	mov	r1, r5
10008270:	f104 0024 	add.w	r0, r4, #36	; 0x24
10008274:	f000 faf0 	bl	10008858 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
10008278:	4620      	mov	r0, r4
	}
1000827a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
1000827e:	f7ff be26 	b.w	10007ece <prvUnlockQueue>
	...

10008284 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
10008284:	b508      	push	{r3, lr}

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
10008286:	4c07      	ldr	r4, [pc, #28]	; (100082a4 <prvIdleTask+0x20>)
			{
				taskYIELD();
10008288:	4d07      	ldr	r5, [pc, #28]	; (100082a8 <prvIdleTask+0x24>)
1000828a:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1000828e:	6823      	ldr	r3, [r4, #0]
10008290:	2b01      	cmp	r3, #1
10008292:	d904      	bls.n	1000829e <prvIdleTask+0x1a>
				taskYIELD();
10008294:	602e      	str	r6, [r5, #0]
10008296:	f3bf 8f4f 	dsb	sy
1000829a:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
1000829e:	f7fb ffe7 	bl	10004270 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
100082a2:	e7f4      	b.n	1000828e <prvIdleTask+0xa>
100082a4:	20000fbc 	.word	0x20000fbc
100082a8:	e000ed04 	.word	0xe000ed04

100082ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
100082ac:	4a06      	ldr	r2, [pc, #24]	; (100082c8 <prvResetNextTaskUnblockTime+0x1c>)
100082ae:	6813      	ldr	r3, [r2, #0]
100082b0:	6819      	ldr	r1, [r3, #0]
100082b2:	4b06      	ldr	r3, [pc, #24]	; (100082cc <prvResetNextTaskUnblockTime+0x20>)
100082b4:	b919      	cbnz	r1, 100082be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
100082b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
100082ba:	601a      	str	r2, [r3, #0]
	}
}
100082bc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
100082be:	6812      	ldr	r2, [r2, #0]
100082c0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
100082c2:	68d2      	ldr	r2, [r2, #12]
100082c4:	6852      	ldr	r2, [r2, #4]
100082c6:	e7f8      	b.n	100082ba <prvResetNextTaskUnblockTime+0xe>
100082c8:	20000fb4 	.word	0x20000fb4
100082cc:	20001060 	.word	0x20001060

100082d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
100082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
100082d2:	4b1b      	ldr	r3, [pc, #108]	; (10008340 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
100082d4:	4f1b      	ldr	r7, [pc, #108]	; (10008344 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
100082d6:	681d      	ldr	r5, [r3, #0]
{
100082d8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
100082da:	6838      	ldr	r0, [r7, #0]
100082dc:	3004      	adds	r0, #4
{
100082de:	460e      	mov	r6, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
100082e0:	f000 ffbf 	bl	10009262 <uxListRemove>
100082e4:	463b      	mov	r3, r7
100082e6:	b940      	cbnz	r0, 100082fa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
100082e8:	6839      	ldr	r1, [r7, #0]
100082ea:	4817      	ldr	r0, [pc, #92]	; (10008348 <prvAddCurrentTaskToDelayedList+0x78>)
100082ec:	6acf      	ldr	r7, [r1, #44]	; 0x2c
100082ee:	6802      	ldr	r2, [r0, #0]
100082f0:	2101      	movs	r1, #1
100082f2:	40b9      	lsls	r1, r7
100082f4:	ea22 0201 	bic.w	r2, r2, r1
100082f8:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
100082fa:	1c62      	adds	r2, r4, #1
100082fc:	d107      	bne.n	1000830e <prvAddCurrentTaskToDelayedList+0x3e>
100082fe:	b136      	cbz	r6, 1000830e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
10008300:	6819      	ldr	r1, [r3, #0]
10008302:	4812      	ldr	r0, [pc, #72]	; (1000834c <prvAddCurrentTaskToDelayedList+0x7c>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
10008304:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
10008308:	3104      	adds	r1, #4
1000830a:	f000 bf87 	b.w	1000921c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1000830e:	681a      	ldr	r2, [r3, #0]
10008310:	192c      	adds	r4, r5, r4
10008312:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
10008314:	d307      	bcc.n	10008326 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
10008316:	4a0e      	ldr	r2, [pc, #56]	; (10008350 <prvAddCurrentTaskToDelayedList+0x80>)
10008318:	6810      	ldr	r0, [r2, #0]
1000831a:	6819      	ldr	r1, [r3, #0]
}
1000831c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
10008320:	3104      	adds	r1, #4
10008322:	f000 bf87 	b.w	10009234 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
10008326:	4a0b      	ldr	r2, [pc, #44]	; (10008354 <prvAddCurrentTaskToDelayedList+0x84>)
10008328:	6810      	ldr	r0, [r2, #0]
1000832a:	6819      	ldr	r1, [r3, #0]
1000832c:	3104      	adds	r1, #4
1000832e:	f000 ff81 	bl	10009234 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
10008332:	4b09      	ldr	r3, [pc, #36]	; (10008358 <prvAddCurrentTaskToDelayedList+0x88>)
10008334:	681a      	ldr	r2, [r3, #0]
10008336:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
10008338:	bf88      	it	hi
1000833a:	601c      	strhi	r4, [r3, #0]
}
1000833c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000833e:	bf00      	nop
10008340:	20001094 	.word	0x20001094
10008344:	20000fb0 	.word	0x20000fb0
10008348:	20001030 	.word	0x20001030
1000834c:	20001080 	.word	0x20001080
10008350:	20000fb8 	.word	0x20000fb8
10008354:	20000fb4 	.word	0x20000fb4
10008358:	20001060 	.word	0x20001060

1000835c <xTaskCreate>:
	{
1000835c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
10008360:	0096      	lsls	r6, r2, #2
	{
10008362:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
10008364:	4630      	mov	r0, r6
	{
10008366:	460d      	mov	r5, r1
10008368:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
1000836a:	f000 fd37 	bl	10008ddc <pvPortMalloc>
			if( pxStack != NULL )
1000836e:	4681      	mov	r9, r0
10008370:	b1a0      	cbz	r0, 1000839c <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
10008372:	205c      	movs	r0, #92	; 0x5c
10008374:	f000 fd32 	bl	10008ddc <pvPortMalloc>
				if( pxNewTCB != NULL )
10008378:	4604      	mov	r4, r0
1000837a:	b160      	cbz	r0, 10008396 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
1000837c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
10008380:	4632      	mov	r2, r6
10008382:	21a5      	movs	r1, #165	; 0xa5
10008384:	4648      	mov	r0, r9
10008386:	f001 fa43 	bl	10009810 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
1000838a:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
1000838e:	b945      	cbnz	r5, 100083a2 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
10008390:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
10008394:	e014      	b.n	100083c0 <xTaskCreate+0x64>
					vPortFree( pxStack );
10008396:	4648      	mov	r0, r9
10008398:	f000 fd78 	bl	10008e8c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1000839c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
100083a0:	e08d      	b.n	100084be <xTaskCreate+0x162>
100083a2:	1e6b      	subs	r3, r5, #1
100083a4:	f104 0234 	add.w	r2, r4, #52	; 0x34
100083a8:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
100083aa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
100083ae:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
100083b2:	7819      	ldrb	r1, [r3, #0]
100083b4:	b109      	cbz	r1, 100083ba <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
100083b6:	42ab      	cmp	r3, r5
100083b8:	d1f7      	bne.n	100083aa <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
100083ba:	2300      	movs	r3, #0
100083bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
100083c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
100083c2:	2d04      	cmp	r5, #4
100083c4:	bf28      	it	cs
100083c6:	2504      	movcs	r5, #4
		pxNewTCB->uxMutexesHeld = 0;
100083c8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
100083cc:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
100083d0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
100083d2:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
100083d4:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
100083d6:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
100083da:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
100083dc:	f000 ff1b 	bl	10009216 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100083e0:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
100083e4:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
100083e8:	445e      	add	r6, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
100083ea:	f000 ff14 	bl	10009216 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
100083ee:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
100083f2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100083f4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
100083f6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
100083f8:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
100083fc:	4642      	mov	r2, r8
100083fe:	4639      	mov	r1, r7
10008400:	f026 0007 	bic.w	r0, r6, #7
10008404:	f000 fc22 	bl	10008c4c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
10008408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1000840a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
1000840c:	b103      	cbz	r3, 10008410 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1000840e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
10008410:	f000 fc48 	bl	10008ca4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
10008414:	4b30      	ldr	r3, [pc, #192]	; (100084d8 <xTaskCreate+0x17c>)
		if( pxCurrentTCB == NULL )
10008416:	4e31      	ldr	r6, [pc, #196]	; (100084dc <xTaskCreate+0x180>)
		uxCurrentNumberOfTasks++;
10008418:	681a      	ldr	r2, [r3, #0]
1000841a:	4f31      	ldr	r7, [pc, #196]	; (100084e0 <xTaskCreate+0x184>)
1000841c:	3201      	adds	r2, #1
1000841e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
10008420:	6832      	ldr	r2, [r6, #0]
10008422:	2a00      	cmp	r2, #0
10008424:	d14e      	bne.n	100084c4 <xTaskCreate+0x168>
			pxCurrentTCB = pxNewTCB;
10008426:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
10008428:	681b      	ldr	r3, [r3, #0]
1000842a:	2b01      	cmp	r3, #1
1000842c:	d122      	bne.n	10008474 <xTaskCreate+0x118>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1000842e:	482d      	ldr	r0, [pc, #180]	; (100084e4 <xTaskCreate+0x188>)
	vListInitialise( &xDelayedTaskList1 );
10008430:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 10008518 <xTaskCreate+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
10008434:	4d2c      	ldr	r5, [pc, #176]	; (100084e8 <xTaskCreate+0x18c>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
10008436:	f000 fee3 	bl	10009200 <vListInitialise>
1000843a:	482c      	ldr	r0, [pc, #176]	; (100084ec <xTaskCreate+0x190>)
1000843c:	f000 fee0 	bl	10009200 <vListInitialise>
10008440:	482b      	ldr	r0, [pc, #172]	; (100084f0 <xTaskCreate+0x194>)
10008442:	f000 fedd 	bl	10009200 <vListInitialise>
10008446:	482b      	ldr	r0, [pc, #172]	; (100084f4 <xTaskCreate+0x198>)
10008448:	f000 feda 	bl	10009200 <vListInitialise>
1000844c:	482a      	ldr	r0, [pc, #168]	; (100084f8 <xTaskCreate+0x19c>)
1000844e:	f000 fed7 	bl	10009200 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
10008452:	4640      	mov	r0, r8
10008454:	f000 fed4 	bl	10009200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
10008458:	4628      	mov	r0, r5
1000845a:	f000 fed1 	bl	10009200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1000845e:	4827      	ldr	r0, [pc, #156]	; (100084fc <xTaskCreate+0x1a0>)
10008460:	f000 fece 	bl	10009200 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
10008464:	4826      	ldr	r0, [pc, #152]	; (10008500 <xTaskCreate+0x1a4>)
10008466:	f000 fecb 	bl	10009200 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1000846a:	4b26      	ldr	r3, [pc, #152]	; (10008504 <xTaskCreate+0x1a8>)
1000846c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
10008470:	4b25      	ldr	r3, [pc, #148]	; (10008508 <xTaskCreate+0x1ac>)
10008472:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
10008474:	4a25      	ldr	r2, [pc, #148]	; (1000850c <xTaskCreate+0x1b0>)
		prvAddTaskToReadyList( pxNewTCB );
10008476:	4926      	ldr	r1, [pc, #152]	; (10008510 <xTaskCreate+0x1b4>)
		uxTaskNumber++;
10008478:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
1000847a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
1000847c:	3301      	adds	r3, #1
1000847e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
10008480:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
10008482:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
10008484:	2501      	movs	r5, #1
10008486:	fa05 f302 	lsl.w	r3, r5, r2
1000848a:	4303      	orrs	r3, r0
1000848c:	600b      	str	r3, [r1, #0]
1000848e:	4b15      	ldr	r3, [pc, #84]	; (100084e4 <xTaskCreate+0x188>)
10008490:	2014      	movs	r0, #20
10008492:	fb00 3002 	mla	r0, r0, r2, r3
10008496:	4649      	mov	r1, r9
10008498:	f000 fec0 	bl	1000921c <vListInsertEnd>
	taskEXIT_CRITICAL();
1000849c:	f000 fc12 	bl	10008cc4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
100084a0:	683b      	ldr	r3, [r7, #0]
100084a2:	b163      	cbz	r3, 100084be <xTaskCreate+0x162>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
100084a4:	6833      	ldr	r3, [r6, #0]
100084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100084a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
100084aa:	429a      	cmp	r2, r3
100084ac:	d207      	bcs.n	100084be <xTaskCreate+0x162>
			taskYIELD_IF_USING_PREEMPTION();
100084ae:	4b19      	ldr	r3, [pc, #100]	; (10008514 <xTaskCreate+0x1b8>)
100084b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
100084b4:	601a      	str	r2, [r3, #0]
100084b6:	f3bf 8f4f 	dsb	sy
100084ba:	f3bf 8f6f 	isb	sy
	}
100084be:	4628      	mov	r0, r5
100084c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
100084c4:	683b      	ldr	r3, [r7, #0]
100084c6:	2b00      	cmp	r3, #0
100084c8:	d1d4      	bne.n	10008474 <xTaskCreate+0x118>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
100084ca:	6833      	ldr	r3, [r6, #0]
100084cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
100084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100084d0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
100084d2:	bf28      	it	cs
100084d4:	6034      	strcs	r4, [r6, #0]
100084d6:	e7cd      	b.n	10008474 <xTaskCreate+0x118>
100084d8:	20001020 	.word	0x20001020
100084dc:	20000fb0 	.word	0x20000fb0
100084e0:	2000107c 	.word	0x2000107c
100084e4:	20000fbc 	.word	0x20000fbc
100084e8:	20001048 	.word	0x20001048
100084ec:	20000fd0 	.word	0x20000fd0
100084f0:	20000fe4 	.word	0x20000fe4
100084f4:	20000ff8 	.word	0x20000ff8
100084f8:	2000100c 	.word	0x2000100c
100084fc:	20001068 	.word	0x20001068
10008500:	20001080 	.word	0x20001080
10008504:	20000fb4 	.word	0x20000fb4
10008508:	20000fb8 	.word	0x20000fb8
1000850c:	2000102c 	.word	0x2000102c
10008510:	20001030 	.word	0x20001030
10008514:	e000ed04 	.word	0xe000ed04
10008518:	20001034 	.word	0x20001034

1000851c <vTaskStartScheduler>:
{
1000851c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
1000851e:	4b13      	ldr	r3, [pc, #76]	; (1000856c <vTaskStartScheduler+0x50>)
10008520:	9301      	str	r3, [sp, #4]
10008522:	2400      	movs	r4, #0
10008524:	4912      	ldr	r1, [pc, #72]	; (10008570 <vTaskStartScheduler+0x54>)
10008526:	4813      	ldr	r0, [pc, #76]	; (10008574 <vTaskStartScheduler+0x58>)
10008528:	9400      	str	r4, [sp, #0]
1000852a:	4623      	mov	r3, r4
1000852c:	2280      	movs	r2, #128	; 0x80
1000852e:	f7ff ff15 	bl	1000835c <xTaskCreate>
		if( xReturn == pdPASS )
10008532:	2801      	cmp	r0, #1
10008534:	d118      	bne.n	10008568 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
10008536:	f000 fd0d 	bl	10008f54 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1000853a:	2801      	cmp	r0, #1
1000853c:	d114      	bne.n	10008568 <vTaskStartScheduler+0x4c>
	__asm volatile
1000853e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
10008542:	f383 8811 	msr	BASEPRI, r3
10008546:	f3bf 8f6f 	isb	sy
1000854a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1000854e:	4b0a      	ldr	r3, [pc, #40]	; (10008578 <vTaskStartScheduler+0x5c>)
10008550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10008554:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
10008556:	4b09      	ldr	r3, [pc, #36]	; (1000857c <vTaskStartScheduler+0x60>)
10008558:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
1000855a:	4b09      	ldr	r3, [pc, #36]	; (10008580 <vTaskStartScheduler+0x64>)
1000855c:	601c      	str	r4, [r3, #0]
}
1000855e:	b002      	add	sp, #8
10008560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
10008564:	f000 bc16 	b.w	10008d94 <xPortStartScheduler>
}
10008568:	b002      	add	sp, #8
1000856a:	bd10      	pop	{r4, pc}
1000856c:	2000105c 	.word	0x2000105c
10008570:	10010a60 	.word	0x10010a60
10008574:	10008285 	.word	0x10008285
10008578:	20001060 	.word	0x20001060
1000857c:	2000107c 	.word	0x2000107c
10008580:	20001094 	.word	0x20001094

10008584 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
10008584:	4a02      	ldr	r2, [pc, #8]	; (10008590 <vTaskSuspendAll+0xc>)
10008586:	6813      	ldr	r3, [r2, #0]
10008588:	3301      	adds	r3, #1
1000858a:	6013      	str	r3, [r2, #0]
}
1000858c:	4770      	bx	lr
1000858e:	bf00      	nop
10008590:	20001028 	.word	0x20001028

10008594 <xTaskGetTickCount>:
		xTicks = xTickCount;
10008594:	4b01      	ldr	r3, [pc, #4]	; (1000859c <xTaskGetTickCount+0x8>)
10008596:	6818      	ldr	r0, [r3, #0]
}
10008598:	4770      	bx	lr
1000859a:	bf00      	nop
1000859c:	20001094 	.word	0x20001094

100085a0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
100085a0:	4b3a      	ldr	r3, [pc, #232]	; (1000868c <xTaskIncrementTick+0xec>)
100085a2:	681b      	ldr	r3, [r3, #0]
{
100085a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
100085a8:	2b00      	cmp	r3, #0
100085aa:	d168      	bne.n	1000867e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
100085ac:	4b38      	ldr	r3, [pc, #224]	; (10008690 <xTaskIncrementTick+0xf0>)
100085ae:	681d      	ldr	r5, [r3, #0]
100085b0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
100085b2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
100085b4:	b95d      	cbnz	r5, 100085ce <xTaskIncrementTick+0x2e>
			taskSWITCH_DELAYED_LISTS();
100085b6:	4a37      	ldr	r2, [pc, #220]	; (10008694 <xTaskIncrementTick+0xf4>)
100085b8:	4b37      	ldr	r3, [pc, #220]	; (10008698 <xTaskIncrementTick+0xf8>)
100085ba:	6811      	ldr	r1, [r2, #0]
100085bc:	6818      	ldr	r0, [r3, #0]
100085be:	6010      	str	r0, [r2, #0]
100085c0:	4a36      	ldr	r2, [pc, #216]	; (1000869c <xTaskIncrementTick+0xfc>)
100085c2:	6019      	str	r1, [r3, #0]
100085c4:	6813      	ldr	r3, [r2, #0]
100085c6:	3301      	adds	r3, #1
100085c8:	6013      	str	r3, [r2, #0]
100085ca:	f7ff fe6f 	bl	100082ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
100085ce:	4e34      	ldr	r6, [pc, #208]	; (100086a0 <xTaskIncrementTick+0x100>)
100085d0:	4f34      	ldr	r7, [pc, #208]	; (100086a4 <xTaskIncrementTick+0x104>)
100085d2:	6833      	ldr	r3, [r6, #0]
100085d4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 100086b0 <xTaskIncrementTick+0x110>
100085d8:	42ab      	cmp	r3, r5
BaseType_t xSwitchRequired = pdFALSE;
100085da:	f04f 0400 	mov.w	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
100085de:	d911      	bls.n	10008604 <xTaskIncrementTick+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
100085e0:	f8d8 3000 	ldr.w	r3, [r8]
100085e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100085e6:	2314      	movs	r3, #20
100085e8:	4353      	muls	r3, r2
100085ea:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
100085ec:	2b02      	cmp	r3, #2
100085ee:	bf28      	it	cs
100085f0:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
100085f2:	4b2d      	ldr	r3, [pc, #180]	; (100086a8 <xTaskIncrementTick+0x108>)
100085f4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
100085f6:	2b00      	cmp	r3, #0
}
100085f8:	bf0c      	ite	eq
100085fa:	4620      	moveq	r0, r4
100085fc:	2001      	movne	r0, #1
100085fe:	b003      	add	sp, #12
10008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
10008604:	f8df a08c 	ldr.w	sl, [pc, #140]	; 10008694 <xTaskIncrementTick+0xf4>
					prvAddTaskToReadyList( pxTCB );
10008608:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 100086b4 <xTaskIncrementTick+0x114>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1000860c:	f8da 3000 	ldr.w	r3, [sl]
10008610:	681b      	ldr	r3, [r3, #0]
10008612:	b91b      	cbnz	r3, 1000861c <xTaskIncrementTick+0x7c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10008614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10008618:	6033      	str	r3, [r6, #0]
					break;
1000861a:	e7e1      	b.n	100085e0 <xTaskIncrementTick+0x40>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1000861c:	f8da 3000 	ldr.w	r3, [sl]
10008620:	68db      	ldr	r3, [r3, #12]
10008622:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
10008626:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
1000862a:	4295      	cmp	r5, r2
1000862c:	d201      	bcs.n	10008632 <xTaskIncrementTick+0x92>
						xNextTaskUnblockTime = xItemValue;
1000862e:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
10008630:	e7d6      	b.n	100085e0 <xTaskIncrementTick+0x40>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10008632:	f10b 0104 	add.w	r1, fp, #4
10008636:	4608      	mov	r0, r1
10008638:	9101      	str	r1, [sp, #4]
1000863a:	f000 fe12 	bl	10009262 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1000863e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
10008642:	9901      	ldr	r1, [sp, #4]
10008644:	b122      	cbz	r2, 10008650 <xTaskIncrementTick+0xb0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
10008646:	f10b 0018 	add.w	r0, fp, #24
1000864a:	f000 fe0a 	bl	10009262 <uxListRemove>
1000864e:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
10008650:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
10008654:	f8d9 3000 	ldr.w	r3, [r9]
10008658:	2201      	movs	r2, #1
1000865a:	4082      	lsls	r2, r0
1000865c:	431a      	orrs	r2, r3
1000865e:	f8c9 2000 	str.w	r2, [r9]
10008662:	2214      	movs	r2, #20
10008664:	fb02 7000 	mla	r0, r2, r0, r7
10008668:	f000 fdd8 	bl	1000921c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1000866c:	f8d8 1000 	ldr.w	r1, [r8]
10008670:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
10008674:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
10008676:	429a      	cmp	r2, r3
10008678:	bf28      	it	cs
1000867a:	2401      	movcs	r4, #1
1000867c:	e7c6      	b.n	1000860c <xTaskIncrementTick+0x6c>
		++uxPendedTicks;
1000867e:	4a0b      	ldr	r2, [pc, #44]	; (100086ac <xTaskIncrementTick+0x10c>)
10008680:	6813      	ldr	r3, [r2, #0]
10008682:	3301      	adds	r3, #1
10008684:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
10008686:	2400      	movs	r4, #0
10008688:	e7b3      	b.n	100085f2 <xTaskIncrementTick+0x52>
1000868a:	bf00      	nop
1000868c:	20001028 	.word	0x20001028
10008690:	20001094 	.word	0x20001094
10008694:	20000fb4 	.word	0x20000fb4
10008698:	20000fb8 	.word	0x20000fb8
1000869c:	20001064 	.word	0x20001064
100086a0:	20001060 	.word	0x20001060
100086a4:	20000fbc 	.word	0x20000fbc
100086a8:	20001098 	.word	0x20001098
100086ac:	20001024 	.word	0x20001024
100086b0:	20000fb0 	.word	0x20000fb0
100086b4:	20001030 	.word	0x20001030

100086b8 <xTaskResumeAll>:
{
100086b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
100086bc:	f000 faf2 	bl	10008ca4 <vPortEnterCritical>
		--uxSchedulerSuspended;
100086c0:	4b2a      	ldr	r3, [pc, #168]	; (1000876c <xTaskResumeAll+0xb4>)
100086c2:	681a      	ldr	r2, [r3, #0]
100086c4:	3a01      	subs	r2, #1
100086c6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
100086c8:	681c      	ldr	r4, [r3, #0]
100086ca:	b134      	cbz	r4, 100086da <xTaskResumeAll+0x22>
BaseType_t xAlreadyYielded = pdFALSE;
100086cc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
100086ce:	f000 faf9 	bl	10008cc4 <vPortExitCritical>
}
100086d2:	4620      	mov	r0, r4
100086d4:	b002      	add	sp, #8
100086d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
100086da:	4b25      	ldr	r3, [pc, #148]	; (10008770 <xTaskResumeAll+0xb8>)
100086dc:	681b      	ldr	r3, [r3, #0]
100086de:	2b00      	cmp	r3, #0
100086e0:	d0f4      	beq.n	100086cc <xTaskResumeAll+0x14>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
100086e2:	4d24      	ldr	r5, [pc, #144]	; (10008774 <xTaskResumeAll+0xbc>)
					prvAddTaskToReadyList( pxTCB );
100086e4:	4e24      	ldr	r6, [pc, #144]	; (10008778 <xTaskResumeAll+0xc0>)
100086e6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1000878c <xTaskResumeAll+0xd4>
100086ea:	e01f      	b.n	1000872c <xTaskResumeAll+0x74>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
100086ec:	68eb      	ldr	r3, [r5, #12]
100086ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
100086f0:	f104 0018 	add.w	r0, r4, #24
100086f4:	f000 fdb5 	bl	10009262 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
100086f8:	1d21      	adds	r1, r4, #4
100086fa:	4608      	mov	r0, r1
100086fc:	9101      	str	r1, [sp, #4]
100086fe:	f000 fdb0 	bl	10009262 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10008702:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
10008704:	6830      	ldr	r0, [r6, #0]
10008706:	9901      	ldr	r1, [sp, #4]
10008708:	2701      	movs	r7, #1
1000870a:	fa07 f302 	lsl.w	r3, r7, r2
1000870e:	4303      	orrs	r3, r0
10008710:	2014      	movs	r0, #20
10008712:	fb00 8002 	mla	r0, r0, r2, r8
10008716:	6033      	str	r3, [r6, #0]
10008718:	f000 fd80 	bl	1000921c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1000871c:	4b17      	ldr	r3, [pc, #92]	; (1000877c <xTaskResumeAll+0xc4>)
1000871e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
10008720:	681b      	ldr	r3, [r3, #0]
10008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008724:	429a      	cmp	r2, r3
10008726:	d301      	bcc.n	1000872c <xTaskResumeAll+0x74>
						xYieldPending = pdTRUE;
10008728:	4b15      	ldr	r3, [pc, #84]	; (10008780 <xTaskResumeAll+0xc8>)
1000872a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1000872c:	682b      	ldr	r3, [r5, #0]
1000872e:	2b00      	cmp	r3, #0
10008730:	d1dc      	bne.n	100086ec <xTaskResumeAll+0x34>
				if( pxTCB != NULL )
10008732:	b10c      	cbz	r4, 10008738 <xTaskResumeAll+0x80>
					prvResetNextTaskUnblockTime();
10008734:	f7ff fdba 	bl	100082ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
10008738:	4d12      	ldr	r5, [pc, #72]	; (10008784 <xTaskResumeAll+0xcc>)
1000873a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1000873c:	b144      	cbz	r4, 10008750 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
1000873e:	4e10      	ldr	r6, [pc, #64]	; (10008780 <xTaskResumeAll+0xc8>)
10008740:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
10008742:	f7ff ff2d 	bl	100085a0 <xTaskIncrementTick>
10008746:	b100      	cbz	r0, 1000874a <xTaskResumeAll+0x92>
								xYieldPending = pdTRUE;
10008748:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1000874a:	3c01      	subs	r4, #1
1000874c:	d1f9      	bne.n	10008742 <xTaskResumeAll+0x8a>
						uxPendedTicks = 0;
1000874e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
10008750:	4b0b      	ldr	r3, [pc, #44]	; (10008780 <xTaskResumeAll+0xc8>)
10008752:	681b      	ldr	r3, [r3, #0]
10008754:	2b00      	cmp	r3, #0
10008756:	d0b9      	beq.n	100086cc <xTaskResumeAll+0x14>
					taskYIELD_IF_USING_PREEMPTION();
10008758:	4b0b      	ldr	r3, [pc, #44]	; (10008788 <xTaskResumeAll+0xd0>)
1000875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1000875e:	601a      	str	r2, [r3, #0]
10008760:	f3bf 8f4f 	dsb	sy
10008764:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
10008768:	2401      	movs	r4, #1
1000876a:	e7b0      	b.n	100086ce <xTaskResumeAll+0x16>
1000876c:	20001028 	.word	0x20001028
10008770:	20001020 	.word	0x20001020
10008774:	20001068 	.word	0x20001068
10008778:	20001030 	.word	0x20001030
1000877c:	20000fb0 	.word	0x20000fb0
10008780:	20001098 	.word	0x20001098
10008784:	20001024 	.word	0x20001024
10008788:	e000ed04 	.word	0xe000ed04
1000878c:	20000fbc 	.word	0x20000fbc

10008790 <vTaskDelayUntil>:
	{
10008790:	b510      	push	{r4, lr}
		vTaskSuspendAll();
10008792:	f7ff fef7 	bl	10008584 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
10008796:	4b0f      	ldr	r3, [pc, #60]	; (100087d4 <vTaskDelayUntil+0x44>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
10008798:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
1000879a:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1000879c:	1863      	adds	r3, r4, r1
1000879e:	bf2c      	ite	cs
100087a0:	2101      	movcs	r1, #1
100087a2:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
100087a4:	4294      	cmp	r4, r2
			*pxPreviousWakeTime = xTimeToWake;
100087a6:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
100087a8:	d90c      	bls.n	100087c4 <vTaskDelayUntil+0x34>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
100087aa:	b961      	cbnz	r1, 100087c6 <vTaskDelayUntil+0x36>
		xAlreadyYielded = xTaskResumeAll();
100087ac:	f7ff ff84 	bl	100086b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
100087b0:	b938      	cbnz	r0, 100087c2 <vTaskDelayUntil+0x32>
			portYIELD_WITHIN_API();
100087b2:	4b09      	ldr	r3, [pc, #36]	; (100087d8 <vTaskDelayUntil+0x48>)
100087b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
100087b8:	601a      	str	r2, [r3, #0]
100087ba:	f3bf 8f4f 	dsb	sy
100087be:	f3bf 8f6f 	isb	sy
	}
100087c2:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
100087c4:	b909      	cbnz	r1, 100087ca <vTaskDelayUntil+0x3a>
100087c6:	429a      	cmp	r2, r3
100087c8:	d2f0      	bcs.n	100087ac <vTaskDelayUntil+0x1c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
100087ca:	2100      	movs	r1, #0
100087cc:	1a98      	subs	r0, r3, r2
100087ce:	f7ff fd7f 	bl	100082d0 <prvAddCurrentTaskToDelayedList>
100087d2:	e7eb      	b.n	100087ac <vTaskDelayUntil+0x1c>
100087d4:	20001094 	.word	0x20001094
100087d8:	e000ed04 	.word	0xe000ed04

100087dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
100087dc:	4b11      	ldr	r3, [pc, #68]	; (10008824 <vTaskSwitchContext+0x48>)
100087de:	681a      	ldr	r2, [r3, #0]
100087e0:	4b11      	ldr	r3, [pc, #68]	; (10008828 <vTaskSwitchContext+0x4c>)
{
100087e2:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
100087e4:	b112      	cbz	r2, 100087ec <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
100087e6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
100087e8:	601a      	str	r2, [r3, #0]
}
100087ea:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
100087ec:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
100087ee:	4b0f      	ldr	r3, [pc, #60]	; (1000882c <vTaskSwitchContext+0x50>)
100087f0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
100087f2:	fab3 f383 	clz	r3, r3
100087f6:	b2db      	uxtb	r3, r3
100087f8:	490d      	ldr	r1, [pc, #52]	; (10008830 <vTaskSwitchContext+0x54>)
100087fa:	f1c3 031f 	rsb	r3, r3, #31
100087fe:	2014      	movs	r0, #20
10008800:	fb00 f203 	mul.w	r2, r0, r3
10008804:	188c      	adds	r4, r1, r2
10008806:	3208      	adds	r2, #8
10008808:	6865      	ldr	r5, [r4, #4]
1000880a:	686d      	ldr	r5, [r5, #4]
1000880c:	6065      	str	r5, [r4, #4]
1000880e:	440a      	add	r2, r1
10008810:	4295      	cmp	r5, r2
10008812:	bf04      	itt	eq
10008814:	686a      	ldreq	r2, [r5, #4]
10008816:	6062      	streq	r2, [r4, #4]
10008818:	fb00 1303 	mla	r3, r0, r3, r1
1000881c:	685b      	ldr	r3, [r3, #4]
1000881e:	68da      	ldr	r2, [r3, #12]
10008820:	4b04      	ldr	r3, [pc, #16]	; (10008834 <vTaskSwitchContext+0x58>)
10008822:	e7e1      	b.n	100087e8 <vTaskSwitchContext+0xc>
10008824:	20001028 	.word	0x20001028
10008828:	20001098 	.word	0x20001098
1000882c:	20001030 	.word	0x20001030
10008830:	20000fbc 	.word	0x20000fbc
10008834:	20000fb0 	.word	0x20000fb0

10008838 <vTaskPlaceOnEventList>:
{
10008838:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1000883a:	4b06      	ldr	r3, [pc, #24]	; (10008854 <vTaskPlaceOnEventList+0x1c>)
{
1000883c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1000883e:	6819      	ldr	r1, [r3, #0]
10008840:	3118      	adds	r1, #24
10008842:	f000 fcf7 	bl	10009234 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
10008846:	4620      	mov	r0, r4
10008848:	2101      	movs	r1, #1
}
1000884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1000884e:	f7ff bd3f 	b.w	100082d0 <prvAddCurrentTaskToDelayedList>
10008852:	bf00      	nop
10008854:	20000fb0 	.word	0x20000fb0

10008858 <vTaskPlaceOnEventListRestricted>:
	{
10008858:	b538      	push	{r3, r4, r5, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1000885a:	4b08      	ldr	r3, [pc, #32]	; (1000887c <vTaskPlaceOnEventListRestricted+0x24>)
	{
1000885c:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1000885e:	6819      	ldr	r1, [r3, #0]
	{
10008860:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
10008862:	3118      	adds	r1, #24
10008864:	f000 fcda 	bl	1000921c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
10008868:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1000886a:	4621      	mov	r1, r4
1000886c:	bf0c      	ite	eq
1000886e:	4628      	moveq	r0, r5
10008870:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}
10008874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
10008878:	f7ff bd2a 	b.w	100082d0 <prvAddCurrentTaskToDelayedList>
1000887c:	20000fb0 	.word	0x20000fb0

10008880 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10008880:	68c3      	ldr	r3, [r0, #12]
{
10008882:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10008884:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
10008886:	f104 0118 	add.w	r1, r4, #24
1000888a:	4608      	mov	r0, r1
1000888c:	9101      	str	r1, [sp, #4]
1000888e:	f000 fce8 	bl	10009262 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10008892:	4b12      	ldr	r3, [pc, #72]	; (100088dc <xTaskRemoveFromEventList+0x5c>)
10008894:	9901      	ldr	r1, [sp, #4]
10008896:	681b      	ldr	r3, [r3, #0]
10008898:	b9f3      	cbnz	r3, 100088d8 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1000889a:	1d21      	adds	r1, r4, #4
1000889c:	4608      	mov	r0, r1
1000889e:	9101      	str	r1, [sp, #4]
100088a0:	f000 fcdf 	bl	10009262 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
100088a4:	480e      	ldr	r0, [pc, #56]	; (100088e0 <xTaskRemoveFromEventList+0x60>)
100088a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
100088a8:	6805      	ldr	r5, [r0, #0]
100088aa:	9901      	ldr	r1, [sp, #4]
100088ac:	2301      	movs	r3, #1
100088ae:	4093      	lsls	r3, r2
100088b0:	432b      	orrs	r3, r5
100088b2:	6003      	str	r3, [r0, #0]
100088b4:	4b0b      	ldr	r3, [pc, #44]	; (100088e4 <xTaskRemoveFromEventList+0x64>)
100088b6:	2014      	movs	r0, #20
100088b8:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
100088bc:	f000 fcae 	bl	1000921c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
100088c0:	4b09      	ldr	r3, [pc, #36]	; (100088e8 <xTaskRemoveFromEventList+0x68>)
100088c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
100088c4:	681b      	ldr	r3, [r3, #0]
100088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100088c8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
100088ca:	bf85      	ittet	hi
100088cc:	4b07      	ldrhi	r3, [pc, #28]	; (100088ec <xTaskRemoveFromEventList+0x6c>)
100088ce:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
100088d0:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
100088d2:	6018      	strhi	r0, [r3, #0]
}
100088d4:	b003      	add	sp, #12
100088d6:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
100088d8:	4805      	ldr	r0, [pc, #20]	; (100088f0 <xTaskRemoveFromEventList+0x70>)
100088da:	e7ef      	b.n	100088bc <xTaskRemoveFromEventList+0x3c>
100088dc:	20001028 	.word	0x20001028
100088e0:	20001030 	.word	0x20001030
100088e4:	20000fbc 	.word	0x20000fbc
100088e8:	20000fb0 	.word	0x20000fb0
100088ec:	20001098 	.word	0x20001098
100088f0:	20001068 	.word	0x20001068

100088f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
100088f4:	4b03      	ldr	r3, [pc, #12]	; (10008904 <vTaskInternalSetTimeOutState+0x10>)
100088f6:	681b      	ldr	r3, [r3, #0]
100088f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
100088fa:	4b03      	ldr	r3, [pc, #12]	; (10008908 <vTaskInternalSetTimeOutState+0x14>)
100088fc:	681b      	ldr	r3, [r3, #0]
100088fe:	6043      	str	r3, [r0, #4]
}
10008900:	4770      	bx	lr
10008902:	bf00      	nop
10008904:	20001064 	.word	0x20001064
10008908:	20001094 	.word	0x20001094

1000890c <xTaskCheckForTimeOut>:
{
1000890c:	b570      	push	{r4, r5, r6, lr}
1000890e:	460c      	mov	r4, r1
10008910:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
10008912:	f000 f9c7 	bl	10008ca4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
10008916:	4b0f      	ldr	r3, [pc, #60]	; (10008954 <xTaskCheckForTimeOut+0x48>)
10008918:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
1000891a:	6823      	ldr	r3, [r4, #0]
1000891c:	1c5a      	adds	r2, r3, #1
1000891e:	d010      	beq.n	10008942 <xTaskCheckForTimeOut+0x36>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
10008920:	480d      	ldr	r0, [pc, #52]	; (10008958 <xTaskCheckForTimeOut+0x4c>)
10008922:	682e      	ldr	r6, [r5, #0]
10008924:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
10008926:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
10008928:	4286      	cmp	r6, r0
1000892a:	d001      	beq.n	10008930 <xTaskCheckForTimeOut+0x24>
1000892c:	428a      	cmp	r2, r1
1000892e:	d90f      	bls.n	10008950 <xTaskCheckForTimeOut+0x44>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
10008930:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
10008932:	4283      	cmp	r3, r0
10008934:	d90a      	bls.n	1000894c <xTaskCheckForTimeOut+0x40>
			*pxTicksToWait -= xElapsedTime;
10008936:	1a5b      	subs	r3, r3, r1
10008938:	4413      	add	r3, r2
1000893a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1000893c:	4628      	mov	r0, r5
1000893e:	f7ff ffd9 	bl	100088f4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
10008942:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
10008944:	f000 f9be 	bl	10008cc4 <vPortExitCritical>
}
10008948:	4620      	mov	r0, r4
1000894a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
1000894c:	2300      	movs	r3, #0
1000894e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
10008950:	2401      	movs	r4, #1
10008952:	e7f7      	b.n	10008944 <xTaskCheckForTimeOut+0x38>
10008954:	20001094 	.word	0x20001094
10008958:	20001064 	.word	0x20001064

1000895c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1000895c:	4b01      	ldr	r3, [pc, #4]	; (10008964 <vTaskMissedYield+0x8>)
1000895e:	2201      	movs	r2, #1
10008960:	601a      	str	r2, [r3, #0]
}
10008962:	4770      	bx	lr
10008964:	20001098 	.word	0x20001098

10008968 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
10008968:	4b05      	ldr	r3, [pc, #20]	; (10008980 <xTaskGetSchedulerState+0x18>)
1000896a:	681b      	ldr	r3, [r3, #0]
1000896c:	b133      	cbz	r3, 1000897c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1000896e:	4b05      	ldr	r3, [pc, #20]	; (10008984 <xTaskGetSchedulerState+0x1c>)
10008970:	681b      	ldr	r3, [r3, #0]
10008972:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
10008974:	bf0c      	ite	eq
10008976:	2002      	moveq	r0, #2
10008978:	2000      	movne	r0, #0
1000897a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1000897c:	2001      	movs	r0, #1
	}
1000897e:	4770      	bx	lr
10008980:	2000107c 	.word	0x2000107c
10008984:	20001028 	.word	0x20001028

10008988 <xTaskPriorityDisinherit>:
	{
10008988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
1000898a:	4604      	mov	r4, r0
1000898c:	b910      	cbnz	r0, 10008994 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
1000898e:	2000      	movs	r0, #0
	}
10008990:	b003      	add	sp, #12
10008992:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( pxTCB->uxMutexesHeld )--;
10008994:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
10008996:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
10008998:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
1000899a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1000899c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
1000899e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
100089a0:	d0f5      	beq.n	1000898e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
100089a2:	2b00      	cmp	r3, #0
100089a4:	d1f3      	bne.n	1000898e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
100089a6:	1d01      	adds	r1, r0, #4
100089a8:	4608      	mov	r0, r1
100089aa:	9101      	str	r1, [sp, #4]
100089ac:	f000 fc59 	bl	10009262 <uxListRemove>
100089b0:	4f10      	ldr	r7, [pc, #64]	; (100089f4 <xTaskPriorityDisinherit+0x6c>)
100089b2:	4a11      	ldr	r2, [pc, #68]	; (100089f8 <xTaskPriorityDisinherit+0x70>)
100089b4:	9901      	ldr	r1, [sp, #4]
100089b6:	b950      	cbnz	r0, 100089ce <xTaskPriorityDisinherit+0x46>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
100089b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
100089ba:	2614      	movs	r6, #20
100089bc:	4346      	muls	r6, r0
100089be:	59bb      	ldr	r3, [r7, r6]
100089c0:	b92b      	cbnz	r3, 100089ce <xTaskPriorityDisinherit+0x46>
100089c2:	6813      	ldr	r3, [r2, #0]
100089c4:	2501      	movs	r5, #1
100089c6:	4085      	lsls	r5, r0
100089c8:	ea23 0305 	bic.w	r3, r3, r5
100089cc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
100089ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
100089d0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100089d2:	f1c3 0005 	rsb	r0, r3, #5
100089d6:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
100089d8:	6810      	ldr	r0, [r2, #0]
100089da:	2401      	movs	r4, #1
100089dc:	fa04 f503 	lsl.w	r5, r4, r3
100089e0:	4305      	orrs	r5, r0
100089e2:	2014      	movs	r0, #20
100089e4:	fb00 7003 	mla	r0, r0, r3, r7
100089e8:	6015      	str	r5, [r2, #0]
100089ea:	f000 fc17 	bl	1000921c <vListInsertEnd>
					xReturn = pdTRUE;
100089ee:	4620      	mov	r0, r4
		return xReturn;
100089f0:	e7ce      	b.n	10008990 <xTaskPriorityDisinherit+0x8>
100089f2:	bf00      	nop
100089f4:	20000fbc 	.word	0x20000fbc
100089f8:	20001030 	.word	0x20001030

100089fc <xTaskNotifyWait>:
	{
100089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
10008a00:	4c1f      	ldr	r4, [pc, #124]	; (10008a80 <xTaskNotifyWait+0x84>)
	{
10008a02:	461e      	mov	r6, r3
10008a04:	4680      	mov	r8, r0
10008a06:	460f      	mov	r7, r1
10008a08:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
10008a0a:	f000 f94b 	bl	10008ca4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
10008a0e:	6823      	ldr	r3, [r4, #0]
10008a10:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
10008a14:	2b02      	cmp	r3, #2
10008a16:	d014      	beq.n	10008a42 <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
10008a18:	6822      	ldr	r2, [r4, #0]
10008a1a:	6d53      	ldr	r3, [r2, #84]	; 0x54
10008a1c:	ea23 0308 	bic.w	r3, r3, r8
10008a20:	6553      	str	r3, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
10008a22:	6823      	ldr	r3, [r4, #0]
10008a24:	2101      	movs	r1, #1
10008a26:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
10008a2a:	b156      	cbz	r6, 10008a42 <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
10008a2c:	4630      	mov	r0, r6
10008a2e:	f7ff fc4f 	bl	100082d0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
10008a32:	4b14      	ldr	r3, [pc, #80]	; (10008a84 <xTaskNotifyWait+0x88>)
10008a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10008a38:	601a      	str	r2, [r3, #0]
10008a3a:	f3bf 8f4f 	dsb	sy
10008a3e:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
10008a42:	f000 f93f 	bl	10008cc4 <vPortExitCritical>
		taskENTER_CRITICAL();
10008a46:	f000 f92d 	bl	10008ca4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
10008a4a:	b115      	cbz	r5, 10008a52 <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
10008a4c:	6823      	ldr	r3, [r4, #0]
10008a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10008a50:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
10008a52:	6823      	ldr	r3, [r4, #0]
10008a54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
10008a58:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
10008a5a:	bf01      	itttt	eq
10008a5c:	6822      	ldreq	r2, [r4, #0]
10008a5e:	6d53      	ldreq	r3, [r2, #84]	; 0x54
10008a60:	43bb      	biceq	r3, r7
10008a62:	6553      	streq	r3, [r2, #84]	; 0x54
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
10008a64:	6823      	ldr	r3, [r4, #0]
10008a66:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
10008a6a:	bf0c      	ite	eq
10008a6c:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
10008a6e:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
10008a70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
10008a74:	f000 f926 	bl	10008cc4 <vPortExitCritical>
	}
10008a78:	4628      	mov	r0, r5
10008a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008a7e:	bf00      	nop
10008a80:	20000fb0 	.word	0x20000fb0
10008a84:	e000ed04 	.word	0xe000ed04

10008a88 <xTaskGenericNotify>:
	{
10008a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10008a8a:	461d      	mov	r5, r3
10008a8c:	4604      	mov	r4, r0
10008a8e:	460f      	mov	r7, r1
10008a90:	4616      	mov	r6, r2
		taskENTER_CRITICAL();
10008a92:	f000 f907 	bl	10008ca4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
10008a96:	b10d      	cbz	r5, 10008a9c <xTaskGenericNotify+0x14>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
10008a98:	6d63      	ldr	r3, [r4, #84]	; 0x54
10008a9a:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
10008a9c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
10008aa0:	2302      	movs	r3, #2
10008aa2:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
10008aa4:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
10008aa6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			switch( eAction )
10008aaa:	2a03      	cmp	r2, #3
10008aac:	d80a      	bhi.n	10008ac4 <xTaskGenericNotify+0x3c>
10008aae:	e8df f002 	tbb	[pc, r2]
10008ab2:	0602      	.short	0x0602
10008ab4:	1104      	.short	0x1104
					pxTCB->ulNotifiedValue |= ulValue;
10008ab6:	6d61      	ldr	r1, [r4, #84]	; 0x54
10008ab8:	430f      	orrs	r7, r1
						pxTCB->ulNotifiedValue = ulValue;
10008aba:	6567      	str	r7, [r4, #84]	; 0x54
10008abc:	e002      	b.n	10008ac4 <xTaskGenericNotify+0x3c>
					( pxTCB->ulNotifiedValue )++;
10008abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
10008ac0:	3301      	adds	r3, #1
10008ac2:	6563      	str	r3, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
10008ac4:	2d01      	cmp	r5, #1
10008ac6:	d009      	beq.n	10008adc <xTaskGenericNotify+0x54>
	{
10008ac8:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
10008aca:	f000 f8fb 	bl	10008cc4 <vPortExitCritical>
	}
10008ace:	4628      	mov	r0, r5
10008ad0:	b003      	add	sp, #12
10008ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
10008ad4:	2d02      	cmp	r5, #2
10008ad6:	d1f0      	bne.n	10008aba <xTaskGenericNotify+0x32>
						xReturn = pdFAIL;
10008ad8:	2500      	movs	r5, #0
10008ada:	e7f6      	b.n	10008aca <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10008adc:	1d21      	adds	r1, r4, #4
10008ade:	4608      	mov	r0, r1
10008ae0:	9101      	str	r1, [sp, #4]
10008ae2:	f000 fbbe 	bl	10009262 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
10008ae6:	480e      	ldr	r0, [pc, #56]	; (10008b20 <xTaskGenericNotify+0x98>)
10008ae8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
10008aea:	6806      	ldr	r6, [r0, #0]
10008aec:	9901      	ldr	r1, [sp, #4]
10008aee:	fa05 f302 	lsl.w	r3, r5, r2
10008af2:	4333      	orrs	r3, r6
10008af4:	6003      	str	r3, [r0, #0]
10008af6:	4b0b      	ldr	r3, [pc, #44]	; (10008b24 <xTaskGenericNotify+0x9c>)
10008af8:	2014      	movs	r0, #20
10008afa:	fb00 3002 	mla	r0, r0, r2, r3
10008afe:	f000 fb8d 	bl	1000921c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
10008b02:	4b09      	ldr	r3, [pc, #36]	; (10008b28 <xTaskGenericNotify+0xa0>)
10008b04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
10008b06:	681b      	ldr	r3, [r3, #0]
10008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008b0a:	429a      	cmp	r2, r3
10008b0c:	d9dc      	bls.n	10008ac8 <xTaskGenericNotify+0x40>
					taskYIELD_IF_USING_PREEMPTION();
10008b0e:	4b07      	ldr	r3, [pc, #28]	; (10008b2c <xTaskGenericNotify+0xa4>)
10008b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10008b14:	601a      	str	r2, [r3, #0]
10008b16:	f3bf 8f4f 	dsb	sy
10008b1a:	f3bf 8f6f 	isb	sy
10008b1e:	e7d4      	b.n	10008aca <xTaskGenericNotify+0x42>
10008b20:	20001030 	.word	0x20001030
10008b24:	20000fbc 	.word	0x20000fbc
10008b28:	20000fb0 	.word	0x20000fb0
10008b2c:	e000ed04 	.word	0xe000ed04

10008b30 <xTaskGenericNotifyFromISR>:
	{
10008b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10008b32:	9e08      	ldr	r6, [sp, #32]
10008b34:	4604      	mov	r4, r0
	__asm volatile
10008b36:	f3ef 8711 	mrs	r7, BASEPRI
10008b3a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
10008b3e:	f380 8811 	msr	BASEPRI, r0
10008b42:	f3bf 8f6f 	isb	sy
10008b46:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
10008b4a:	b10b      	cbz	r3, 10008b50 <xTaskGenericNotifyFromISR+0x20>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
10008b4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
10008b4e:	6018      	str	r0, [r3, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
10008b50:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
10008b54:	2302      	movs	r3, #2
10008b56:	3a01      	subs	r2, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
10008b58:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
10008b5a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			switch( eAction )
10008b5e:	2a03      	cmp	r2, #3
10008b60:	d80a      	bhi.n	10008b78 <xTaskGenericNotifyFromISR+0x48>
10008b62:	e8df f002 	tbb	[pc, r2]
10008b66:	0602      	.short	0x0602
10008b68:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
10008b6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
10008b6c:	4319      	orrs	r1, r3
						pxTCB->ulNotifiedValue = ulValue;
10008b6e:	6561      	str	r1, [r4, #84]	; 0x54
10008b70:	e002      	b.n	10008b78 <xTaskGenericNotifyFromISR+0x48>
					( pxTCB->ulNotifiedValue )++;
10008b72:	6d63      	ldr	r3, [r4, #84]	; 0x54
10008b74:	3301      	adds	r3, #1
10008b76:	6563      	str	r3, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
10008b78:	2d01      	cmp	r5, #1
10008b7a:	d008      	beq.n	10008b8e <xTaskGenericNotifyFromISR+0x5e>
10008b7c:	2001      	movs	r0, #1
	__asm volatile
10008b7e:	f387 8811 	msr	BASEPRI, r7
	}
10008b82:	b003      	add	sp, #12
10008b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
10008b86:	2d02      	cmp	r5, #2
10008b88:	d1f1      	bne.n	10008b6e <xTaskGenericNotifyFromISR+0x3e>
						xReturn = pdFAIL;
10008b8a:	2000      	movs	r0, #0
10008b8c:	e7f7      	b.n	10008b7e <xTaskGenericNotifyFromISR+0x4e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10008b8e:	4b12      	ldr	r3, [pc, #72]	; (10008bd8 <xTaskGenericNotifyFromISR+0xa8>)
10008b90:	681b      	ldr	r3, [r3, #0]
10008b92:	b9eb      	cbnz	r3, 10008bd0 <xTaskGenericNotifyFromISR+0xa0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10008b94:	1d21      	adds	r1, r4, #4
10008b96:	4608      	mov	r0, r1
10008b98:	9101      	str	r1, [sp, #4]
10008b9a:	f000 fb62 	bl	10009262 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10008b9e:	4a0f      	ldr	r2, [pc, #60]	; (10008bdc <xTaskGenericNotifyFromISR+0xac>)
10008ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
10008ba2:	6810      	ldr	r0, [r2, #0]
10008ba4:	9901      	ldr	r1, [sp, #4]
10008ba6:	409d      	lsls	r5, r3
10008ba8:	4305      	orrs	r5, r0
10008baa:	6015      	str	r5, [r2, #0]
10008bac:	4a0c      	ldr	r2, [pc, #48]	; (10008be0 <xTaskGenericNotifyFromISR+0xb0>)
10008bae:	2014      	movs	r0, #20
10008bb0:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
10008bb4:	f000 fb32 	bl	1000921c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
10008bb8:	4b0a      	ldr	r3, [pc, #40]	; (10008be4 <xTaskGenericNotifyFromISR+0xb4>)
10008bba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
10008bbc:	681b      	ldr	r3, [r3, #0]
10008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008bc0:	429a      	cmp	r2, r3
10008bc2:	d9db      	bls.n	10008b7c <xTaskGenericNotifyFromISR+0x4c>
					if( pxHigherPriorityTaskWoken != NULL )
10008bc4:	2301      	movs	r3, #1
10008bc6:	b106      	cbz	r6, 10008bca <xTaskGenericNotifyFromISR+0x9a>
						*pxHigherPriorityTaskWoken = pdTRUE;
10008bc8:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
10008bca:	4a07      	ldr	r2, [pc, #28]	; (10008be8 <xTaskGenericNotifyFromISR+0xb8>)
10008bcc:	6013      	str	r3, [r2, #0]
10008bce:	e7d5      	b.n	10008b7c <xTaskGenericNotifyFromISR+0x4c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
10008bd0:	4806      	ldr	r0, [pc, #24]	; (10008bec <xTaskGenericNotifyFromISR+0xbc>)
10008bd2:	f104 0118 	add.w	r1, r4, #24
10008bd6:	e7ed      	b.n	10008bb4 <xTaskGenericNotifyFromISR+0x84>
10008bd8:	20001028 	.word	0x20001028
10008bdc:	20001030 	.word	0x20001030
10008be0:	20000fbc 	.word	0x20000fbc
10008be4:	20000fb0 	.word	0x20000fb0
10008be8:	20001098 	.word	0x20001098
10008bec:	20001068 	.word	0x20001068

10008bf0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
10008bf0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
10008bf2:	2300      	movs	r3, #0
10008bf4:	9301      	str	r3, [sp, #4]
	__asm volatile
10008bf6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
10008bfa:	f383 8811 	msr	BASEPRI, r3
10008bfe:	f3bf 8f6f 	isb	sy
10008c02:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
10008c06:	9b01      	ldr	r3, [sp, #4]
10008c08:	2b00      	cmp	r3, #0
10008c0a:	d0fc      	beq.n	10008c06 <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
10008c0c:	b002      	add	sp, #8
10008c0e:	4770      	bx	lr

10008c10 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
10008c10:	4808      	ldr	r0, [pc, #32]	; (10008c34 <prvPortStartFirstTask+0x24>)
10008c12:	6800      	ldr	r0, [r0, #0]
10008c14:	6800      	ldr	r0, [r0, #0]
10008c16:	f380 8808 	msr	MSP, r0
10008c1a:	f04f 0000 	mov.w	r0, #0
10008c1e:	f380 8814 	msr	CONTROL, r0
10008c22:	b662      	cpsie	i
10008c24:	b661      	cpsie	f
10008c26:	f3bf 8f4f 	dsb	sy
10008c2a:	f3bf 8f6f 	isb	sy
10008c2e:	df00      	svc	0
10008c30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
10008c32:	0000      	.short	0x0000
10008c34:	e000ed08 	.word	0xe000ed08

10008c38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
10008c38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 10008c48 <vPortEnableVFP+0x10>
10008c3c:	6801      	ldr	r1, [r0, #0]
10008c3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10008c42:	6001      	str	r1, [r0, #0]
10008c44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
10008c46:	0000      	.short	0x0000
10008c48:	e000ed88 	.word	0xe000ed88

10008c4c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
10008c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10008c50:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
10008c54:	4b07      	ldr	r3, [pc, #28]	; (10008c74 <pxPortInitialiseStack+0x28>)
10008c56:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
10008c5a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
10008c5e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
10008c62:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
10008c66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
10008c6a:	f840 3c24 	str.w	r3, [r0, #-36]
}
10008c6e:	3844      	subs	r0, #68	; 0x44
10008c70:	4770      	bx	lr
10008c72:	bf00      	nop
10008c74:	10008bf1 	.word	0x10008bf1
	...

10008c80 <SVC_Handler>:
	__asm volatile (
10008c80:	4b07      	ldr	r3, [pc, #28]	; (10008ca0 <pxCurrentTCBConst2>)
10008c82:	6819      	ldr	r1, [r3, #0]
10008c84:	6808      	ldr	r0, [r1, #0]
10008c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10008c8a:	f380 8809 	msr	PSP, r0
10008c8e:	f3bf 8f6f 	isb	sy
10008c92:	f04f 0000 	mov.w	r0, #0
10008c96:	f380 8811 	msr	BASEPRI, r0
10008c9a:	4770      	bx	lr
10008c9c:	f3af 8000 	nop.w

10008ca0 <pxCurrentTCBConst2>:
10008ca0:	20000fb0 	.word	0x20000fb0

10008ca4 <vPortEnterCritical>:
10008ca4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
10008ca8:	f383 8811 	msr	BASEPRI, r3
10008cac:	f3bf 8f6f 	isb	sy
10008cb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
10008cb4:	4a02      	ldr	r2, [pc, #8]	; (10008cc0 <vPortEnterCritical+0x1c>)
10008cb6:	6813      	ldr	r3, [r2, #0]
10008cb8:	3301      	adds	r3, #1
10008cba:	6013      	str	r3, [r2, #0]
}
10008cbc:	4770      	bx	lr
10008cbe:	bf00      	nop
10008cc0:	20000098 	.word	0x20000098

10008cc4 <vPortExitCritical>:
	uxCriticalNesting--;
10008cc4:	4a03      	ldr	r2, [pc, #12]	; (10008cd4 <vPortExitCritical+0x10>)
10008cc6:	6813      	ldr	r3, [r2, #0]
10008cc8:	3b01      	subs	r3, #1
10008cca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
10008ccc:	b90b      	cbnz	r3, 10008cd2 <vPortExitCritical+0xe>
	__asm volatile
10008cce:	f383 8811 	msr	BASEPRI, r3
}
10008cd2:	4770      	bx	lr
10008cd4:	20000098 	.word	0x20000098
	...

10008ce0 <PendSV_Handler>:
	__asm volatile
10008ce0:	f3ef 8009 	mrs	r0, PSP
10008ce4:	f3bf 8f6f 	isb	sy
10008ce8:	4b15      	ldr	r3, [pc, #84]	; (10008d40 <pxCurrentTCBConst>)
10008cea:	681a      	ldr	r2, [r3, #0]
10008cec:	f01e 0f10 	tst.w	lr, #16
10008cf0:	bf08      	it	eq
10008cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
10008cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10008cfa:	6010      	str	r0, [r2, #0]
10008cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
10008d00:	f04f 00a0 	mov.w	r0, #160	; 0xa0
10008d04:	f380 8811 	msr	BASEPRI, r0
10008d08:	f3bf 8f4f 	dsb	sy
10008d0c:	f3bf 8f6f 	isb	sy
10008d10:	f7ff fd64 	bl	100087dc <vTaskSwitchContext>
10008d14:	f04f 0000 	mov.w	r0, #0
10008d18:	f380 8811 	msr	BASEPRI, r0
10008d1c:	bc09      	pop	{r0, r3}
10008d1e:	6819      	ldr	r1, [r3, #0]
10008d20:	6808      	ldr	r0, [r1, #0]
10008d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10008d26:	f01e 0f10 	tst.w	lr, #16
10008d2a:	bf08      	it	eq
10008d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
10008d30:	f380 8809 	msr	PSP, r0
10008d34:	f3bf 8f6f 	isb	sy
10008d38:	4770      	bx	lr
10008d3a:	bf00      	nop
10008d3c:	f3af 8000 	nop.w

10008d40 <pxCurrentTCBConst>:
10008d40:	20000fb0 	.word	0x20000fb0

10008d44 <SysTick_Handler>:
{
10008d44:	b508      	push	{r3, lr}
	__asm volatile
10008d46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
10008d4a:	f383 8811 	msr	BASEPRI, r3
10008d4e:	f3bf 8f6f 	isb	sy
10008d52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
10008d56:	f7ff fc23 	bl	100085a0 <xTaskIncrementTick>
10008d5a:	b118      	cbz	r0, 10008d64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
10008d5c:	4b03      	ldr	r3, [pc, #12]	; (10008d6c <SysTick_Handler+0x28>)
10008d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10008d62:	601a      	str	r2, [r3, #0]
	__asm volatile
10008d64:	2300      	movs	r3, #0
10008d66:	f383 8811 	msr	BASEPRI, r3
}
10008d6a:	bd08      	pop	{r3, pc}
10008d6c:	e000ed04 	.word	0xe000ed04

10008d70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
10008d70:	4b05      	ldr	r3, [pc, #20]	; (10008d88 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
10008d72:	4906      	ldr	r1, [pc, #24]	; (10008d8c <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
10008d74:	2200      	movs	r2, #0
10008d76:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
10008d78:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
10008d7a:	4a05      	ldr	r2, [pc, #20]	; (10008d90 <vPortSetupTimerInterrupt+0x20>)
10008d7c:	f64e 215f 	movw	r1, #59999	; 0xea5f
10008d80:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
10008d82:	2207      	movs	r2, #7
10008d84:	601a      	str	r2, [r3, #0]
}
10008d86:	4770      	bx	lr
10008d88:	e000e010 	.word	0xe000e010
10008d8c:	e000e018 	.word	0xe000e018
10008d90:	e000e014 	.word	0xe000e014

10008d94 <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
10008d94:	4b0e      	ldr	r3, [pc, #56]	; (10008dd0 <xPortStartScheduler+0x3c>)
10008d96:	681a      	ldr	r2, [r3, #0]
10008d98:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
{
10008d9c:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
10008d9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
10008da0:	681a      	ldr	r2, [r3, #0]
10008da2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
10008da6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
10008da8:	f7ff ffe2 	bl	10008d70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
10008dac:	4b09      	ldr	r3, [pc, #36]	; (10008dd4 <xPortStartScheduler+0x40>)
10008dae:	2400      	movs	r4, #0
10008db0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
10008db2:	f7ff ff41 	bl	10008c38 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
10008db6:	4a08      	ldr	r2, [pc, #32]	; (10008dd8 <xPortStartScheduler+0x44>)
10008db8:	6813      	ldr	r3, [r2, #0]
10008dba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
10008dbe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
10008dc0:	f7ff ff26 	bl	10008c10 <prvPortStartFirstTask>
	vTaskSwitchContext();
10008dc4:	f7ff fd0a 	bl	100087dc <vTaskSwitchContext>
	prvTaskExitError();
10008dc8:	f7ff ff12 	bl	10008bf0 <prvTaskExitError>
}
10008dcc:	4620      	mov	r0, r4
10008dce:	bd10      	pop	{r4, pc}
10008dd0:	e000ed20 	.word	0xe000ed20
10008dd4:	20000098 	.word	0x20000098
10008dd8:	e000ef34 	.word	0xe000ef34

10008ddc <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
10008ddc:	b570      	push	{r4, r5, r6, lr}
10008dde:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
10008de0:	f7ff fbd0 	bl	10008584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
10008de4:	4824      	ldr	r0, [pc, #144]	; (10008e78 <pvPortMalloc+0x9c>)
10008de6:	6801      	ldr	r1, [r0, #0]
10008de8:	b971      	cbnz	r1, 10008e08 <pvPortMalloc+0x2c>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
10008dea:	4b24      	ldr	r3, [pc, #144]	; (10008e7c <pvPortMalloc+0xa0>)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
10008dec:	4a24      	ldr	r2, [pc, #144]	; (10008e80 <pvPortMalloc+0xa4>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
10008dee:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
10008df2:	e9c2 3100 	strd	r3, r1, [r2]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
10008df6:	4a23      	ldr	r2, [pc, #140]	; (10008e84 <pvPortMalloc+0xa8>)
10008df8:	f64f 75f8 	movw	r5, #65528	; 0xfff8
	xEnd.pxNextFreeBlock = NULL;
10008dfc:	e9c2 1500 	strd	r1, r5, [r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
10008e00:	e9c3 2500 	strd	r2, r5, [r3]
			xHeapHasBeenInitialised = pdTRUE;
10008e04:	2301      	movs	r3, #1
10008e06:	6003      	str	r3, [r0, #0]
		if( xWantedSize > 0 )
10008e08:	b12c      	cbz	r4, 10008e16 <pvPortMalloc+0x3a>
			xWantedSize += heapSTRUCT_SIZE;
10008e0a:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
10008e0c:	0763      	lsls	r3, r4, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
10008e0e:	bf1c      	itt	ne
10008e10:	f024 0407 	bicne.w	r4, r4, #7
10008e14:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
10008e16:	1e62      	subs	r2, r4, #1
10008e18:	f64f 73f6 	movw	r3, #65526	; 0xfff6
10008e1c:	429a      	cmp	r2, r3
10008e1e:	d829      	bhi.n	10008e74 <pvPortMalloc+0x98>
			pxBlock = xStart.pxNextFreeBlock;
10008e20:	4a17      	ldr	r2, [pc, #92]	; (10008e80 <pvPortMalloc+0xa4>)
10008e22:	6813      	ldr	r3, [r2, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
10008e24:	6859      	ldr	r1, [r3, #4]
10008e26:	42a1      	cmp	r1, r4
10008e28:	d201      	bcs.n	10008e2e <pvPortMalloc+0x52>
10008e2a:	6818      	ldr	r0, [r3, #0]
10008e2c:	b9f8      	cbnz	r0, 10008e6e <pvPortMalloc+0x92>
			if( pxBlock != &xEnd )
10008e2e:	4815      	ldr	r0, [pc, #84]	; (10008e84 <pvPortMalloc+0xa8>)
10008e30:	4283      	cmp	r3, r0
10008e32:	d01f      	beq.n	10008e74 <pvPortMalloc+0x98>
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
10008e34:	6818      	ldr	r0, [r3, #0]
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
10008e36:	6815      	ldr	r5, [r2, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
10008e38:	6010      	str	r0, [r2, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
10008e3a:	1b0a      	subs	r2, r1, r4
10008e3c:	2a10      	cmp	r2, #16
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
10008e3e:	f105 0508 	add.w	r5, r5, #8
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
10008e42:	d90b      	bls.n	10008e5c <pvPortMalloc+0x80>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
10008e44:	1919      	adds	r1, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
10008e46:	604a      	str	r2, [r1, #4]
					pxBlock->xBlockSize = xWantedSize;
10008e48:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
10008e4a:	684c      	ldr	r4, [r1, #4]
10008e4c:	4a0c      	ldr	r2, [pc, #48]	; (10008e80 <pvPortMalloc+0xa4>)
10008e4e:	4610      	mov	r0, r2
10008e50:	6812      	ldr	r2, [r2, #0]
10008e52:	6856      	ldr	r6, [r2, #4]
10008e54:	42a6      	cmp	r6, r4
10008e56:	d3fa      	bcc.n	10008e4e <pvPortMalloc+0x72>
10008e58:	600a      	str	r2, [r1, #0]
10008e5a:	6001      	str	r1, [r0, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
10008e5c:	490a      	ldr	r1, [pc, #40]	; (10008e88 <pvPortMalloc+0xac>)
10008e5e:	685b      	ldr	r3, [r3, #4]
10008e60:	680a      	ldr	r2, [r1, #0]
10008e62:	1ad2      	subs	r2, r2, r3
10008e64:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
10008e66:	f7ff fc27 	bl	100086b8 <xTaskResumeAll>
}
10008e6a:	4628      	mov	r0, r5
10008e6c:	bd70      	pop	{r4, r5, r6, pc}
10008e6e:	461a      	mov	r2, r3
10008e70:	4603      	mov	r3, r0
10008e72:	e7d7      	b.n	10008e24 <pvPortMalloc+0x48>
void *pvReturn = NULL;
10008e74:	2500      	movs	r5, #0
10008e76:	e7f6      	b.n	10008e66 <pvPortMalloc+0x8a>
10008e78:	200110a4 	.word	0x200110a4
10008e7c:	200010a4 	.word	0x200010a4
10008e80:	200110a8 	.word	0x200110a8
10008e84:	2001109c 	.word	0x2001109c
10008e88:	2000009c 	.word	0x2000009c

10008e8c <vPortFree>:
{
10008e8c:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
10008e8e:	4604      	mov	r4, r0
10008e90:	b1b0      	cbz	r0, 10008ec0 <vPortFree+0x34>
		puc -= heapSTRUCT_SIZE;
10008e92:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
10008e96:	f7ff fb75 	bl	10008584 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
10008e9a:	f854 1c04 	ldr.w	r1, [r4, #-4]
10008e9e:	4b09      	ldr	r3, [pc, #36]	; (10008ec4 <vPortFree+0x38>)
10008ea0:	461a      	mov	r2, r3
10008ea2:	681b      	ldr	r3, [r3, #0]
10008ea4:	6858      	ldr	r0, [r3, #4]
10008ea6:	4288      	cmp	r0, r1
10008ea8:	d3fa      	bcc.n	10008ea0 <vPortFree+0x14>
10008eaa:	f844 3c08 	str.w	r3, [r4, #-8]
10008eae:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
10008eb0:	4a05      	ldr	r2, [pc, #20]	; (10008ec8 <vPortFree+0x3c>)
10008eb2:	6813      	ldr	r3, [r2, #0]
10008eb4:	440b      	add	r3, r1
10008eb6:	6013      	str	r3, [r2, #0]
}
10008eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
10008ebc:	f7ff bbfc 	b.w	100086b8 <xTaskResumeAll>
}
10008ec0:	bd38      	pop	{r3, r4, r5, pc}
10008ec2:	bf00      	nop
10008ec4:	200110a8 	.word	0x200110a8
10008ec8:	2000009c 	.word	0x2000009c

10008ecc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
10008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
10008ece:	4c0d      	ldr	r4, [pc, #52]	; (10008f04 <prvCheckForValidListAndQueue+0x38>)
	taskENTER_CRITICAL();
10008ed0:	f7ff fee8 	bl	10008ca4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
10008ed4:	6825      	ldr	r5, [r4, #0]
10008ed6:	b98d      	cbnz	r5, 10008efc <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
10008ed8:	4f0b      	ldr	r7, [pc, #44]	; (10008f08 <prvCheckForValidListAndQueue+0x3c>)
			vListInitialise( &xActiveTimerList2 );
10008eda:	4e0c      	ldr	r6, [pc, #48]	; (10008f0c <prvCheckForValidListAndQueue+0x40>)
			vListInitialise( &xActiveTimerList1 );
10008edc:	4638      	mov	r0, r7
10008ede:	f000 f98f 	bl	10009200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
10008ee2:	4630      	mov	r0, r6
10008ee4:	f000 f98c 	bl	10009200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
10008ee8:	4b09      	ldr	r3, [pc, #36]	; (10008f10 <prvCheckForValidListAndQueue+0x44>)
10008eea:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
10008eec:	4b09      	ldr	r3, [pc, #36]	; (10008f14 <prvCheckForValidListAndQueue+0x48>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
10008eee:	462a      	mov	r2, r5
10008ef0:	210c      	movs	r1, #12
10008ef2:	2008      	movs	r0, #8
			pxOverflowTimerList = &xActiveTimerList2;
10008ef4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
10008ef6:	f7ff f859 	bl	10007fac <xQueueGenericCreate>
10008efa:	6020      	str	r0, [r4, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
10008efc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
10008f00:	f7ff bee0 	b.w	10008cc4 <vPortExitCritical>
10008f04:	200110e4 	.word	0x200110e4
10008f08:	200110b8 	.word	0x200110b8
10008f0c:	200110cc 	.word	0x200110cc
10008f10:	200110b0 	.word	0x200110b0
10008f14:	200110b4 	.word	0x200110b4

10008f18 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
10008f18:	4291      	cmp	r1, r2
{
10008f1a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
10008f1c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
10008f1e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
10008f20:	d80a      	bhi.n	10008f38 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10008f22:	1ad2      	subs	r2, r2, r3
10008f24:	6983      	ldr	r3, [r0, #24]
10008f26:	429a      	cmp	r2, r3
10008f28:	d20d      	bcs.n	10008f46 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
10008f2a:	4b08      	ldr	r3, [pc, #32]	; (10008f4c <prvInsertTimerInActiveList+0x34>)
10008f2c:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
10008f2e:	6818      	ldr	r0, [r3, #0]
10008f30:	f000 f980 	bl	10009234 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
10008f34:	2000      	movs	r0, #0
}
10008f36:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
10008f38:	429a      	cmp	r2, r3
10008f3a:	d201      	bcs.n	10008f40 <prvInsertTimerInActiveList+0x28>
10008f3c:	4299      	cmp	r1, r3
10008f3e:	d202      	bcs.n	10008f46 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
10008f40:	4b03      	ldr	r3, [pc, #12]	; (10008f50 <prvInsertTimerInActiveList+0x38>)
10008f42:	1d01      	adds	r1, r0, #4
10008f44:	e7f3      	b.n	10008f2e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
10008f46:	2001      	movs	r0, #1
	return xProcessTimerNow;
10008f48:	e7f5      	b.n	10008f36 <prvInsertTimerInActiveList+0x1e>
10008f4a:	bf00      	nop
10008f4c:	200110b4 	.word	0x200110b4
10008f50:	200110b0 	.word	0x200110b0

10008f54 <xTimerCreateTimerTask>:
{
10008f54:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
10008f56:	f7ff ffb9 	bl	10008ecc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
10008f5a:	4b08      	ldr	r3, [pc, #32]	; (10008f7c <xTimerCreateTimerTask+0x28>)
10008f5c:	6818      	ldr	r0, [r3, #0]
10008f5e:	b148      	cbz	r0, 10008f74 <xTimerCreateTimerTask+0x20>
			xReturn = xTaskCreate(	prvTimerTask,
10008f60:	4b07      	ldr	r3, [pc, #28]	; (10008f80 <xTimerCreateTimerTask+0x2c>)
10008f62:	9301      	str	r3, [sp, #4]
10008f64:	2301      	movs	r3, #1
10008f66:	9300      	str	r3, [sp, #0]
10008f68:	4906      	ldr	r1, [pc, #24]	; (10008f84 <xTimerCreateTimerTask+0x30>)
10008f6a:	4807      	ldr	r0, [pc, #28]	; (10008f88 <xTimerCreateTimerTask+0x34>)
10008f6c:	2300      	movs	r3, #0
10008f6e:	2280      	movs	r2, #128	; 0x80
10008f70:	f7ff f9f4 	bl	1000835c <xTaskCreate>
}
10008f74:	b003      	add	sp, #12
10008f76:	f85d fb04 	ldr.w	pc, [sp], #4
10008f7a:	bf00      	nop
10008f7c:	200110e4 	.word	0x200110e4
10008f80:	200110e8 	.word	0x200110e8
10008f84:	10010a65 	.word	0x10010a65
10008f88:	10009039 	.word	0x10009039

10008f8c <xTimerGenericCommand>:
{
10008f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if( xTimerQueue != NULL )
10008f8e:	4c0f      	ldr	r4, [pc, #60]	; (10008fcc <xTimerGenericCommand+0x40>)
{
10008f90:	4605      	mov	r5, r0
	if( xTimerQueue != NULL )
10008f92:	6820      	ldr	r0, [r4, #0]
{
10008f94:	4616      	mov	r6, r2
10008f96:	461a      	mov	r2, r3
	if( xTimerQueue != NULL )
10008f98:	b180      	cbz	r0, 10008fbc <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
10008f9a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
10008f9c:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
10008fa0:	9503      	str	r5, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
10008fa2:	dc0d      	bgt.n	10008fc0 <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
10008fa4:	f7ff fce0 	bl	10008968 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
10008fa8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
10008faa:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
10008fac:	bf08      	it	eq
10008fae:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
10008fb0:	6820      	ldr	r0, [r4, #0]
10008fb2:	bf18      	it	ne
10008fb4:	461a      	movne	r2, r3
10008fb6:	a901      	add	r1, sp, #4
10008fb8:	f7ff f812 	bl	10007fe0 <xQueueGenericSend>
}
10008fbc:	b004      	add	sp, #16
10008fbe:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
10008fc0:	2300      	movs	r3, #0
10008fc2:	a901      	add	r1, sp, #4
10008fc4:	f7ff f88e 	bl	100080e4 <xQueueGenericSendFromISR>
10008fc8:	e7f8      	b.n	10008fbc <xTimerGenericCommand+0x30>
10008fca:	bf00      	nop
10008fcc:	200110e4 	.word	0x200110e4

10008fd0 <prvSwitchTimerLists>:
{
10008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
10008fd2:	4d17      	ldr	r5, [pc, #92]	; (10009030 <prvSwitchTimerLists+0x60>)
{
10008fd4:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
10008fd6:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
10008fd8:	682b      	ldr	r3, [r5, #0]
10008fda:	681a      	ldr	r2, [r3, #0]
10008fdc:	b92a      	cbnz	r2, 10008fea <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
10008fde:	4a15      	ldr	r2, [pc, #84]	; (10009034 <prvSwitchTimerLists+0x64>)
10008fe0:	6811      	ldr	r1, [r2, #0]
10008fe2:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
10008fe4:	6013      	str	r3, [r2, #0]
}
10008fe6:	b005      	add	sp, #20
10008fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
10008fea:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10008fec:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
10008fee:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10008ff0:	1d21      	adds	r1, r4, #4
10008ff2:	4608      	mov	r0, r1
10008ff4:	9103      	str	r1, [sp, #12]
10008ff6:	f000 f934 	bl	10009262 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
10008ffa:	6a23      	ldr	r3, [r4, #32]
10008ffc:	4620      	mov	r0, r4
10008ffe:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
10009000:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
10009004:	9903      	ldr	r1, [sp, #12]
10009006:	f013 0f04 	tst.w	r3, #4
1000900a:	d0e5      	beq.n	10008fd8 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1000900c:	69a3      	ldr	r3, [r4, #24]
1000900e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
10009010:	429e      	cmp	r6, r3
10009012:	d205      	bcs.n	10009020 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
10009014:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
10009016:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
10009018:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1000901a:	f000 f90b 	bl	10009234 <vListInsert>
1000901e:	e7db      	b.n	10008fd8 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
10009020:	2300      	movs	r3, #0
10009022:	9700      	str	r7, [sp, #0]
10009024:	4632      	mov	r2, r6
10009026:	4619      	mov	r1, r3
10009028:	4620      	mov	r0, r4
1000902a:	f7ff ffaf 	bl	10008f8c <xTimerGenericCommand>
1000902e:	e7d3      	b.n	10008fd8 <prvSwitchTimerLists+0x8>
10009030:	200110b0 	.word	0x200110b0
10009034:	200110b4 	.word	0x200110b4

10009038 <prvTimerTask>:
{
10009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1000903c:	4e6b      	ldr	r6, [pc, #428]	; (100091ec <prvTimerTask+0x1b4>)
{
1000903e:	b087      	sub	sp, #28
10009040:	46b1      	mov	r9, r6
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
10009042:	6833      	ldr	r3, [r6, #0]
10009044:	f8d3 b000 	ldr.w	fp, [r3]
10009048:	f1bb 0f00 	cmp.w	fp, #0
1000904c:	d028      	beq.n	100090a0 <prvTimerTask+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1000904e:	68db      	ldr	r3, [r3, #12]
10009050:	f8d3 b000 	ldr.w	fp, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
10009054:	2400      	movs	r4, #0
	if( xTimeNow < xLastTime )
10009056:	4d66      	ldr	r5, [pc, #408]	; (100091f0 <prvTimerTask+0x1b8>)
10009058:	4f66      	ldr	r7, [pc, #408]	; (100091f4 <prvTimerTask+0x1bc>)
	vTaskSuspendAll();
1000905a:	f7ff fa93 	bl	10008584 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
1000905e:	f7ff fa99 	bl	10008594 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
10009062:	682b      	ldr	r3, [r5, #0]
10009064:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
10009066:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
10009068:	46a8      	mov	r8, r5
1000906a:	d31b      	bcc.n	100090a4 <prvTimerTask+0x6c>
	xLastTime = xTimeNow;
1000906c:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1000906e:	b314      	cbz	r4, 100090b6 <prvTimerTask+0x7e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
10009070:	4b61      	ldr	r3, [pc, #388]	; (100091f8 <prvTimerTask+0x1c0>)
10009072:	681b      	ldr	r3, [r3, #0]
10009074:	681c      	ldr	r4, [r3, #0]
10009076:	fab4 f484 	clz	r4, r4
1000907a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1000907c:	6838      	ldr	r0, [r7, #0]
1000907e:	4622      	mov	r2, r4
10009080:	ebab 010a 	sub.w	r1, fp, sl
10009084:	f7ff f8da 	bl	1000823c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
10009088:	f7ff fb16 	bl	100086b8 <xTaskResumeAll>
1000908c:	b980      	cbnz	r0, 100090b0 <prvTimerTask+0x78>
					portYIELD_WITHIN_API();
1000908e:	4a5b      	ldr	r2, [pc, #364]	; (100091fc <prvTimerTask+0x1c4>)
10009090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
10009094:	6013      	str	r3, [r2, #0]
10009096:	f3bf 8f4f 	dsb	sy
1000909a:	f3bf 8f6f 	isb	sy
1000909e:	e007      	b.n	100090b0 <prvTimerTask+0x78>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
100090a0:	2401      	movs	r4, #1
100090a2:	e7d8      	b.n	10009056 <prvTimerTask+0x1e>
		prvSwitchTimerLists();
100090a4:	f7ff ff94 	bl	10008fd0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
100090a8:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
100090ac:	f7ff fb04 	bl	100086b8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
100090b0:	f04f 0b00 	mov.w	fp, #0
100090b4:	e045      	b.n	10009142 <prvTimerTask+0x10a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
100090b6:	4583      	cmp	fp, r0
100090b8:	d8e0      	bhi.n	1000907c <prvTimerTask+0x44>
				( void ) xTaskResumeAll();
100090ba:	f7ff fafd 	bl	100086b8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
100090be:	f8d9 3000 	ldr.w	r3, [r9]
100090c2:	68db      	ldr	r3, [r3, #12]
100090c4:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
100090c6:	1d28      	adds	r0, r5, #4
100090c8:	f000 f8cb 	bl	10009262 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
100090cc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
100090d0:	0758      	lsls	r0, r3, #29
100090d2:	d512      	bpl.n	100090fa <prvTimerTask+0xc2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
100090d4:	69a9      	ldr	r1, [r5, #24]
100090d6:	465b      	mov	r3, fp
100090d8:	4652      	mov	r2, sl
100090da:	4459      	add	r1, fp
100090dc:	4628      	mov	r0, r5
100090de:	f7ff ff1b 	bl	10008f18 <prvInsertTimerInActiveList>
100090e2:	b130      	cbz	r0, 100090f2 <prvTimerTask+0xba>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
100090e4:	9400      	str	r4, [sp, #0]
100090e6:	4623      	mov	r3, r4
100090e8:	465a      	mov	r2, fp
100090ea:	4621      	mov	r1, r4
100090ec:	4628      	mov	r0, r5
100090ee:	f7ff ff4d 	bl	10008f8c <xTimerGenericCommand>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
100090f2:	6a2b      	ldr	r3, [r5, #32]
100090f4:	4628      	mov	r0, r5
100090f6:	4798      	blx	r3
}
100090f8:	e7da      	b.n	100090b0 <prvTimerTask+0x78>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100090fa:	f023 0301 	bic.w	r3, r3, #1
100090fe:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
10009102:	e7f6      	b.n	100090f2 <prvTimerTask+0xba>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
10009104:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
10009108:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
1000910a:	f043 0301 	orr.w	r3, r3, #1
1000910e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
10009112:	9b04      	ldr	r3, [sp, #16]
10009114:	462a      	mov	r2, r5
10009116:	4419      	add	r1, r3
10009118:	4620      	mov	r0, r4
1000911a:	f7ff fefd 	bl	10008f18 <prvInsertTimerInActiveList>
1000911e:	b180      	cbz	r0, 10009142 <prvTimerTask+0x10a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
10009120:	6a23      	ldr	r3, [r4, #32]
10009122:	4620      	mov	r0, r4
10009124:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
10009126:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
1000912a:	0759      	lsls	r1, r3, #29
1000912c:	d509      	bpl.n	10009142 <prvTimerTask+0x10a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1000912e:	69a2      	ldr	r2, [r4, #24]
10009130:	9904      	ldr	r1, [sp, #16]
10009132:	f8cd b000 	str.w	fp, [sp]
10009136:	2300      	movs	r3, #0
10009138:	440a      	add	r2, r1
1000913a:	4620      	mov	r0, r4
1000913c:	4619      	mov	r1, r3
1000913e:	f7ff ff25 	bl	10008f8c <xTimerGenericCommand>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
10009142:	6838      	ldr	r0, [r7, #0]
10009144:	2200      	movs	r2, #0
10009146:	a903      	add	r1, sp, #12
10009148:	f7ff f800 	bl	1000814c <xQueueReceive>
1000914c:	2800      	cmp	r0, #0
1000914e:	f43f af78 	beq.w	10009042 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
10009152:	9b03      	ldr	r3, [sp, #12]
10009154:	2b00      	cmp	r3, #0
10009156:	dbf4      	blt.n	10009142 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
10009158:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1000915a:	6963      	ldr	r3, [r4, #20]
1000915c:	b113      	cbz	r3, 10009164 <prvTimerTask+0x12c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1000915e:	1d20      	adds	r0, r4, #4
10009160:	f000 f87f 	bl	10009262 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
10009164:	f7ff fa16 	bl	10008594 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
10009168:	f8d8 3000 	ldr.w	r3, [r8]
1000916c:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
1000916e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
10009170:	d201      	bcs.n	10009176 <prvTimerTask+0x13e>
		prvSwitchTimerLists();
10009172:	f7ff ff2d 	bl	10008fd0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
10009176:	9b03      	ldr	r3, [sp, #12]
10009178:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
1000917c:	2b09      	cmp	r3, #9
1000917e:	d8e0      	bhi.n	10009142 <prvTimerTask+0x10a>
10009180:	a201      	add	r2, pc, #4	; (adr r2, 10009188 <prvTimerTask+0x150>)
10009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009186:	bf00      	nop
10009188:	10009105 	.word	0x10009105
1000918c:	10009105 	.word	0x10009105
10009190:	10009105 	.word	0x10009105
10009194:	100091b1 	.word	0x100091b1
10009198:	100091bf 	.word	0x100091bf
1000919c:	100091dd 	.word	0x100091dd
100091a0:	10009105 	.word	0x10009105
100091a4:	10009105 	.word	0x10009105
100091a8:	100091b1 	.word	0x100091b1
100091ac:	100091bf 	.word	0x100091bf
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100091b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100091b4:	f023 0301 	bic.w	r3, r3, #1
100091b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
100091bc:	e7c1      	b.n	10009142 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
100091be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
100091c2:	9904      	ldr	r1, [sp, #16]
100091c4:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
100091c6:	f043 0301 	orr.w	r3, r3, #1
100091ca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
100091ce:	462a      	mov	r2, r5
100091d0:	462b      	mov	r3, r5
100091d2:	4429      	add	r1, r5
100091d4:	4620      	mov	r0, r4
100091d6:	f7ff fe9f 	bl	10008f18 <prvInsertTimerInActiveList>
					break;
100091da:	e7b2      	b.n	10009142 <prvTimerTask+0x10a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
100091dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
100091e0:	079a      	lsls	r2, r3, #30
100091e2:	d4e7      	bmi.n	100091b4 <prvTimerTask+0x17c>
							vPortFree( pxTimer );
100091e4:	4620      	mov	r0, r4
100091e6:	f7ff fe51 	bl	10008e8c <vPortFree>
100091ea:	e7aa      	b.n	10009142 <prvTimerTask+0x10a>
100091ec:	200110b0 	.word	0x200110b0
100091f0:	200110e0 	.word	0x200110e0
100091f4:	200110e4 	.word	0x200110e4
100091f8:	200110b4 	.word	0x200110b4
100091fc:	e000ed04 	.word	0xe000ed04

10009200 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10009200:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
10009204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10009208:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1000920c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1000920e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
10009210:	2300      	movs	r3, #0
10009212:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
10009214:	4770      	bx	lr

10009216 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
10009216:	2300      	movs	r3, #0
10009218:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1000921a:	4770      	bx	lr

1000921c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1000921c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1000921e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
10009220:	689a      	ldr	r2, [r3, #8]
10009222:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
10009224:	689a      	ldr	r2, [r3, #8]
10009226:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
10009228:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
1000922a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
1000922c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
1000922e:	3301      	adds	r3, #1
10009230:	6003      	str	r3, [r0, #0]
}
10009232:	4770      	bx	lr

10009234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
10009234:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
10009236:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
10009238:	1c63      	adds	r3, r4, #1
1000923a:	d10a      	bne.n	10009252 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1000923c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1000923e:	685a      	ldr	r2, [r3, #4]
10009240:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
10009242:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
10009244:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
10009246:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
10009248:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
1000924a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
1000924c:	3301      	adds	r3, #1
1000924e:	6003      	str	r3, [r0, #0]
}
10009250:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
10009252:	f100 0208 	add.w	r2, r0, #8
10009256:	4613      	mov	r3, r2
10009258:	6852      	ldr	r2, [r2, #4]
1000925a:	6815      	ldr	r5, [r2, #0]
1000925c:	42a5      	cmp	r5, r4
1000925e:	d9fa      	bls.n	10009256 <vListInsert+0x22>
10009260:	e7ed      	b.n	1000923e <vListInsert+0xa>

10009262 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
10009262:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
10009266:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
10009268:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1000926a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1000926c:	6859      	ldr	r1, [r3, #4]
1000926e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
10009270:	bf08      	it	eq
10009272:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
10009274:	2200      	movs	r2, #0
10009276:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
10009278:	681a      	ldr	r2, [r3, #0]
1000927a:	3a01      	subs	r2, #1
1000927c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1000927e:	6818      	ldr	r0, [r3, #0]
}
10009280:	4770      	bx	lr
	...

10009284 <PalBbLoadCfg>:
10009284:	2314      	movs	r3, #20
10009286:	8003      	strh	r3, [r0, #0]
10009288:	4a03      	ldr	r2, [pc, #12]	; (10009298 <PalBbLoadCfg+0x14>)
1000928a:	2396      	movs	r3, #150	; 0x96
1000928c:	7083      	strb	r3, [r0, #2]
1000928e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10009292:	e9c0 2301 	strd	r2, r3, [r0, #4]
10009296:	4770      	bx	lr
10009298:	01f403e8 	.word	0x01f403e8

1000929c <dbb_clear_pending_rx_ints>:
1000929c:	4a10      	ldr	r2, [pc, #64]	; (100092e0 <dbb_clear_pending_rx_ints+0x44>)
1000929e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
100092a2:	b29b      	uxth	r3, r3
100092a4:	b113      	cbz	r3, 100092ac <dbb_clear_pending_rx_ints+0x10>
100092a6:	2300      	movs	r3, #0
100092a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
100092ac:	4b0d      	ldr	r3, [pc, #52]	; (100092e4 <dbb_clear_pending_rx_ints+0x48>)
100092ae:	f44f 7280 	mov.w	r2, #256	; 0x100
100092b2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
100092b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
100092ba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
100092be:	f44f 6200 	mov.w	r2, #2048	; 0x800
100092c2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
100092c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
100092ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
100092ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100092d2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
100092d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
100092da:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
100092de:	4770      	bx	lr
100092e0:	40051000 	.word	0x40051000
100092e4:	e000e100 	.word	0xe000e100

100092e8 <BTLE_TX_DONE_IRQHandler>:
100092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100092ea:	2000      	movs	r0, #0
100092ec:	f000 f92d 	bl	1000954a <ll_dbg_pin_assert>
100092f0:	2432      	movs	r4, #50	; 0x32
100092f2:	3c01      	subs	r4, #1
100092f4:	d10c      	bne.n	10009310 <BTLE_TX_DONE_IRQHandler+0x28>
100092f6:	4f13      	ldr	r7, [pc, #76]	; (10009344 <BTLE_TX_DONE_IRQHandler+0x5c>)
100092f8:	4d13      	ldr	r5, [pc, #76]	; (10009348 <BTLE_TX_DONE_IRQHandler+0x60>)
100092fa:	6f3e      	ldr	r6, [r7, #112]	; 0x70
100092fc:	682b      	ldr	r3, [r5, #0]
100092fe:	1af3      	subs	r3, r6, r3
10009300:	2b07      	cmp	r3, #7
10009302:	d807      	bhi.n	10009314 <BTLE_TX_DONE_IRQHandler+0x2c>
10009304:	602e      	str	r6, [r5, #0]
10009306:	2000      	movs	r0, #0
10009308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1000930c:	f000 b924 	b.w	10009558 <ll_dbg_pin_deassert>
10009310:	bf00      	nop
10009312:	e7ee      	b.n	100092f2 <BTLE_TX_DONE_IRQHandler+0xa>
10009314:	2001      	movs	r0, #1
10009316:	f000 f91f 	bl	10009558 <ll_dbg_pin_deassert>
1000931a:	4b0c      	ldr	r3, [pc, #48]	; (1000934c <BTLE_TX_DONE_IRQHandler+0x64>)
1000931c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
10009320:	605a      	str	r2, [r3, #4]
10009322:	4b0b      	ldr	r3, [pc, #44]	; (10009350 <BTLE_TX_DONE_IRQHandler+0x68>)
10009324:	602e      	str	r6, [r5, #0]
10009326:	f64f 72ff 	movw	r2, #65535	; 0xffff
1000932a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
1000932e:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
10009332:	4b08      	ldr	r3, [pc, #32]	; (10009354 <BTLE_TX_DONE_IRQHandler+0x6c>)
10009334:	6f38      	ldr	r0, [r7, #112]	; 0x70
10009336:	6058      	str	r0, [r3, #4]
10009338:	681b      	ldr	r3, [r3, #0]
1000933a:	2b00      	cmp	r3, #0
1000933c:	d0e3      	beq.n	10009306 <BTLE_TX_DONE_IRQHandler+0x1e>
1000933e:	4798      	blx	r3
10009340:	e7e1      	b.n	10009306 <BTLE_TX_DONE_IRQHandler+0x1e>
10009342:	bf00      	nop
10009344:	40051000 	.word	0x40051000
10009348:	2001112c 	.word	0x2001112c
1000934c:	e000e100 	.word	0xe000e100
10009350:	40052000 	.word	0x40052000
10009354:	200110ec 	.word	0x200110ec

10009358 <BTLE_RX_RCVD_IRQHandler>:
10009358:	b508      	push	{r3, lr}
1000935a:	2000      	movs	r0, #0
1000935c:	f000 f8f5 	bl	1000954a <ll_dbg_pin_assert>
10009360:	2002      	movs	r0, #2
10009362:	f000 f8f9 	bl	10009558 <ll_dbg_pin_deassert>
10009366:	2332      	movs	r3, #50	; 0x32
10009368:	3b01      	subs	r3, #1
1000936a:	d114      	bne.n	10009396 <BTLE_RX_RCVD_IRQHandler+0x3e>
1000936c:	4a0b      	ldr	r2, [pc, #44]	; (1000939c <BTLE_RX_RCVD_IRQHandler+0x44>)
1000936e:	f64f 71ff 	movw	r1, #65535	; 0xffff
10009372:	f8a2 106e 	strh.w	r1, [r2, #110]	; 0x6e
10009376:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
1000937a:	4b09      	ldr	r3, [pc, #36]	; (100093a0 <BTLE_RX_RCVD_IRQHandler+0x48>)
1000937c:	6f58      	ldr	r0, [r3, #116]	; 0x74
1000937e:	4b09      	ldr	r3, [pc, #36]	; (100093a4 <BTLE_RX_RCVD_IRQHandler+0x4c>)
10009380:	60d8      	str	r0, [r3, #12]
10009382:	689b      	ldr	r3, [r3, #8]
10009384:	b103      	cbz	r3, 10009388 <BTLE_RX_RCVD_IRQHandler+0x30>
10009386:	4798      	blx	r3
10009388:	f7ff ff88 	bl	1000929c <dbb_clear_pending_rx_ints>
1000938c:	2014      	movs	r0, #20
1000938e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10009392:	f000 b8e1 	b.w	10009558 <ll_dbg_pin_deassert>
10009396:	bf00      	nop
10009398:	e7e6      	b.n	10009368 <BTLE_RX_RCVD_IRQHandler+0x10>
1000939a:	bf00      	nop
1000939c:	40052000 	.word	0x40052000
100093a0:	40051000 	.word	0x40051000
100093a4:	200110ec 	.word	0x200110ec

100093a8 <BTLE_SFD_DET_IRQHandler>:
100093a8:	b508      	push	{r3, lr}
100093aa:	2000      	movs	r0, #0
100093ac:	f000 f8cd 	bl	1000954a <ll_dbg_pin_assert>
100093b0:	2000      	movs	r0, #0
100093b2:	f000 f8ca 	bl	1000954a <ll_dbg_pin_assert>
100093b6:	2332      	movs	r3, #50	; 0x32
100093b8:	3b01      	subs	r3, #1
100093ba:	d10e      	bne.n	100093da <BTLE_SFD_DET_IRQHandler+0x32>
100093bc:	4b08      	ldr	r3, [pc, #32]	; (100093e0 <BTLE_SFD_DET_IRQHandler+0x38>)
100093be:	6f98      	ldr	r0, [r3, #120]	; 0x78
100093c0:	4b08      	ldr	r3, [pc, #32]	; (100093e4 <BTLE_SFD_DET_IRQHandler+0x3c>)
100093c2:	6158      	str	r0, [r3, #20]
100093c4:	691b      	ldr	r3, [r3, #16]
100093c6:	b103      	cbz	r3, 100093ca <BTLE_SFD_DET_IRQHandler+0x22>
100093c8:	4798      	blx	r3
100093ca:	2000      	movs	r0, #0
100093cc:	f000 f8c4 	bl	10009558 <ll_dbg_pin_deassert>
100093d0:	2000      	movs	r0, #0
100093d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
100093d6:	f000 b8bf 	b.w	10009558 <ll_dbg_pin_deassert>
100093da:	bf00      	nop
100093dc:	e7ec      	b.n	100093b8 <BTLE_SFD_DET_IRQHandler+0x10>
100093de:	bf00      	nop
100093e0:	40051000 	.word	0x40051000
100093e4:	200110ec 	.word	0x200110ec

100093e8 <BTLE_SFD_TO_IRQHandler>:
100093e8:	b508      	push	{r3, lr}
100093ea:	2008      	movs	r0, #8
100093ec:	f000 f8ad 	bl	1000954a <ll_dbg_pin_assert>
100093f0:	2002      	movs	r0, #2
100093f2:	f000 f8b1 	bl	10009558 <ll_dbg_pin_deassert>
100093f6:	2332      	movs	r3, #50	; 0x32
100093f8:	3b01      	subs	r3, #1
100093fa:	d114      	bne.n	10009426 <BTLE_SFD_TO_IRQHandler+0x3e>
100093fc:	4a0b      	ldr	r2, [pc, #44]	; (1000942c <BTLE_SFD_TO_IRQHandler+0x44>)
100093fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
10009402:	f8a2 106e 	strh.w	r1, [r2, #110]	; 0x6e
10009406:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
1000940a:	4b09      	ldr	r3, [pc, #36]	; (10009430 <BTLE_SFD_TO_IRQHandler+0x48>)
1000940c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
1000940e:	4b09      	ldr	r3, [pc, #36]	; (10009434 <BTLE_SFD_TO_IRQHandler+0x4c>)
10009410:	61d8      	str	r0, [r3, #28]
10009412:	699b      	ldr	r3, [r3, #24]
10009414:	b103      	cbz	r3, 10009418 <BTLE_SFD_TO_IRQHandler+0x30>
10009416:	4798      	blx	r3
10009418:	f7ff ff40 	bl	1000929c <dbb_clear_pending_rx_ints>
1000941c:	2008      	movs	r0, #8
1000941e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10009422:	f000 b899 	b.w	10009558 <ll_dbg_pin_deassert>
10009426:	bf00      	nop
10009428:	e7e6      	b.n	100093f8 <BTLE_SFD_TO_IRQHandler+0x10>
1000942a:	bf00      	nop
1000942c:	40052000 	.word	0x40052000
10009430:	40051000 	.word	0x40051000
10009434:	200110ec 	.word	0x200110ec

10009438 <BTLE_RX_ENG_DET_IRQHandler>:
10009438:	b508      	push	{r3, lr}
1000943a:	2000      	movs	r0, #0
1000943c:	f000 f885 	bl	1000954a <ll_dbg_pin_assert>
10009440:	2332      	movs	r3, #50	; 0x32
10009442:	3b01      	subs	r3, #1
10009444:	d10c      	bne.n	10009460 <BTLE_RX_ENG_DET_IRQHandler+0x28>
10009446:	4b07      	ldr	r3, [pc, #28]	; (10009464 <BTLE_RX_ENG_DET_IRQHandler+0x2c>)
10009448:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
1000944c:	4b06      	ldr	r3, [pc, #24]	; (10009468 <BTLE_RX_ENG_DET_IRQHandler+0x30>)
1000944e:	6258      	str	r0, [r3, #36]	; 0x24
10009450:	6a1b      	ldr	r3, [r3, #32]
10009452:	b103      	cbz	r3, 10009456 <BTLE_RX_ENG_DET_IRQHandler+0x1e>
10009454:	4798      	blx	r3
10009456:	2000      	movs	r0, #0
10009458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000945c:	f000 b87c 	b.w	10009558 <ll_dbg_pin_deassert>
10009460:	bf00      	nop
10009462:	e7ee      	b.n	10009442 <BTLE_RX_ENG_DET_IRQHandler+0xa>
10009464:	40051000 	.word	0x40051000
10009468:	200110ec 	.word	0x200110ec

1000946c <BTLE_GP_EVENT_IRQHandler>:
1000946c:	b508      	push	{r3, lr}
1000946e:	2000      	movs	r0, #0
10009470:	f000 f86b 	bl	1000954a <ll_dbg_pin_assert>
10009474:	2332      	movs	r3, #50	; 0x32
10009476:	3b01      	subs	r3, #1
10009478:	d10b      	bne.n	10009492 <BTLE_GP_EVENT_IRQHandler+0x26>
1000947a:	4b07      	ldr	r3, [pc, #28]	; (10009498 <BTLE_GP_EVENT_IRQHandler+0x2c>)
1000947c:	6d18      	ldr	r0, [r3, #80]	; 0x50
1000947e:	4b07      	ldr	r3, [pc, #28]	; (1000949c <BTLE_GP_EVENT_IRQHandler+0x30>)
10009480:	62d8      	str	r0, [r3, #44]	; 0x2c
10009482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10009484:	b103      	cbz	r3, 10009488 <BTLE_GP_EVENT_IRQHandler+0x1c>
10009486:	4798      	blx	r3
10009488:	2000      	movs	r0, #0
1000948a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000948e:	f000 b863 	b.w	10009558 <ll_dbg_pin_deassert>
10009492:	bf00      	nop
10009494:	e7ef      	b.n	10009476 <BTLE_GP_EVENT_IRQHandler+0xa>
10009496:	bf00      	nop
10009498:	40051000 	.word	0x40051000
1000949c:	200110ec 	.word	0x200110ec

100094a0 <BTLE_RFFE_SPIM_IRQHandler>:
100094a0:	b508      	push	{r3, lr}
100094a2:	2000      	movs	r0, #0
100094a4:	f000 f851 	bl	1000954a <ll_dbg_pin_assert>
100094a8:	2000      	movs	r0, #0
100094aa:	f000 f84e 	bl	1000954a <ll_dbg_pin_assert>
100094ae:	2332      	movs	r3, #50	; 0x32
100094b0:	3b01      	subs	r3, #1
100094b2:	d10e      	bne.n	100094d2 <BTLE_RFFE_SPIM_IRQHandler+0x32>
100094b4:	4b08      	ldr	r3, [pc, #32]	; (100094d8 <BTLE_RFFE_SPIM_IRQHandler+0x38>)
100094b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
100094b8:	4b08      	ldr	r3, [pc, #32]	; (100094dc <BTLE_RFFE_SPIM_IRQHandler+0x3c>)
100094ba:	6358      	str	r0, [r3, #52]	; 0x34
100094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100094be:	b103      	cbz	r3, 100094c2 <BTLE_RFFE_SPIM_IRQHandler+0x22>
100094c0:	4798      	blx	r3
100094c2:	2000      	movs	r0, #0
100094c4:	f000 f848 	bl	10009558 <ll_dbg_pin_deassert>
100094c8:	2000      	movs	r0, #0
100094ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
100094ce:	f000 b843 	b.w	10009558 <ll_dbg_pin_deassert>
100094d2:	bf00      	nop
100094d4:	e7ec      	b.n	100094b0 <BTLE_RFFE_SPIM_IRQHandler+0x10>
100094d6:	bf00      	nop
100094d8:	40051000 	.word	0x40051000
100094dc:	200110ec 	.word	0x200110ec

100094e0 <BTLE_CFO_IRQHandler>:
100094e0:	b508      	push	{r3, lr}
100094e2:	2000      	movs	r0, #0
100094e4:	f000 f831 	bl	1000954a <ll_dbg_pin_assert>
100094e8:	2332      	movs	r3, #50	; 0x32
100094ea:	3b01      	subs	r3, #1
100094ec:	d10b      	bne.n	10009506 <BTLE_CFO_IRQHandler+0x26>
100094ee:	4b07      	ldr	r3, [pc, #28]	; (1000950c <BTLE_CFO_IRQHandler+0x2c>)
100094f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
100094f2:	4b07      	ldr	r3, [pc, #28]	; (10009510 <BTLE_CFO_IRQHandler+0x30>)
100094f4:	63d8      	str	r0, [r3, #60]	; 0x3c
100094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100094f8:	b103      	cbz	r3, 100094fc <BTLE_CFO_IRQHandler+0x1c>
100094fa:	4798      	blx	r3
100094fc:	2000      	movs	r0, #0
100094fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10009502:	f000 b829 	b.w	10009558 <ll_dbg_pin_deassert>
10009506:	bf00      	nop
10009508:	e7ef      	b.n	100094ea <BTLE_CFO_IRQHandler+0xa>
1000950a:	bf00      	nop
1000950c:	40051000 	.word	0x40051000
10009510:	200110ec 	.word	0x200110ec

10009514 <BTLE_SIG_DET_IRQHandler>:
10009514:	2000      	movs	r0, #0
10009516:	b508      	push	{r3, lr}
10009518:	f000 f817 	bl	1000954a <ll_dbg_pin_assert>
1000951c:	2032      	movs	r0, #50	; 0x32
1000951e:	3801      	subs	r0, #1
10009520:	d10a      	bne.n	10009538 <BTLE_SIG_DET_IRQHandler+0x24>
10009522:	4b06      	ldr	r3, [pc, #24]	; (1000953c <BTLE_SIG_DET_IRQHandler+0x28>)
10009524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
10009528:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
1000952c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
10009530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10009534:	f000 b810 	b.w	10009558 <ll_dbg_pin_deassert>
10009538:	bf00      	nop
1000953a:	e7f0      	b.n	1000951e <BTLE_SIG_DET_IRQHandler+0xa>
1000953c:	e000e100 	.word	0xe000e100

10009540 <BTLE_AGC_EVENT_IRQHandler>:
10009540:	4770      	bx	lr

10009542 <BTLE_TX_AES_IRQHandler>:
10009542:	4770      	bx	lr

10009544 <BTLE_RX_AES_IRQHandler>:
10009544:	4770      	bx	lr

10009546 <BTLE_INV_APB_ADDR_IRQHandler>:
10009546:	4770      	bx	lr

10009548 <BTLE_IQ_DATA_VALID_IRQHandler>:
10009548:	4770      	bx	lr

1000954a <ll_dbg_pin_assert>:
1000954a:	b120      	cbz	r0, 10009556 <ll_dbg_pin_assert+0xc>
1000954c:	f060 007f 	orn	r0, r0, #127	; 0x7f
10009550:	b2c0      	uxtb	r0, r0
10009552:	f7fc b911 	b.w	10005778 <PalLedOn>
10009556:	4770      	bx	lr

10009558 <ll_dbg_pin_deassert>:
10009558:	b120      	cbz	r0, 10009564 <ll_dbg_pin_deassert+0xc>
1000955a:	f060 007f 	orn	r0, r0, #127	; 0x7f
1000955e:	b2c0      	uxtb	r0, r0
10009560:	f7fc b92a 	b.w	100057b8 <PalLedOff>
10009564:	4770      	bx	lr
	...

10009568 <atexit>:
10009568:	2300      	movs	r3, #0
1000956a:	4601      	mov	r1, r0
1000956c:	461a      	mov	r2, r3
1000956e:	4618      	mov	r0, r3
10009570:	f002 b838 	b.w	1000b5e4 <__register_exitproc>

10009574 <atoi>:
10009574:	220a      	movs	r2, #10
10009576:	2100      	movs	r1, #0
10009578:	f000 bcf8 	b.w	10009f6c <strtol>

1000957c <_atoi_r>:
1000957c:	230a      	movs	r3, #10
1000957e:	2200      	movs	r2, #0
10009580:	f000 bce6 	b.w	10009f50 <_strtol_r>

10009584 <__errno>:
10009584:	4b01      	ldr	r3, [pc, #4]	; (1000958c <__errno+0x8>)
10009586:	6818      	ldr	r0, [r3, #0]
10009588:	4770      	bx	lr
1000958a:	bf00      	nop
1000958c:	200000a0 	.word	0x200000a0

10009590 <__libc_fini_array>:
10009590:	b538      	push	{r3, r4, r5, lr}
10009592:	4c0a      	ldr	r4, [pc, #40]	; (100095bc <__libc_fini_array+0x2c>)
10009594:	4d0a      	ldr	r5, [pc, #40]	; (100095c0 <__libc_fini_array+0x30>)
10009596:	1b64      	subs	r4, r4, r5
10009598:	10a4      	asrs	r4, r4, #2
1000959a:	d00a      	beq.n	100095b2 <__libc_fini_array+0x22>
1000959c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
100095a0:	3b01      	subs	r3, #1
100095a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
100095a6:	3c01      	subs	r4, #1
100095a8:	f855 3904 	ldr.w	r3, [r5], #-4
100095ac:	4798      	blx	r3
100095ae:	2c00      	cmp	r4, #0
100095b0:	d1f9      	bne.n	100095a6 <__libc_fini_array+0x16>
100095b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
100095b6:	f007 bc2b 	b.w	10010e10 <_fini>
100095ba:	bf00      	nop
100095bc:	20000a58 	.word	0x20000a58
100095c0:	20000a54 	.word	0x20000a54

100095c4 <__libc_init_array>:
100095c4:	b570      	push	{r4, r5, r6, lr}
100095c6:	4e0d      	ldr	r6, [pc, #52]	; (100095fc <__libc_init_array+0x38>)
100095c8:	4d0d      	ldr	r5, [pc, #52]	; (10009600 <__libc_init_array+0x3c>)
100095ca:	1b76      	subs	r6, r6, r5
100095cc:	10b6      	asrs	r6, r6, #2
100095ce:	d006      	beq.n	100095de <__libc_init_array+0x1a>
100095d0:	2400      	movs	r4, #0
100095d2:	3401      	adds	r4, #1
100095d4:	f855 3b04 	ldr.w	r3, [r5], #4
100095d8:	4798      	blx	r3
100095da:	42a6      	cmp	r6, r4
100095dc:	d1f9      	bne.n	100095d2 <__libc_init_array+0xe>
100095de:	4e09      	ldr	r6, [pc, #36]	; (10009604 <__libc_init_array+0x40>)
100095e0:	4d09      	ldr	r5, [pc, #36]	; (10009608 <__libc_init_array+0x44>)
100095e2:	1b76      	subs	r6, r6, r5
100095e4:	f007 fc0e 	bl	10010e04 <_init>
100095e8:	10b6      	asrs	r6, r6, #2
100095ea:	d006      	beq.n	100095fa <__libc_init_array+0x36>
100095ec:	2400      	movs	r4, #0
100095ee:	3401      	adds	r4, #1
100095f0:	f855 3b04 	ldr.w	r3, [r5], #4
100095f4:	4798      	blx	r3
100095f6:	42a6      	cmp	r6, r4
100095f8:	d1f9      	bne.n	100095ee <__libc_init_array+0x2a>
100095fa:	bd70      	pop	{r4, r5, r6, pc}
100095fc:	20000a4c 	.word	0x20000a4c
10009600:	20000a4c 	.word	0x20000a4c
10009604:	20000a54 	.word	0x20000a54
10009608:	20000a4c 	.word	0x20000a4c

1000960c <memcpy>:
1000960c:	4684      	mov	ip, r0
1000960e:	ea41 0300 	orr.w	r3, r1, r0
10009612:	f013 0303 	ands.w	r3, r3, #3
10009616:	d16d      	bne.n	100096f4 <memcpy+0xe8>
10009618:	3a40      	subs	r2, #64	; 0x40
1000961a:	d341      	bcc.n	100096a0 <memcpy+0x94>
1000961c:	f851 3b04 	ldr.w	r3, [r1], #4
10009620:	f840 3b04 	str.w	r3, [r0], #4
10009624:	f851 3b04 	ldr.w	r3, [r1], #4
10009628:	f840 3b04 	str.w	r3, [r0], #4
1000962c:	f851 3b04 	ldr.w	r3, [r1], #4
10009630:	f840 3b04 	str.w	r3, [r0], #4
10009634:	f851 3b04 	ldr.w	r3, [r1], #4
10009638:	f840 3b04 	str.w	r3, [r0], #4
1000963c:	f851 3b04 	ldr.w	r3, [r1], #4
10009640:	f840 3b04 	str.w	r3, [r0], #4
10009644:	f851 3b04 	ldr.w	r3, [r1], #4
10009648:	f840 3b04 	str.w	r3, [r0], #4
1000964c:	f851 3b04 	ldr.w	r3, [r1], #4
10009650:	f840 3b04 	str.w	r3, [r0], #4
10009654:	f851 3b04 	ldr.w	r3, [r1], #4
10009658:	f840 3b04 	str.w	r3, [r0], #4
1000965c:	f851 3b04 	ldr.w	r3, [r1], #4
10009660:	f840 3b04 	str.w	r3, [r0], #4
10009664:	f851 3b04 	ldr.w	r3, [r1], #4
10009668:	f840 3b04 	str.w	r3, [r0], #4
1000966c:	f851 3b04 	ldr.w	r3, [r1], #4
10009670:	f840 3b04 	str.w	r3, [r0], #4
10009674:	f851 3b04 	ldr.w	r3, [r1], #4
10009678:	f840 3b04 	str.w	r3, [r0], #4
1000967c:	f851 3b04 	ldr.w	r3, [r1], #4
10009680:	f840 3b04 	str.w	r3, [r0], #4
10009684:	f851 3b04 	ldr.w	r3, [r1], #4
10009688:	f840 3b04 	str.w	r3, [r0], #4
1000968c:	f851 3b04 	ldr.w	r3, [r1], #4
10009690:	f840 3b04 	str.w	r3, [r0], #4
10009694:	f851 3b04 	ldr.w	r3, [r1], #4
10009698:	f840 3b04 	str.w	r3, [r0], #4
1000969c:	3a40      	subs	r2, #64	; 0x40
1000969e:	d2bd      	bcs.n	1000961c <memcpy+0x10>
100096a0:	3230      	adds	r2, #48	; 0x30
100096a2:	d311      	bcc.n	100096c8 <memcpy+0xbc>
100096a4:	f851 3b04 	ldr.w	r3, [r1], #4
100096a8:	f840 3b04 	str.w	r3, [r0], #4
100096ac:	f851 3b04 	ldr.w	r3, [r1], #4
100096b0:	f840 3b04 	str.w	r3, [r0], #4
100096b4:	f851 3b04 	ldr.w	r3, [r1], #4
100096b8:	f840 3b04 	str.w	r3, [r0], #4
100096bc:	f851 3b04 	ldr.w	r3, [r1], #4
100096c0:	f840 3b04 	str.w	r3, [r0], #4
100096c4:	3a10      	subs	r2, #16
100096c6:	d2ed      	bcs.n	100096a4 <memcpy+0x98>
100096c8:	320c      	adds	r2, #12
100096ca:	d305      	bcc.n	100096d8 <memcpy+0xcc>
100096cc:	f851 3b04 	ldr.w	r3, [r1], #4
100096d0:	f840 3b04 	str.w	r3, [r0], #4
100096d4:	3a04      	subs	r2, #4
100096d6:	d2f9      	bcs.n	100096cc <memcpy+0xc0>
100096d8:	3204      	adds	r2, #4
100096da:	d008      	beq.n	100096ee <memcpy+0xe2>
100096dc:	07d2      	lsls	r2, r2, #31
100096de:	bf1c      	itt	ne
100096e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
100096e4:	f800 3b01 	strbne.w	r3, [r0], #1
100096e8:	d301      	bcc.n	100096ee <memcpy+0xe2>
100096ea:	880b      	ldrh	r3, [r1, #0]
100096ec:	8003      	strh	r3, [r0, #0]
100096ee:	4660      	mov	r0, ip
100096f0:	4770      	bx	lr
100096f2:	bf00      	nop
100096f4:	2a08      	cmp	r2, #8
100096f6:	d313      	bcc.n	10009720 <memcpy+0x114>
100096f8:	078b      	lsls	r3, r1, #30
100096fa:	d08d      	beq.n	10009618 <memcpy+0xc>
100096fc:	f010 0303 	ands.w	r3, r0, #3
10009700:	d08a      	beq.n	10009618 <memcpy+0xc>
10009702:	f1c3 0304 	rsb	r3, r3, #4
10009706:	1ad2      	subs	r2, r2, r3
10009708:	07db      	lsls	r3, r3, #31
1000970a:	bf1c      	itt	ne
1000970c:	f811 3b01 	ldrbne.w	r3, [r1], #1
10009710:	f800 3b01 	strbne.w	r3, [r0], #1
10009714:	d380      	bcc.n	10009618 <memcpy+0xc>
10009716:	f831 3b02 	ldrh.w	r3, [r1], #2
1000971a:	f820 3b02 	strh.w	r3, [r0], #2
1000971e:	e77b      	b.n	10009618 <memcpy+0xc>
10009720:	3a04      	subs	r2, #4
10009722:	d3d9      	bcc.n	100096d8 <memcpy+0xcc>
10009724:	3a01      	subs	r2, #1
10009726:	f811 3b01 	ldrb.w	r3, [r1], #1
1000972a:	f800 3b01 	strb.w	r3, [r0], #1
1000972e:	d2f9      	bcs.n	10009724 <memcpy+0x118>
10009730:	780b      	ldrb	r3, [r1, #0]
10009732:	7003      	strb	r3, [r0, #0]
10009734:	784b      	ldrb	r3, [r1, #1]
10009736:	7043      	strb	r3, [r0, #1]
10009738:	788b      	ldrb	r3, [r1, #2]
1000973a:	7083      	strb	r3, [r0, #2]
1000973c:	4660      	mov	r0, ip
1000973e:	4770      	bx	lr

10009740 <memmove>:
10009740:	4288      	cmp	r0, r1
10009742:	b4f0      	push	{r4, r5, r6, r7}
10009744:	d90d      	bls.n	10009762 <memmove+0x22>
10009746:	188b      	adds	r3, r1, r2
10009748:	4283      	cmp	r3, r0
1000974a:	d90a      	bls.n	10009762 <memmove+0x22>
1000974c:	1884      	adds	r4, r0, r2
1000974e:	b132      	cbz	r2, 1000975e <memmove+0x1e>
10009750:	4622      	mov	r2, r4
10009752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
10009756:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000975a:	4299      	cmp	r1, r3
1000975c:	d1f9      	bne.n	10009752 <memmove+0x12>
1000975e:	bcf0      	pop	{r4, r5, r6, r7}
10009760:	4770      	bx	lr
10009762:	2a0f      	cmp	r2, #15
10009764:	d80e      	bhi.n	10009784 <memmove+0x44>
10009766:	4603      	mov	r3, r0
10009768:	1e54      	subs	r4, r2, #1
1000976a:	2a00      	cmp	r2, #0
1000976c:	d0f7      	beq.n	1000975e <memmove+0x1e>
1000976e:	3401      	adds	r4, #1
10009770:	440c      	add	r4, r1
10009772:	3b01      	subs	r3, #1
10009774:	f811 2b01 	ldrb.w	r2, [r1], #1
10009778:	f803 2f01 	strb.w	r2, [r3, #1]!
1000977c:	42a1      	cmp	r1, r4
1000977e:	d1f9      	bne.n	10009774 <memmove+0x34>
10009780:	bcf0      	pop	{r4, r5, r6, r7}
10009782:	4770      	bx	lr
10009784:	ea40 0301 	orr.w	r3, r0, r1
10009788:	079b      	lsls	r3, r3, #30
1000978a:	d13b      	bne.n	10009804 <memmove+0xc4>
1000978c:	f1a2 0710 	sub.w	r7, r2, #16
10009790:	093f      	lsrs	r7, r7, #4
10009792:	f101 0620 	add.w	r6, r1, #32
10009796:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1000979a:	f101 0310 	add.w	r3, r1, #16
1000979e:	f100 0410 	add.w	r4, r0, #16
100097a2:	f853 5c10 	ldr.w	r5, [r3, #-16]
100097a6:	f844 5c10 	str.w	r5, [r4, #-16]
100097aa:	f853 5c0c 	ldr.w	r5, [r3, #-12]
100097ae:	f844 5c0c 	str.w	r5, [r4, #-12]
100097b2:	f853 5c08 	ldr.w	r5, [r3, #-8]
100097b6:	f844 5c08 	str.w	r5, [r4, #-8]
100097ba:	f853 5c04 	ldr.w	r5, [r3, #-4]
100097be:	f844 5c04 	str.w	r5, [r4, #-4]
100097c2:	3310      	adds	r3, #16
100097c4:	42b3      	cmp	r3, r6
100097c6:	f104 0410 	add.w	r4, r4, #16
100097ca:	d1ea      	bne.n	100097a2 <memmove+0x62>
100097cc:	1c7b      	adds	r3, r7, #1
100097ce:	011b      	lsls	r3, r3, #4
100097d0:	f012 0f0c 	tst.w	r2, #12
100097d4:	4419      	add	r1, r3
100097d6:	f002 050f 	and.w	r5, r2, #15
100097da:	4403      	add	r3, r0
100097dc:	d015      	beq.n	1000980a <memmove+0xca>
100097de:	3d04      	subs	r5, #4
100097e0:	08ad      	lsrs	r5, r5, #2
100097e2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
100097e6:	1f1c      	subs	r4, r3, #4
100097e8:	460e      	mov	r6, r1
100097ea:	f856 7b04 	ldr.w	r7, [r6], #4
100097ee:	f844 7f04 	str.w	r7, [r4, #4]!
100097f2:	4564      	cmp	r4, ip
100097f4:	d1f9      	bne.n	100097ea <memmove+0xaa>
100097f6:	3501      	adds	r5, #1
100097f8:	00ad      	lsls	r5, r5, #2
100097fa:	442b      	add	r3, r5
100097fc:	4429      	add	r1, r5
100097fe:	f002 0203 	and.w	r2, r2, #3
10009802:	e7b1      	b.n	10009768 <memmove+0x28>
10009804:	1e54      	subs	r4, r2, #1
10009806:	4603      	mov	r3, r0
10009808:	e7b1      	b.n	1000976e <memmove+0x2e>
1000980a:	462a      	mov	r2, r5
1000980c:	e7ac      	b.n	10009768 <memmove+0x28>
1000980e:	bf00      	nop

10009810 <memset>:
10009810:	b4f0      	push	{r4, r5, r6, r7}
10009812:	0786      	lsls	r6, r0, #30
10009814:	d046      	beq.n	100098a4 <memset+0x94>
10009816:	1e54      	subs	r4, r2, #1
10009818:	2a00      	cmp	r2, #0
1000981a:	d03c      	beq.n	10009896 <memset+0x86>
1000981c:	b2ca      	uxtb	r2, r1
1000981e:	4603      	mov	r3, r0
10009820:	e002      	b.n	10009828 <memset+0x18>
10009822:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
10009826:	d336      	bcc.n	10009896 <memset+0x86>
10009828:	f803 2b01 	strb.w	r2, [r3], #1
1000982c:	079d      	lsls	r5, r3, #30
1000982e:	d1f8      	bne.n	10009822 <memset+0x12>
10009830:	2c03      	cmp	r4, #3
10009832:	d929      	bls.n	10009888 <memset+0x78>
10009834:	b2cd      	uxtb	r5, r1
10009836:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1000983a:	2c0f      	cmp	r4, #15
1000983c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
10009840:	d933      	bls.n	100098aa <memset+0x9a>
10009842:	f1a4 0610 	sub.w	r6, r4, #16
10009846:	0936      	lsrs	r6, r6, #4
10009848:	f103 0720 	add.w	r7, r3, #32
1000984c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
10009850:	f103 0210 	add.w	r2, r3, #16
10009854:	e942 5504 	strd	r5, r5, [r2, #-16]
10009858:	e942 5502 	strd	r5, r5, [r2, #-8]
1000985c:	3210      	adds	r2, #16
1000985e:	42ba      	cmp	r2, r7
10009860:	d1f8      	bne.n	10009854 <memset+0x44>
10009862:	1c72      	adds	r2, r6, #1
10009864:	f014 0f0c 	tst.w	r4, #12
10009868:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1000986c:	f004 060f 	and.w	r6, r4, #15
10009870:	d013      	beq.n	1000989a <memset+0x8a>
10009872:	1f33      	subs	r3, r6, #4
10009874:	f023 0303 	bic.w	r3, r3, #3
10009878:	3304      	adds	r3, #4
1000987a:	4413      	add	r3, r2
1000987c:	f842 5b04 	str.w	r5, [r2], #4
10009880:	4293      	cmp	r3, r2
10009882:	d1fb      	bne.n	1000987c <memset+0x6c>
10009884:	f006 0403 	and.w	r4, r6, #3
10009888:	b12c      	cbz	r4, 10009896 <memset+0x86>
1000988a:	b2c9      	uxtb	r1, r1
1000988c:	441c      	add	r4, r3
1000988e:	f803 1b01 	strb.w	r1, [r3], #1
10009892:	429c      	cmp	r4, r3
10009894:	d1fb      	bne.n	1000988e <memset+0x7e>
10009896:	bcf0      	pop	{r4, r5, r6, r7}
10009898:	4770      	bx	lr
1000989a:	4634      	mov	r4, r6
1000989c:	4613      	mov	r3, r2
1000989e:	2c00      	cmp	r4, #0
100098a0:	d1f3      	bne.n	1000988a <memset+0x7a>
100098a2:	e7f8      	b.n	10009896 <memset+0x86>
100098a4:	4614      	mov	r4, r2
100098a6:	4603      	mov	r3, r0
100098a8:	e7c2      	b.n	10009830 <memset+0x20>
100098aa:	461a      	mov	r2, r3
100098ac:	4626      	mov	r6, r4
100098ae:	e7e0      	b.n	10009872 <memset+0x62>

100098b0 <_printf_r>:
100098b0:	b40e      	push	{r1, r2, r3}
100098b2:	b500      	push	{lr}
100098b4:	b082      	sub	sp, #8
100098b6:	ab03      	add	r3, sp, #12
100098b8:	6881      	ldr	r1, [r0, #8]
100098ba:	f853 2b04 	ldr.w	r2, [r3], #4
100098be:	9301      	str	r3, [sp, #4]
100098c0:	f000 fb62 	bl	10009f88 <_vfprintf_r>
100098c4:	b002      	add	sp, #8
100098c6:	f85d eb04 	ldr.w	lr, [sp], #4
100098ca:	b003      	add	sp, #12
100098cc:	4770      	bx	lr
100098ce:	bf00      	nop

100098d0 <printf>:
100098d0:	b40f      	push	{r0, r1, r2, r3}
100098d2:	b500      	push	{lr}
100098d4:	4907      	ldr	r1, [pc, #28]	; (100098f4 <printf+0x24>)
100098d6:	b083      	sub	sp, #12
100098d8:	ab04      	add	r3, sp, #16
100098da:	6808      	ldr	r0, [r1, #0]
100098dc:	f853 2b04 	ldr.w	r2, [r3], #4
100098e0:	6881      	ldr	r1, [r0, #8]
100098e2:	9301      	str	r3, [sp, #4]
100098e4:	f000 fb50 	bl	10009f88 <_vfprintf_r>
100098e8:	b003      	add	sp, #12
100098ea:	f85d eb04 	ldr.w	lr, [sp], #4
100098ee:	b004      	add	sp, #16
100098f0:	4770      	bx	lr
100098f2:	bf00      	nop
100098f4:	200000a0 	.word	0x200000a0

100098f8 <_puts_r>:
100098f8:	b570      	push	{r4, r5, r6, lr}
100098fa:	4605      	mov	r5, r0
100098fc:	b088      	sub	sp, #32
100098fe:	4608      	mov	r0, r1
10009900:	460c      	mov	r4, r1
10009902:	f000 fa1d 	bl	10009d40 <strlen>
10009906:	4a15      	ldr	r2, [pc, #84]	; (1000995c <_puts_r+0x64>)
10009908:	6bab      	ldr	r3, [r5, #56]	; 0x38
1000990a:	9404      	str	r4, [sp, #16]
1000990c:	2601      	movs	r6, #1
1000990e:	1c44      	adds	r4, r0, #1
10009910:	a904      	add	r1, sp, #16
10009912:	9206      	str	r2, [sp, #24]
10009914:	2202      	movs	r2, #2
10009916:	9403      	str	r4, [sp, #12]
10009918:	9005      	str	r0, [sp, #20]
1000991a:	68ac      	ldr	r4, [r5, #8]
1000991c:	9607      	str	r6, [sp, #28]
1000991e:	e9cd 1201 	strd	r1, r2, [sp, #4]
10009922:	b1b3      	cbz	r3, 10009952 <_puts_r+0x5a>
10009924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009928:	049a      	lsls	r2, r3, #18
1000992a:	d406      	bmi.n	1000993a <_puts_r+0x42>
1000992c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1000992e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
10009932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
10009936:	81a3      	strh	r3, [r4, #12]
10009938:	6662      	str	r2, [r4, #100]	; 0x64
1000993a:	4621      	mov	r1, r4
1000993c:	4628      	mov	r0, r5
1000993e:	aa01      	add	r2, sp, #4
10009940:	f003 f992 	bl	1000cc68 <__sfvwrite_r>
10009944:	2800      	cmp	r0, #0
10009946:	bf14      	ite	ne
10009948:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1000994c:	200a      	moveq	r0, #10
1000994e:	b008      	add	sp, #32
10009950:	bd70      	pop	{r4, r5, r6, pc}
10009952:	4628      	mov	r0, r5
10009954:	f003 f81e 	bl	1000c994 <__sinit>
10009958:	e7e4      	b.n	10009924 <_puts_r+0x2c>
1000995a:	bf00      	nop
1000995c:	10010a74 	.word	0x10010a74

10009960 <puts>:
10009960:	4b02      	ldr	r3, [pc, #8]	; (1000996c <puts+0xc>)
10009962:	4601      	mov	r1, r0
10009964:	6818      	ldr	r0, [r3, #0]
10009966:	f7ff bfc7 	b.w	100098f8 <_puts_r>
1000996a:	bf00      	nop
1000996c:	200000a0 	.word	0x200000a0
	...
10009980:	eba2 0003 	sub.w	r0, r2, r3
10009984:	4770      	bx	lr
10009986:	bf00      	nop

10009988 <strcmp>:
10009988:	7802      	ldrb	r2, [r0, #0]
1000998a:	780b      	ldrb	r3, [r1, #0]
1000998c:	2a01      	cmp	r2, #1
1000998e:	bf28      	it	cs
10009990:	429a      	cmpcs	r2, r3
10009992:	d1f5      	bne.n	10009980 <puts+0x20>
10009994:	e96d 4504 	strd	r4, r5, [sp, #-16]!
10009998:	ea40 0401 	orr.w	r4, r0, r1
1000999c:	e9cd 6702 	strd	r6, r7, [sp, #8]
100099a0:	f06f 0c00 	mvn.w	ip, #0
100099a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
100099a8:	b312      	cbz	r2, 100099f0 <strcmp+0x68>
100099aa:	ea80 0401 	eor.w	r4, r0, r1
100099ae:	f014 0f07 	tst.w	r4, #7
100099b2:	d16a      	bne.n	10009a8a <strcmp+0x102>
100099b4:	f000 0407 	and.w	r4, r0, #7
100099b8:	f020 0007 	bic.w	r0, r0, #7
100099bc:	f004 0503 	and.w	r5, r4, #3
100099c0:	f021 0107 	bic.w	r1, r1, #7
100099c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
100099c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
100099cc:	f014 0f04 	tst.w	r4, #4
100099d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
100099d4:	fa0c f405 	lsl.w	r4, ip, r5
100099d8:	ea62 0204 	orn	r2, r2, r4
100099dc:	ea66 0604 	orn	r6, r6, r4
100099e0:	d00a      	beq.n	100099f8 <strcmp+0x70>
100099e2:	ea63 0304 	orn	r3, r3, r4
100099e6:	4662      	mov	r2, ip
100099e8:	ea67 0704 	orn	r7, r7, r4
100099ec:	4666      	mov	r6, ip
100099ee:	e003      	b.n	100099f8 <strcmp+0x70>
100099f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
100099f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
100099f8:	fa82 f54c 	uadd8	r5, r2, ip
100099fc:	ea82 0406 	eor.w	r4, r2, r6
10009a00:	faa4 f48c 	sel	r4, r4, ip
10009a04:	bb6c      	cbnz	r4, 10009a62 <strcmp+0xda>
10009a06:	fa83 f54c 	uadd8	r5, r3, ip
10009a0a:	ea83 0507 	eor.w	r5, r3, r7
10009a0e:	faa5 f58c 	sel	r5, r5, ip
10009a12:	b995      	cbnz	r5, 10009a3a <strcmp+0xb2>
10009a14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
10009a18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
10009a1c:	fa82 f54c 	uadd8	r5, r2, ip
10009a20:	ea82 0406 	eor.w	r4, r2, r6
10009a24:	faa4 f48c 	sel	r4, r4, ip
10009a28:	fa83 f54c 	uadd8	r5, r3, ip
10009a2c:	ea83 0507 	eor.w	r5, r3, r7
10009a30:	faa5 f58c 	sel	r5, r5, ip
10009a34:	4325      	orrs	r5, r4
10009a36:	d0db      	beq.n	100099f0 <strcmp+0x68>
10009a38:	b99c      	cbnz	r4, 10009a62 <strcmp+0xda>
10009a3a:	ba2d      	rev	r5, r5
10009a3c:	fab5 f485 	clz	r4, r5
10009a40:	f024 0407 	bic.w	r4, r4, #7
10009a44:	fa27 f104 	lsr.w	r1, r7, r4
10009a48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10009a4c:	fa23 f304 	lsr.w	r3, r3, r4
10009a50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
10009a54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10009a58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10009a5c:	eba0 0001 	sub.w	r0, r0, r1
10009a60:	4770      	bx	lr
10009a62:	ba24      	rev	r4, r4
10009a64:	fab4 f484 	clz	r4, r4
10009a68:	f024 0407 	bic.w	r4, r4, #7
10009a6c:	fa26 f104 	lsr.w	r1, r6, r4
10009a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10009a74:	fa22 f204 	lsr.w	r2, r2, r4
10009a78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
10009a7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10009a80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10009a84:	eba0 0001 	sub.w	r0, r0, r1
10009a88:	4770      	bx	lr
10009a8a:	f014 0f03 	tst.w	r4, #3
10009a8e:	d13c      	bne.n	10009b0a <strcmp+0x182>
10009a90:	f010 0403 	ands.w	r4, r0, #3
10009a94:	d128      	bne.n	10009ae8 <strcmp+0x160>
10009a96:	f850 2b08 	ldr.w	r2, [r0], #8
10009a9a:	f851 3b08 	ldr.w	r3, [r1], #8
10009a9e:	fa82 f54c 	uadd8	r5, r2, ip
10009aa2:	ea82 0503 	eor.w	r5, r2, r3
10009aa6:	faa5 f58c 	sel	r5, r5, ip
10009aaa:	b95d      	cbnz	r5, 10009ac4 <strcmp+0x13c>
10009aac:	f850 2c04 	ldr.w	r2, [r0, #-4]
10009ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
10009ab4:	fa82 f54c 	uadd8	r5, r2, ip
10009ab8:	ea82 0503 	eor.w	r5, r2, r3
10009abc:	faa5 f58c 	sel	r5, r5, ip
10009ac0:	2d00      	cmp	r5, #0
10009ac2:	d0e8      	beq.n	10009a96 <strcmp+0x10e>
10009ac4:	ba2d      	rev	r5, r5
10009ac6:	fab5 f485 	clz	r4, r5
10009aca:	f024 0407 	bic.w	r4, r4, #7
10009ace:	fa23 f104 	lsr.w	r1, r3, r4
10009ad2:	fa22 f204 	lsr.w	r2, r2, r4
10009ad6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
10009ada:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10009ade:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10009ae2:	eba0 0001 	sub.w	r0, r0, r1
10009ae6:	4770      	bx	lr
10009ae8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
10009aec:	f020 0003 	bic.w	r0, r0, #3
10009af0:	f850 2b08 	ldr.w	r2, [r0], #8
10009af4:	f021 0103 	bic.w	r1, r1, #3
10009af8:	f851 3b08 	ldr.w	r3, [r1], #8
10009afc:	fa0c f404 	lsl.w	r4, ip, r4
10009b00:	ea62 0204 	orn	r2, r2, r4
10009b04:	ea63 0304 	orn	r3, r3, r4
10009b08:	e7c9      	b.n	10009a9e <strcmp+0x116>
10009b0a:	f010 0403 	ands.w	r4, r0, #3
10009b0e:	d01a      	beq.n	10009b46 <strcmp+0x1be>
10009b10:	eba1 0104 	sub.w	r1, r1, r4
10009b14:	f020 0003 	bic.w	r0, r0, #3
10009b18:	07e4      	lsls	r4, r4, #31
10009b1a:	f850 2b04 	ldr.w	r2, [r0], #4
10009b1e:	d006      	beq.n	10009b2e <strcmp+0x1a6>
10009b20:	d20f      	bcs.n	10009b42 <strcmp+0x1ba>
10009b22:	788b      	ldrb	r3, [r1, #2]
10009b24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
10009b28:	1ae4      	subs	r4, r4, r3
10009b2a:	d106      	bne.n	10009b3a <strcmp+0x1b2>
10009b2c:	b12b      	cbz	r3, 10009b3a <strcmp+0x1b2>
10009b2e:	78cb      	ldrb	r3, [r1, #3]
10009b30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
10009b34:	1ae4      	subs	r4, r4, r3
10009b36:	d100      	bne.n	10009b3a <strcmp+0x1b2>
10009b38:	b91b      	cbnz	r3, 10009b42 <strcmp+0x1ba>
10009b3a:	4620      	mov	r0, r4
10009b3c:	f85d 4b10 	ldr.w	r4, [sp], #16
10009b40:	4770      	bx	lr
10009b42:	f101 0104 	add.w	r1, r1, #4
10009b46:	f850 2b04 	ldr.w	r2, [r0], #4
10009b4a:	07cc      	lsls	r4, r1, #31
10009b4c:	f021 0103 	bic.w	r1, r1, #3
10009b50:	f851 3b04 	ldr.w	r3, [r1], #4
10009b54:	d848      	bhi.n	10009be8 <strcmp+0x260>
10009b56:	d224      	bcs.n	10009ba2 <strcmp+0x21a>
10009b58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
10009b5c:	fa82 f54c 	uadd8	r5, r2, ip
10009b60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
10009b64:	faa5 f58c 	sel	r5, r5, ip
10009b68:	d10a      	bne.n	10009b80 <strcmp+0x1f8>
10009b6a:	b965      	cbnz	r5, 10009b86 <strcmp+0x1fe>
10009b6c:	f851 3b04 	ldr.w	r3, [r1], #4
10009b70:	ea84 0402 	eor.w	r4, r4, r2
10009b74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
10009b78:	d10e      	bne.n	10009b98 <strcmp+0x210>
10009b7a:	f850 2b04 	ldr.w	r2, [r0], #4
10009b7e:	e7eb      	b.n	10009b58 <strcmp+0x1d0>
10009b80:	ea4f 2313 	mov.w	r3, r3, lsr #8
10009b84:	e055      	b.n	10009c32 <strcmp+0x2aa>
10009b86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
10009b8a:	d14d      	bne.n	10009c28 <strcmp+0x2a0>
10009b8c:	7808      	ldrb	r0, [r1, #0]
10009b8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10009b92:	f1c0 0000 	rsb	r0, r0, #0
10009b96:	4770      	bx	lr
10009b98:	ea4f 6212 	mov.w	r2, r2, lsr #24
10009b9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
10009ba0:	e047      	b.n	10009c32 <strcmp+0x2aa>
10009ba2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
10009ba6:	fa82 f54c 	uadd8	r5, r2, ip
10009baa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
10009bae:	faa5 f58c 	sel	r5, r5, ip
10009bb2:	d10a      	bne.n	10009bca <strcmp+0x242>
10009bb4:	b965      	cbnz	r5, 10009bd0 <strcmp+0x248>
10009bb6:	f851 3b04 	ldr.w	r3, [r1], #4
10009bba:	ea84 0402 	eor.w	r4, r4, r2
10009bbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
10009bc2:	d10c      	bne.n	10009bde <strcmp+0x256>
10009bc4:	f850 2b04 	ldr.w	r2, [r0], #4
10009bc8:	e7eb      	b.n	10009ba2 <strcmp+0x21a>
10009bca:	ea4f 4313 	mov.w	r3, r3, lsr #16
10009bce:	e030      	b.n	10009c32 <strcmp+0x2aa>
10009bd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
10009bd4:	d128      	bne.n	10009c28 <strcmp+0x2a0>
10009bd6:	880b      	ldrh	r3, [r1, #0]
10009bd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
10009bdc:	e029      	b.n	10009c32 <strcmp+0x2aa>
10009bde:	ea4f 4212 	mov.w	r2, r2, lsr #16
10009be2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
10009be6:	e024      	b.n	10009c32 <strcmp+0x2aa>
10009be8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
10009bec:	fa82 f54c 	uadd8	r5, r2, ip
10009bf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
10009bf4:	faa5 f58c 	sel	r5, r5, ip
10009bf8:	d10a      	bne.n	10009c10 <strcmp+0x288>
10009bfa:	b965      	cbnz	r5, 10009c16 <strcmp+0x28e>
10009bfc:	f851 3b04 	ldr.w	r3, [r1], #4
10009c00:	ea84 0402 	eor.w	r4, r4, r2
10009c04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
10009c08:	d109      	bne.n	10009c1e <strcmp+0x296>
10009c0a:	f850 2b04 	ldr.w	r2, [r0], #4
10009c0e:	e7eb      	b.n	10009be8 <strcmp+0x260>
10009c10:	ea4f 6313 	mov.w	r3, r3, lsr #24
10009c14:	e00d      	b.n	10009c32 <strcmp+0x2aa>
10009c16:	f015 0fff 	tst.w	r5, #255	; 0xff
10009c1a:	d105      	bne.n	10009c28 <strcmp+0x2a0>
10009c1c:	680b      	ldr	r3, [r1, #0]
10009c1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
10009c22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
10009c26:	e004      	b.n	10009c32 <strcmp+0x2aa>
10009c28:	f04f 0000 	mov.w	r0, #0
10009c2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10009c30:	4770      	bx	lr
10009c32:	ba12      	rev	r2, r2
10009c34:	ba1b      	rev	r3, r3
10009c36:	fa82 f44c 	uadd8	r4, r2, ip
10009c3a:	ea82 0403 	eor.w	r4, r2, r3
10009c3e:	faa4 f58c 	sel	r5, r4, ip
10009c42:	fab5 f485 	clz	r4, r5
10009c46:	fa02 f204 	lsl.w	r2, r2, r4
10009c4a:	fa03 f304 	lsl.w	r3, r3, r4
10009c4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
10009c52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10009c56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
10009c5a:	4770      	bx	lr

10009c5c <strcpy>:
10009c5c:	ea80 0201 	eor.w	r2, r0, r1
10009c60:	4684      	mov	ip, r0
10009c62:	f012 0f03 	tst.w	r2, #3
10009c66:	d14f      	bne.n	10009d08 <strcpy+0xac>
10009c68:	f011 0f03 	tst.w	r1, #3
10009c6c:	d132      	bne.n	10009cd4 <strcpy+0x78>
10009c6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
10009c72:	f011 0f04 	tst.w	r1, #4
10009c76:	f851 3b04 	ldr.w	r3, [r1], #4
10009c7a:	d00b      	beq.n	10009c94 <strcpy+0x38>
10009c7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
10009c80:	439a      	bics	r2, r3
10009c82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
10009c86:	bf04      	itt	eq
10009c88:	f84c 3b04 	streq.w	r3, [ip], #4
10009c8c:	f851 3b04 	ldreq.w	r3, [r1], #4
10009c90:	d116      	bne.n	10009cc0 <strcpy+0x64>
10009c92:	bf00      	nop
10009c94:	f851 4b04 	ldr.w	r4, [r1], #4
10009c98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
10009c9c:	439a      	bics	r2, r3
10009c9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
10009ca2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
10009ca6:	d10b      	bne.n	10009cc0 <strcpy+0x64>
10009ca8:	f84c 3b04 	str.w	r3, [ip], #4
10009cac:	43a2      	bics	r2, r4
10009cae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
10009cb2:	bf04      	itt	eq
10009cb4:	f851 3b04 	ldreq.w	r3, [r1], #4
10009cb8:	f84c 4b04 	streq.w	r4, [ip], #4
10009cbc:	d0ea      	beq.n	10009c94 <strcpy+0x38>
10009cbe:	4623      	mov	r3, r4
10009cc0:	f80c 3b01 	strb.w	r3, [ip], #1
10009cc4:	f013 0fff 	tst.w	r3, #255	; 0xff
10009cc8:	ea4f 2333 	mov.w	r3, r3, ror #8
10009ccc:	d1f8      	bne.n	10009cc0 <strcpy+0x64>
10009cce:	f85d 4b04 	ldr.w	r4, [sp], #4
10009cd2:	4770      	bx	lr
10009cd4:	f011 0f01 	tst.w	r1, #1
10009cd8:	d006      	beq.n	10009ce8 <strcpy+0x8c>
10009cda:	f811 2b01 	ldrb.w	r2, [r1], #1
10009cde:	f80c 2b01 	strb.w	r2, [ip], #1
10009ce2:	2a00      	cmp	r2, #0
10009ce4:	bf08      	it	eq
10009ce6:	4770      	bxeq	lr
10009ce8:	f011 0f02 	tst.w	r1, #2
10009cec:	d0bf      	beq.n	10009c6e <strcpy+0x12>
10009cee:	f831 2b02 	ldrh.w	r2, [r1], #2
10009cf2:	f012 0fff 	tst.w	r2, #255	; 0xff
10009cf6:	bf16      	itet	ne
10009cf8:	f82c 2b02 	strhne.w	r2, [ip], #2
10009cfc:	f88c 2000 	strbeq.w	r2, [ip]
10009d00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
10009d04:	d1b3      	bne.n	10009c6e <strcpy+0x12>
10009d06:	4770      	bx	lr
10009d08:	f811 2b01 	ldrb.w	r2, [r1], #1
10009d0c:	f80c 2b01 	strb.w	r2, [ip], #1
10009d10:	2a00      	cmp	r2, #0
10009d12:	d1f9      	bne.n	10009d08 <strcpy+0xac>
10009d14:	4770      	bx	lr
10009d16:	bf00      	nop
	...

10009d40 <strlen>:
10009d40:	f890 f000 	pld	[r0]
10009d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
10009d48:	f020 0107 	bic.w	r1, r0, #7
10009d4c:	f06f 0c00 	mvn.w	ip, #0
10009d50:	f010 0407 	ands.w	r4, r0, #7
10009d54:	f891 f020 	pld	[r1, #32]
10009d58:	f040 8049 	bne.w	10009dee <strlen+0xae>
10009d5c:	f04f 0400 	mov.w	r4, #0
10009d60:	f06f 0007 	mvn.w	r0, #7
10009d64:	e9d1 2300 	ldrd	r2, r3, [r1]
10009d68:	f891 f040 	pld	[r1, #64]	; 0x40
10009d6c:	f100 0008 	add.w	r0, r0, #8
10009d70:	fa82 f24c 	uadd8	r2, r2, ip
10009d74:	faa4 f28c 	sel	r2, r4, ip
10009d78:	fa83 f34c 	uadd8	r3, r3, ip
10009d7c:	faa2 f38c 	sel	r3, r2, ip
10009d80:	bb4b      	cbnz	r3, 10009dd6 <strlen+0x96>
10009d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
10009d86:	fa82 f24c 	uadd8	r2, r2, ip
10009d8a:	f100 0008 	add.w	r0, r0, #8
10009d8e:	faa4 f28c 	sel	r2, r4, ip
10009d92:	fa83 f34c 	uadd8	r3, r3, ip
10009d96:	faa2 f38c 	sel	r3, r2, ip
10009d9a:	b9e3      	cbnz	r3, 10009dd6 <strlen+0x96>
10009d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
10009da0:	fa82 f24c 	uadd8	r2, r2, ip
10009da4:	f100 0008 	add.w	r0, r0, #8
10009da8:	faa4 f28c 	sel	r2, r4, ip
10009dac:	fa83 f34c 	uadd8	r3, r3, ip
10009db0:	faa2 f38c 	sel	r3, r2, ip
10009db4:	b97b      	cbnz	r3, 10009dd6 <strlen+0x96>
10009db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
10009dba:	f101 0120 	add.w	r1, r1, #32
10009dbe:	fa82 f24c 	uadd8	r2, r2, ip
10009dc2:	f100 0008 	add.w	r0, r0, #8
10009dc6:	faa4 f28c 	sel	r2, r4, ip
10009dca:	fa83 f34c 	uadd8	r3, r3, ip
10009dce:	faa2 f38c 	sel	r3, r2, ip
10009dd2:	2b00      	cmp	r3, #0
10009dd4:	d0c6      	beq.n	10009d64 <strlen+0x24>
10009dd6:	2a00      	cmp	r2, #0
10009dd8:	bf04      	itt	eq
10009dda:	3004      	addeq	r0, #4
10009ddc:	461a      	moveq	r2, r3
10009dde:	ba12      	rev	r2, r2
10009de0:	fab2 f282 	clz	r2, r2
10009de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
10009de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
10009dec:	4770      	bx	lr
10009dee:	e9d1 2300 	ldrd	r2, r3, [r1]
10009df2:	f004 0503 	and.w	r5, r4, #3
10009df6:	f1c4 0000 	rsb	r0, r4, #0
10009dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
10009dfe:	f014 0f04 	tst.w	r4, #4
10009e02:	f891 f040 	pld	[r1, #64]	; 0x40
10009e06:	fa0c f505 	lsl.w	r5, ip, r5
10009e0a:	ea62 0205 	orn	r2, r2, r5
10009e0e:	bf1c      	itt	ne
10009e10:	ea63 0305 	ornne	r3, r3, r5
10009e14:	4662      	movne	r2, ip
10009e16:	f04f 0400 	mov.w	r4, #0
10009e1a:	e7a9      	b.n	10009d70 <strlen+0x30>

10009e1c <_strtol_l.isra.0>:
10009e1c:	2b01      	cmp	r3, #1
10009e1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009e22:	d041      	beq.n	10009ea8 <_strtol_l.isra.0+0x8c>
10009e24:	2b24      	cmp	r3, #36	; 0x24
10009e26:	4698      	mov	r8, r3
10009e28:	d83e      	bhi.n	10009ea8 <_strtol_l.isra.0+0x8c>
10009e2a:	460f      	mov	r7, r1
10009e2c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 10009f4c <_strtol_l.isra.0+0x130>
10009e30:	e000      	b.n	10009e34 <_strtol_l.isra.0+0x18>
10009e32:	462f      	mov	r7, r5
10009e34:	463d      	mov	r5, r7
10009e36:	f815 4b01 	ldrb.w	r4, [r5], #1
10009e3a:	f81c 6004 	ldrb.w	r6, [ip, r4]
10009e3e:	f016 0608 	ands.w	r6, r6, #8
10009e42:	d1f6      	bne.n	10009e32 <_strtol_l.isra.0+0x16>
10009e44:	2c2d      	cmp	r4, #45	; 0x2d
10009e46:	d06c      	beq.n	10009f22 <_strtol_l.isra.0+0x106>
10009e48:	2c2b      	cmp	r4, #43	; 0x2b
10009e4a:	bf0a      	itet	eq
10009e4c:	f895 b000 	ldrbeq.w	fp, [r5]
10009e50:	46a3      	movne	fp, r4
10009e52:	1cbd      	addeq	r5, r7, #2
10009e54:	2b00      	cmp	r3, #0
10009e56:	d046      	beq.n	10009ee6 <_strtol_l.isra.0+0xca>
10009e58:	2b10      	cmp	r3, #16
10009e5a:	d057      	beq.n	10009f0c <_strtol_l.isra.0+0xf0>
10009e5c:	2e00      	cmp	r6, #0
10009e5e:	bf14      	ite	ne
10009e60:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
10009e64:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
10009e68:	2700      	movs	r7, #0
10009e6a:	fbb9 fef8 	udiv	lr, r9, r8
10009e6e:	46bc      	mov	ip, r7
10009e70:	fb08 9a1e 	mls	sl, r8, lr, r9
10009e74:	e007      	b.n	10009e86 <_strtol_l.isra.0+0x6a>
10009e76:	45e6      	cmp	lr, ip
10009e78:	d313      	bcc.n	10009ea2 <_strtol_l.isra.0+0x86>
10009e7a:	d02f      	beq.n	10009edc <_strtol_l.isra.0+0xc0>
10009e7c:	fb0c 4c08 	mla	ip, ip, r8, r4
10009e80:	2701      	movs	r7, #1
10009e82:	f815 bb01 	ldrb.w	fp, [r5], #1
10009e86:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
10009e8a:	2c09      	cmp	r4, #9
10009e8c:	d905      	bls.n	10009e9a <_strtol_l.isra.0+0x7e>
10009e8e:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
10009e92:	2c19      	cmp	r4, #25
10009e94:	d80f      	bhi.n	10009eb6 <_strtol_l.isra.0+0x9a>
10009e96:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
10009e9a:	42a3      	cmp	r3, r4
10009e9c:	dd13      	ble.n	10009ec6 <_strtol_l.isra.0+0xaa>
10009e9e:	2f00      	cmp	r7, #0
10009ea0:	dae9      	bge.n	10009e76 <_strtol_l.isra.0+0x5a>
10009ea2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
10009ea6:	e7ec      	b.n	10009e82 <_strtol_l.isra.0+0x66>
10009ea8:	f7ff fb6c 	bl	10009584 <__errno>
10009eac:	2316      	movs	r3, #22
10009eae:	6003      	str	r3, [r0, #0]
10009eb0:	2000      	movs	r0, #0
10009eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009eb6:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
10009eba:	2c19      	cmp	r4, #25
10009ebc:	d803      	bhi.n	10009ec6 <_strtol_l.isra.0+0xaa>
10009ebe:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
10009ec2:	42a3      	cmp	r3, r4
10009ec4:	dceb      	bgt.n	10009e9e <_strtol_l.isra.0+0x82>
10009ec6:	2f00      	cmp	r7, #0
10009ec8:	db25      	blt.n	10009f16 <_strtol_l.isra.0+0xfa>
10009eca:	b10e      	cbz	r6, 10009ed0 <_strtol_l.isra.0+0xb4>
10009ecc:	f1cc 0c00 	rsb	ip, ip, #0
10009ed0:	b10a      	cbz	r2, 10009ed6 <_strtol_l.isra.0+0xba>
10009ed2:	bb77      	cbnz	r7, 10009f32 <_strtol_l.isra.0+0x116>
10009ed4:	6011      	str	r1, [r2, #0]
10009ed6:	4660      	mov	r0, ip
10009ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009edc:	45a2      	cmp	sl, r4
10009ede:	dacd      	bge.n	10009e7c <_strtol_l.isra.0+0x60>
10009ee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
10009ee4:	e7cd      	b.n	10009e82 <_strtol_l.isra.0+0x66>
10009ee6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
10009eea:	d003      	beq.n	10009ef4 <_strtol_l.isra.0+0xd8>
10009eec:	f04f 080a 	mov.w	r8, #10
10009ef0:	4643      	mov	r3, r8
10009ef2:	e7b3      	b.n	10009e5c <_strtol_l.isra.0+0x40>
10009ef4:	782b      	ldrb	r3, [r5, #0]
10009ef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
10009efa:	2b58      	cmp	r3, #88	; 0x58
10009efc:	d11b      	bne.n	10009f36 <_strtol_l.isra.0+0x11a>
10009efe:	f04f 0810 	mov.w	r8, #16
10009f02:	f895 b001 	ldrb.w	fp, [r5, #1]
10009f06:	4643      	mov	r3, r8
10009f08:	3502      	adds	r5, #2
10009f0a:	e7a7      	b.n	10009e5c <_strtol_l.isra.0+0x40>
10009f0c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
10009f10:	d015      	beq.n	10009f3e <_strtol_l.isra.0+0x122>
10009f12:	4698      	mov	r8, r3
10009f14:	e7a2      	b.n	10009e5c <_strtol_l.isra.0+0x40>
10009f16:	2322      	movs	r3, #34	; 0x22
10009f18:	6003      	str	r3, [r0, #0]
10009f1a:	b13a      	cbz	r2, 10009f2c <_strtol_l.isra.0+0x110>
10009f1c:	1e69      	subs	r1, r5, #1
10009f1e:	46cc      	mov	ip, r9
10009f20:	e7d8      	b.n	10009ed4 <_strtol_l.isra.0+0xb8>
10009f22:	f895 b000 	ldrb.w	fp, [r5]
10009f26:	2601      	movs	r6, #1
10009f28:	1cbd      	adds	r5, r7, #2
10009f2a:	e793      	b.n	10009e54 <_strtol_l.isra.0+0x38>
10009f2c:	46cc      	mov	ip, r9
10009f2e:	4660      	mov	r0, ip
10009f30:	e7d2      	b.n	10009ed8 <_strtol_l.isra.0+0xbc>
10009f32:	46e1      	mov	r9, ip
10009f34:	e7f2      	b.n	10009f1c <_strtol_l.isra.0+0x100>
10009f36:	f04f 0808 	mov.w	r8, #8
10009f3a:	4643      	mov	r3, r8
10009f3c:	e78e      	b.n	10009e5c <_strtol_l.isra.0+0x40>
10009f3e:	782c      	ldrb	r4, [r5, #0]
10009f40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
10009f44:	2c58      	cmp	r4, #88	; 0x58
10009f46:	d0da      	beq.n	10009efe <_strtol_l.isra.0+0xe2>
10009f48:	4698      	mov	r8, r3
10009f4a:	e787      	b.n	10009e5c <_strtol_l.isra.0+0x40>
10009f4c:	10010add 	.word	0x10010add

10009f50 <_strtol_r>:
10009f50:	e764      	b.n	10009e1c <_strtol_l.isra.0>
10009f52:	bf00      	nop

10009f54 <strtol_l>:
10009f54:	b410      	push	{r4}
10009f56:	4c04      	ldr	r4, [pc, #16]	; (10009f68 <strtol_l+0x14>)
10009f58:	4613      	mov	r3, r2
10009f5a:	460a      	mov	r2, r1
10009f5c:	4601      	mov	r1, r0
10009f5e:	6820      	ldr	r0, [r4, #0]
10009f60:	f85d 4b04 	ldr.w	r4, [sp], #4
10009f64:	e75a      	b.n	10009e1c <_strtol_l.isra.0>
10009f66:	bf00      	nop
10009f68:	200000a0 	.word	0x200000a0

10009f6c <strtol>:
10009f6c:	b410      	push	{r4}
10009f6e:	4c04      	ldr	r4, [pc, #16]	; (10009f80 <strtol+0x14>)
10009f70:	4613      	mov	r3, r2
10009f72:	460a      	mov	r2, r1
10009f74:	4601      	mov	r1, r0
10009f76:	6820      	ldr	r0, [r4, #0]
10009f78:	f85d 4b04 	ldr.w	r4, [sp], #4
10009f7c:	e74e      	b.n	10009e1c <_strtol_l.isra.0>
10009f7e:	bf00      	nop
10009f80:	200000a0 	.word	0x200000a0
10009f84:	00000000 	.word	0x00000000

10009f88 <_vfprintf_r>:
10009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009f8c:	b0c3      	sub	sp, #268	; 0x10c
10009f8e:	461c      	mov	r4, r3
10009f90:	9108      	str	r1, [sp, #32]
10009f92:	4691      	mov	r9, r2
10009f94:	4605      	mov	r5, r0
10009f96:	900c      	str	r0, [sp, #48]	; 0x30
10009f98:	f003 f83c 	bl	1000d014 <_localeconv_r>
10009f9c:	6803      	ldr	r3, [r0, #0]
10009f9e:	9315      	str	r3, [sp, #84]	; 0x54
10009fa0:	4618      	mov	r0, r3
10009fa2:	f7ff fecd 	bl	10009d40 <strlen>
10009fa6:	940d      	str	r4, [sp, #52]	; 0x34
10009fa8:	9013      	str	r0, [sp, #76]	; 0x4c
10009faa:	b11d      	cbz	r5, 10009fb4 <_vfprintf_r+0x2c>
10009fac:	6bab      	ldr	r3, [r5, #56]	; 0x38
10009fae:	2b00      	cmp	r3, #0
10009fb0:	f000 8367 	beq.w	1000a682 <_vfprintf_r+0x6fa>
10009fb4:	9908      	ldr	r1, [sp, #32]
10009fb6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10009fba:	b293      	uxth	r3, r2
10009fbc:	049e      	lsls	r6, r3, #18
10009fbe:	4608      	mov	r0, r1
10009fc0:	d407      	bmi.n	10009fd2 <_vfprintf_r+0x4a>
10009fc2:	6e49      	ldr	r1, [r1, #100]	; 0x64
10009fc4:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
10009fc8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
10009fcc:	8183      	strh	r3, [r0, #12]
10009fce:	6641      	str	r1, [r0, #100]	; 0x64
10009fd0:	b29b      	uxth	r3, r3
10009fd2:	071d      	lsls	r5, r3, #28
10009fd4:	f140 80d0 	bpl.w	1000a178 <_vfprintf_r+0x1f0>
10009fd8:	9a08      	ldr	r2, [sp, #32]
10009fda:	6912      	ldr	r2, [r2, #16]
10009fdc:	2a00      	cmp	r2, #0
10009fde:	f000 80cb 	beq.w	1000a178 <_vfprintf_r+0x1f0>
10009fe2:	f003 031a 	and.w	r3, r3, #26
10009fe6:	2b0a      	cmp	r3, #10
10009fe8:	f000 80d4 	beq.w	1000a194 <_vfprintf_r+0x20c>
10009fec:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 1000a258 <_vfprintf_r+0x2d0>
10009ff0:	2300      	movs	r3, #0
10009ff2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
10009ff6:	9312      	str	r3, [sp, #72]	; 0x48
10009ff8:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
10009ffc:	9314      	str	r3, [sp, #80]	; 0x50
10009ffe:	9316      	str	r3, [sp, #88]	; 0x58
1000a000:	9309      	str	r3, [sp, #36]	; 0x24
1000a002:	ab32      	add	r3, sp, #200	; 0xc8
1000a004:	9325      	str	r3, [sp, #148]	; 0x94
1000a006:	469a      	mov	sl, r3
1000a008:	f899 3000 	ldrb.w	r3, [r9]
1000a00c:	2b00      	cmp	r3, #0
1000a00e:	f000 80dd 	beq.w	1000a1cc <_vfprintf_r+0x244>
1000a012:	2b25      	cmp	r3, #37	; 0x25
1000a014:	f000 86be 	beq.w	1000ad94 <_vfprintf_r+0xe0c>
1000a018:	464d      	mov	r5, r9
1000a01a:	e003      	b.n	1000a024 <_vfprintf_r+0x9c>
1000a01c:	2b25      	cmp	r3, #37	; 0x25
1000a01e:	f000 80c7 	beq.w	1000a1b0 <_vfprintf_r+0x228>
1000a022:	4625      	mov	r5, r4
1000a024:	786b      	ldrb	r3, [r5, #1]
1000a026:	1c6c      	adds	r4, r5, #1
1000a028:	2b00      	cmp	r3, #0
1000a02a:	d1f7      	bne.n	1000a01c <_vfprintf_r+0x94>
1000a02c:	ebb4 0609 	subs.w	r6, r4, r9
1000a030:	f000 80cc 	beq.w	1000a1cc <_vfprintf_r+0x244>
1000a034:	e9dd 3226 	ldrd	r3, r2, [sp, #152]	; 0x98
1000a038:	3301      	adds	r3, #1
1000a03a:	4432      	add	r2, r6
1000a03c:	2b07      	cmp	r3, #7
1000a03e:	f8ca 9000 	str.w	r9, [sl]
1000a042:	f8ca 6004 	str.w	r6, [sl, #4]
1000a046:	e9cd 3226 	strd	r3, r2, [sp, #152]	; 0x98
1000a04a:	f300 80b6 	bgt.w	1000a1ba <_vfprintf_r+0x232>
1000a04e:	f10a 0a08 	add.w	sl, sl, #8
1000a052:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a054:	786b      	ldrb	r3, [r5, #1]
1000a056:	4432      	add	r2, r6
1000a058:	9209      	str	r2, [sp, #36]	; 0x24
1000a05a:	2b00      	cmp	r3, #0
1000a05c:	f000 80b6 	beq.w	1000a1cc <_vfprintf_r+0x244>
1000a060:	2300      	movs	r3, #0
1000a062:	7867      	ldrb	r7, [r4, #1]
1000a064:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1000a068:	461a      	mov	r2, r3
1000a06a:	4619      	mov	r1, r3
1000a06c:	930a      	str	r3, [sp, #40]	; 0x28
1000a06e:	469b      	mov	fp, r3
1000a070:	f104 0901 	add.w	r9, r4, #1
1000a074:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
1000a078:	f109 0901 	add.w	r9, r9, #1
1000a07c:	f1a7 0320 	sub.w	r3, r7, #32
1000a080:	2b58      	cmp	r3, #88	; 0x58
1000a082:	f200 8302 	bhi.w	1000a68a <_vfprintf_r+0x702>
1000a086:	e8df f013 	tbh	[pc, r3, lsl #1]
1000a08a:	02da      	.short	0x02da
1000a08c:	03000300 	.word	0x03000300
1000a090:	030002e2 	.word	0x030002e2
1000a094:	03000300 	.word	0x03000300
1000a098:	03000300 	.word	0x03000300
1000a09c:	02290300 	.word	0x02290300
1000a0a0:	030002bc 	.word	0x030002bc
1000a0a4:	02c102b7 	.word	0x02c102b7
1000a0a8:	00c00300 	.word	0x00c00300
1000a0ac:	00b100b1 	.word	0x00b100b1
1000a0b0:	00b100b1 	.word	0x00b100b1
1000a0b4:	00b100b1 	.word	0x00b100b1
1000a0b8:	00b100b1 	.word	0x00b100b1
1000a0bc:	030000b1 	.word	0x030000b1
1000a0c0:	03000300 	.word	0x03000300
1000a0c4:	03000300 	.word	0x03000300
1000a0c8:	03000300 	.word	0x03000300
1000a0cc:	03000300 	.word	0x03000300
1000a0d0:	029d0300 	.word	0x029d0300
1000a0d4:	03000251 	.word	0x03000251
1000a0d8:	03000251 	.word	0x03000251
1000a0dc:	03000300 	.word	0x03000300
1000a0e0:	024c0300 	.word	0x024c0300
1000a0e4:	03000300 	.word	0x03000300
1000a0e8:	03000068 	.word	0x03000068
1000a0ec:	03000300 	.word	0x03000300
1000a0f0:	03000300 	.word	0x03000300
1000a0f4:	03000059 	.word	0x03000059
1000a0f8:	02340300 	.word	0x02340300
1000a0fc:	03000300 	.word	0x03000300
1000a100:	03000300 	.word	0x03000300
1000a104:	03000300 	.word	0x03000300
1000a108:	03000300 	.word	0x03000300
1000a10c:	03000300 	.word	0x03000300
1000a110:	017401ae 	.word	0x017401ae
1000a114:	02510251 	.word	0x02510251
1000a118:	016f0251 	.word	0x016f0251
1000a11c:	03000174 	.word	0x03000174
1000a120:	01620300 	.word	0x01620300
1000a124:	014c0300 	.word	0x014c0300
1000a128:	011c006a 	.word	0x011c006a
1000a12c:	03000117 	.word	0x03000117
1000a130:	030000ed 	.word	0x030000ed
1000a134:	0300005b 	.word	0x0300005b
1000a138:	00c50300 	.word	0x00c50300
1000a13c:	f04b 0b10 	orr.w	fp, fp, #16
1000a140:	f01b 0f20 	tst.w	fp, #32
1000a144:	f000 8292 	beq.w	1000a66c <_vfprintf_r+0x6e4>
1000a148:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a14a:	3407      	adds	r4, #7
1000a14c:	f024 0307 	bic.w	r3, r4, #7
1000a150:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1000a154:	930d      	str	r3, [sp, #52]	; 0x34
1000a156:	2301      	movs	r3, #1
1000a158:	e0c3      	b.n	1000a2e2 <_vfprintf_r+0x35a>
1000a15a:	f04b 0b10 	orr.w	fp, fp, #16
1000a15e:	f01b 0320 	ands.w	r3, fp, #32
1000a162:	f000 8279 	beq.w	1000a658 <_vfprintf_r+0x6d0>
1000a166:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a168:	3407      	adds	r4, #7
1000a16a:	f024 0307 	bic.w	r3, r4, #7
1000a16e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1000a172:	930d      	str	r3, [sp, #52]	; 0x34
1000a174:	2300      	movs	r3, #0
1000a176:	e0b4      	b.n	1000a2e2 <_vfprintf_r+0x35a>
1000a178:	9908      	ldr	r1, [sp, #32]
1000a17a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a17c:	f001 f9ca 	bl	1000b514 <__swsetup_r>
1000a180:	2800      	cmp	r0, #0
1000a182:	f041 8119 	bne.w	1000b3b8 <_vfprintf_r+0x1430>
1000a186:	9b08      	ldr	r3, [sp, #32]
1000a188:	899b      	ldrh	r3, [r3, #12]
1000a18a:	f003 031a 	and.w	r3, r3, #26
1000a18e:	2b0a      	cmp	r3, #10
1000a190:	f47f af2c 	bne.w	10009fec <_vfprintf_r+0x64>
1000a194:	9b08      	ldr	r3, [sp, #32]
1000a196:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
1000a19a:	2b00      	cmp	r3, #0
1000a19c:	f6ff af26 	blt.w	10009fec <_vfprintf_r+0x64>
1000a1a0:	4623      	mov	r3, r4
1000a1a2:	464a      	mov	r2, r9
1000a1a4:	9908      	ldr	r1, [sp, #32]
1000a1a6:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a1a8:	f001 f97e 	bl	1000b4a8 <__sbprintf>
1000a1ac:	9009      	str	r0, [sp, #36]	; 0x24
1000a1ae:	e019      	b.n	1000a1e4 <_vfprintf_r+0x25c>
1000a1b0:	ebb4 0609 	subs.w	r6, r4, r9
1000a1b4:	f43f af54 	beq.w	1000a060 <_vfprintf_r+0xd8>
1000a1b8:	e73c      	b.n	1000a034 <_vfprintf_r+0xac>
1000a1ba:	aa25      	add	r2, sp, #148	; 0x94
1000a1bc:	9908      	ldr	r1, [sp, #32]
1000a1be:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a1c0:	f004 f9ba 	bl	1000e538 <__sprint_r>
1000a1c4:	b948      	cbnz	r0, 1000a1da <_vfprintf_r+0x252>
1000a1c6:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000a1ca:	e742      	b.n	1000a052 <_vfprintf_r+0xca>
1000a1cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000a1ce:	b123      	cbz	r3, 1000a1da <_vfprintf_r+0x252>
1000a1d0:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a1d2:	9908      	ldr	r1, [sp, #32]
1000a1d4:	aa25      	add	r2, sp, #148	; 0x94
1000a1d6:	f004 f9af 	bl	1000e538 <__sprint_r>
1000a1da:	9b08      	ldr	r3, [sp, #32]
1000a1dc:	899b      	ldrh	r3, [r3, #12]
1000a1de:	065a      	lsls	r2, r3, #25
1000a1e0:	f101 80ea 	bmi.w	1000b3b8 <_vfprintf_r+0x1430>
1000a1e4:	9809      	ldr	r0, [sp, #36]	; 0x24
1000a1e6:	b043      	add	sp, #268	; 0x10c
1000a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000a1ec:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
1000a1f0:	2000      	movs	r0, #0
1000a1f2:	f819 7b01 	ldrb.w	r7, [r9], #1
1000a1f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1000a1fa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1000a1fe:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
1000a202:	2b09      	cmp	r3, #9
1000a204:	d9f5      	bls.n	1000a1f2 <_vfprintf_r+0x26a>
1000a206:	900a      	str	r0, [sp, #40]	; 0x28
1000a208:	e738      	b.n	1000a07c <_vfprintf_r+0xf4>
1000a20a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
1000a20e:	f899 7000 	ldrb.w	r7, [r9]
1000a212:	e731      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a214:	2a00      	cmp	r2, #0
1000a216:	f041 80b7 	bne.w	1000b388 <_vfprintf_r+0x1400>
1000a21a:	4b11      	ldr	r3, [pc, #68]	; (1000a260 <_vfprintf_r+0x2d8>)
1000a21c:	9314      	str	r3, [sp, #80]	; 0x50
1000a21e:	f01b 0f20 	tst.w	fp, #32
1000a222:	f000 816f 	beq.w	1000a504 <_vfprintf_r+0x57c>
1000a226:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a228:	3407      	adds	r4, #7
1000a22a:	f024 0307 	bic.w	r3, r4, #7
1000a22e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1000a232:	930d      	str	r3, [sp, #52]	; 0x34
1000a234:	f01b 0f01 	tst.w	fp, #1
1000a238:	f000 8238 	beq.w	1000a6ac <_vfprintf_r+0x724>
1000a23c:	ea54 0305 	orrs.w	r3, r4, r5
1000a240:	f000 8234 	beq.w	1000a6ac <_vfprintf_r+0x724>
1000a244:	2330      	movs	r3, #48	; 0x30
1000a246:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
1000a24a:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
1000a24e:	f04b 0b02 	orr.w	fp, fp, #2
1000a252:	2302      	movs	r3, #2
1000a254:	e045      	b.n	1000a2e2 <_vfprintf_r+0x35a>
1000a256:	bf00      	nop
	...
1000a260:	10010abc 	.word	0x10010abc
1000a264:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a266:	f854 3b04 	ldr.w	r3, [r4], #4
1000a26a:	930e      	str	r3, [sp, #56]	; 0x38
1000a26c:	2500      	movs	r5, #0
1000a26e:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
1000a272:	2b00      	cmp	r3, #0
1000a274:	f000 8681 	beq.w	1000af7a <_vfprintf_r+0xff2>
1000a278:	1c71      	adds	r1, r6, #1
1000a27a:	f000 8755 	beq.w	1000b128 <_vfprintf_r+0x11a0>
1000a27e:	4632      	mov	r2, r6
1000a280:	4629      	mov	r1, r5
1000a282:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a284:	f003 f9fc 	bl	1000d680 <memchr>
1000a288:	2800      	cmp	r0, #0
1000a28a:	f001 805f 	beq.w	1000b34c <_vfprintf_r+0x13c4>
1000a28e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a290:	1ac3      	subs	r3, r0, r3
1000a292:	930b      	str	r3, [sp, #44]	; 0x2c
1000a294:	462e      	mov	r6, r5
1000a296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1000a29a:	f89d 8077 	ldrb.w	r8, [sp, #119]	; 0x77
1000a29e:	940d      	str	r4, [sp, #52]	; 0x34
1000a2a0:	f8cd b018 	str.w	fp, [sp, #24]
1000a2a4:	9307      	str	r3, [sp, #28]
1000a2a6:	960f      	str	r6, [sp, #60]	; 0x3c
1000a2a8:	f1b8 0f00 	cmp.w	r8, #0
1000a2ac:	f000 80ad 	beq.w	1000a40a <_vfprintf_r+0x482>
1000a2b0:	9b07      	ldr	r3, [sp, #28]
1000a2b2:	3301      	adds	r3, #1
1000a2b4:	9307      	str	r3, [sp, #28]
1000a2b6:	e0a8      	b.n	1000a40a <_vfprintf_r+0x482>
1000a2b8:	f04b 0b20 	orr.w	fp, fp, #32
1000a2bc:	f899 7000 	ldrb.w	r7, [r9]
1000a2c0:	e6da      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a2c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a2c4:	f854 3b04 	ldr.w	r3, [r4], #4
1000a2c8:	940d      	str	r4, [sp, #52]	; 0x34
1000a2ca:	f647 0230 	movw	r2, #30768	; 0x7830
1000a2ce:	461c      	mov	r4, r3
1000a2d0:	4bb7      	ldr	r3, [pc, #732]	; (1000a5b0 <_vfprintf_r+0x628>)
1000a2d2:	9314      	str	r3, [sp, #80]	; 0x50
1000a2d4:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
1000a2d8:	f04b 0b02 	orr.w	fp, fp, #2
1000a2dc:	2500      	movs	r5, #0
1000a2de:	2302      	movs	r3, #2
1000a2e0:	2778      	movs	r7, #120	; 0x78
1000a2e2:	f04f 0800 	mov.w	r8, #0
1000a2e6:	f88d 8077 	strb.w	r8, [sp, #119]	; 0x77
1000a2ea:	1c72      	adds	r2, r6, #1
1000a2ec:	f000 81e2 	beq.w	1000a6b4 <_vfprintf_r+0x72c>
1000a2f0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
1000a2f4:	9206      	str	r2, [sp, #24]
1000a2f6:	ea54 0205 	orrs.w	r2, r4, r5
1000a2fa:	f040 81d9 	bne.w	1000a6b0 <_vfprintf_r+0x728>
1000a2fe:	2e00      	cmp	r6, #0
1000a300:	f040 8412 	bne.w	1000ab28 <_vfprintf_r+0xba0>
1000a304:	2b00      	cmp	r3, #0
1000a306:	f040 84dc 	bne.w	1000acc2 <_vfprintf_r+0xd3a>
1000a30a:	f01b 0301 	ands.w	r3, fp, #1
1000a30e:	930b      	str	r3, [sp, #44]	; 0x2c
1000a310:	f000 8549 	beq.w	1000ada6 <_vfprintf_r+0xe1e>
1000a314:	2330      	movs	r3, #48	; 0x30
1000a316:	f88d 30c7 	strb.w	r3, [sp, #199]	; 0xc7
1000a31a:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
1000a31e:	930e      	str	r3, [sp, #56]	; 0x38
1000a320:	e059      	b.n	1000a3d6 <_vfprintf_r+0x44e>
1000a322:	2a00      	cmp	r2, #0
1000a324:	f041 8038 	bne.w	1000b398 <_vfprintf_r+0x1410>
1000a328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000a32a:	f01b 0f20 	tst.w	fp, #32
1000a32e:	f852 3b04 	ldr.w	r3, [r2], #4
1000a332:	920d      	str	r2, [sp, #52]	; 0x34
1000a334:	f040 853b 	bne.w	1000adae <_vfprintf_r+0xe26>
1000a338:	f01b 0f10 	tst.w	fp, #16
1000a33c:	f040 8656 	bne.w	1000afec <_vfprintf_r+0x1064>
1000a340:	f01b 0f40 	tst.w	fp, #64	; 0x40
1000a344:	f000 8652 	beq.w	1000afec <_vfprintf_r+0x1064>
1000a348:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a34a:	801a      	strh	r2, [r3, #0]
1000a34c:	e65c      	b.n	1000a008 <_vfprintf_r+0x80>
1000a34e:	f899 7000 	ldrb.w	r7, [r9]
1000a352:	2f6c      	cmp	r7, #108	; 0x6c
1000a354:	bf03      	ittte	eq
1000a356:	f899 7001 	ldrbeq.w	r7, [r9, #1]
1000a35a:	f04b 0b20 	orreq.w	fp, fp, #32
1000a35e:	f109 0901 	addeq.w	r9, r9, #1
1000a362:	f04b 0b10 	orrne.w	fp, fp, #16
1000a366:	e687      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a368:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
1000a36c:	f899 7000 	ldrb.w	r7, [r9]
1000a370:	e682      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a372:	2a00      	cmp	r2, #0
1000a374:	f041 8018 	bne.w	1000b3a8 <_vfprintf_r+0x1420>
1000a378:	f01b 0f20 	tst.w	fp, #32
1000a37c:	f000 812b 	beq.w	1000a5d6 <_vfprintf_r+0x64e>
1000a380:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a382:	3407      	adds	r4, #7
1000a384:	f024 0307 	bic.w	r3, r4, #7
1000a388:	4619      	mov	r1, r3
1000a38a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1000a38e:	910d      	str	r1, [sp, #52]	; 0x34
1000a390:	4614      	mov	r4, r2
1000a392:	461d      	mov	r5, r3
1000a394:	2a00      	cmp	r2, #0
1000a396:	f173 0300 	sbcs.w	r3, r3, #0
1000a39a:	f2c0 84f1 	blt.w	1000ad80 <_vfprintf_r+0xdf8>
1000a39e:	1c73      	adds	r3, r6, #1
1000a3a0:	f89d 8077 	ldrb.w	r8, [sp, #119]	; 0x77
1000a3a4:	d008      	beq.n	1000a3b8 <_vfprintf_r+0x430>
1000a3a6:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
1000a3aa:	9306      	str	r3, [sp, #24]
1000a3ac:	ea54 0305 	orrs.w	r3, r4, r5
1000a3b0:	f000 8484 	beq.w	1000acbc <_vfprintf_r+0xd34>
1000a3b4:	f8dd b018 	ldr.w	fp, [sp, #24]
1000a3b8:	2d00      	cmp	r5, #0
1000a3ba:	bf08      	it	eq
1000a3bc:	2c0a      	cmpeq	r4, #10
1000a3be:	f080 8454 	bcs.w	1000ac6a <_vfprintf_r+0xce2>
1000a3c2:	2301      	movs	r3, #1
1000a3c4:	3430      	adds	r4, #48	; 0x30
1000a3c6:	930b      	str	r3, [sp, #44]	; 0x2c
1000a3c8:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
1000a3cc:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
1000a3d0:	f8cd b018 	str.w	fp, [sp, #24]
1000a3d4:	930e      	str	r3, [sp, #56]	; 0x38
1000a3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a3d8:	42b3      	cmp	r3, r6
1000a3da:	bfb8      	it	lt
1000a3dc:	4633      	movlt	r3, r6
1000a3de:	9307      	str	r3, [sp, #28]
1000a3e0:	2300      	movs	r3, #0
1000a3e2:	930f      	str	r3, [sp, #60]	; 0x3c
1000a3e4:	e760      	b.n	1000a2a8 <_vfprintf_r+0x320>
1000a3e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a3e8:	2300      	movs	r3, #0
1000a3ea:	f854 2b04 	ldr.w	r2, [r4], #4
1000a3ee:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
1000a3f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1000a3f6:	2201      	movs	r2, #1
1000a3f8:	ab28      	add	r3, sp, #160	; 0xa0
1000a3fa:	9207      	str	r2, [sp, #28]
1000a3fc:	940d      	str	r4, [sp, #52]	; 0x34
1000a3fe:	920b      	str	r2, [sp, #44]	; 0x2c
1000a400:	930e      	str	r3, [sp, #56]	; 0x38
1000a402:	2600      	movs	r6, #0
1000a404:	f8cd b018 	str.w	fp, [sp, #24]
1000a408:	960f      	str	r6, [sp, #60]	; 0x3c
1000a40a:	9b06      	ldr	r3, [sp, #24]
1000a40c:	f013 0302 	ands.w	r3, r3, #2
1000a410:	d002      	beq.n	1000a418 <_vfprintf_r+0x490>
1000a412:	9a07      	ldr	r2, [sp, #28]
1000a414:	3202      	adds	r2, #2
1000a416:	9207      	str	r2, [sp, #28]
1000a418:	9a06      	ldr	r2, [sp, #24]
1000a41a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000a41c:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
1000a420:	d105      	bne.n	1000a42e <_vfprintf_r+0x4a6>
1000a422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a424:	9907      	ldr	r1, [sp, #28]
1000a426:	1a55      	subs	r5, r2, r1
1000a428:	2d00      	cmp	r5, #0
1000a42a:	f300 82e8 	bgt.w	1000a9fe <_vfprintf_r+0xa76>
1000a42e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
1000a432:	b172      	cbz	r2, 1000a452 <_vfprintf_r+0x4ca>
1000a434:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000a436:	3201      	adds	r2, #1
1000a438:	3401      	adds	r4, #1
1000a43a:	f10d 0077 	add.w	r0, sp, #119	; 0x77
1000a43e:	2101      	movs	r1, #1
1000a440:	2a07      	cmp	r2, #7
1000a442:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000a446:	e9ca 0100 	strd	r0, r1, [sl]
1000a44a:	f300 831a 	bgt.w	1000aa82 <_vfprintf_r+0xafa>
1000a44e:	f10a 0a08 	add.w	sl, sl, #8
1000a452:	b16b      	cbz	r3, 1000a470 <_vfprintf_r+0x4e8>
1000a454:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a456:	3301      	adds	r3, #1
1000a458:	3402      	adds	r4, #2
1000a45a:	a91e      	add	r1, sp, #120	; 0x78
1000a45c:	2202      	movs	r2, #2
1000a45e:	2b07      	cmp	r3, #7
1000a460:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
1000a464:	e9ca 1200 	strd	r1, r2, [sl]
1000a468:	f300 8319 	bgt.w	1000aa9e <_vfprintf_r+0xb16>
1000a46c:	f10a 0a08 	add.w	sl, sl, #8
1000a470:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
1000a474:	f000 81a8 	beq.w	1000a7c8 <_vfprintf_r+0x840>
1000a478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a47a:	1af6      	subs	r6, r6, r3
1000a47c:	2e00      	cmp	r6, #0
1000a47e:	f300 81ec 	bgt.w	1000a85a <_vfprintf_r+0x8d2>
1000a482:	9b06      	ldr	r3, [sp, #24]
1000a484:	05db      	lsls	r3, r3, #23
1000a486:	f100 8142 	bmi.w	1000a70e <_vfprintf_r+0x786>
1000a48a:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a48c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a48e:	f8ca 2000 	str.w	r2, [sl]
1000a492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000a494:	f8ca 2004 	str.w	r2, [sl, #4]
1000a498:	3301      	adds	r3, #1
1000a49a:	4414      	add	r4, r2
1000a49c:	2b07      	cmp	r3, #7
1000a49e:	9427      	str	r4, [sp, #156]	; 0x9c
1000a4a0:	9326      	str	r3, [sp, #152]	; 0x98
1000a4a2:	f300 824e 	bgt.w	1000a942 <_vfprintf_r+0x9ba>
1000a4a6:	f10a 0a08 	add.w	sl, sl, #8
1000a4aa:	9b06      	ldr	r3, [sp, #24]
1000a4ac:	0759      	lsls	r1, r3, #29
1000a4ae:	d505      	bpl.n	1000a4bc <_vfprintf_r+0x534>
1000a4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a4b2:	9a07      	ldr	r2, [sp, #28]
1000a4b4:	1a9d      	subs	r5, r3, r2
1000a4b6:	2d00      	cmp	r5, #0
1000a4b8:	f300 82fd 	bgt.w	1000aab6 <_vfprintf_r+0xb2e>
1000a4bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
1000a4c0:	9907      	ldr	r1, [sp, #28]
1000a4c2:	428a      	cmp	r2, r1
1000a4c4:	bfac      	ite	ge
1000a4c6:	189b      	addge	r3, r3, r2
1000a4c8:	185b      	addlt	r3, r3, r1
1000a4ca:	9309      	str	r3, [sp, #36]	; 0x24
1000a4cc:	2c00      	cmp	r4, #0
1000a4ce:	f040 81fe 	bne.w	1000a8ce <_vfprintf_r+0x946>
1000a4d2:	2300      	movs	r3, #0
1000a4d4:	9326      	str	r3, [sp, #152]	; 0x98
1000a4d6:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000a4da:	e595      	b.n	1000a008 <_vfprintf_r+0x80>
1000a4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a4de:	f899 7000 	ldrb.w	r7, [r9]
1000a4e2:	f853 0b04 	ldr.w	r0, [r3], #4
1000a4e6:	900a      	str	r0, [sp, #40]	; 0x28
1000a4e8:	2800      	cmp	r0, #0
1000a4ea:	f2c0 8518 	blt.w	1000af1e <_vfprintf_r+0xf96>
1000a4ee:	930d      	str	r3, [sp, #52]	; 0x34
1000a4f0:	e5c2      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a4f2:	2a00      	cmp	r2, #0
1000a4f4:	f040 875c 	bne.w	1000b3b0 <_vfprintf_r+0x1428>
1000a4f8:	4b2e      	ldr	r3, [pc, #184]	; (1000a5b4 <_vfprintf_r+0x62c>)
1000a4fa:	9314      	str	r3, [sp, #80]	; 0x50
1000a4fc:	f01b 0f20 	tst.w	fp, #32
1000a500:	f47f ae91 	bne.w	1000a226 <_vfprintf_r+0x29e>
1000a504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a506:	f01b 0f10 	tst.w	fp, #16
1000a50a:	f853 4b04 	ldr.w	r4, [r3], #4
1000a50e:	930d      	str	r3, [sp, #52]	; 0x34
1000a510:	f040 842b 	bne.w	1000ad6a <_vfprintf_r+0xde2>
1000a514:	f01b 0f40 	tst.w	fp, #64	; 0x40
1000a518:	f000 8427 	beq.w	1000ad6a <_vfprintf_r+0xde2>
1000a51c:	b2a4      	uxth	r4, r4
1000a51e:	2500      	movs	r5, #0
1000a520:	e688      	b.n	1000a234 <_vfprintf_r+0x2ac>
1000a522:	f04b 0b08 	orr.w	fp, fp, #8
1000a526:	f899 7000 	ldrb.w	r7, [r9]
1000a52a:	e5a5      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a52c:	2a00      	cmp	r2, #0
1000a52e:	f040 872f 	bne.w	1000b390 <_vfprintf_r+0x1408>
1000a532:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000a534:	3407      	adds	r4, #7
1000a536:	f024 0307 	bic.w	r3, r4, #7
1000a53a:	ecb3 7b02 	vldmia	r3!, {d7}
1000a53e:	ec55 4b17 	vmov	r4, r5, d7
1000a542:	930d      	str	r3, [sp, #52]	; 0x34
1000a544:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1000a548:	9319      	str	r3, [sp, #100]	; 0x64
1000a54a:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
1000a54e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
1000a552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000a556:	4b18      	ldr	r3, [pc, #96]	; (1000a5b8 <_vfprintf_r+0x630>)
1000a558:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1000a55c:	f005 fe2c 	bl	100101b8 <__aeabi_dcmpun>
1000a560:	2800      	cmp	r0, #0
1000a562:	f040 842b 	bne.w	1000adbc <_vfprintf_r+0xe34>
1000a566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1000a56a:	4b13      	ldr	r3, [pc, #76]	; (1000a5b8 <_vfprintf_r+0x630>)
1000a56c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
1000a570:	f005 fe04 	bl	1001017c <__aeabi_dcmple>
1000a574:	2800      	cmp	r0, #0
1000a576:	f040 8421 	bne.w	1000adbc <_vfprintf_r+0xe34>
1000a57a:	2200      	movs	r2, #0
1000a57c:	2300      	movs	r3, #0
1000a57e:	4620      	mov	r0, r4
1000a580:	4629      	mov	r1, r5
1000a582:	f005 fdf1 	bl	10010168 <__aeabi_dcmplt>
1000a586:	2800      	cmp	r0, #0
1000a588:	f040 8642 	bne.w	1000b210 <_vfprintf_r+0x1288>
1000a58c:	f89d 8077 	ldrb.w	r8, [sp, #119]	; 0x77
1000a590:	4a0a      	ldr	r2, [pc, #40]	; (1000a5bc <_vfprintf_r+0x634>)
1000a592:	4b0b      	ldr	r3, [pc, #44]	; (1000a5c0 <_vfprintf_r+0x638>)
1000a594:	2103      	movs	r1, #3
1000a596:	2600      	movs	r6, #0
1000a598:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
1000a59c:	2f47      	cmp	r7, #71	; 0x47
1000a59e:	bfc8      	it	gt
1000a5a0:	461a      	movgt	r2, r3
1000a5a2:	9107      	str	r1, [sp, #28]
1000a5a4:	9006      	str	r0, [sp, #24]
1000a5a6:	920e      	str	r2, [sp, #56]	; 0x38
1000a5a8:	910b      	str	r1, [sp, #44]	; 0x2c
1000a5aa:	960f      	str	r6, [sp, #60]	; 0x3c
1000a5ac:	e67c      	b.n	1000a2a8 <_vfprintf_r+0x320>
1000a5ae:	bf00      	nop
1000a5b0:	10010abc 	.word	0x10010abc
1000a5b4:	10010aa8 	.word	0x10010aa8
1000a5b8:	7fefffff 	.word	0x7fefffff
1000a5bc:	10010a98 	.word	0x10010a98
1000a5c0:	10010a9c 	.word	0x10010a9c
1000a5c4:	2a00      	cmp	r2, #0
1000a5c6:	f040 86eb 	bne.w	1000b3a0 <_vfprintf_r+0x1418>
1000a5ca:	f04b 0b10 	orr.w	fp, fp, #16
1000a5ce:	f01b 0f20 	tst.w	fp, #32
1000a5d2:	f47f aed5 	bne.w	1000a380 <_vfprintf_r+0x3f8>
1000a5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a5d8:	f01b 0f10 	tst.w	fp, #16
1000a5dc:	f853 4b04 	ldr.w	r4, [r3], #4
1000a5e0:	930d      	str	r3, [sp, #52]	; 0x34
1000a5e2:	f040 83c5 	bne.w	1000ad70 <_vfprintf_r+0xde8>
1000a5e6:	f01b 0f40 	tst.w	fp, #64	; 0x40
1000a5ea:	f000 83c1 	beq.w	1000ad70 <_vfprintf_r+0xde8>
1000a5ee:	b224      	sxth	r4, r4
1000a5f0:	17e5      	asrs	r5, r4, #31
1000a5f2:	4622      	mov	r2, r4
1000a5f4:	462b      	mov	r3, r5
1000a5f6:	e6cd      	b.n	1000a394 <_vfprintf_r+0x40c>
1000a5f8:	f899 7000 	ldrb.w	r7, [r9]
1000a5fc:	f04b 0b04 	orr.w	fp, fp, #4
1000a600:	e53a      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a602:	f899 7000 	ldrb.w	r7, [r9]
1000a606:	2201      	movs	r2, #1
1000a608:	212b      	movs	r1, #43	; 0x2b
1000a60a:	e535      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a60c:	4648      	mov	r0, r9
1000a60e:	f810 7b01 	ldrb.w	r7, [r0], #1
1000a612:	2f2a      	cmp	r7, #42	; 0x2a
1000a614:	f000 8729 	beq.w	1000b46a <_vfprintf_r+0x14e2>
1000a618:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
1000a61c:	2b09      	cmp	r3, #9
1000a61e:	4681      	mov	r9, r0
1000a620:	f04f 0600 	mov.w	r6, #0
1000a624:	f63f ad2a 	bhi.w	1000a07c <_vfprintf_r+0xf4>
1000a628:	f819 7b01 	ldrb.w	r7, [r9], #1
1000a62c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
1000a630:	eb03 0646 	add.w	r6, r3, r6, lsl #1
1000a634:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
1000a638:	2b09      	cmp	r3, #9
1000a63a:	d9f5      	bls.n	1000a628 <_vfprintf_r+0x6a0>
1000a63c:	e51e      	b.n	1000a07c <_vfprintf_r+0xf4>
1000a63e:	f899 7000 	ldrb.w	r7, [r9]
1000a642:	2900      	cmp	r1, #0
1000a644:	f47f ad18 	bne.w	1000a078 <_vfprintf_r+0xf0>
1000a648:	2201      	movs	r2, #1
1000a64a:	2120      	movs	r1, #32
1000a64c:	e514      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a64e:	f04b 0b01 	orr.w	fp, fp, #1
1000a652:	f899 7000 	ldrb.w	r7, [r9]
1000a656:	e50f      	b.n	1000a078 <_vfprintf_r+0xf0>
1000a658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000a65a:	f852 4b04 	ldr.w	r4, [r2], #4
1000a65e:	920d      	str	r2, [sp, #52]	; 0x34
1000a660:	f01b 0210 	ands.w	r2, fp, #16
1000a664:	f000 8453 	beq.w	1000af0e <_vfprintf_r+0xf86>
1000a668:	2500      	movs	r5, #0
1000a66a:	e63a      	b.n	1000a2e2 <_vfprintf_r+0x35a>
1000a66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a66e:	f01b 0f10 	tst.w	fp, #16
1000a672:	f853 4b04 	ldr.w	r4, [r3], #4
1000a676:	930d      	str	r3, [sp, #52]	; 0x34
1000a678:	f000 8441 	beq.w	1000aefe <_vfprintf_r+0xf76>
1000a67c:	2500      	movs	r5, #0
1000a67e:	2301      	movs	r3, #1
1000a680:	e62f      	b.n	1000a2e2 <_vfprintf_r+0x35a>
1000a682:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a684:	f002 f986 	bl	1000c994 <__sinit>
1000a688:	e494      	b.n	10009fb4 <_vfprintf_r+0x2c>
1000a68a:	2a00      	cmp	r2, #0
1000a68c:	f040 85da 	bne.w	1000b244 <_vfprintf_r+0x12bc>
1000a690:	2f00      	cmp	r7, #0
1000a692:	f43f ad9b 	beq.w	1000a1cc <_vfprintf_r+0x244>
1000a696:	2300      	movs	r3, #0
1000a698:	2201      	movs	r2, #1
1000a69a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1000a69e:	ab28      	add	r3, sp, #160	; 0xa0
1000a6a0:	9207      	str	r2, [sp, #28]
1000a6a2:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
1000a6a6:	920b      	str	r2, [sp, #44]	; 0x2c
1000a6a8:	930e      	str	r3, [sp, #56]	; 0x38
1000a6aa:	e6aa      	b.n	1000a402 <_vfprintf_r+0x47a>
1000a6ac:	2302      	movs	r3, #2
1000a6ae:	e618      	b.n	1000a2e2 <_vfprintf_r+0x35a>
1000a6b0:	f8dd b018 	ldr.w	fp, [sp, #24]
1000a6b4:	2b01      	cmp	r3, #1
1000a6b6:	f43f ae7f 	beq.w	1000a3b8 <_vfprintf_r+0x430>
1000a6ba:	2b02      	cmp	r3, #2
1000a6bc:	f000 823c 	beq.w	1000ab38 <_vfprintf_r+0xbb0>
1000a6c0:	a932      	add	r1, sp, #200	; 0xc8
1000a6c2:	e000      	b.n	1000a6c6 <_vfprintf_r+0x73e>
1000a6c4:	4611      	mov	r1, r2
1000a6c6:	08e2      	lsrs	r2, r4, #3
1000a6c8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1000a6cc:	08e8      	lsrs	r0, r5, #3
1000a6ce:	f004 0307 	and.w	r3, r4, #7
1000a6d2:	4605      	mov	r5, r0
1000a6d4:	4614      	mov	r4, r2
1000a6d6:	3330      	adds	r3, #48	; 0x30
1000a6d8:	ea54 0005 	orrs.w	r0, r4, r5
1000a6dc:	f801 3c01 	strb.w	r3, [r1, #-1]
1000a6e0:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
1000a6e4:	d1ee      	bne.n	1000a6c4 <_vfprintf_r+0x73c>
1000a6e6:	f01b 0f01 	tst.w	fp, #1
1000a6ea:	920e      	str	r2, [sp, #56]	; 0x38
1000a6ec:	f000 82df 	beq.w	1000acae <_vfprintf_r+0xd26>
1000a6f0:	2b30      	cmp	r3, #48	; 0x30
1000a6f2:	f000 844d 	beq.w	1000af90 <_vfprintf_r+0x1008>
1000a6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a6f8:	f8cd b018 	str.w	fp, [sp, #24]
1000a6fc:	2330      	movs	r3, #48	; 0x30
1000a6fe:	3902      	subs	r1, #2
1000a700:	f802 3c01 	strb.w	r3, [r2, #-1]
1000a704:	ab32      	add	r3, sp, #200	; 0xc8
1000a706:	1a5b      	subs	r3, r3, r1
1000a708:	930b      	str	r3, [sp, #44]	; 0x2c
1000a70a:	910e      	str	r1, [sp, #56]	; 0x38
1000a70c:	e663      	b.n	1000a3d6 <_vfprintf_r+0x44e>
1000a70e:	2f65      	cmp	r7, #101	; 0x65
1000a710:	f340 8123 	ble.w	1000a95a <_vfprintf_r+0x9d2>
1000a714:	2200      	movs	r2, #0
1000a716:	2300      	movs	r3, #0
1000a718:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1000a71c:	f005 fd1a 	bl	10010154 <__aeabi_dcmpeq>
1000a720:	2800      	cmp	r0, #0
1000a722:	f000 8222 	beq.w	1000ab6a <_vfprintf_r+0xbe2>
1000a726:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a728:	4abc      	ldr	r2, [pc, #752]	; (1000aa1c <_vfprintf_r+0xa94>)
1000a72a:	f8ca 2000 	str.w	r2, [sl]
1000a72e:	3301      	adds	r3, #1
1000a730:	3401      	adds	r4, #1
1000a732:	2201      	movs	r2, #1
1000a734:	2b07      	cmp	r3, #7
1000a736:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
1000a73a:	f8ca 2004 	str.w	r2, [sl, #4]
1000a73e:	f300 849f 	bgt.w	1000b080 <_vfprintf_r+0x10f8>
1000a742:	f10a 0a08 	add.w	sl, sl, #8
1000a746:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000a748:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a74a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000a74c:	4293      	cmp	r3, r2
1000a74e:	f280 8324 	bge.w	1000ad9a <_vfprintf_r+0xe12>
1000a752:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a754:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000a756:	f8ca 2000 	str.w	r2, [sl]
1000a75a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000a75c:	f8ca 2004 	str.w	r2, [sl, #4]
1000a760:	3301      	adds	r3, #1
1000a762:	4414      	add	r4, r2
1000a764:	2b07      	cmp	r3, #7
1000a766:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
1000a76a:	f300 83f9 	bgt.w	1000af60 <_vfprintf_r+0xfd8>
1000a76e:	f10a 0a08 	add.w	sl, sl, #8
1000a772:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a774:	1e5d      	subs	r5, r3, #1
1000a776:	2d00      	cmp	r5, #0
1000a778:	f77f ae97 	ble.w	1000a4aa <_vfprintf_r+0x522>
1000a77c:	2d10      	cmp	r5, #16
1000a77e:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000a780:	f8df b29c 	ldr.w	fp, [pc, #668]	; 1000aa20 <_vfprintf_r+0xa98>
1000a784:	f340 8472 	ble.w	1000b06c <_vfprintf_r+0x10e4>
1000a788:	2610      	movs	r6, #16
1000a78a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1000a78c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000a790:	e005      	b.n	1000a79e <_vfprintf_r+0x816>
1000a792:	f10a 0a08 	add.w	sl, sl, #8
1000a796:	3d10      	subs	r5, #16
1000a798:	2d10      	cmp	r5, #16
1000a79a:	f340 8467 	ble.w	1000b06c <_vfprintf_r+0x10e4>
1000a79e:	3201      	adds	r2, #1
1000a7a0:	3410      	adds	r4, #16
1000a7a2:	2a07      	cmp	r2, #7
1000a7a4:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000a7a8:	e9ca b600 	strd	fp, r6, [sl]
1000a7ac:	ddf1      	ble.n	1000a792 <_vfprintf_r+0x80a>
1000a7ae:	aa25      	add	r2, sp, #148	; 0x94
1000a7b0:	4641      	mov	r1, r8
1000a7b2:	4638      	mov	r0, r7
1000a7b4:	f003 fec0 	bl	1000e538 <__sprint_r>
1000a7b8:	2800      	cmp	r0, #0
1000a7ba:	f47f ad0e 	bne.w	1000a1da <_vfprintf_r+0x252>
1000a7be:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
1000a7c2:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000a7c6:	e7e6      	b.n	1000a796 <_vfprintf_r+0x80e>
1000a7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a7ca:	9a07      	ldr	r2, [sp, #28]
1000a7cc:	1a9d      	subs	r5, r3, r2
1000a7ce:	2d00      	cmp	r5, #0
1000a7d0:	f77f ae52 	ble.w	1000a478 <_vfprintf_r+0x4f0>
1000a7d4:	2d10      	cmp	r5, #16
1000a7d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000a7d8:	f8df b244 	ldr.w	fp, [pc, #580]	; 1000aa20 <_vfprintf_r+0xa98>
1000a7dc:	dd2d      	ble.n	1000a83a <_vfprintf_r+0x8b2>
1000a7de:	4658      	mov	r0, fp
1000a7e0:	4653      	mov	r3, sl
1000a7e2:	4621      	mov	r1, r4
1000a7e4:	46ca      	mov	sl, r9
1000a7e6:	46bb      	mov	fp, r7
1000a7e8:	46b1      	mov	r9, r6
1000a7ea:	f04f 0810 	mov.w	r8, #16
1000a7ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000a7f0:	9e08      	ldr	r6, [sp, #32]
1000a7f2:	4607      	mov	r7, r0
1000a7f4:	e004      	b.n	1000a800 <_vfprintf_r+0x878>
1000a7f6:	3d10      	subs	r5, #16
1000a7f8:	2d10      	cmp	r5, #16
1000a7fa:	f103 0308 	add.w	r3, r3, #8
1000a7fe:	dd15      	ble.n	1000a82c <_vfprintf_r+0x8a4>
1000a800:	3201      	adds	r2, #1
1000a802:	3110      	adds	r1, #16
1000a804:	2a07      	cmp	r2, #7
1000a806:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
1000a80a:	e9c3 7800 	strd	r7, r8, [r3]
1000a80e:	ddf2      	ble.n	1000a7f6 <_vfprintf_r+0x86e>
1000a810:	aa25      	add	r2, sp, #148	; 0x94
1000a812:	4631      	mov	r1, r6
1000a814:	4620      	mov	r0, r4
1000a816:	f003 fe8f 	bl	1000e538 <__sprint_r>
1000a81a:	2800      	cmp	r0, #0
1000a81c:	f47f acdd 	bne.w	1000a1da <_vfprintf_r+0x252>
1000a820:	3d10      	subs	r5, #16
1000a822:	2d10      	cmp	r5, #16
1000a824:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
1000a828:	ab32      	add	r3, sp, #200	; 0xc8
1000a82a:	dce9      	bgt.n	1000a800 <_vfprintf_r+0x878>
1000a82c:	464e      	mov	r6, r9
1000a82e:	46d1      	mov	r9, sl
1000a830:	469a      	mov	sl, r3
1000a832:	463b      	mov	r3, r7
1000a834:	460c      	mov	r4, r1
1000a836:	465f      	mov	r7, fp
1000a838:	469b      	mov	fp, r3
1000a83a:	3201      	adds	r2, #1
1000a83c:	442c      	add	r4, r5
1000a83e:	2a07      	cmp	r2, #7
1000a840:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000a844:	e9ca b500 	strd	fp, r5, [sl]
1000a848:	f300 8426 	bgt.w	1000b098 <_vfprintf_r+0x1110>
1000a84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a84e:	1af6      	subs	r6, r6, r3
1000a850:	2e00      	cmp	r6, #0
1000a852:	f10a 0a08 	add.w	sl, sl, #8
1000a856:	f77f ae14 	ble.w	1000a482 <_vfprintf_r+0x4fa>
1000a85a:	2e10      	cmp	r6, #16
1000a85c:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000a85e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 1000aa20 <_vfprintf_r+0xa98>
1000a862:	dd28      	ble.n	1000a8b6 <_vfprintf_r+0x92e>
1000a864:	4659      	mov	r1, fp
1000a866:	4623      	mov	r3, r4
1000a868:	46bb      	mov	fp, r7
1000a86a:	2510      	movs	r5, #16
1000a86c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
1000a870:	9c08      	ldr	r4, [sp, #32]
1000a872:	460f      	mov	r7, r1
1000a874:	e004      	b.n	1000a880 <_vfprintf_r+0x8f8>
1000a876:	3e10      	subs	r6, #16
1000a878:	2e10      	cmp	r6, #16
1000a87a:	f10a 0a08 	add.w	sl, sl, #8
1000a87e:	dd16      	ble.n	1000a8ae <_vfprintf_r+0x926>
1000a880:	3201      	adds	r2, #1
1000a882:	3310      	adds	r3, #16
1000a884:	2a07      	cmp	r2, #7
1000a886:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
1000a88a:	e9ca 7500 	strd	r7, r5, [sl]
1000a88e:	ddf2      	ble.n	1000a876 <_vfprintf_r+0x8ee>
1000a890:	aa25      	add	r2, sp, #148	; 0x94
1000a892:	4621      	mov	r1, r4
1000a894:	4640      	mov	r0, r8
1000a896:	f003 fe4f 	bl	1000e538 <__sprint_r>
1000a89a:	2800      	cmp	r0, #0
1000a89c:	f47f ac9d 	bne.w	1000a1da <_vfprintf_r+0x252>
1000a8a0:	3e10      	subs	r6, #16
1000a8a2:	2e10      	cmp	r6, #16
1000a8a4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
1000a8a8:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000a8ac:	dce8      	bgt.n	1000a880 <_vfprintf_r+0x8f8>
1000a8ae:	461c      	mov	r4, r3
1000a8b0:	463b      	mov	r3, r7
1000a8b2:	465f      	mov	r7, fp
1000a8b4:	469b      	mov	fp, r3
1000a8b6:	3201      	adds	r2, #1
1000a8b8:	4434      	add	r4, r6
1000a8ba:	2a07      	cmp	r2, #7
1000a8bc:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000a8c0:	e9ca b600 	strd	fp, r6, [sl]
1000a8c4:	f300 8244 	bgt.w	1000ad50 <_vfprintf_r+0xdc8>
1000a8c8:	f10a 0a08 	add.w	sl, sl, #8
1000a8cc:	e5d9      	b.n	1000a482 <_vfprintf_r+0x4fa>
1000a8ce:	aa25      	add	r2, sp, #148	; 0x94
1000a8d0:	9908      	ldr	r1, [sp, #32]
1000a8d2:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a8d4:	f003 fe30 	bl	1000e538 <__sprint_r>
1000a8d8:	2800      	cmp	r0, #0
1000a8da:	f43f adfa 	beq.w	1000a4d2 <_vfprintf_r+0x54a>
1000a8de:	e47c      	b.n	1000a1da <_vfprintf_r+0x252>
1000a8e0:	aa25      	add	r2, sp, #148	; 0x94
1000a8e2:	9908      	ldr	r1, [sp, #32]
1000a8e4:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a8e6:	f003 fe27 	bl	1000e538 <__sprint_r>
1000a8ea:	2800      	cmp	r0, #0
1000a8ec:	f47f ac75 	bne.w	1000a1da <_vfprintf_r+0x252>
1000a8f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000a8f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000a8f4:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000a8f8:	2b00      	cmp	r3, #0
1000a8fa:	f040 83da 	bne.w	1000b0b2 <_vfprintf_r+0x112a>
1000a8fe:	9b06      	ldr	r3, [sp, #24]
1000a900:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a902:	f003 0301 	and.w	r3, r3, #1
1000a906:	4313      	orrs	r3, r2
1000a908:	f43f adcf 	beq.w	1000a4aa <_vfprintf_r+0x522>
1000a90c:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000a90e:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000a910:	f8ca 3000 	str.w	r3, [sl]
1000a914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000a916:	f8ca 3004 	str.w	r3, [sl, #4]
1000a91a:	3201      	adds	r2, #1
1000a91c:	441c      	add	r4, r3
1000a91e:	2a07      	cmp	r2, #7
1000a920:	9427      	str	r4, [sp, #156]	; 0x9c
1000a922:	9226      	str	r2, [sp, #152]	; 0x98
1000a924:	f300 84a2 	bgt.w	1000b26c <_vfprintf_r+0x12e4>
1000a928:	f10a 0a08 	add.w	sl, sl, #8
1000a92c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a92e:	990e      	ldr	r1, [sp, #56]	; 0x38
1000a930:	3201      	adds	r2, #1
1000a932:	441c      	add	r4, r3
1000a934:	2a07      	cmp	r2, #7
1000a936:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000a93a:	e9ca 1300 	strd	r1, r3, [sl]
1000a93e:	f77f adb2 	ble.w	1000a4a6 <_vfprintf_r+0x51e>
1000a942:	aa25      	add	r2, sp, #148	; 0x94
1000a944:	9908      	ldr	r1, [sp, #32]
1000a946:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a948:	f003 fdf6 	bl	1000e538 <__sprint_r>
1000a94c:	2800      	cmp	r0, #0
1000a94e:	f47f ac44 	bne.w	1000a1da <_vfprintf_r+0x252>
1000a952:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000a954:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000a958:	e5a7      	b.n	1000a4aa <_vfprintf_r+0x522>
1000a95a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a95c:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a95e:	2a01      	cmp	r2, #1
1000a960:	f104 0401 	add.w	r4, r4, #1
1000a964:	f103 0501 	add.w	r5, r3, #1
1000a968:	f10a 0608 	add.w	r6, sl, #8
1000a96c:	f340 81af 	ble.w	1000acce <_vfprintf_r+0xd46>
1000a970:	2301      	movs	r3, #1
1000a972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a974:	f8ca 2000 	str.w	r2, [sl]
1000a978:	2d07      	cmp	r5, #7
1000a97a:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
1000a97e:	f8ca 3004 	str.w	r3, [sl, #4]
1000a982:	f300 8347 	bgt.w	1000b014 <_vfprintf_r+0x108c>
1000a986:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000a988:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000a98a:	3501      	adds	r5, #1
1000a98c:	441c      	add	r4, r3
1000a98e:	2d07      	cmp	r5, #7
1000a990:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
1000a994:	e9c6 2300 	strd	r2, r3, [r6]
1000a998:	f300 8330 	bgt.w	1000affc <_vfprintf_r+0x1074>
1000a99c:	3608      	adds	r6, #8
1000a99e:	1c6b      	adds	r3, r5, #1
1000a9a0:	461f      	mov	r7, r3
1000a9a2:	46b8      	mov	r8, r7
1000a9a4:	9f12      	ldr	r7, [sp, #72]	; 0x48
1000a9a6:	930b      	str	r3, [sp, #44]	; 0x2c
1000a9a8:	2200      	movs	r2, #0
1000a9aa:	2300      	movs	r3, #0
1000a9ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1000a9b0:	f106 0a08 	add.w	sl, r6, #8
1000a9b4:	3f01      	subs	r7, #1
1000a9b6:	f005 fbcd 	bl	10010154 <__aeabi_dcmpeq>
1000a9ba:	2800      	cmp	r0, #0
1000a9bc:	f040 819b 	bne.w	1000acf6 <_vfprintf_r+0xd6e>
1000a9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a9c2:	6077      	str	r7, [r6, #4]
1000a9c4:	3301      	adds	r3, #1
1000a9c6:	443c      	add	r4, r7
1000a9c8:	f1b8 0f07 	cmp.w	r8, #7
1000a9cc:	6033      	str	r3, [r6, #0]
1000a9ce:	9427      	str	r4, [sp, #156]	; 0x9c
1000a9d0:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
1000a9d4:	f300 82b4 	bgt.w	1000af40 <_vfprintf_r+0xfb8>
1000a9d8:	f106 0310 	add.w	r3, r6, #16
1000a9dc:	f105 0802 	add.w	r8, r5, #2
1000a9e0:	4656      	mov	r6, sl
1000a9e2:	469a      	mov	sl, r3
1000a9e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000a9e6:	6072      	str	r2, [r6, #4]
1000a9e8:	4414      	add	r4, r2
1000a9ea:	ab21      	add	r3, sp, #132	; 0x84
1000a9ec:	f1b8 0f07 	cmp.w	r8, #7
1000a9f0:	9427      	str	r4, [sp, #156]	; 0x9c
1000a9f2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
1000a9f6:	6033      	str	r3, [r6, #0]
1000a9f8:	f77f ad57 	ble.w	1000a4aa <_vfprintf_r+0x522>
1000a9fc:	e7a1      	b.n	1000a942 <_vfprintf_r+0x9ba>
1000a9fe:	2d10      	cmp	r5, #16
1000aa00:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000aa02:	dd31      	ble.n	1000aa68 <_vfprintf_r+0xae0>
1000aa04:	4651      	mov	r1, sl
1000aa06:	4620      	mov	r0, r4
1000aa08:	46ca      	mov	sl, r9
1000aa0a:	f04f 0810 	mov.w	r8, #16
1000aa0e:	46b1      	mov	r9, r6
1000aa10:	9317      	str	r3, [sp, #92]	; 0x5c
1000aa12:	462e      	mov	r6, r5
1000aa14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000aa16:	9d08      	ldr	r5, [sp, #32]
1000aa18:	e009      	b.n	1000aa2e <_vfprintf_r+0xaa6>
1000aa1a:	bf00      	nop
1000aa1c:	10010ad8 	.word	0x10010ad8
1000aa20:	10010a88 	.word	0x10010a88
1000aa24:	3e10      	subs	r6, #16
1000aa26:	2e10      	cmp	r6, #16
1000aa28:	f101 0108 	add.w	r1, r1, #8
1000aa2c:	dd16      	ble.n	1000aa5c <_vfprintf_r+0xad4>
1000aa2e:	3201      	adds	r2, #1
1000aa30:	4bc5      	ldr	r3, [pc, #788]	; (1000ad48 <_vfprintf_r+0xdc0>)
1000aa32:	3010      	adds	r0, #16
1000aa34:	2a07      	cmp	r2, #7
1000aa36:	e9cd 2026 	strd	r2, r0, [sp, #152]	; 0x98
1000aa3a:	e9c1 3800 	strd	r3, r8, [r1]
1000aa3e:	ddf1      	ble.n	1000aa24 <_vfprintf_r+0xa9c>
1000aa40:	aa25      	add	r2, sp, #148	; 0x94
1000aa42:	4629      	mov	r1, r5
1000aa44:	4620      	mov	r0, r4
1000aa46:	f003 fd77 	bl	1000e538 <__sprint_r>
1000aa4a:	2800      	cmp	r0, #0
1000aa4c:	f47f abc5 	bne.w	1000a1da <_vfprintf_r+0x252>
1000aa50:	3e10      	subs	r6, #16
1000aa52:	2e10      	cmp	r6, #16
1000aa54:	e9dd 2026 	ldrd	r2, r0, [sp, #152]	; 0x98
1000aa58:	a932      	add	r1, sp, #200	; 0xc8
1000aa5a:	dce8      	bgt.n	1000aa2e <_vfprintf_r+0xaa6>
1000aa5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000aa5e:	4635      	mov	r5, r6
1000aa60:	4604      	mov	r4, r0
1000aa62:	464e      	mov	r6, r9
1000aa64:	46d1      	mov	r9, sl
1000aa66:	468a      	mov	sl, r1
1000aa68:	3201      	adds	r2, #1
1000aa6a:	49b7      	ldr	r1, [pc, #732]	; (1000ad48 <_vfprintf_r+0xdc0>)
1000aa6c:	442c      	add	r4, r5
1000aa6e:	2a07      	cmp	r2, #7
1000aa70:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000aa74:	e9ca 1500 	strd	r1, r5, [sl]
1000aa78:	f300 82d8 	bgt.w	1000b02c <_vfprintf_r+0x10a4>
1000aa7c:	f10a 0a08 	add.w	sl, sl, #8
1000aa80:	e4d5      	b.n	1000a42e <_vfprintf_r+0x4a6>
1000aa82:	aa25      	add	r2, sp, #148	; 0x94
1000aa84:	9908      	ldr	r1, [sp, #32]
1000aa86:	980c      	ldr	r0, [sp, #48]	; 0x30
1000aa88:	9317      	str	r3, [sp, #92]	; 0x5c
1000aa8a:	f003 fd55 	bl	1000e538 <__sprint_r>
1000aa8e:	2800      	cmp	r0, #0
1000aa90:	f47f aba3 	bne.w	1000a1da <_vfprintf_r+0x252>
1000aa94:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000aa96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000aa98:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000aa9c:	e4d9      	b.n	1000a452 <_vfprintf_r+0x4ca>
1000aa9e:	aa25      	add	r2, sp, #148	; 0x94
1000aaa0:	9908      	ldr	r1, [sp, #32]
1000aaa2:	980c      	ldr	r0, [sp, #48]	; 0x30
1000aaa4:	f003 fd48 	bl	1000e538 <__sprint_r>
1000aaa8:	2800      	cmp	r0, #0
1000aaaa:	f47f ab96 	bne.w	1000a1da <_vfprintf_r+0x252>
1000aaae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000aab0:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000aab4:	e4dc      	b.n	1000a470 <_vfprintf_r+0x4e8>
1000aab6:	2d10      	cmp	r5, #16
1000aab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000aaba:	dd21      	ble.n	1000ab00 <_vfprintf_r+0xb78>
1000aabc:	2610      	movs	r6, #16
1000aabe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1000aac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000aac4:	e004      	b.n	1000aad0 <_vfprintf_r+0xb48>
1000aac6:	3d10      	subs	r5, #16
1000aac8:	2d10      	cmp	r5, #16
1000aaca:	f10a 0a08 	add.w	sl, sl, #8
1000aace:	dd17      	ble.n	1000ab00 <_vfprintf_r+0xb78>
1000aad0:	3301      	adds	r3, #1
1000aad2:	4a9d      	ldr	r2, [pc, #628]	; (1000ad48 <_vfprintf_r+0xdc0>)
1000aad4:	3410      	adds	r4, #16
1000aad6:	2b07      	cmp	r3, #7
1000aad8:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
1000aadc:	e9ca 2600 	strd	r2, r6, [sl]
1000aae0:	ddf1      	ble.n	1000aac6 <_vfprintf_r+0xb3e>
1000aae2:	aa25      	add	r2, sp, #148	; 0x94
1000aae4:	4641      	mov	r1, r8
1000aae6:	4638      	mov	r0, r7
1000aae8:	f003 fd26 	bl	1000e538 <__sprint_r>
1000aaec:	2800      	cmp	r0, #0
1000aaee:	f47f ab74 	bne.w	1000a1da <_vfprintf_r+0x252>
1000aaf2:	3d10      	subs	r5, #16
1000aaf4:	2d10      	cmp	r5, #16
1000aaf6:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
1000aafa:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000aafe:	dce7      	bgt.n	1000aad0 <_vfprintf_r+0xb48>
1000ab00:	3301      	adds	r3, #1
1000ab02:	4a91      	ldr	r2, [pc, #580]	; (1000ad48 <_vfprintf_r+0xdc0>)
1000ab04:	442c      	add	r4, r5
1000ab06:	2b07      	cmp	r3, #7
1000ab08:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
1000ab0c:	e9ca 2500 	strd	r2, r5, [sl]
1000ab10:	f77f acd4 	ble.w	1000a4bc <_vfprintf_r+0x534>
1000ab14:	aa25      	add	r2, sp, #148	; 0x94
1000ab16:	9908      	ldr	r1, [sp, #32]
1000ab18:	980c      	ldr	r0, [sp, #48]	; 0x30
1000ab1a:	f003 fd0d 	bl	1000e538 <__sprint_r>
1000ab1e:	2800      	cmp	r0, #0
1000ab20:	f47f ab5b 	bne.w	1000a1da <_vfprintf_r+0x252>
1000ab24:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000ab26:	e4c9      	b.n	1000a4bc <_vfprintf_r+0x534>
1000ab28:	2b01      	cmp	r3, #1
1000ab2a:	f000 83b9 	beq.w	1000b2a0 <_vfprintf_r+0x1318>
1000ab2e:	2b02      	cmp	r3, #2
1000ab30:	f8dd b018 	ldr.w	fp, [sp, #24]
1000ab34:	f47f adc4 	bne.w	1000a6c0 <_vfprintf_r+0x738>
1000ab38:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
1000ab3c:	aa32      	add	r2, sp, #200	; 0xc8
1000ab3e:	0923      	lsrs	r3, r4, #4
1000ab40:	f004 000f 	and.w	r0, r4, #15
1000ab44:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1000ab48:	0929      	lsrs	r1, r5, #4
1000ab4a:	461c      	mov	r4, r3
1000ab4c:	460d      	mov	r5, r1
1000ab4e:	f81c 3000 	ldrb.w	r3, [ip, r0]
1000ab52:	f802 3d01 	strb.w	r3, [r2, #-1]!
1000ab56:	ea54 0305 	orrs.w	r3, r4, r5
1000ab5a:	d1f0      	bne.n	1000ab3e <_vfprintf_r+0xbb6>
1000ab5c:	ab32      	add	r3, sp, #200	; 0xc8
1000ab5e:	1a9b      	subs	r3, r3, r2
1000ab60:	920e      	str	r2, [sp, #56]	; 0x38
1000ab62:	f8cd b018 	str.w	fp, [sp, #24]
1000ab66:	930b      	str	r3, [sp, #44]	; 0x2c
1000ab68:	e435      	b.n	1000a3d6 <_vfprintf_r+0x44e>
1000ab6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000ab6c:	2b00      	cmp	r3, #0
1000ab6e:	f340 826c 	ble.w	1000b04a <_vfprintf_r+0x10c2>
1000ab72:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000ab74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000ab76:	4293      	cmp	r3, r2
1000ab78:	bfa8      	it	ge
1000ab7a:	4613      	movge	r3, r2
1000ab7c:	2b00      	cmp	r3, #0
1000ab7e:	461d      	mov	r5, r3
1000ab80:	dd0e      	ble.n	1000aba0 <_vfprintf_r+0xc18>
1000ab82:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000ab84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ab86:	f8ca 2000 	str.w	r2, [sl]
1000ab8a:	3301      	adds	r3, #1
1000ab8c:	442c      	add	r4, r5
1000ab8e:	2b07      	cmp	r3, #7
1000ab90:	9427      	str	r4, [sp, #156]	; 0x9c
1000ab92:	f8ca 5004 	str.w	r5, [sl, #4]
1000ab96:	9326      	str	r3, [sp, #152]	; 0x98
1000ab98:	f300 83bb 	bgt.w	1000b312 <_vfprintf_r+0x138a>
1000ab9c:	f10a 0a08 	add.w	sl, sl, #8
1000aba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000aba2:	2d00      	cmp	r5, #0
1000aba4:	bfa8      	it	ge
1000aba6:	1b5b      	subge	r3, r3, r5
1000aba8:	2b00      	cmp	r3, #0
1000abaa:	461d      	mov	r5, r3
1000abac:	f300 81f8 	bgt.w	1000afa0 <_vfprintf_r+0x1018>
1000abb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
1000abb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000abb4:	429a      	cmp	r2, r3
1000abb6:	f280 81b7 	bge.w	1000af28 <_vfprintf_r+0xfa0>
1000abba:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000abbc:	9915      	ldr	r1, [sp, #84]	; 0x54
1000abbe:	f8ca 1000 	str.w	r1, [sl]
1000abc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000abc4:	f8ca 1004 	str.w	r1, [sl, #4]
1000abc8:	3301      	adds	r3, #1
1000abca:	440c      	add	r4, r1
1000abcc:	2b07      	cmp	r3, #7
1000abce:	9427      	str	r4, [sp, #156]	; 0x9c
1000abd0:	9326      	str	r3, [sp, #152]	; 0x98
1000abd2:	f300 832a 	bgt.w	1000b22a <_vfprintf_r+0x12a2>
1000abd6:	f10a 0a08 	add.w	sl, sl, #8
1000abda:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000abdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000abde:	4291      	cmp	r1, r2
1000abe0:	eba3 0302 	sub.w	r3, r3, r2
1000abe4:	f280 8206 	bge.w	1000aff4 <_vfprintf_r+0x106c>
1000abe8:	461d      	mov	r5, r3
1000abea:	2d00      	cmp	r5, #0
1000abec:	dd10      	ble.n	1000ac10 <_vfprintf_r+0xc88>
1000abee:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000abf0:	f8ca 5004 	str.w	r5, [sl, #4]
1000abf4:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
1000abf8:	3201      	adds	r2, #1
1000abfa:	4401      	add	r1, r0
1000abfc:	442c      	add	r4, r5
1000abfe:	2a07      	cmp	r2, #7
1000ac00:	f8ca 1000 	str.w	r1, [sl]
1000ac04:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000ac08:	f300 8391 	bgt.w	1000b32e <_vfprintf_r+0x13a6>
1000ac0c:	f10a 0a08 	add.w	sl, sl, #8
1000ac10:	2d00      	cmp	r5, #0
1000ac12:	bfac      	ite	ge
1000ac14:	1b5d      	subge	r5, r3, r5
1000ac16:	461d      	movlt	r5, r3
1000ac18:	2d00      	cmp	r5, #0
1000ac1a:	f77f ac46 	ble.w	1000a4aa <_vfprintf_r+0x522>
1000ac1e:	2d10      	cmp	r5, #16
1000ac20:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000ac22:	f8df b128 	ldr.w	fp, [pc, #296]	; 1000ad4c <_vfprintf_r+0xdc4>
1000ac26:	f340 8221 	ble.w	1000b06c <_vfprintf_r+0x10e4>
1000ac2a:	2610      	movs	r6, #16
1000ac2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1000ac2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000ac32:	e005      	b.n	1000ac40 <_vfprintf_r+0xcb8>
1000ac34:	f10a 0a08 	add.w	sl, sl, #8
1000ac38:	3d10      	subs	r5, #16
1000ac3a:	2d10      	cmp	r5, #16
1000ac3c:	f340 8216 	ble.w	1000b06c <_vfprintf_r+0x10e4>
1000ac40:	3201      	adds	r2, #1
1000ac42:	3410      	adds	r4, #16
1000ac44:	2a07      	cmp	r2, #7
1000ac46:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000ac4a:	e9ca b600 	strd	fp, r6, [sl]
1000ac4e:	ddf1      	ble.n	1000ac34 <_vfprintf_r+0xcac>
1000ac50:	aa25      	add	r2, sp, #148	; 0x94
1000ac52:	4641      	mov	r1, r8
1000ac54:	4638      	mov	r0, r7
1000ac56:	f003 fc6f 	bl	1000e538 <__sprint_r>
1000ac5a:	2800      	cmp	r0, #0
1000ac5c:	f47f aabd 	bne.w	1000a1da <_vfprintf_r+0x252>
1000ac60:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
1000ac64:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000ac68:	e7e6      	b.n	1000ac38 <_vfprintf_r+0xcb0>
1000ac6a:	ab32      	add	r3, sp, #200	; 0xc8
1000ac6c:	f8cd 9018 	str.w	r9, [sp, #24]
1000ac70:	46c1      	mov	r9, r8
1000ac72:	46b0      	mov	r8, r6
1000ac74:	461e      	mov	r6, r3
1000ac76:	e001      	b.n	1000ac7c <_vfprintf_r+0xcf4>
1000ac78:	4604      	mov	r4, r0
1000ac7a:	460d      	mov	r5, r1
1000ac7c:	220a      	movs	r2, #10
1000ac7e:	2300      	movs	r3, #0
1000ac80:	4620      	mov	r0, r4
1000ac82:	4629      	mov	r1, r5
1000ac84:	f005 fad6 	bl	10010234 <__aeabi_uldivmod>
1000ac88:	3230      	adds	r2, #48	; 0x30
1000ac8a:	f806 2d01 	strb.w	r2, [r6, #-1]!
1000ac8e:	2300      	movs	r3, #0
1000ac90:	220a      	movs	r2, #10
1000ac92:	4620      	mov	r0, r4
1000ac94:	4629      	mov	r1, r5
1000ac96:	f005 facd 	bl	10010234 <__aeabi_uldivmod>
1000ac9a:	2d00      	cmp	r5, #0
1000ac9c:	bf08      	it	eq
1000ac9e:	2c0a      	cmpeq	r4, #10
1000aca0:	d2ea      	bcs.n	1000ac78 <_vfprintf_r+0xcf0>
1000aca2:	4632      	mov	r2, r6
1000aca4:	960e      	str	r6, [sp, #56]	; 0x38
1000aca6:	4646      	mov	r6, r8
1000aca8:	46c8      	mov	r8, r9
1000acaa:	f8dd 9018 	ldr.w	r9, [sp, #24]
1000acae:	f8cd b018 	str.w	fp, [sp, #24]
1000acb2:	ab32      	add	r3, sp, #200	; 0xc8
1000acb4:	1a9b      	subs	r3, r3, r2
1000acb6:	930b      	str	r3, [sp, #44]	; 0x2c
1000acb8:	f7ff bb8d 	b.w	1000a3d6 <_vfprintf_r+0x44e>
1000acbc:	2e00      	cmp	r6, #0
1000acbe:	f040 82ef 	bne.w	1000b2a0 <_vfprintf_r+0x1318>
1000acc2:	2600      	movs	r6, #0
1000acc4:	ab32      	add	r3, sp, #200	; 0xc8
1000acc6:	960b      	str	r6, [sp, #44]	; 0x2c
1000acc8:	930e      	str	r3, [sp, #56]	; 0x38
1000acca:	f7ff bb84 	b.w	1000a3d6 <_vfprintf_r+0x44e>
1000acce:	9a06      	ldr	r2, [sp, #24]
1000acd0:	07d0      	lsls	r0, r2, #31
1000acd2:	f53f ae4d 	bmi.w	1000a970 <_vfprintf_r+0x9e8>
1000acd6:	2201      	movs	r2, #1
1000acd8:	990e      	ldr	r1, [sp, #56]	; 0x38
1000acda:	f8ca 1000 	str.w	r1, [sl]
1000acde:	2d07      	cmp	r5, #7
1000ace0:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
1000ace4:	f8ca 2004 	str.w	r2, [sl, #4]
1000ace8:	f300 812a 	bgt.w	1000af40 <_vfprintf_r+0xfb8>
1000acec:	f103 0802 	add.w	r8, r3, #2
1000acf0:	f10a 0a10 	add.w	sl, sl, #16
1000acf4:	e676      	b.n	1000a9e4 <_vfprintf_r+0xa5c>
1000acf6:	2f00      	cmp	r7, #0
1000acf8:	f77f ae74 	ble.w	1000a9e4 <_vfprintf_r+0xa5c>
1000acfc:	2f10      	cmp	r7, #16
1000acfe:	f8df b04c 	ldr.w	fp, [pc, #76]	; 1000ad4c <_vfprintf_r+0xdc4>
1000ad02:	f340 83b0 	ble.w	1000b466 <_vfprintf_r+0x14de>
1000ad06:	4623      	mov	r3, r4
1000ad08:	f04f 0810 	mov.w	r8, #16
1000ad0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
1000ad10:	9c08      	ldr	r4, [sp, #32]
1000ad12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000ad14:	e005      	b.n	1000ad22 <_vfprintf_r+0xd9a>
1000ad16:	3608      	adds	r6, #8
1000ad18:	3f10      	subs	r7, #16
1000ad1a:	2f10      	cmp	r7, #16
1000ad1c:	f340 820c 	ble.w	1000b138 <_vfprintf_r+0x11b0>
1000ad20:	3501      	adds	r5, #1
1000ad22:	3310      	adds	r3, #16
1000ad24:	2d07      	cmp	r5, #7
1000ad26:	e9cd 5326 	strd	r5, r3, [sp, #152]	; 0x98
1000ad2a:	e9c6 b800 	strd	fp, r8, [r6]
1000ad2e:	ddf2      	ble.n	1000ad16 <_vfprintf_r+0xd8e>
1000ad30:	aa25      	add	r2, sp, #148	; 0x94
1000ad32:	4621      	mov	r1, r4
1000ad34:	4650      	mov	r0, sl
1000ad36:	f003 fbff 	bl	1000e538 <__sprint_r>
1000ad3a:	2800      	cmp	r0, #0
1000ad3c:	f47f aa4d 	bne.w	1000a1da <_vfprintf_r+0x252>
1000ad40:	e9dd 5326 	ldrd	r5, r3, [sp, #152]	; 0x98
1000ad44:	ae32      	add	r6, sp, #200	; 0xc8
1000ad46:	e7e7      	b.n	1000ad18 <_vfprintf_r+0xd90>
1000ad48:	10010a78 	.word	0x10010a78
1000ad4c:	10010a88 	.word	0x10010a88
1000ad50:	aa25      	add	r2, sp, #148	; 0x94
1000ad52:	9908      	ldr	r1, [sp, #32]
1000ad54:	980c      	ldr	r0, [sp, #48]	; 0x30
1000ad56:	f003 fbef 	bl	1000e538 <__sprint_r>
1000ad5a:	2800      	cmp	r0, #0
1000ad5c:	f47f aa3d 	bne.w	1000a1da <_vfprintf_r+0x252>
1000ad60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000ad62:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000ad66:	f7ff bb8c 	b.w	1000a482 <_vfprintf_r+0x4fa>
1000ad6a:	2500      	movs	r5, #0
1000ad6c:	f7ff ba62 	b.w	1000a234 <_vfprintf_r+0x2ac>
1000ad70:	17e5      	asrs	r5, r4, #31
1000ad72:	4622      	mov	r2, r4
1000ad74:	462b      	mov	r3, r5
1000ad76:	2a00      	cmp	r2, #0
1000ad78:	f173 0300 	sbcs.w	r3, r3, #0
1000ad7c:	f6bf ab0f 	bge.w	1000a39e <_vfprintf_r+0x416>
1000ad80:	f04f 082d 	mov.w	r8, #45	; 0x2d
1000ad84:	4264      	negs	r4, r4
1000ad86:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1000ad8a:	f88d 8077 	strb.w	r8, [sp, #119]	; 0x77
1000ad8e:	2301      	movs	r3, #1
1000ad90:	f7ff baab 	b.w	1000a2ea <_vfprintf_r+0x362>
1000ad94:	464c      	mov	r4, r9
1000ad96:	f7ff b963 	b.w	1000a060 <_vfprintf_r+0xd8>
1000ad9a:	9b06      	ldr	r3, [sp, #24]
1000ad9c:	07de      	lsls	r6, r3, #31
1000ad9e:	f53f acd8 	bmi.w	1000a752 <_vfprintf_r+0x7ca>
1000ada2:	f7ff bb82 	b.w	1000a4aa <_vfprintf_r+0x522>
1000ada6:	ab32      	add	r3, sp, #200	; 0xc8
1000ada8:	930e      	str	r3, [sp, #56]	; 0x38
1000adaa:	f7ff bb14 	b.w	1000a3d6 <_vfprintf_r+0x44e>
1000adae:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000adb0:	4610      	mov	r0, r2
1000adb2:	17d1      	asrs	r1, r2, #31
1000adb4:	e9c3 0100 	strd	r0, r1, [r3]
1000adb8:	f7ff b926 	b.w	1000a008 <_vfprintf_r+0x80>
1000adbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1000adc0:	4602      	mov	r2, r0
1000adc2:	460b      	mov	r3, r1
1000adc4:	f005 f9f8 	bl	100101b8 <__aeabi_dcmpun>
1000adc8:	2800      	cmp	r0, #0
1000adca:	f040 8332 	bne.w	1000b432 <_vfprintf_r+0x14aa>
1000adce:	1c74      	adds	r4, r6, #1
1000add0:	f027 0520 	bic.w	r5, r7, #32
1000add4:	f000 82a9 	beq.w	1000b32a <_vfprintf_r+0x13a2>
1000add8:	2d47      	cmp	r5, #71	; 0x47
1000adda:	f000 8243 	beq.w	1000b264 <_vfprintf_r+0x12dc>
1000adde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1000ade2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
1000ade6:	2900      	cmp	r1, #0
1000ade8:	9206      	str	r2, [sp, #24]
1000adea:	f2c0 8217 	blt.w	1000b21c <_vfprintf_r+0x1294>
1000adee:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1000adf2:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
1000adf6:	2300      	movs	r3, #0
1000adf8:	9317      	str	r3, [sp, #92]	; 0x5c
1000adfa:	2f66      	cmp	r7, #102	; 0x66
1000adfc:	f000 81ba 	beq.w	1000b174 <_vfprintf_r+0x11ec>
1000ae00:	2f46      	cmp	r7, #70	; 0x46
1000ae02:	f000 81b7 	beq.w	1000b174 <_vfprintf_r+0x11ec>
1000ae06:	2d45      	cmp	r5, #69	; 0x45
1000ae08:	f000 824e 	beq.w	1000b2a8 <_vfprintf_r+0x1320>
1000ae0c:	a823      	add	r0, sp, #140	; 0x8c
1000ae0e:	a920      	add	r1, sp, #128	; 0x80
1000ae10:	aa1f      	add	r2, sp, #124	; 0x7c
1000ae12:	2302      	movs	r3, #2
1000ae14:	e9cd 1003 	strd	r1, r0, [sp, #12]
1000ae18:	9202      	str	r2, [sp, #8]
1000ae1a:	9300      	str	r3, [sp, #0]
1000ae1c:	9601      	str	r6, [sp, #4]
1000ae1e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1000ae22:	980c      	ldr	r0, [sp, #48]	; 0x30
1000ae24:	f000 fcae 	bl	1000b784 <_dtoa_r>
1000ae28:	2f67      	cmp	r7, #103	; 0x67
1000ae2a:	900e      	str	r0, [sp, #56]	; 0x38
1000ae2c:	4634      	mov	r4, r6
1000ae2e:	f040 824b 	bne.w	1000b2c8 <_vfprintf_r+0x1340>
1000ae32:	f01b 0f01 	tst.w	fp, #1
1000ae36:	f040 824a 	bne.w	1000b2ce <_vfprintf_r+0x1346>
1000ae3a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
1000ae3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1000ae3e:	920f      	str	r2, [sp, #60]	; 0x3c
1000ae40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ae42:	2d47      	cmp	r5, #71	; 0x47
1000ae44:	eba3 0302 	sub.w	r3, r3, r2
1000ae48:	9312      	str	r3, [sp, #72]	; 0x48
1000ae4a:	d106      	bne.n	1000ae5a <_vfprintf_r+0xed2>
1000ae4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ae4e:	1cd8      	adds	r0, r3, #3
1000ae50:	db02      	blt.n	1000ae58 <_vfprintf_r+0xed0>
1000ae52:	429e      	cmp	r6, r3
1000ae54:	f280 824f 	bge.w	1000b2f6 <_vfprintf_r+0x136e>
1000ae58:	3f02      	subs	r7, #2
1000ae5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ae5c:	f88d 7084 	strb.w	r7, [sp, #132]	; 0x84
1000ae60:	1e5a      	subs	r2, r3, #1
1000ae62:	2a00      	cmp	r2, #0
1000ae64:	921f      	str	r2, [sp, #124]	; 0x7c
1000ae66:	bfb6      	itet	lt
1000ae68:	f1c3 0201 	rsblt	r2, r3, #1
1000ae6c:	232b      	movge	r3, #43	; 0x2b
1000ae6e:	232d      	movlt	r3, #45	; 0x2d
1000ae70:	2a09      	cmp	r2, #9
1000ae72:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1000ae76:	f340 82bc 	ble.w	1000b3f2 <_vfprintf_r+0x146a>
1000ae7a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
1000ae7e:	4620      	mov	r0, r4
1000ae80:	4db8      	ldr	r5, [pc, #736]	; (1000b164 <_vfprintf_r+0x11dc>)
1000ae82:	e001      	b.n	1000ae88 <_vfprintf_r+0xf00>
1000ae84:	4608      	mov	r0, r1
1000ae86:	461a      	mov	r2, r3
1000ae88:	fb85 3102 	smull	r3, r1, r5, r2
1000ae8c:	17d3      	asrs	r3, r2, #31
1000ae8e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1000ae92:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1000ae96:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1000ae9a:	3130      	adds	r1, #48	; 0x30
1000ae9c:	2a63      	cmp	r2, #99	; 0x63
1000ae9e:	f800 1c01 	strb.w	r1, [r0, #-1]
1000aea2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1000aea6:	dced      	bgt.n	1000ae84 <_vfprintf_r+0xefc>
1000aea8:	3330      	adds	r3, #48	; 0x30
1000aeaa:	1e82      	subs	r2, r0, #2
1000aeac:	b2db      	uxtb	r3, r3
1000aeae:	4294      	cmp	r4, r2
1000aeb0:	f801 3c01 	strb.w	r3, [r1, #-1]
1000aeb4:	f240 82e4 	bls.w	1000b480 <_vfprintf_r+0x14f8>
1000aeb8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
1000aebc:	e001      	b.n	1000aec2 <_vfprintf_r+0xf3a>
1000aebe:	f811 3b01 	ldrb.w	r3, [r1], #1
1000aec2:	f802 3b01 	strb.w	r3, [r2], #1
1000aec6:	428c      	cmp	r4, r1
1000aec8:	d1f9      	bne.n	1000aebe <_vfprintf_r+0xf36>
1000aeca:	f10d 0395 	add.w	r3, sp, #149	; 0x95
1000aece:	f10d 0286 	add.w	r2, sp, #134	; 0x86
1000aed2:	1a1b      	subs	r3, r3, r0
1000aed4:	4413      	add	r3, r2
1000aed6:	aa21      	add	r2, sp, #132	; 0x84
1000aed8:	1a9b      	subs	r3, r3, r2
1000aeda:	9316      	str	r3, [sp, #88]	; 0x58
1000aedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000aede:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000aee0:	2a01      	cmp	r2, #1
1000aee2:	4413      	add	r3, r2
1000aee4:	930b      	str	r3, [sp, #44]	; 0x2c
1000aee6:	f340 8296 	ble.w	1000b416 <_vfprintf_r+0x148e>
1000aeea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000aeec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000aeee:	4413      	add	r3, r2
1000aef0:	930b      	str	r3, [sp, #44]	; 0x2c
1000aef2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1000aef6:	9307      	str	r3, [sp, #28]
1000aef8:	2300      	movs	r3, #0
1000aefa:	930f      	str	r3, [sp, #60]	; 0x3c
1000aefc:	e174      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000aefe:	f01b 0f40 	tst.w	fp, #64	; 0x40
1000af02:	bf18      	it	ne
1000af04:	b2a4      	uxthne	r4, r4
1000af06:	2500      	movs	r5, #0
1000af08:	2301      	movs	r3, #1
1000af0a:	f7ff b9ea 	b.w	1000a2e2 <_vfprintf_r+0x35a>
1000af0e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
1000af12:	bf1c      	itt	ne
1000af14:	4613      	movne	r3, r2
1000af16:	b2a4      	uxthne	r4, r4
1000af18:	2500      	movs	r5, #0
1000af1a:	f7ff b9e2 	b.w	1000a2e2 <_vfprintf_r+0x35a>
1000af1e:	4240      	negs	r0, r0
1000af20:	900a      	str	r0, [sp, #40]	; 0x28
1000af22:	930d      	str	r3, [sp, #52]	; 0x34
1000af24:	f7ff bb6a 	b.w	1000a5fc <_vfprintf_r+0x674>
1000af28:	9b06      	ldr	r3, [sp, #24]
1000af2a:	07dd      	lsls	r5, r3, #31
1000af2c:	f53f ae45 	bmi.w	1000abba <_vfprintf_r+0xc32>
1000af30:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000af32:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000af34:	428a      	cmp	r2, r1
1000af36:	eba3 0302 	sub.w	r3, r3, r2
1000af3a:	dd5b      	ble.n	1000aff4 <_vfprintf_r+0x106c>
1000af3c:	461d      	mov	r5, r3
1000af3e:	e667      	b.n	1000ac10 <_vfprintf_r+0xc88>
1000af40:	aa25      	add	r2, sp, #148	; 0x94
1000af42:	9908      	ldr	r1, [sp, #32]
1000af44:	980c      	ldr	r0, [sp, #48]	; 0x30
1000af46:	f003 faf7 	bl	1000e538 <__sprint_r>
1000af4a:	2800      	cmp	r0, #0
1000af4c:	f47f a945 	bne.w	1000a1da <_vfprintf_r+0x252>
1000af50:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
1000af54:	f10d 0ad0 	add.w	sl, sp, #208	; 0xd0
1000af58:	f103 0801 	add.w	r8, r3, #1
1000af5c:	ae32      	add	r6, sp, #200	; 0xc8
1000af5e:	e541      	b.n	1000a9e4 <_vfprintf_r+0xa5c>
1000af60:	aa25      	add	r2, sp, #148	; 0x94
1000af62:	9908      	ldr	r1, [sp, #32]
1000af64:	980c      	ldr	r0, [sp, #48]	; 0x30
1000af66:	f003 fae7 	bl	1000e538 <__sprint_r>
1000af6a:	2800      	cmp	r0, #0
1000af6c:	f47f a935 	bne.w	1000a1da <_vfprintf_r+0x252>
1000af70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000af72:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000af76:	f7ff bbfc 	b.w	1000a772 <_vfprintf_r+0x7ea>
1000af7a:	2e06      	cmp	r6, #6
1000af7c:	4633      	mov	r3, r6
1000af7e:	bf28      	it	cs
1000af80:	2306      	movcs	r3, #6
1000af82:	930b      	str	r3, [sp, #44]	; 0x2c
1000af84:	9307      	str	r3, [sp, #28]
1000af86:	4b78      	ldr	r3, [pc, #480]	; (1000b168 <_vfprintf_r+0x11e0>)
1000af88:	940d      	str	r4, [sp, #52]	; 0x34
1000af8a:	930e      	str	r3, [sp, #56]	; 0x38
1000af8c:	f7ff ba39 	b.w	1000a402 <_vfprintf_r+0x47a>
1000af90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000af92:	f8cd b018 	str.w	fp, [sp, #24]
1000af96:	ab32      	add	r3, sp, #200	; 0xc8
1000af98:	1a9b      	subs	r3, r3, r2
1000af9a:	930b      	str	r3, [sp, #44]	; 0x2c
1000af9c:	f7ff ba1b 	b.w	1000a3d6 <_vfprintf_r+0x44e>
1000afa0:	2b10      	cmp	r3, #16
1000afa2:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000afa4:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 1000b170 <_vfprintf_r+0x11e8>
1000afa8:	f340 8127 	ble.w	1000b1fa <_vfprintf_r+0x1272>
1000afac:	2610      	movs	r6, #16
1000afae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1000afb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000afb4:	e005      	b.n	1000afc2 <_vfprintf_r+0x103a>
1000afb6:	f10a 0a08 	add.w	sl, sl, #8
1000afba:	3d10      	subs	r5, #16
1000afbc:	2d10      	cmp	r5, #16
1000afbe:	f340 811c 	ble.w	1000b1fa <_vfprintf_r+0x1272>
1000afc2:	3201      	adds	r2, #1
1000afc4:	3410      	adds	r4, #16
1000afc6:	2a07      	cmp	r2, #7
1000afc8:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000afcc:	e9ca b600 	strd	fp, r6, [sl]
1000afd0:	ddf1      	ble.n	1000afb6 <_vfprintf_r+0x102e>
1000afd2:	aa25      	add	r2, sp, #148	; 0x94
1000afd4:	4641      	mov	r1, r8
1000afd6:	4638      	mov	r0, r7
1000afd8:	f003 faae 	bl	1000e538 <__sprint_r>
1000afdc:	2800      	cmp	r0, #0
1000afde:	f47f a8fc 	bne.w	1000a1da <_vfprintf_r+0x252>
1000afe2:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
1000afe6:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000afea:	e7e6      	b.n	1000afba <_vfprintf_r+0x1032>
1000afec:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000afee:	601a      	str	r2, [r3, #0]
1000aff0:	f7ff b80a 	b.w	1000a008 <_vfprintf_r+0x80>
1000aff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000aff6:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000aff8:	1a55      	subs	r5, r2, r1
1000affa:	e5f6      	b.n	1000abea <_vfprintf_r+0xc62>
1000affc:	aa25      	add	r2, sp, #148	; 0x94
1000affe:	9908      	ldr	r1, [sp, #32]
1000b000:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b002:	f003 fa99 	bl	1000e538 <__sprint_r>
1000b006:	2800      	cmp	r0, #0
1000b008:	f47f a8e7 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b00c:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
1000b010:	ae32      	add	r6, sp, #200	; 0xc8
1000b012:	e4c4      	b.n	1000a99e <_vfprintf_r+0xa16>
1000b014:	aa25      	add	r2, sp, #148	; 0x94
1000b016:	9908      	ldr	r1, [sp, #32]
1000b018:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b01a:	f003 fa8d 	bl	1000e538 <__sprint_r>
1000b01e:	2800      	cmp	r0, #0
1000b020:	f47f a8db 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b024:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
1000b028:	ae32      	add	r6, sp, #200	; 0xc8
1000b02a:	e4ac      	b.n	1000a986 <_vfprintf_r+0x9fe>
1000b02c:	aa25      	add	r2, sp, #148	; 0x94
1000b02e:	9908      	ldr	r1, [sp, #32]
1000b030:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b032:	9317      	str	r3, [sp, #92]	; 0x5c
1000b034:	f003 fa80 	bl	1000e538 <__sprint_r>
1000b038:	2800      	cmp	r0, #0
1000b03a:	f47f a8ce 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b03e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000b040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000b042:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b046:	f7ff b9f2 	b.w	1000a42e <_vfprintf_r+0x4a6>
1000b04a:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000b04c:	4947      	ldr	r1, [pc, #284]	; (1000b16c <_vfprintf_r+0x11e4>)
1000b04e:	f8ca 1000 	str.w	r1, [sl]
1000b052:	3201      	adds	r2, #1
1000b054:	3401      	adds	r4, #1
1000b056:	2101      	movs	r1, #1
1000b058:	2a07      	cmp	r2, #7
1000b05a:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000b05e:	f8ca 1004 	str.w	r1, [sl, #4]
1000b062:	f73f ac3d 	bgt.w	1000a8e0 <_vfprintf_r+0x958>
1000b066:	f10a 0a08 	add.w	sl, sl, #8
1000b06a:	e445      	b.n	1000a8f8 <_vfprintf_r+0x970>
1000b06c:	3201      	adds	r2, #1
1000b06e:	442c      	add	r4, r5
1000b070:	2a07      	cmp	r2, #7
1000b072:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000b076:	e9ca b500 	strd	fp, r5, [sl]
1000b07a:	f77f aa14 	ble.w	1000a4a6 <_vfprintf_r+0x51e>
1000b07e:	e460      	b.n	1000a942 <_vfprintf_r+0x9ba>
1000b080:	aa25      	add	r2, sp, #148	; 0x94
1000b082:	9908      	ldr	r1, [sp, #32]
1000b084:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b086:	f003 fa57 	bl	1000e538 <__sprint_r>
1000b08a:	2800      	cmp	r0, #0
1000b08c:	f47f a8a5 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b090:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b094:	f7ff bb57 	b.w	1000a746 <_vfprintf_r+0x7be>
1000b098:	aa25      	add	r2, sp, #148	; 0x94
1000b09a:	9908      	ldr	r1, [sp, #32]
1000b09c:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b09e:	f003 fa4b 	bl	1000e538 <__sprint_r>
1000b0a2:	2800      	cmp	r0, #0
1000b0a4:	f47f a899 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b0a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000b0aa:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b0ae:	f7ff b9e3 	b.w	1000a478 <_vfprintf_r+0x4f0>
1000b0b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000b0b4:	9915      	ldr	r1, [sp, #84]	; 0x54
1000b0b6:	f8ca 1000 	str.w	r1, [sl]
1000b0ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000b0bc:	f8ca 1004 	str.w	r1, [sl, #4]
1000b0c0:	3201      	adds	r2, #1
1000b0c2:	440c      	add	r4, r1
1000b0c4:	2a07      	cmp	r2, #7
1000b0c6:	9427      	str	r4, [sp, #156]	; 0x9c
1000b0c8:	9226      	str	r2, [sp, #152]	; 0x98
1000b0ca:	f300 80cf 	bgt.w	1000b26c <_vfprintf_r+0x12e4>
1000b0ce:	f10a 0a08 	add.w	sl, sl, #8
1000b0d2:	2b00      	cmp	r3, #0
1000b0d4:	f6bf ac2a 	bge.w	1000a92c <_vfprintf_r+0x9a4>
1000b0d8:	425d      	negs	r5, r3
1000b0da:	3310      	adds	r3, #16
1000b0dc:	f8df b090 	ldr.w	fp, [pc, #144]	; 1000b170 <_vfprintf_r+0x11e8>
1000b0e0:	f280 8170 	bge.w	1000b3c4 <_vfprintf_r+0x143c>
1000b0e4:	465f      	mov	r7, fp
1000b0e6:	2610      	movs	r6, #16
1000b0e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000b0ec:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
1000b0f0:	e005      	b.n	1000b0fe <_vfprintf_r+0x1176>
1000b0f2:	f10a 0a08 	add.w	sl, sl, #8
1000b0f6:	3d10      	subs	r5, #16
1000b0f8:	2d10      	cmp	r5, #16
1000b0fa:	f340 8162 	ble.w	1000b3c2 <_vfprintf_r+0x143a>
1000b0fe:	3201      	adds	r2, #1
1000b100:	3410      	adds	r4, #16
1000b102:	2a07      	cmp	r2, #7
1000b104:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000b108:	e9ca 7600 	strd	r7, r6, [sl]
1000b10c:	ddf1      	ble.n	1000b0f2 <_vfprintf_r+0x116a>
1000b10e:	aa25      	add	r2, sp, #148	; 0x94
1000b110:	4641      	mov	r1, r8
1000b112:	4658      	mov	r0, fp
1000b114:	f003 fa10 	bl	1000e538 <__sprint_r>
1000b118:	2800      	cmp	r0, #0
1000b11a:	f47f a85e 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b11e:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
1000b122:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b126:	e7e6      	b.n	1000b0f6 <_vfprintf_r+0x116e>
1000b128:	980e      	ldr	r0, [sp, #56]	; 0x38
1000b12a:	f7fe fe09 	bl	10009d40 <strlen>
1000b12e:	462e      	mov	r6, r5
1000b130:	4603      	mov	r3, r0
1000b132:	900b      	str	r0, [sp, #44]	; 0x2c
1000b134:	f7ff b8af 	b.w	1000a296 <_vfprintf_r+0x30e>
1000b138:	461c      	mov	r4, r3
1000b13a:	f105 0801 	add.w	r8, r5, #1
1000b13e:	f106 0208 	add.w	r2, r6, #8
1000b142:	443c      	add	r4, r7
1000b144:	f1b8 0f07 	cmp.w	r8, #7
1000b148:	9427      	str	r4, [sp, #156]	; 0x9c
1000b14a:	e9c6 b700 	strd	fp, r7, [r6]
1000b14e:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
1000b152:	f73f aef5 	bgt.w	1000af40 <_vfprintf_r+0xfb8>
1000b156:	f108 0801 	add.w	r8, r8, #1
1000b15a:	f102 0a08 	add.w	sl, r2, #8
1000b15e:	4616      	mov	r6, r2
1000b160:	e440      	b.n	1000a9e4 <_vfprintf_r+0xa5c>
1000b162:	bf00      	nop
1000b164:	66666667 	.word	0x66666667
1000b168:	10010ad0 	.word	0x10010ad0
1000b16c:	10010ad8 	.word	0x10010ad8
1000b170:	10010a88 	.word	0x10010a88
1000b174:	a823      	add	r0, sp, #140	; 0x8c
1000b176:	a920      	add	r1, sp, #128	; 0x80
1000b178:	aa1f      	add	r2, sp, #124	; 0x7c
1000b17a:	2303      	movs	r3, #3
1000b17c:	e9cd 1003 	strd	r1, r0, [sp, #12]
1000b180:	9202      	str	r2, [sp, #8]
1000b182:	9300      	str	r3, [sp, #0]
1000b184:	9601      	str	r6, [sp, #4]
1000b186:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1000b18a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b18c:	f000 fafa 	bl	1000b784 <_dtoa_r>
1000b190:	900e      	str	r0, [sp, #56]	; 0x38
1000b192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b194:	781b      	ldrb	r3, [r3, #0]
1000b196:	2b30      	cmp	r3, #48	; 0x30
1000b198:	eb00 0406 	add.w	r4, r0, r6
1000b19c:	d056      	beq.n	1000b24c <_vfprintf_r+0x12c4>
1000b19e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000b1a0:	441c      	add	r4, r3
1000b1a2:	2200      	movs	r2, #0
1000b1a4:	2300      	movs	r3, #0
1000b1a6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1000b1aa:	f004 ffd3 	bl	10010154 <__aeabi_dcmpeq>
1000b1ae:	2800      	cmp	r0, #0
1000b1b0:	f000 8090 	beq.w	1000b2d4 <_vfprintf_r+0x134c>
1000b1b4:	4623      	mov	r3, r4
1000b1b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b1b8:	1a9b      	subs	r3, r3, r2
1000b1ba:	9312      	str	r3, [sp, #72]	; 0x48
1000b1bc:	2d47      	cmp	r5, #71	; 0x47
1000b1be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000b1c0:	930f      	str	r3, [sp, #60]	; 0x3c
1000b1c2:	f43f ae43 	beq.w	1000ae4c <_vfprintf_r+0xec4>
1000b1c6:	2f66      	cmp	r7, #102	; 0x66
1000b1c8:	f47f ae47 	bne.w	1000ae5a <_vfprintf_r+0xed2>
1000b1cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000b1ce:	f00b 0301 	and.w	r3, fp, #1
1000b1d2:	2a00      	cmp	r2, #0
1000b1d4:	ea43 0306 	orr.w	r3, r3, r6
1000b1d8:	f340 8138 	ble.w	1000b44c <_vfprintf_r+0x14c4>
1000b1dc:	2b00      	cmp	r3, #0
1000b1de:	f040 8123 	bne.w	1000b428 <_vfprintf_r+0x14a0>
1000b1e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b1e4:	9307      	str	r3, [sp, #28]
1000b1e6:	930b      	str	r3, [sp, #44]	; 0x2c
1000b1e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000b1ea:	2b00      	cmp	r3, #0
1000b1ec:	d07e      	beq.n	1000b2ec <_vfprintf_r+0x1364>
1000b1ee:	232d      	movs	r3, #45	; 0x2d
1000b1f0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1000b1f4:	2600      	movs	r6, #0
1000b1f6:	f7ff b85b 	b.w	1000a2b0 <_vfprintf_r+0x328>
1000b1fa:	3201      	adds	r2, #1
1000b1fc:	442c      	add	r4, r5
1000b1fe:	2a07      	cmp	r2, #7
1000b200:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000b204:	e9ca b500 	strd	fp, r5, [sl]
1000b208:	dc3e      	bgt.n	1000b288 <_vfprintf_r+0x1300>
1000b20a:	f10a 0a08 	add.w	sl, sl, #8
1000b20e:	e4cf      	b.n	1000abb0 <_vfprintf_r+0xc28>
1000b210:	f04f 082d 	mov.w	r8, #45	; 0x2d
1000b214:	f88d 8077 	strb.w	r8, [sp, #119]	; 0x77
1000b218:	f7ff b9ba 	b.w	1000a590 <_vfprintf_r+0x608>
1000b21c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1000b220:	931b      	str	r3, [sp, #108]	; 0x6c
1000b222:	232d      	movs	r3, #45	; 0x2d
1000b224:	901a      	str	r0, [sp, #104]	; 0x68
1000b226:	9317      	str	r3, [sp, #92]	; 0x5c
1000b228:	e5e7      	b.n	1000adfa <_vfprintf_r+0xe72>
1000b22a:	aa25      	add	r2, sp, #148	; 0x94
1000b22c:	9908      	ldr	r1, [sp, #32]
1000b22e:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b230:	f003 f982 	bl	1000e538 <__sprint_r>
1000b234:	2800      	cmp	r0, #0
1000b236:	f47e afd0 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b23a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
1000b23c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000b23e:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b242:	e4ca      	b.n	1000abda <_vfprintf_r+0xc52>
1000b244:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b248:	f7ff ba22 	b.w	1000a690 <_vfprintf_r+0x708>
1000b24c:	2200      	movs	r2, #0
1000b24e:	2300      	movs	r3, #0
1000b250:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1000b254:	f004 ff7e 	bl	10010154 <__aeabi_dcmpeq>
1000b258:	2800      	cmp	r0, #0
1000b25a:	d1a0      	bne.n	1000b19e <_vfprintf_r+0x1216>
1000b25c:	f1c6 0301 	rsb	r3, r6, #1
1000b260:	931f      	str	r3, [sp, #124]	; 0x7c
1000b262:	e79d      	b.n	1000b1a0 <_vfprintf_r+0x1218>
1000b264:	2e00      	cmp	r6, #0
1000b266:	bf08      	it	eq
1000b268:	2601      	moveq	r6, #1
1000b26a:	e5b8      	b.n	1000adde <_vfprintf_r+0xe56>
1000b26c:	aa25      	add	r2, sp, #148	; 0x94
1000b26e:	9908      	ldr	r1, [sp, #32]
1000b270:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b272:	f003 f961 	bl	1000e538 <__sprint_r>
1000b276:	2800      	cmp	r0, #0
1000b278:	f47e afaf 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b27c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000b27e:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
1000b282:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b286:	e724      	b.n	1000b0d2 <_vfprintf_r+0x114a>
1000b288:	aa25      	add	r2, sp, #148	; 0x94
1000b28a:	9908      	ldr	r1, [sp, #32]
1000b28c:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b28e:	f003 f953 	bl	1000e538 <__sprint_r>
1000b292:	2800      	cmp	r0, #0
1000b294:	f47e afa1 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b298:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000b29a:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b29e:	e487      	b.n	1000abb0 <_vfprintf_r+0xc28>
1000b2a0:	f8dd b018 	ldr.w	fp, [sp, #24]
1000b2a4:	f7ff b88d 	b.w	1000a3c2 <_vfprintf_r+0x43a>
1000b2a8:	a823      	add	r0, sp, #140	; 0x8c
1000b2aa:	a920      	add	r1, sp, #128	; 0x80
1000b2ac:	aa1f      	add	r2, sp, #124	; 0x7c
1000b2ae:	2302      	movs	r3, #2
1000b2b0:	1c74      	adds	r4, r6, #1
1000b2b2:	e9cd 1003 	strd	r1, r0, [sp, #12]
1000b2b6:	9202      	str	r2, [sp, #8]
1000b2b8:	9300      	str	r3, [sp, #0]
1000b2ba:	9401      	str	r4, [sp, #4]
1000b2bc:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
1000b2c0:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b2c2:	f000 fa5f 	bl	1000b784 <_dtoa_r>
1000b2c6:	900e      	str	r0, [sp, #56]	; 0x38
1000b2c8:	2f47      	cmp	r7, #71	; 0x47
1000b2ca:	f43f adb2 	beq.w	1000ae32 <_vfprintf_r+0xeaa>
1000b2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b2d0:	441c      	add	r4, r3
1000b2d2:	e766      	b.n	1000b1a2 <_vfprintf_r+0x121a>
1000b2d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1000b2d6:	42a3      	cmp	r3, r4
1000b2d8:	f4bf af6d 	bcs.w	1000b1b6 <_vfprintf_r+0x122e>
1000b2dc:	2130      	movs	r1, #48	; 0x30
1000b2de:	1c5a      	adds	r2, r3, #1
1000b2e0:	9223      	str	r2, [sp, #140]	; 0x8c
1000b2e2:	7019      	strb	r1, [r3, #0]
1000b2e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1000b2e6:	429c      	cmp	r4, r3
1000b2e8:	d8f9      	bhi.n	1000b2de <_vfprintf_r+0x1356>
1000b2ea:	e764      	b.n	1000b1b6 <_vfprintf_r+0x122e>
1000b2ec:	f89d 8077 	ldrb.w	r8, [sp, #119]	; 0x77
1000b2f0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
1000b2f2:	f7fe bfd9 	b.w	1000a2a8 <_vfprintf_r+0x320>
1000b2f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b2f8:	4619      	mov	r1, r3
1000b2fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b2fc:	4299      	cmp	r1, r3
1000b2fe:	dc30      	bgt.n	1000b362 <_vfprintf_r+0x13da>
1000b300:	f01b 0f01 	tst.w	fp, #1
1000b304:	d17e      	bne.n	1000b404 <_vfprintf_r+0x147c>
1000b306:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
1000b30a:	9207      	str	r2, [sp, #28]
1000b30c:	930b      	str	r3, [sp, #44]	; 0x2c
1000b30e:	2767      	movs	r7, #103	; 0x67
1000b310:	e76a      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000b312:	aa25      	add	r2, sp, #148	; 0x94
1000b314:	9908      	ldr	r1, [sp, #32]
1000b316:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b318:	f003 f90e 	bl	1000e538 <__sprint_r>
1000b31c:	2800      	cmp	r0, #0
1000b31e:	f47e af5c 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b322:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000b324:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b328:	e43a      	b.n	1000aba0 <_vfprintf_r+0xc18>
1000b32a:	2606      	movs	r6, #6
1000b32c:	e557      	b.n	1000adde <_vfprintf_r+0xe56>
1000b32e:	aa25      	add	r2, sp, #148	; 0x94
1000b330:	9908      	ldr	r1, [sp, #32]
1000b332:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b334:	f003 f900 	bl	1000e538 <__sprint_r>
1000b338:	2800      	cmp	r0, #0
1000b33a:	f47e af4e 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b33e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000b340:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000b342:	9c27      	ldr	r4, [sp, #156]	; 0x9c
1000b344:	1ad3      	subs	r3, r2, r3
1000b346:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b34a:	e461      	b.n	1000ac10 <_vfprintf_r+0xc88>
1000b34c:	9607      	str	r6, [sp, #28]
1000b34e:	960b      	str	r6, [sp, #44]	; 0x2c
1000b350:	940d      	str	r4, [sp, #52]	; 0x34
1000b352:	4606      	mov	r6, r0
1000b354:	f8cd b018 	str.w	fp, [sp, #24]
1000b358:	900f      	str	r0, [sp, #60]	; 0x3c
1000b35a:	f89d 8077 	ldrb.w	r8, [sp, #119]	; 0x77
1000b35e:	f7fe bfa3 	b.w	1000a2a8 <_vfprintf_r+0x320>
1000b362:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1000b366:	4413      	add	r3, r2
1000b368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000b36a:	930b      	str	r3, [sp, #44]	; 0x2c
1000b36c:	2a00      	cmp	r2, #0
1000b36e:	dc06      	bgt.n	1000b37e <_vfprintf_r+0x13f6>
1000b370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000b374:	f1c3 0301 	rsb	r3, r3, #1
1000b378:	441a      	add	r2, r3
1000b37a:	4613      	mov	r3, r2
1000b37c:	920b      	str	r2, [sp, #44]	; 0x2c
1000b37e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1000b382:	9307      	str	r3, [sp, #28]
1000b384:	2767      	movs	r7, #103	; 0x67
1000b386:	e72f      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000b388:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b38c:	f7fe bf45 	b.w	1000a21a <_vfprintf_r+0x292>
1000b390:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b394:	f7ff b8cd 	b.w	1000a532 <_vfprintf_r+0x5aa>
1000b398:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b39c:	f7fe bfc4 	b.w	1000a328 <_vfprintf_r+0x3a0>
1000b3a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b3a4:	f7ff b911 	b.w	1000a5ca <_vfprintf_r+0x642>
1000b3a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b3ac:	f7fe bfe4 	b.w	1000a378 <_vfprintf_r+0x3f0>
1000b3b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
1000b3b4:	f7ff b8a0 	b.w	1000a4f8 <_vfprintf_r+0x570>
1000b3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1000b3bc:	9309      	str	r3, [sp, #36]	; 0x24
1000b3be:	f7fe bf11 	b.w	1000a1e4 <_vfprintf_r+0x25c>
1000b3c2:	46bb      	mov	fp, r7
1000b3c4:	3201      	adds	r2, #1
1000b3c6:	442c      	add	r4, r5
1000b3c8:	2a07      	cmp	r2, #7
1000b3ca:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
1000b3ce:	e9ca b500 	strd	fp, r5, [sl]
1000b3d2:	f77f aaa9 	ble.w	1000a928 <_vfprintf_r+0x9a0>
1000b3d6:	aa25      	add	r2, sp, #148	; 0x94
1000b3d8:	9908      	ldr	r1, [sp, #32]
1000b3da:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b3dc:	f003 f8ac 	bl	1000e538 <__sprint_r>
1000b3e0:	2800      	cmp	r0, #0
1000b3e2:	f47e aefa 	bne.w	1000a1da <_vfprintf_r+0x252>
1000b3e6:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
1000b3ea:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
1000b3ee:	f7ff ba9d 	b.w	1000a92c <_vfprintf_r+0x9a4>
1000b3f2:	2330      	movs	r3, #48	; 0x30
1000b3f4:	3230      	adds	r2, #48	; 0x30
1000b3f6:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
1000b3fa:	2304      	movs	r3, #4
1000b3fc:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
1000b400:	9316      	str	r3, [sp, #88]	; 0x58
1000b402:	e56b      	b.n	1000aedc <_vfprintf_r+0xf54>
1000b404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b406:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000b408:	4413      	add	r3, r2
1000b40a:	930b      	str	r3, [sp, #44]	; 0x2c
1000b40c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1000b410:	9307      	str	r3, [sp, #28]
1000b412:	2767      	movs	r7, #103	; 0x67
1000b414:	e6e8      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000b416:	f01b 0201 	ands.w	r2, fp, #1
1000b41a:	920f      	str	r2, [sp, #60]	; 0x3c
1000b41c:	f47f ad65 	bne.w	1000aeea <_vfprintf_r+0xf62>
1000b420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1000b424:	9307      	str	r3, [sp, #28]
1000b426:	e6df      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000b428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b42a:	18d3      	adds	r3, r2, r3
1000b42c:	4433      	add	r3, r6
1000b42e:	930b      	str	r3, [sp, #44]	; 0x2c
1000b430:	e7f6      	b.n	1000b420 <_vfprintf_r+0x1498>
1000b432:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b434:	4a14      	ldr	r2, [pc, #80]	; (1000b488 <_vfprintf_r+0x1500>)
1000b436:	2b00      	cmp	r3, #0
1000b438:	bfb6      	itet	lt
1000b43a:	f04f 082d 	movlt.w	r8, #45	; 0x2d
1000b43e:	f89d 8077 	ldrbge.w	r8, [sp, #119]	; 0x77
1000b442:	f88d 8077 	strblt.w	r8, [sp, #119]	; 0x77
1000b446:	4b11      	ldr	r3, [pc, #68]	; (1000b48c <_vfprintf_r+0x1504>)
1000b448:	f7ff b8a4 	b.w	1000a594 <_vfprintf_r+0x60c>
1000b44c:	b91b      	cbnz	r3, 1000b456 <_vfprintf_r+0x14ce>
1000b44e:	2301      	movs	r3, #1
1000b450:	9307      	str	r3, [sp, #28]
1000b452:	930b      	str	r3, [sp, #44]	; 0x2c
1000b454:	e6c8      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000b456:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b458:	3301      	adds	r3, #1
1000b45a:	4433      	add	r3, r6
1000b45c:	930b      	str	r3, [sp, #44]	; 0x2c
1000b45e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1000b462:	9307      	str	r3, [sp, #28]
1000b464:	e6c0      	b.n	1000b1e8 <_vfprintf_r+0x1260>
1000b466:	4652      	mov	r2, sl
1000b468:	e66b      	b.n	1000b142 <_vfprintf_r+0x11ba>
1000b46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b46c:	f899 7001 	ldrb.w	r7, [r9, #1]
1000b470:	f853 6b04 	ldr.w	r6, [r3], #4
1000b474:	930d      	str	r3, [sp, #52]	; 0x34
1000b476:	4681      	mov	r9, r0
1000b478:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
1000b47c:	f7fe bdfc 	b.w	1000a078 <_vfprintf_r+0xf0>
1000b480:	2302      	movs	r3, #2
1000b482:	9316      	str	r3, [sp, #88]	; 0x58
1000b484:	e52a      	b.n	1000aedc <_vfprintf_r+0xf54>
1000b486:	bf00      	nop
1000b488:	10010aa0 	.word	0x10010aa0
1000b48c:	10010aa4 	.word	0x10010aa4

1000b490 <vfprintf>:
1000b490:	b410      	push	{r4}
1000b492:	4c04      	ldr	r4, [pc, #16]	; (1000b4a4 <vfprintf+0x14>)
1000b494:	4613      	mov	r3, r2
1000b496:	460a      	mov	r2, r1
1000b498:	4601      	mov	r1, r0
1000b49a:	6820      	ldr	r0, [r4, #0]
1000b49c:	f85d 4b04 	ldr.w	r4, [sp], #4
1000b4a0:	f7fe bd72 	b.w	10009f88 <_vfprintf_r>
1000b4a4:	200000a0 	.word	0x200000a0

1000b4a8 <__sbprintf>:
1000b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4aa:	460c      	mov	r4, r1
1000b4ac:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
1000b4b0:	8989      	ldrh	r1, [r1, #12]
1000b4b2:	6e66      	ldr	r6, [r4, #100]	; 0x64
1000b4b4:	89e5      	ldrh	r5, [r4, #14]
1000b4b6:	9619      	str	r6, [sp, #100]	; 0x64
1000b4b8:	f021 0102 	bic.w	r1, r1, #2
1000b4bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
1000b4be:	f8ad 500e 	strh.w	r5, [sp, #14]
1000b4c2:	2500      	movs	r5, #0
1000b4c4:	69e7      	ldr	r7, [r4, #28]
1000b4c6:	f8ad 100c 	strh.w	r1, [sp, #12]
1000b4ca:	9609      	str	r6, [sp, #36]	; 0x24
1000b4cc:	9506      	str	r5, [sp, #24]
1000b4ce:	ae1a      	add	r6, sp, #104	; 0x68
1000b4d0:	f44f 6580 	mov.w	r5, #1024	; 0x400
1000b4d4:	4669      	mov	r1, sp
1000b4d6:	9600      	str	r6, [sp, #0]
1000b4d8:	9604      	str	r6, [sp, #16]
1000b4da:	9502      	str	r5, [sp, #8]
1000b4dc:	9505      	str	r5, [sp, #20]
1000b4de:	9707      	str	r7, [sp, #28]
1000b4e0:	4606      	mov	r6, r0
1000b4e2:	f7fe fd51 	bl	10009f88 <_vfprintf_r>
1000b4e6:	1e05      	subs	r5, r0, #0
1000b4e8:	db07      	blt.n	1000b4fa <__sbprintf+0x52>
1000b4ea:	4630      	mov	r0, r6
1000b4ec:	4669      	mov	r1, sp
1000b4ee:	f001 f94b 	bl	1000c788 <_fflush_r>
1000b4f2:	2800      	cmp	r0, #0
1000b4f4:	bf18      	it	ne
1000b4f6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1000b4fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1000b4fe:	065b      	lsls	r3, r3, #25
1000b500:	d503      	bpl.n	1000b50a <__sbprintf+0x62>
1000b502:	89a3      	ldrh	r3, [r4, #12]
1000b504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000b508:	81a3      	strh	r3, [r4, #12]
1000b50a:	4628      	mov	r0, r5
1000b50c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
1000b510:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b512:	bf00      	nop

1000b514 <__swsetup_r>:
1000b514:	b538      	push	{r3, r4, r5, lr}
1000b516:	4b32      	ldr	r3, [pc, #200]	; (1000b5e0 <__swsetup_r+0xcc>)
1000b518:	681b      	ldr	r3, [r3, #0]
1000b51a:	4605      	mov	r5, r0
1000b51c:	460c      	mov	r4, r1
1000b51e:	b10b      	cbz	r3, 1000b524 <__swsetup_r+0x10>
1000b520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000b522:	b312      	cbz	r2, 1000b56a <__swsetup_r+0x56>
1000b524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000b528:	b293      	uxth	r3, r2
1000b52a:	0718      	lsls	r0, r3, #28
1000b52c:	d525      	bpl.n	1000b57a <__swsetup_r+0x66>
1000b52e:	6920      	ldr	r0, [r4, #16]
1000b530:	2800      	cmp	r0, #0
1000b532:	d02d      	beq.n	1000b590 <__swsetup_r+0x7c>
1000b534:	f013 0201 	ands.w	r2, r3, #1
1000b538:	d007      	beq.n	1000b54a <__swsetup_r+0x36>
1000b53a:	6963      	ldr	r3, [r4, #20]
1000b53c:	2200      	movs	r2, #0
1000b53e:	425b      	negs	r3, r3
1000b540:	61a3      	str	r3, [r4, #24]
1000b542:	60a2      	str	r2, [r4, #8]
1000b544:	b138      	cbz	r0, 1000b556 <__swsetup_r+0x42>
1000b546:	2000      	movs	r0, #0
1000b548:	bd38      	pop	{r3, r4, r5, pc}
1000b54a:	0799      	lsls	r1, r3, #30
1000b54c:	bf58      	it	pl
1000b54e:	6962      	ldrpl	r2, [r4, #20]
1000b550:	60a2      	str	r2, [r4, #8]
1000b552:	2800      	cmp	r0, #0
1000b554:	d1f7      	bne.n	1000b546 <__swsetup_r+0x32>
1000b556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000b55a:	061a      	lsls	r2, r3, #24
1000b55c:	d5f4      	bpl.n	1000b548 <__swsetup_r+0x34>
1000b55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000b562:	81a3      	strh	r3, [r4, #12]
1000b564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000b568:	bd38      	pop	{r3, r4, r5, pc}
1000b56a:	4618      	mov	r0, r3
1000b56c:	f001 fa12 	bl	1000c994 <__sinit>
1000b570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000b574:	b293      	uxth	r3, r2
1000b576:	0718      	lsls	r0, r3, #28
1000b578:	d4d9      	bmi.n	1000b52e <__swsetup_r+0x1a>
1000b57a:	06d9      	lsls	r1, r3, #27
1000b57c:	d528      	bpl.n	1000b5d0 <__swsetup_r+0xbc>
1000b57e:	0758      	lsls	r0, r3, #29
1000b580:	d412      	bmi.n	1000b5a8 <__swsetup_r+0x94>
1000b582:	6920      	ldr	r0, [r4, #16]
1000b584:	f042 0308 	orr.w	r3, r2, #8
1000b588:	81a3      	strh	r3, [r4, #12]
1000b58a:	b29b      	uxth	r3, r3
1000b58c:	2800      	cmp	r0, #0
1000b58e:	d1d1      	bne.n	1000b534 <__swsetup_r+0x20>
1000b590:	f403 7220 	and.w	r2, r3, #640	; 0x280
1000b594:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1000b598:	d0cc      	beq.n	1000b534 <__swsetup_r+0x20>
1000b59a:	4628      	mov	r0, r5
1000b59c:	4621      	mov	r1, r4
1000b59e:	f001 fd6f 	bl	1000d080 <__smakebuf_r>
1000b5a2:	89a3      	ldrh	r3, [r4, #12]
1000b5a4:	6920      	ldr	r0, [r4, #16]
1000b5a6:	e7c5      	b.n	1000b534 <__swsetup_r+0x20>
1000b5a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
1000b5aa:	b151      	cbz	r1, 1000b5c2 <__swsetup_r+0xae>
1000b5ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
1000b5b0:	4299      	cmp	r1, r3
1000b5b2:	d004      	beq.n	1000b5be <__swsetup_r+0xaa>
1000b5b4:	4628      	mov	r0, r5
1000b5b6:	f001 fa5d 	bl	1000ca74 <_free_r>
1000b5ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000b5be:	2300      	movs	r3, #0
1000b5c0:	6323      	str	r3, [r4, #48]	; 0x30
1000b5c2:	2300      	movs	r3, #0
1000b5c4:	6920      	ldr	r0, [r4, #16]
1000b5c6:	6063      	str	r3, [r4, #4]
1000b5c8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1000b5cc:	6020      	str	r0, [r4, #0]
1000b5ce:	e7d9      	b.n	1000b584 <__swsetup_r+0x70>
1000b5d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1000b5d4:	2309      	movs	r3, #9
1000b5d6:	602b      	str	r3, [r5, #0]
1000b5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000b5dc:	81a2      	strh	r2, [r4, #12]
1000b5de:	bd38      	pop	{r3, r4, r5, pc}
1000b5e0:	200000a0 	.word	0x200000a0

1000b5e4 <__register_exitproc>:
1000b5e4:	b4f0      	push	{r4, r5, r6, r7}
1000b5e6:	4c18      	ldr	r4, [pc, #96]	; (1000b648 <__register_exitproc+0x64>)
1000b5e8:	6825      	ldr	r5, [r4, #0]
1000b5ea:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
1000b5ee:	b314      	cbz	r4, 1000b636 <__register_exitproc+0x52>
1000b5f0:	6865      	ldr	r5, [r4, #4]
1000b5f2:	2d1f      	cmp	r5, #31
1000b5f4:	dc24      	bgt.n	1000b640 <__register_exitproc+0x5c>
1000b5f6:	b938      	cbnz	r0, 1000b608 <__register_exitproc+0x24>
1000b5f8:	1cab      	adds	r3, r5, #2
1000b5fa:	3501      	adds	r5, #1
1000b5fc:	6065      	str	r5, [r4, #4]
1000b5fe:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
1000b602:	2000      	movs	r0, #0
1000b604:	bcf0      	pop	{r4, r5, r6, r7}
1000b606:	4770      	bx	lr
1000b608:	eb04 0685 	add.w	r6, r4, r5, lsl #2
1000b60c:	2701      	movs	r7, #1
1000b60e:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
1000b612:	fa07 f205 	lsl.w	r2, r7, r5
1000b616:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
1000b61a:	2802      	cmp	r0, #2
1000b61c:	ea47 0702 	orr.w	r7, r7, r2
1000b620:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
1000b624:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
1000b628:	d1e6      	bne.n	1000b5f8 <__register_exitproc+0x14>
1000b62a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
1000b62e:	431a      	orrs	r2, r3
1000b630:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
1000b634:	e7e0      	b.n	1000b5f8 <__register_exitproc+0x14>
1000b636:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
1000b63a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
1000b63e:	e7d7      	b.n	1000b5f0 <__register_exitproc+0xc>
1000b640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000b644:	e7de      	b.n	1000b604 <__register_exitproc+0x20>
1000b646:	bf00      	nop
1000b648:	10010a70 	.word	0x10010a70

1000b64c <register_fini>:
1000b64c:	4b02      	ldr	r3, [pc, #8]	; (1000b658 <register_fini+0xc>)
1000b64e:	b113      	cbz	r3, 1000b656 <register_fini+0xa>
1000b650:	4802      	ldr	r0, [pc, #8]	; (1000b65c <register_fini+0x10>)
1000b652:	f7fd bf89 	b.w	10009568 <atexit>
1000b656:	4770      	bx	lr
1000b658:	00000000 	.word	0x00000000
1000b65c:	10009591 	.word	0x10009591

1000b660 <quorem>:
1000b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000b664:	6903      	ldr	r3, [r0, #16]
1000b666:	690f      	ldr	r7, [r1, #16]
1000b668:	42bb      	cmp	r3, r7
1000b66a:	b083      	sub	sp, #12
1000b66c:	f2c0 8086 	blt.w	1000b77c <quorem+0x11c>
1000b670:	3f01      	subs	r7, #1
1000b672:	f101 0614 	add.w	r6, r1, #20
1000b676:	f100 0a14 	add.w	sl, r0, #20
1000b67a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1000b67e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1000b682:	00bc      	lsls	r4, r7, #2
1000b684:	3301      	adds	r3, #1
1000b686:	9400      	str	r4, [sp, #0]
1000b688:	eb06 0904 	add.w	r9, r6, r4
1000b68c:	429a      	cmp	r2, r3
1000b68e:	4454      	add	r4, sl
1000b690:	fbb2 f8f3 	udiv	r8, r2, r3
1000b694:	9401      	str	r4, [sp, #4]
1000b696:	d33a      	bcc.n	1000b70e <quorem+0xae>
1000b698:	2500      	movs	r5, #0
1000b69a:	462a      	mov	r2, r5
1000b69c:	46b6      	mov	lr, r6
1000b69e:	46d4      	mov	ip, sl
1000b6a0:	f85e 4b04 	ldr.w	r4, [lr], #4
1000b6a4:	f8dc 3000 	ldr.w	r3, [ip]
1000b6a8:	fa1f fb84 	uxth.w	fp, r4
1000b6ac:	fb08 550b 	mla	r5, r8, fp, r5
1000b6b0:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1000b6b4:	0c24      	lsrs	r4, r4, #16
1000b6b6:	fb08 b404 	mla	r4, r8, r4, fp
1000b6ba:	b2ad      	uxth	r5, r5
1000b6bc:	1b55      	subs	r5, r2, r5
1000b6be:	b2a2      	uxth	r2, r4
1000b6c0:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1000b6c4:	fa15 f383 	uxtah	r3, r5, r3
1000b6c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
1000b6cc:	b29b      	uxth	r3, r3
1000b6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000b6d2:	45f1      	cmp	r9, lr
1000b6d4:	ea4f 4514 	mov.w	r5, r4, lsr #16
1000b6d8:	f84c 3b04 	str.w	r3, [ip], #4
1000b6dc:	ea4f 4222 	mov.w	r2, r2, asr #16
1000b6e0:	d2de      	bcs.n	1000b6a0 <quorem+0x40>
1000b6e2:	9b00      	ldr	r3, [sp, #0]
1000b6e4:	f85a 3003 	ldr.w	r3, [sl, r3]
1000b6e8:	b98b      	cbnz	r3, 1000b70e <quorem+0xae>
1000b6ea:	9a01      	ldr	r2, [sp, #4]
1000b6ec:	1f13      	subs	r3, r2, #4
1000b6ee:	459a      	cmp	sl, r3
1000b6f0:	d20c      	bcs.n	1000b70c <quorem+0xac>
1000b6f2:	f852 3c04 	ldr.w	r3, [r2, #-4]
1000b6f6:	b94b      	cbnz	r3, 1000b70c <quorem+0xac>
1000b6f8:	f1a2 0308 	sub.w	r3, r2, #8
1000b6fc:	e002      	b.n	1000b704 <quorem+0xa4>
1000b6fe:	681a      	ldr	r2, [r3, #0]
1000b700:	3b04      	subs	r3, #4
1000b702:	b91a      	cbnz	r2, 1000b70c <quorem+0xac>
1000b704:	459a      	cmp	sl, r3
1000b706:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1000b70a:	d3f8      	bcc.n	1000b6fe <quorem+0x9e>
1000b70c:	6107      	str	r7, [r0, #16]
1000b70e:	4604      	mov	r4, r0
1000b710:	f002 faa0 	bl	1000dc54 <__mcmp>
1000b714:	2800      	cmp	r0, #0
1000b716:	db2d      	blt.n	1000b774 <quorem+0x114>
1000b718:	f108 0801 	add.w	r8, r8, #1
1000b71c:	4650      	mov	r0, sl
1000b71e:	2300      	movs	r3, #0
1000b720:	f856 1b04 	ldr.w	r1, [r6], #4
1000b724:	6805      	ldr	r5, [r0, #0]
1000b726:	b28a      	uxth	r2, r1
1000b728:	1a9a      	subs	r2, r3, r2
1000b72a:	0c0b      	lsrs	r3, r1, #16
1000b72c:	fa12 f285 	uxtah	r2, r2, r5
1000b730:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1000b734:	eb03 4322 	add.w	r3, r3, r2, asr #16
1000b738:	b292      	uxth	r2, r2
1000b73a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1000b73e:	45b1      	cmp	r9, r6
1000b740:	f840 2b04 	str.w	r2, [r0], #4
1000b744:	ea4f 4323 	mov.w	r3, r3, asr #16
1000b748:	d2ea      	bcs.n	1000b720 <quorem+0xc0>
1000b74a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1000b74e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1000b752:	b97a      	cbnz	r2, 1000b774 <quorem+0x114>
1000b754:	1f1a      	subs	r2, r3, #4
1000b756:	4592      	cmp	sl, r2
1000b758:	d20b      	bcs.n	1000b772 <quorem+0x112>
1000b75a:	f853 2c04 	ldr.w	r2, [r3, #-4]
1000b75e:	b942      	cbnz	r2, 1000b772 <quorem+0x112>
1000b760:	3b08      	subs	r3, #8
1000b762:	e002      	b.n	1000b76a <quorem+0x10a>
1000b764:	681a      	ldr	r2, [r3, #0]
1000b766:	3b04      	subs	r3, #4
1000b768:	b91a      	cbnz	r2, 1000b772 <quorem+0x112>
1000b76a:	459a      	cmp	sl, r3
1000b76c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1000b770:	d3f8      	bcc.n	1000b764 <quorem+0x104>
1000b772:	6127      	str	r7, [r4, #16]
1000b774:	4640      	mov	r0, r8
1000b776:	b003      	add	sp, #12
1000b778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000b77c:	2000      	movs	r0, #0
1000b77e:	b003      	add	sp, #12
1000b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1000b784 <_dtoa_r>:
1000b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000b788:	6c01      	ldr	r1, [r0, #64]	; 0x40
1000b78a:	b097      	sub	sp, #92	; 0x5c
1000b78c:	4616      	mov	r6, r2
1000b78e:	461f      	mov	r7, r3
1000b790:	4604      	mov	r4, r0
1000b792:	9d23      	ldr	r5, [sp, #140]	; 0x8c
1000b794:	e9cd 6702 	strd	r6, r7, [sp, #8]
1000b798:	b141      	cbz	r1, 1000b7ac <_dtoa_r+0x28>
1000b79a:	6c42      	ldr	r2, [r0, #68]	; 0x44
1000b79c:	604a      	str	r2, [r1, #4]
1000b79e:	2301      	movs	r3, #1
1000b7a0:	4093      	lsls	r3, r2
1000b7a2:	608b      	str	r3, [r1, #8]
1000b7a4:	f001 ffe6 	bl	1000d774 <_Bfree>
1000b7a8:	2300      	movs	r3, #0
1000b7aa:	6423      	str	r3, [r4, #64]	; 0x40
1000b7ac:	1e3e      	subs	r6, r7, #0
1000b7ae:	bfb4      	ite	lt
1000b7b0:	2301      	movlt	r3, #1
1000b7b2:	2300      	movge	r3, #0
1000b7b4:	602b      	str	r3, [r5, #0]
1000b7b6:	4b76      	ldr	r3, [pc, #472]	; (1000b990 <_dtoa_r+0x20c>)
1000b7b8:	bfbc      	itt	lt
1000b7ba:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1000b7be:	9603      	strlt	r6, [sp, #12]
1000b7c0:	43b3      	bics	r3, r6
1000b7c2:	f000 80af 	beq.w	1000b924 <_dtoa_r+0x1a0>
1000b7c6:	ed9d 7b02 	vldr	d7, [sp, #8]
1000b7ca:	2200      	movs	r2, #0
1000b7cc:	2300      	movs	r3, #0
1000b7ce:	ec51 0b17 	vmov	r0, r1, d7
1000b7d2:	ed8d 7b06 	vstr	d7, [sp, #24]
1000b7d6:	f004 fcbd 	bl	10010154 <__aeabi_dcmpeq>
1000b7da:	4607      	mov	r7, r0
1000b7dc:	b178      	cbz	r0, 1000b7fe <_dtoa_r+0x7a>
1000b7de:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000b7e0:	2301      	movs	r3, #1
1000b7e2:	6013      	str	r3, [r2, #0]
1000b7e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
1000b7e6:	2b00      	cmp	r3, #0
1000b7e8:	f000 831a 	beq.w	1000be20 <_dtoa_r+0x69c>
1000b7ec:	4b69      	ldr	r3, [pc, #420]	; (1000b994 <_dtoa_r+0x210>)
1000b7ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000b7f0:	6013      	str	r3, [r2, #0]
1000b7f2:	3b01      	subs	r3, #1
1000b7f4:	9304      	str	r3, [sp, #16]
1000b7f6:	9804      	ldr	r0, [sp, #16]
1000b7f8:	b017      	add	sp, #92	; 0x5c
1000b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000b7fe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
1000b802:	aa14      	add	r2, sp, #80	; 0x50
1000b804:	ab15      	add	r3, sp, #84	; 0x54
1000b806:	e9cd 3200 	strd	r3, r2, [sp]
1000b80a:	4620      	mov	r0, r4
1000b80c:	4642      	mov	r2, r8
1000b80e:	464b      	mov	r3, r9
1000b810:	f002 fb4c 	bl	1000deac <__d2b>
1000b814:	0d35      	lsrs	r5, r6, #20
1000b816:	4683      	mov	fp, r0
1000b818:	f040 809a 	bne.w	1000b950 <_dtoa_r+0x1cc>
1000b81c:	e9dd 8514 	ldrd	r8, r5, [sp, #80]	; 0x50
1000b820:	4445      	add	r5, r8
1000b822:	f205 4332 	addw	r3, r5, #1074	; 0x432
1000b826:	2b20      	cmp	r3, #32
1000b828:	f340 83c8 	ble.w	1000bfbc <_dtoa_r+0x838>
1000b82c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1000b830:	409e      	lsls	r6, r3
1000b832:	9b02      	ldr	r3, [sp, #8]
1000b834:	f205 4012 	addw	r0, r5, #1042	; 0x412
1000b838:	fa23 f000 	lsr.w	r0, r3, r0
1000b83c:	4330      	orrs	r0, r6
1000b83e:	f004 f9a7 	bl	1000fb90 <__aeabi_ui2d>
1000b842:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1000b846:	2101      	movs	r1, #1
1000b848:	4602      	mov	r2, r0
1000b84a:	3d01      	subs	r5, #1
1000b84c:	910d      	str	r1, [sp, #52]	; 0x34
1000b84e:	4610      	mov	r0, r2
1000b850:	4619      	mov	r1, r3
1000b852:	2200      	movs	r2, #0
1000b854:	4b50      	ldr	r3, [pc, #320]	; (1000b998 <_dtoa_r+0x214>)
1000b856:	f004 f85d 	bl	1000f914 <__aeabi_dsub>
1000b85a:	a347      	add	r3, pc, #284	; (adr r3, 1000b978 <_dtoa_r+0x1f4>)
1000b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b860:	f004 fa10 	bl	1000fc84 <__aeabi_dmul>
1000b864:	a346      	add	r3, pc, #280	; (adr r3, 1000b980 <_dtoa_r+0x1fc>)
1000b866:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b86a:	f004 f855 	bl	1000f918 <__adddf3>
1000b86e:	4606      	mov	r6, r0
1000b870:	4628      	mov	r0, r5
1000b872:	460f      	mov	r7, r1
1000b874:	f004 f99c 	bl	1000fbb0 <__aeabi_i2d>
1000b878:	a343      	add	r3, pc, #268	; (adr r3, 1000b988 <_dtoa_r+0x204>)
1000b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b87e:	f004 fa01 	bl	1000fc84 <__aeabi_dmul>
1000b882:	4602      	mov	r2, r0
1000b884:	460b      	mov	r3, r1
1000b886:	4630      	mov	r0, r6
1000b888:	4639      	mov	r1, r7
1000b88a:	f004 f845 	bl	1000f918 <__adddf3>
1000b88e:	4606      	mov	r6, r0
1000b890:	460f      	mov	r7, r1
1000b892:	f004 fca7 	bl	100101e4 <__aeabi_d2iz>
1000b896:	2200      	movs	r2, #0
1000b898:	4682      	mov	sl, r0
1000b89a:	2300      	movs	r3, #0
1000b89c:	4630      	mov	r0, r6
1000b89e:	4639      	mov	r1, r7
1000b8a0:	f004 fc62 	bl	10010168 <__aeabi_dcmplt>
1000b8a4:	2800      	cmp	r0, #0
1000b8a6:	f040 82ae 	bne.w	1000be06 <_dtoa_r+0x682>
1000b8aa:	eba8 0505 	sub.w	r5, r8, r5
1000b8ae:	1e6b      	subs	r3, r5, #1
1000b8b0:	f1ba 0f16 	cmp.w	sl, #22
1000b8b4:	9305      	str	r3, [sp, #20]
1000b8b6:	f200 829b 	bhi.w	1000bdf0 <_dtoa_r+0x66c>
1000b8ba:	4b38      	ldr	r3, [pc, #224]	; (1000b99c <_dtoa_r+0x218>)
1000b8bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
1000b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1000b8c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000b8c8:	f004 fc4e 	bl	10010168 <__aeabi_dcmplt>
1000b8cc:	2800      	cmp	r0, #0
1000b8ce:	d06b      	beq.n	1000b9a8 <_dtoa_r+0x224>
1000b8d0:	2300      	movs	r3, #0
1000b8d2:	930c      	str	r3, [sp, #48]	; 0x30
1000b8d4:	9b05      	ldr	r3, [sp, #20]
1000b8d6:	2b00      	cmp	r3, #0
1000b8d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
1000b8dc:	f2c0 828e 	blt.w	1000bdfc <_dtoa_r+0x678>
1000b8e0:	f04f 0900 	mov.w	r9, #0
1000b8e4:	f1ba 0f00 	cmp.w	sl, #0
1000b8e8:	da64      	bge.n	1000b9b4 <_dtoa_r+0x230>
1000b8ea:	f1ca 0300 	rsb	r3, sl, #0
1000b8ee:	930b      	str	r3, [sp, #44]	; 0x2c
1000b8f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b8f2:	f8cd a020 	str.w	sl, [sp, #32]
1000b8f6:	2b09      	cmp	r3, #9
1000b8f8:	eba9 090a 	sub.w	r9, r9, sl
1000b8fc:	f04f 0a00 	mov.w	sl, #0
1000b900:	d862      	bhi.n	1000b9c8 <_dtoa_r+0x244>
1000b902:	2b05      	cmp	r3, #5
1000b904:	f340 8358 	ble.w	1000bfb8 <_dtoa_r+0x834>
1000b908:	3b04      	subs	r3, #4
1000b90a:	9320      	str	r3, [sp, #128]	; 0x80
1000b90c:	2500      	movs	r5, #0
1000b90e:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b910:	3b02      	subs	r3, #2
1000b912:	2b03      	cmp	r3, #3
1000b914:	f200 8667 	bhi.w	1000c5e6 <_dtoa_r+0xe62>
1000b918:	e8df f013 	tbh	[pc, r3, lsl #1]
1000b91c:	047a047d 	.word	0x047a047d
1000b920:	046d0453 	.word	0x046d0453
1000b924:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000b926:	f242 730f 	movw	r3, #9999	; 0x270f
1000b92a:	6013      	str	r3, [r2, #0]
1000b92c:	9b02      	ldr	r3, [sp, #8]
1000b92e:	f3c6 0613 	ubfx	r6, r6, #0, #20
1000b932:	4333      	orrs	r3, r6
1000b934:	d119      	bne.n	1000b96a <_dtoa_r+0x1e6>
1000b936:	9b24      	ldr	r3, [sp, #144]	; 0x90
1000b938:	2b00      	cmp	r3, #0
1000b93a:	f000 8649 	beq.w	1000c5d0 <_dtoa_r+0xe4c>
1000b93e:	4b18      	ldr	r3, [pc, #96]	; (1000b9a0 <_dtoa_r+0x21c>)
1000b940:	9304      	str	r3, [sp, #16]
1000b942:	3308      	adds	r3, #8
1000b944:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000b946:	9804      	ldr	r0, [sp, #16]
1000b948:	6013      	str	r3, [r2, #0]
1000b94a:	b017      	add	sp, #92	; 0x5c
1000b94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000b950:	f3c9 0113 	ubfx	r1, r9, #0, #20
1000b954:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1000b958:	4642      	mov	r2, r8
1000b95a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1000b95e:	970d      	str	r7, [sp, #52]	; 0x34
1000b960:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1000b964:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
1000b968:	e771      	b.n	1000b84e <_dtoa_r+0xca>
1000b96a:	9b24      	ldr	r3, [sp, #144]	; 0x90
1000b96c:	2b00      	cmp	r3, #0
1000b96e:	f040 8416 	bne.w	1000c19e <_dtoa_r+0xa1a>
1000b972:	4b0c      	ldr	r3, [pc, #48]	; (1000b9a4 <_dtoa_r+0x220>)
1000b974:	9304      	str	r3, [sp, #16]
1000b976:	e73e      	b.n	1000b7f6 <_dtoa_r+0x72>
1000b978:	636f4361 	.word	0x636f4361
1000b97c:	3fd287a7 	.word	0x3fd287a7
1000b980:	8b60c8b3 	.word	0x8b60c8b3
1000b984:	3fc68a28 	.word	0x3fc68a28
1000b988:	509f79fb 	.word	0x509f79fb
1000b98c:	3fd34413 	.word	0x3fd34413
1000b990:	7ff00000 	.word	0x7ff00000
1000b994:	10010ad9 	.word	0x10010ad9
1000b998:	3ff80000 	.word	0x3ff80000
1000b99c:	10010c48 	.word	0x10010c48
1000b9a0:	10010be4 	.word	0x10010be4
1000b9a4:	10010be0 	.word	0x10010be0
1000b9a8:	9b05      	ldr	r3, [sp, #20]
1000b9aa:	900c      	str	r0, [sp, #48]	; 0x30
1000b9ac:	2b00      	cmp	r3, #0
1000b9ae:	f2c0 8225 	blt.w	1000bdfc <_dtoa_r+0x678>
1000b9b2:	4681      	mov	r9, r0
1000b9b4:	9b05      	ldr	r3, [sp, #20]
1000b9b6:	f8cd a020 	str.w	sl, [sp, #32]
1000b9ba:	4453      	add	r3, sl
1000b9bc:	9305      	str	r3, [sp, #20]
1000b9be:	2300      	movs	r3, #0
1000b9c0:	930b      	str	r3, [sp, #44]	; 0x2c
1000b9c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b9c4:	2b09      	cmp	r3, #9
1000b9c6:	d99c      	bls.n	1000b902 <_dtoa_r+0x17e>
1000b9c8:	2300      	movs	r3, #0
1000b9ca:	2501      	movs	r5, #1
1000b9cc:	9320      	str	r3, [sp, #128]	; 0x80
1000b9ce:	9321      	str	r3, [sp, #132]	; 0x84
1000b9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1000b9d4:	950a      	str	r5, [sp, #40]	; 0x28
1000b9d6:	9309      	str	r3, [sp, #36]	; 0x24
1000b9d8:	2100      	movs	r1, #0
1000b9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b9dc:	6461      	str	r1, [r4, #68]	; 0x44
1000b9de:	9310      	str	r3, [sp, #64]	; 0x40
1000b9e0:	4620      	mov	r0, r4
1000b9e2:	f001 fea1 	bl	1000d728 <_Balloc>
1000b9e6:	9004      	str	r0, [sp, #16]
1000b9e8:	2800      	cmp	r0, #0
1000b9ea:	f000 8604 	beq.w	1000c5f6 <_dtoa_r+0xe72>
1000b9ee:	9b04      	ldr	r3, [sp, #16]
1000b9f0:	6423      	str	r3, [r4, #64]	; 0x40
1000b9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b9f4:	2b0e      	cmp	r3, #14
1000b9f6:	f200 810d 	bhi.w	1000bc14 <_dtoa_r+0x490>
1000b9fa:	2d00      	cmp	r5, #0
1000b9fc:	f000 810a 	beq.w	1000bc14 <_dtoa_r+0x490>
1000ba00:	9908      	ldr	r1, [sp, #32]
1000ba02:	2900      	cmp	r1, #0
1000ba04:	f340 8478 	ble.w	1000c2f8 <_dtoa_r+0xb74>
1000ba08:	4bb3      	ldr	r3, [pc, #716]	; (1000bcd8 <_dtoa_r+0x554>)
1000ba0a:	f001 020f 	and.w	r2, r1, #15
1000ba0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000ba12:	ed93 7b00 	vldr	d7, [r3]
1000ba16:	110d      	asrs	r5, r1, #4
1000ba18:	06ea      	lsls	r2, r5, #27
1000ba1a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1000ba1e:	f140 8412 	bpl.w	1000c246 <_dtoa_r+0xac2>
1000ba22:	4bae      	ldr	r3, [pc, #696]	; (1000bcdc <_dtoa_r+0x558>)
1000ba24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000ba28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1000ba2c:	f004 fa54 	bl	1000fed8 <__aeabi_ddiv>
1000ba30:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000ba34:	f005 050f 	and.w	r5, r5, #15
1000ba38:	2703      	movs	r7, #3
1000ba3a:	b17d      	cbz	r5, 1000ba5c <_dtoa_r+0x2d8>
1000ba3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1000ba40:	4ea6      	ldr	r6, [pc, #664]	; (1000bcdc <_dtoa_r+0x558>)
1000ba42:	07eb      	lsls	r3, r5, #31
1000ba44:	d504      	bpl.n	1000ba50 <_dtoa_r+0x2cc>
1000ba46:	e9d6 2300 	ldrd	r2, r3, [r6]
1000ba4a:	f004 f91b 	bl	1000fc84 <__aeabi_dmul>
1000ba4e:	3701      	adds	r7, #1
1000ba50:	106d      	asrs	r5, r5, #1
1000ba52:	f106 0608 	add.w	r6, r6, #8
1000ba56:	d1f4      	bne.n	1000ba42 <_dtoa_r+0x2be>
1000ba58:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1000ba5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000ba60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1000ba64:	f004 fa38 	bl	1000fed8 <__aeabi_ddiv>
1000ba68:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000ba6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ba6e:	b143      	cbz	r3, 1000ba82 <_dtoa_r+0x2fe>
1000ba70:	2200      	movs	r2, #0
1000ba72:	4b9b      	ldr	r3, [pc, #620]	; (1000bce0 <_dtoa_r+0x55c>)
1000ba74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000ba78:	f004 fb76 	bl	10010168 <__aeabi_dcmplt>
1000ba7c:	2800      	cmp	r0, #0
1000ba7e:	f040 8539 	bne.w	1000c4f4 <_dtoa_r+0xd70>
1000ba82:	4638      	mov	r0, r7
1000ba84:	f004 f894 	bl	1000fbb0 <__aeabi_i2d>
1000ba88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000ba8c:	f004 f8fa 	bl	1000fc84 <__aeabi_dmul>
1000ba90:	4b94      	ldr	r3, [pc, #592]	; (1000bce4 <_dtoa_r+0x560>)
1000ba92:	2200      	movs	r2, #0
1000ba94:	f003 ff40 	bl	1000f918 <__adddf3>
1000ba98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
1000ba9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1000baa0:	930f      	str	r3, [sp, #60]	; 0x3c
1000baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000baa4:	2b00      	cmp	r3, #0
1000baa6:	f000 8408 	beq.w	1000c2ba <_dtoa_r+0xb36>
1000baaa:	9b08      	ldr	r3, [sp, #32]
1000baac:	9312      	str	r3, [sp, #72]	; 0x48
1000baae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000bab0:	9311      	str	r3, [sp, #68]	; 0x44
1000bab2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1000bab6:	4639      	mov	r1, r7
1000bab8:	4630      	mov	r0, r6
1000baba:	f004 fb93 	bl	100101e4 <__aeabi_d2iz>
1000babe:	4605      	mov	r5, r0
1000bac0:	f004 f876 	bl	1000fbb0 <__aeabi_i2d>
1000bac4:	4602      	mov	r2, r0
1000bac6:	460b      	mov	r3, r1
1000bac8:	4630      	mov	r0, r6
1000baca:	4639      	mov	r1, r7
1000bacc:	f003 ff22 	bl	1000f914 <__aeabi_dsub>
1000bad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000bad2:	4b81      	ldr	r3, [pc, #516]	; (1000bcd8 <_dtoa_r+0x554>)
1000bad4:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
1000bad8:	4606      	mov	r6, r0
1000bada:	460f      	mov	r7, r1
1000badc:	980a      	ldr	r0, [sp, #40]	; 0x28
1000bade:	9904      	ldr	r1, [sp, #16]
1000bae0:	3530      	adds	r5, #48	; 0x30
1000bae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000bae6:	fa5f f885 	uxtb.w	r8, r5
1000baea:	ed8d 7b02 	vstr	d7, [sp, #8]
1000baee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1000baf2:	1c4d      	adds	r5, r1, #1
1000baf4:	2800      	cmp	r0, #0
1000baf6:	f000 84a1 	beq.w	1000c43c <_dtoa_r+0xcb8>
1000bafa:	2000      	movs	r0, #0
1000bafc:	497a      	ldr	r1, [pc, #488]	; (1000bce8 <_dtoa_r+0x564>)
1000bafe:	f004 f9eb 	bl	1000fed8 <__aeabi_ddiv>
1000bb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000bb06:	f003 ff05 	bl	1000f914 <__aeabi_dsub>
1000bb0a:	9b04      	ldr	r3, [sp, #16]
1000bb0c:	4632      	mov	r2, r6
1000bb0e:	f883 8000 	strb.w	r8, [r3]
1000bb12:	463b      	mov	r3, r7
1000bb14:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000bb18:	f004 fb44 	bl	100101a4 <__aeabi_dcmpgt>
1000bb1c:	2800      	cmp	r0, #0
1000bb1e:	f040 84dd 	bne.w	1000c4dc <_dtoa_r+0xd58>
1000bb22:	4632      	mov	r2, r6
1000bb24:	463b      	mov	r3, r7
1000bb26:	2000      	movs	r0, #0
1000bb28:	496d      	ldr	r1, [pc, #436]	; (1000bce0 <_dtoa_r+0x55c>)
1000bb2a:	f003 fef3 	bl	1000f914 <__aeabi_dsub>
1000bb2e:	4602      	mov	r2, r0
1000bb30:	460b      	mov	r3, r1
1000bb32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000bb36:	f004 fb35 	bl	100101a4 <__aeabi_dcmpgt>
1000bb3a:	2800      	cmp	r0, #0
1000bb3c:	f040 8540 	bne.w	1000c5c0 <_dtoa_r+0xe3c>
1000bb40:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000bb42:	2b01      	cmp	r3, #1
1000bb44:	d062      	beq.n	1000bc0c <_dtoa_r+0x488>
1000bb46:	9a04      	ldr	r2, [sp, #16]
1000bb48:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
1000bb4c:	4413      	add	r3, r2
1000bb4e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
1000bb52:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
1000bb56:	4699      	mov	r9, r3
1000bb58:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
1000bb5c:	46a0      	mov	r8, r4
1000bb5e:	e00e      	b.n	1000bb7e <_dtoa_r+0x3fa>
1000bb60:	4632      	mov	r2, r6
1000bb62:	463b      	mov	r3, r7
1000bb64:	2000      	movs	r0, #0
1000bb66:	495e      	ldr	r1, [pc, #376]	; (1000bce0 <_dtoa_r+0x55c>)
1000bb68:	f003 fed4 	bl	1000f914 <__aeabi_dsub>
1000bb6c:	4652      	mov	r2, sl
1000bb6e:	465b      	mov	r3, fp
1000bb70:	f004 fafa 	bl	10010168 <__aeabi_dcmplt>
1000bb74:	2800      	cmp	r0, #0
1000bb76:	f040 84fd 	bne.w	1000c574 <_dtoa_r+0xdf0>
1000bb7a:	454d      	cmp	r5, r9
1000bb7c:	d03f      	beq.n	1000bbfe <_dtoa_r+0x47a>
1000bb7e:	4650      	mov	r0, sl
1000bb80:	4659      	mov	r1, fp
1000bb82:	2200      	movs	r2, #0
1000bb84:	4b59      	ldr	r3, [pc, #356]	; (1000bcec <_dtoa_r+0x568>)
1000bb86:	f004 f87d 	bl	1000fc84 <__aeabi_dmul>
1000bb8a:	2200      	movs	r2, #0
1000bb8c:	4b57      	ldr	r3, [pc, #348]	; (1000bcec <_dtoa_r+0x568>)
1000bb8e:	4682      	mov	sl, r0
1000bb90:	468b      	mov	fp, r1
1000bb92:	4630      	mov	r0, r6
1000bb94:	4639      	mov	r1, r7
1000bb96:	f004 f875 	bl	1000fc84 <__aeabi_dmul>
1000bb9a:	460f      	mov	r7, r1
1000bb9c:	4606      	mov	r6, r0
1000bb9e:	f004 fb21 	bl	100101e4 <__aeabi_d2iz>
1000bba2:	4604      	mov	r4, r0
1000bba4:	f004 f804 	bl	1000fbb0 <__aeabi_i2d>
1000bba8:	4602      	mov	r2, r0
1000bbaa:	460b      	mov	r3, r1
1000bbac:	4630      	mov	r0, r6
1000bbae:	4639      	mov	r1, r7
1000bbb0:	f003 feb0 	bl	1000f914 <__aeabi_dsub>
1000bbb4:	3430      	adds	r4, #48	; 0x30
1000bbb6:	b2e4      	uxtb	r4, r4
1000bbb8:	f805 4b01 	strb.w	r4, [r5], #1
1000bbbc:	4652      	mov	r2, sl
1000bbbe:	465b      	mov	r3, fp
1000bbc0:	4606      	mov	r6, r0
1000bbc2:	460f      	mov	r7, r1
1000bbc4:	f004 fad0 	bl	10010168 <__aeabi_dcmplt>
1000bbc8:	2800      	cmp	r0, #0
1000bbca:	d0c9      	beq.n	1000bb60 <_dtoa_r+0x3dc>
1000bbcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000bbce:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1000bbd2:	3301      	adds	r3, #1
1000bbd4:	4644      	mov	r4, r8
1000bbd6:	9308      	str	r3, [sp, #32]
1000bbd8:	4659      	mov	r1, fp
1000bbda:	4620      	mov	r0, r4
1000bbdc:	f001 fdca 	bl	1000d774 <_Bfree>
1000bbe0:	2300      	movs	r3, #0
1000bbe2:	702b      	strb	r3, [r5, #0]
1000bbe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1000bbe6:	461a      	mov	r2, r3
1000bbe8:	9b08      	ldr	r3, [sp, #32]
1000bbea:	6013      	str	r3, [r2, #0]
1000bbec:	9b24      	ldr	r3, [sp, #144]	; 0x90
1000bbee:	2b00      	cmp	r3, #0
1000bbf0:	f43f ae01 	beq.w	1000b7f6 <_dtoa_r+0x72>
1000bbf4:	9804      	ldr	r0, [sp, #16]
1000bbf6:	601d      	str	r5, [r3, #0]
1000bbf8:	b017      	add	sp, #92	; 0x5c
1000bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000bbfe:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
1000bc02:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
1000bc06:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1000bc0a:	4644      	mov	r4, r8
1000bc0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000bc10:	e9cd 2302 	strd	r2, r3, [sp, #8]
1000bc14:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000bc16:	2b00      	cmp	r3, #0
1000bc18:	f2c0 80c8 	blt.w	1000bdac <_dtoa_r+0x628>
1000bc1c:	9a08      	ldr	r2, [sp, #32]
1000bc1e:	2a0e      	cmp	r2, #14
1000bc20:	f300 80c4 	bgt.w	1000bdac <_dtoa_r+0x628>
1000bc24:	4b2c      	ldr	r3, [pc, #176]	; (1000bcd8 <_dtoa_r+0x554>)
1000bc26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000bc2a:	e9d3 9a00 	ldrd	r9, sl, [r3]
1000bc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000bc30:	2b00      	cmp	r3, #0
1000bc32:	da18      	bge.n	1000bc66 <_dtoa_r+0x4e2>
1000bc34:	9d09      	ldr	r5, [sp, #36]	; 0x24
1000bc36:	2d00      	cmp	r5, #0
1000bc38:	dc15      	bgt.n	1000bc66 <_dtoa_r+0x4e2>
1000bc3a:	f040 8359 	bne.w	1000c2f0 <_dtoa_r+0xb6c>
1000bc3e:	2200      	movs	r2, #0
1000bc40:	4b2b      	ldr	r3, [pc, #172]	; (1000bcf0 <_dtoa_r+0x56c>)
1000bc42:	4648      	mov	r0, r9
1000bc44:	4651      	mov	r1, sl
1000bc46:	f004 f81d 	bl	1000fc84 <__aeabi_dmul>
1000bc4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000bc4e:	f004 fa9f 	bl	10010190 <__aeabi_dcmpge>
1000bc52:	2800      	cmp	r0, #0
1000bc54:	f000 83cf 	beq.w	1000c3f6 <_dtoa_r+0xc72>
1000bc58:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1000bc5c:	4646      	mov	r6, r8
1000bc5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000bc60:	9d04      	ldr	r5, [sp, #16]
1000bc62:	43db      	mvns	r3, r3
1000bc64:	e270      	b.n	1000c148 <_dtoa_r+0x9c4>
1000bc66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1000bc6a:	464a      	mov	r2, r9
1000bc6c:	4653      	mov	r3, sl
1000bc6e:	4630      	mov	r0, r6
1000bc70:	4639      	mov	r1, r7
1000bc72:	f004 f931 	bl	1000fed8 <__aeabi_ddiv>
1000bc76:	f004 fab5 	bl	100101e4 <__aeabi_d2iz>
1000bc7a:	4680      	mov	r8, r0
1000bc7c:	f003 ff98 	bl	1000fbb0 <__aeabi_i2d>
1000bc80:	464a      	mov	r2, r9
1000bc82:	4653      	mov	r3, sl
1000bc84:	f003 fffe 	bl	1000fc84 <__aeabi_dmul>
1000bc88:	9d04      	ldr	r5, [sp, #16]
1000bc8a:	4602      	mov	r2, r0
1000bc8c:	4630      	mov	r0, r6
1000bc8e:	4646      	mov	r6, r8
1000bc90:	460b      	mov	r3, r1
1000bc92:	3630      	adds	r6, #48	; 0x30
1000bc94:	4639      	mov	r1, r7
1000bc96:	f003 fe3d 	bl	1000f914 <__aeabi_dsub>
1000bc9a:	9f08      	ldr	r7, [sp, #32]
1000bc9c:	f805 6b01 	strb.w	r6, [r5], #1
1000bca0:	9e09      	ldr	r6, [sp, #36]	; 0x24
1000bca2:	3701      	adds	r7, #1
1000bca4:	2e01      	cmp	r6, #1
1000bca6:	4602      	mov	r2, r0
1000bca8:	460b      	mov	r3, r1
1000bcaa:	9708      	str	r7, [sp, #32]
1000bcac:	d052      	beq.n	1000bd54 <_dtoa_r+0x5d0>
1000bcae:	2200      	movs	r2, #0
1000bcb0:	4b0e      	ldr	r3, [pc, #56]	; (1000bcec <_dtoa_r+0x568>)
1000bcb2:	f003 ffe7 	bl	1000fc84 <__aeabi_dmul>
1000bcb6:	2200      	movs	r2, #0
1000bcb8:	2300      	movs	r3, #0
1000bcba:	4606      	mov	r6, r0
1000bcbc:	460f      	mov	r7, r1
1000bcbe:	f004 fa49 	bl	10010154 <__aeabi_dcmpeq>
1000bcc2:	2800      	cmp	r0, #0
1000bcc4:	d188      	bne.n	1000bbd8 <_dtoa_r+0x454>
1000bcc6:	f8cd b008 	str.w	fp, [sp, #8]
1000bcca:	f04f 0801 	mov.w	r8, #1
1000bcce:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1000bcd2:	9405      	str	r4, [sp, #20]
1000bcd4:	e01b      	b.n	1000bd0e <_dtoa_r+0x58a>
1000bcd6:	bf00      	nop
1000bcd8:	10010c48 	.word	0x10010c48
1000bcdc:	10010d38 	.word	0x10010d38
1000bce0:	3ff00000 	.word	0x3ff00000
1000bce4:	401c0000 	.word	0x401c0000
1000bce8:	3fe00000 	.word	0x3fe00000
1000bcec:	40240000 	.word	0x40240000
1000bcf0:	40140000 	.word	0x40140000
1000bcf4:	2200      	movs	r2, #0
1000bcf6:	4bbf      	ldr	r3, [pc, #764]	; (1000bff4 <_dtoa_r+0x870>)
1000bcf8:	f003 ffc4 	bl	1000fc84 <__aeabi_dmul>
1000bcfc:	2200      	movs	r2, #0
1000bcfe:	2300      	movs	r3, #0
1000bd00:	4606      	mov	r6, r0
1000bd02:	460f      	mov	r7, r1
1000bd04:	f004 fa26 	bl	10010154 <__aeabi_dcmpeq>
1000bd08:	2800      	cmp	r0, #0
1000bd0a:	f040 836b 	bne.w	1000c3e4 <_dtoa_r+0xc60>
1000bd0e:	464a      	mov	r2, r9
1000bd10:	4653      	mov	r3, sl
1000bd12:	4630      	mov	r0, r6
1000bd14:	4639      	mov	r1, r7
1000bd16:	f004 f8df 	bl	1000fed8 <__aeabi_ddiv>
1000bd1a:	f004 fa63 	bl	100101e4 <__aeabi_d2iz>
1000bd1e:	4604      	mov	r4, r0
1000bd20:	f003 ff46 	bl	1000fbb0 <__aeabi_i2d>
1000bd24:	464a      	mov	r2, r9
1000bd26:	4653      	mov	r3, sl
1000bd28:	f003 ffac 	bl	1000fc84 <__aeabi_dmul>
1000bd2c:	4602      	mov	r2, r0
1000bd2e:	460b      	mov	r3, r1
1000bd30:	4630      	mov	r0, r6
1000bd32:	4639      	mov	r1, r7
1000bd34:	f003 fdee 	bl	1000f914 <__aeabi_dsub>
1000bd38:	f108 0801 	add.w	r8, r8, #1
1000bd3c:	f104 0630 	add.w	r6, r4, #48	; 0x30
1000bd40:	45c3      	cmp	fp, r8
1000bd42:	4602      	mov	r2, r0
1000bd44:	460b      	mov	r3, r1
1000bd46:	f805 6b01 	strb.w	r6, [r5], #1
1000bd4a:	d1d3      	bne.n	1000bcf4 <_dtoa_r+0x570>
1000bd4c:	46a0      	mov	r8, r4
1000bd4e:	f8dd b008 	ldr.w	fp, [sp, #8]
1000bd52:	9c05      	ldr	r4, [sp, #20]
1000bd54:	4610      	mov	r0, r2
1000bd56:	4619      	mov	r1, r3
1000bd58:	f003 fdde 	bl	1000f918 <__adddf3>
1000bd5c:	464a      	mov	r2, r9
1000bd5e:	4653      	mov	r3, sl
1000bd60:	4606      	mov	r6, r0
1000bd62:	460f      	mov	r7, r1
1000bd64:	f004 fa1e 	bl	100101a4 <__aeabi_dcmpgt>
1000bd68:	b960      	cbnz	r0, 1000bd84 <_dtoa_r+0x600>
1000bd6a:	464a      	mov	r2, r9
1000bd6c:	4653      	mov	r3, sl
1000bd6e:	4630      	mov	r0, r6
1000bd70:	4639      	mov	r1, r7
1000bd72:	f004 f9ef 	bl	10010154 <__aeabi_dcmpeq>
1000bd76:	2800      	cmp	r0, #0
1000bd78:	f43f af2e 	beq.w	1000bbd8 <_dtoa_r+0x454>
1000bd7c:	ea5f 71c8 	movs.w	r1, r8, lsl #31
1000bd80:	f57f af2a 	bpl.w	1000bbd8 <_dtoa_r+0x454>
1000bd84:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1000bd88:	9a04      	ldr	r2, [sp, #16]
1000bd8a:	1e6b      	subs	r3, r5, #1
1000bd8c:	e004      	b.n	1000bd98 <_dtoa_r+0x614>
1000bd8e:	429a      	cmp	r2, r3
1000bd90:	f000 83d6 	beq.w	1000c540 <_dtoa_r+0xdbc>
1000bd94:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
1000bd98:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
1000bd9c:	f103 0501 	add.w	r5, r3, #1
1000bda0:	d0f5      	beq.n	1000bd8e <_dtoa_r+0x60a>
1000bda2:	f108 0201 	add.w	r2, r8, #1
1000bda6:	b2d2      	uxtb	r2, r2
1000bda8:	701a      	strb	r2, [r3, #0]
1000bdaa:	e715      	b.n	1000bbd8 <_dtoa_r+0x454>
1000bdac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000bdae:	2a00      	cmp	r2, #0
1000bdb0:	d03c      	beq.n	1000be2c <_dtoa_r+0x6a8>
1000bdb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000bdb4:	2a01      	cmp	r2, #1
1000bdb6:	f340 8263 	ble.w	1000c280 <_dtoa_r+0xafc>
1000bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000bdbc:	1e5f      	subs	r7, r3, #1
1000bdbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000bdc0:	42bb      	cmp	r3, r7
1000bdc2:	f280 823e 	bge.w	1000c242 <_dtoa_r+0xabe>
1000bdc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000bdc8:	970b      	str	r7, [sp, #44]	; 0x2c
1000bdca:	1afb      	subs	r3, r7, r3
1000bdcc:	449a      	add	sl, r3
1000bdce:	2700      	movs	r7, #0
1000bdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000bdd2:	2b00      	cmp	r3, #0
1000bdd4:	f2c0 830b 	blt.w	1000c3ee <_dtoa_r+0xc6a>
1000bdd8:	9a05      	ldr	r2, [sp, #20]
1000bdda:	4611      	mov	r1, r2
1000bddc:	4419      	add	r1, r3
1000bdde:	464d      	mov	r5, r9
1000bde0:	9105      	str	r1, [sp, #20]
1000bde2:	4499      	add	r9, r3
1000bde4:	2101      	movs	r1, #1
1000bde6:	4620      	mov	r0, r4
1000bde8:	f001 fdc6 	bl	1000d978 <__i2b>
1000bdec:	4606      	mov	r6, r0
1000bdee:	e020      	b.n	1000be32 <_dtoa_r+0x6ae>
1000bdf0:	2301      	movs	r3, #1
1000bdf2:	930c      	str	r3, [sp, #48]	; 0x30
1000bdf4:	9b05      	ldr	r3, [sp, #20]
1000bdf6:	2b00      	cmp	r3, #0
1000bdf8:	f6bf ad72 	bge.w	1000b8e0 <_dtoa_r+0x15c>
1000bdfc:	2300      	movs	r3, #0
1000bdfe:	f1c5 0901 	rsb	r9, r5, #1
1000be02:	9305      	str	r3, [sp, #20]
1000be04:	e56e      	b.n	1000b8e4 <_dtoa_r+0x160>
1000be06:	4650      	mov	r0, sl
1000be08:	f003 fed2 	bl	1000fbb0 <__aeabi_i2d>
1000be0c:	4632      	mov	r2, r6
1000be0e:	463b      	mov	r3, r7
1000be10:	f004 f9a0 	bl	10010154 <__aeabi_dcmpeq>
1000be14:	2800      	cmp	r0, #0
1000be16:	f47f ad48 	bne.w	1000b8aa <_dtoa_r+0x126>
1000be1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
1000be1e:	e544      	b.n	1000b8aa <_dtoa_r+0x126>
1000be20:	4b75      	ldr	r3, [pc, #468]	; (1000bff8 <_dtoa_r+0x874>)
1000be22:	9304      	str	r3, [sp, #16]
1000be24:	9804      	ldr	r0, [sp, #16]
1000be26:	b017      	add	sp, #92	; 0x5c
1000be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000be2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1000be2e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1000be30:	464d      	mov	r5, r9
1000be32:	2d00      	cmp	r5, #0
1000be34:	dd0b      	ble.n	1000be4e <_dtoa_r+0x6ca>
1000be36:	9a05      	ldr	r2, [sp, #20]
1000be38:	2a00      	cmp	r2, #0
1000be3a:	dd08      	ble.n	1000be4e <_dtoa_r+0x6ca>
1000be3c:	42aa      	cmp	r2, r5
1000be3e:	4613      	mov	r3, r2
1000be40:	bfa8      	it	ge
1000be42:	462b      	movge	r3, r5
1000be44:	eba9 0903 	sub.w	r9, r9, r3
1000be48:	1aed      	subs	r5, r5, r3
1000be4a:	1ad3      	subs	r3, r2, r3
1000be4c:	9305      	str	r3, [sp, #20]
1000be4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000be50:	b1d3      	cbz	r3, 1000be88 <_dtoa_r+0x704>
1000be52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000be54:	2b00      	cmp	r3, #0
1000be56:	f000 819b 	beq.w	1000c190 <_dtoa_r+0xa0c>
1000be5a:	2f00      	cmp	r7, #0
1000be5c:	dd10      	ble.n	1000be80 <_dtoa_r+0x6fc>
1000be5e:	4631      	mov	r1, r6
1000be60:	463a      	mov	r2, r7
1000be62:	4620      	mov	r0, r4
1000be64:	f001 fe44 	bl	1000daf0 <__pow5mult>
1000be68:	465a      	mov	r2, fp
1000be6a:	4601      	mov	r1, r0
1000be6c:	4606      	mov	r6, r0
1000be6e:	4620      	mov	r0, r4
1000be70:	f001 fd98 	bl	1000d9a4 <__multiply>
1000be74:	4659      	mov	r1, fp
1000be76:	4680      	mov	r8, r0
1000be78:	4620      	mov	r0, r4
1000be7a:	f001 fc7b 	bl	1000d774 <_Bfree>
1000be7e:	46c3      	mov	fp, r8
1000be80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000be82:	1bda      	subs	r2, r3, r7
1000be84:	f040 8185 	bne.w	1000c192 <_dtoa_r+0xa0e>
1000be88:	2101      	movs	r1, #1
1000be8a:	4620      	mov	r0, r4
1000be8c:	f001 fd74 	bl	1000d978 <__i2b>
1000be90:	f1ba 0f00 	cmp.w	sl, #0
1000be94:	4680      	mov	r8, r0
1000be96:	f300 8097 	bgt.w	1000bfc8 <_dtoa_r+0x844>
1000be9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000be9c:	2b01      	cmp	r3, #1
1000be9e:	f340 8183 	ble.w	1000c1a8 <_dtoa_r+0xa24>
1000bea2:	2300      	movs	r3, #0
1000bea4:	9306      	str	r3, [sp, #24]
1000bea6:	2001      	movs	r0, #1
1000bea8:	f1ba 0f00 	cmp.w	sl, #0
1000beac:	f040 8098 	bne.w	1000bfe0 <_dtoa_r+0x85c>
1000beb0:	9a05      	ldr	r2, [sp, #20]
1000beb2:	4410      	add	r0, r2
1000beb4:	f010 001f 	ands.w	r0, r0, #31
1000beb8:	d077      	beq.n	1000bfaa <_dtoa_r+0x826>
1000beba:	f1c0 0320 	rsb	r3, r0, #32
1000bebe:	2b04      	cmp	r3, #4
1000bec0:	f340 83a0 	ble.w	1000c604 <_dtoa_r+0xe80>
1000bec4:	f1c0 001c 	rsb	r0, r0, #28
1000bec8:	4402      	add	r2, r0
1000beca:	4481      	add	r9, r0
1000becc:	4405      	add	r5, r0
1000bece:	9205      	str	r2, [sp, #20]
1000bed0:	f1b9 0f00 	cmp.w	r9, #0
1000bed4:	dd05      	ble.n	1000bee2 <_dtoa_r+0x75e>
1000bed6:	4659      	mov	r1, fp
1000bed8:	464a      	mov	r2, r9
1000beda:	4620      	mov	r0, r4
1000bedc:	f001 fe54 	bl	1000db88 <__lshift>
1000bee0:	4683      	mov	fp, r0
1000bee2:	9b05      	ldr	r3, [sp, #20]
1000bee4:	2b00      	cmp	r3, #0
1000bee6:	dd05      	ble.n	1000bef4 <_dtoa_r+0x770>
1000bee8:	4641      	mov	r1, r8
1000beea:	461a      	mov	r2, r3
1000beec:	4620      	mov	r0, r4
1000beee:	f001 fe4b 	bl	1000db88 <__lshift>
1000bef2:	4680      	mov	r8, r0
1000bef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000bef6:	2b00      	cmp	r3, #0
1000bef8:	f040 8130 	bne.w	1000c15c <_dtoa_r+0x9d8>
1000befc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000befe:	2b00      	cmp	r3, #0
1000bf00:	f340 8107 	ble.w	1000c112 <_dtoa_r+0x98e>
1000bf04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000bf06:	2b00      	cmp	r3, #0
1000bf08:	f040 8085 	bne.w	1000c016 <_dtoa_r+0x892>
1000bf0c:	9b08      	ldr	r3, [sp, #32]
1000bf0e:	3301      	adds	r3, #1
1000bf10:	9308      	str	r3, [sp, #32]
1000bf12:	9d04      	ldr	r5, [sp, #16]
1000bf14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
1000bf18:	2701      	movs	r7, #1
1000bf1a:	e007      	b.n	1000bf2c <_dtoa_r+0x7a8>
1000bf1c:	4659      	mov	r1, fp
1000bf1e:	2300      	movs	r3, #0
1000bf20:	220a      	movs	r2, #10
1000bf22:	4620      	mov	r0, r4
1000bf24:	f001 fc30 	bl	1000d788 <__multadd>
1000bf28:	3701      	adds	r7, #1
1000bf2a:	4683      	mov	fp, r0
1000bf2c:	4641      	mov	r1, r8
1000bf2e:	4658      	mov	r0, fp
1000bf30:	f7ff fb96 	bl	1000b660 <quorem>
1000bf34:	45b9      	cmp	r9, r7
1000bf36:	f100 0030 	add.w	r0, r0, #48	; 0x30
1000bf3a:	f805 0b01 	strb.w	r0, [r5], #1
1000bf3e:	dced      	bgt.n	1000bf1c <_dtoa_r+0x798>
1000bf40:	4603      	mov	r3, r0
1000bf42:	f04f 0a00 	mov.w	sl, #0
1000bf46:	4659      	mov	r1, fp
1000bf48:	2201      	movs	r2, #1
1000bf4a:	4620      	mov	r0, r4
1000bf4c:	9302      	str	r3, [sp, #8]
1000bf4e:	f001 fe1b 	bl	1000db88 <__lshift>
1000bf52:	4641      	mov	r1, r8
1000bf54:	4683      	mov	fp, r0
1000bf56:	f001 fe7d 	bl	1000dc54 <__mcmp>
1000bf5a:	2800      	cmp	r0, #0
1000bf5c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1000bf60:	f340 8179 	ble.w	1000c256 <_dtoa_r+0xad2>
1000bf64:	1e6b      	subs	r3, r5, #1
1000bf66:	9904      	ldr	r1, [sp, #16]
1000bf68:	e004      	b.n	1000bf74 <_dtoa_r+0x7f0>
1000bf6a:	4299      	cmp	r1, r3
1000bf6c:	f000 8181 	beq.w	1000c272 <_dtoa_r+0xaee>
1000bf70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000bf74:	2a39      	cmp	r2, #57	; 0x39
1000bf76:	f103 0501 	add.w	r5, r3, #1
1000bf7a:	d0f6      	beq.n	1000bf6a <_dtoa_r+0x7e6>
1000bf7c:	3201      	adds	r2, #1
1000bf7e:	701a      	strb	r2, [r3, #0]
1000bf80:	4641      	mov	r1, r8
1000bf82:	4620      	mov	r0, r4
1000bf84:	f001 fbf6 	bl	1000d774 <_Bfree>
1000bf88:	2e00      	cmp	r6, #0
1000bf8a:	f43f ae25 	beq.w	1000bbd8 <_dtoa_r+0x454>
1000bf8e:	f1ba 0f00 	cmp.w	sl, #0
1000bf92:	d005      	beq.n	1000bfa0 <_dtoa_r+0x81c>
1000bf94:	45b2      	cmp	sl, r6
1000bf96:	d003      	beq.n	1000bfa0 <_dtoa_r+0x81c>
1000bf98:	4651      	mov	r1, sl
1000bf9a:	4620      	mov	r0, r4
1000bf9c:	f001 fbea 	bl	1000d774 <_Bfree>
1000bfa0:	4631      	mov	r1, r6
1000bfa2:	4620      	mov	r0, r4
1000bfa4:	f001 fbe6 	bl	1000d774 <_Bfree>
1000bfa8:	e616      	b.n	1000bbd8 <_dtoa_r+0x454>
1000bfaa:	201c      	movs	r0, #28
1000bfac:	9b05      	ldr	r3, [sp, #20]
1000bfae:	4403      	add	r3, r0
1000bfb0:	4481      	add	r9, r0
1000bfb2:	4405      	add	r5, r0
1000bfb4:	9305      	str	r3, [sp, #20]
1000bfb6:	e78b      	b.n	1000bed0 <_dtoa_r+0x74c>
1000bfb8:	2501      	movs	r5, #1
1000bfba:	e4a8      	b.n	1000b90e <_dtoa_r+0x18a>
1000bfbc:	f1c3 0620 	rsb	r6, r3, #32
1000bfc0:	9b02      	ldr	r3, [sp, #8]
1000bfc2:	fa03 f006 	lsl.w	r0, r3, r6
1000bfc6:	e43a      	b.n	1000b83e <_dtoa_r+0xba>
1000bfc8:	4601      	mov	r1, r0
1000bfca:	4652      	mov	r2, sl
1000bfcc:	4620      	mov	r0, r4
1000bfce:	f001 fd8f 	bl	1000daf0 <__pow5mult>
1000bfd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000bfd4:	2b01      	cmp	r3, #1
1000bfd6:	4680      	mov	r8, r0
1000bfd8:	f340 81b8 	ble.w	1000c34c <_dtoa_r+0xbc8>
1000bfdc:	2300      	movs	r3, #0
1000bfde:	9306      	str	r3, [sp, #24]
1000bfe0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1000bfe4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
1000bfe8:	6918      	ldr	r0, [r3, #16]
1000bfea:	f001 fc75 	bl	1000d8d8 <__hi0bits>
1000bfee:	f1c0 0020 	rsb	r0, r0, #32
1000bff2:	e75d      	b.n	1000beb0 <_dtoa_r+0x72c>
1000bff4:	40240000 	.word	0x40240000
1000bff8:	10010ad8 	.word	0x10010ad8
1000bffc:	4631      	mov	r1, r6
1000bffe:	2300      	movs	r3, #0
1000c000:	220a      	movs	r2, #10
1000c002:	4620      	mov	r0, r4
1000c004:	f001 fbc0 	bl	1000d788 <__multadd>
1000c008:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000c00a:	2b00      	cmp	r3, #0
1000c00c:	4606      	mov	r6, r0
1000c00e:	f340 82d0 	ble.w	1000c5b2 <_dtoa_r+0xe2e>
1000c012:	e9cd 7308 	strd	r7, r3, [sp, #32]
1000c016:	2d00      	cmp	r5, #0
1000c018:	dd05      	ble.n	1000c026 <_dtoa_r+0x8a2>
1000c01a:	4631      	mov	r1, r6
1000c01c:	462a      	mov	r2, r5
1000c01e:	4620      	mov	r0, r4
1000c020:	f001 fdb2 	bl	1000db88 <__lshift>
1000c024:	4606      	mov	r6, r0
1000c026:	9b06      	ldr	r3, [sp, #24]
1000c028:	2b00      	cmp	r3, #0
1000c02a:	f040 81c4 	bne.w	1000c3b6 <_dtoa_r+0xc32>
1000c02e:	46b1      	mov	r9, r6
1000c030:	9b02      	ldr	r3, [sp, #8]
1000c032:	9920      	ldr	r1, [sp, #128]	; 0x80
1000c034:	9f04      	ldr	r7, [sp, #16]
1000c036:	f003 0201 	and.w	r2, r3, #1
1000c03a:	920b      	str	r2, [sp, #44]	; 0x2c
1000c03c:	430a      	orrs	r2, r1
1000c03e:	920a      	str	r2, [sp, #40]	; 0x28
1000c040:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000c042:	1e7b      	subs	r3, r7, #1
1000c044:	441a      	add	r2, r3
1000c046:	9209      	str	r2, [sp, #36]	; 0x24
1000c048:	4641      	mov	r1, r8
1000c04a:	4658      	mov	r0, fp
1000c04c:	f7ff fb08 	bl	1000b660 <quorem>
1000c050:	4631      	mov	r1, r6
1000c052:	9002      	str	r0, [sp, #8]
1000c054:	4658      	mov	r0, fp
1000c056:	f001 fdfd 	bl	1000dc54 <__mcmp>
1000c05a:	464a      	mov	r2, r9
1000c05c:	4682      	mov	sl, r0
1000c05e:	4641      	mov	r1, r8
1000c060:	4620      	mov	r0, r4
1000c062:	f001 fe13 	bl	1000dc8c <__mdiff>
1000c066:	9b02      	ldr	r3, [sp, #8]
1000c068:	68c2      	ldr	r2, [r0, #12]
1000c06a:	4605      	mov	r5, r0
1000c06c:	3330      	adds	r3, #48	; 0x30
1000c06e:	2a00      	cmp	r2, #0
1000c070:	d141      	bne.n	1000c0f6 <_dtoa_r+0x972>
1000c072:	4601      	mov	r1, r0
1000c074:	4658      	mov	r0, fp
1000c076:	9306      	str	r3, [sp, #24]
1000c078:	f001 fdec 	bl	1000dc54 <__mcmp>
1000c07c:	4629      	mov	r1, r5
1000c07e:	9005      	str	r0, [sp, #20]
1000c080:	4620      	mov	r0, r4
1000c082:	f001 fb77 	bl	1000d774 <_Bfree>
1000c086:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
1000c08a:	b91a      	cbnz	r2, 1000c094 <_dtoa_r+0x910>
1000c08c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000c08e:	2900      	cmp	r1, #0
1000c090:	f000 8279 	beq.w	1000c586 <_dtoa_r+0xe02>
1000c094:	f1ba 0f00 	cmp.w	sl, #0
1000c098:	f107 0501 	add.w	r5, r7, #1
1000c09c:	f2c0 816e 	blt.w	1000c37c <_dtoa_r+0xbf8>
1000c0a0:	9920      	ldr	r1, [sp, #128]	; 0x80
1000c0a2:	ea41 0a0a 	orr.w	sl, r1, sl
1000c0a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000c0a8:	ea51 010a 	orrs.w	r1, r1, sl
1000c0ac:	f000 8166 	beq.w	1000c37c <_dtoa_r+0xbf8>
1000c0b0:	2a00      	cmp	r2, #0
1000c0b2:	f300 81a4 	bgt.w	1000c3fe <_dtoa_r+0xc7a>
1000c0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000c0b8:	703b      	strb	r3, [r7, #0]
1000c0ba:	42ba      	cmp	r2, r7
1000c0bc:	f000 81ab 	beq.w	1000c416 <_dtoa_r+0xc92>
1000c0c0:	4659      	mov	r1, fp
1000c0c2:	2300      	movs	r3, #0
1000c0c4:	220a      	movs	r2, #10
1000c0c6:	4620      	mov	r0, r4
1000c0c8:	f001 fb5e 	bl	1000d788 <__multadd>
1000c0cc:	454e      	cmp	r6, r9
1000c0ce:	4683      	mov	fp, r0
1000c0d0:	4631      	mov	r1, r6
1000c0d2:	f04f 0300 	mov.w	r3, #0
1000c0d6:	f04f 020a 	mov.w	r2, #10
1000c0da:	4620      	mov	r0, r4
1000c0dc:	d013      	beq.n	1000c106 <_dtoa_r+0x982>
1000c0de:	f001 fb53 	bl	1000d788 <__multadd>
1000c0e2:	4649      	mov	r1, r9
1000c0e4:	4606      	mov	r6, r0
1000c0e6:	2300      	movs	r3, #0
1000c0e8:	220a      	movs	r2, #10
1000c0ea:	4620      	mov	r0, r4
1000c0ec:	f001 fb4c 	bl	1000d788 <__multadd>
1000c0f0:	462f      	mov	r7, r5
1000c0f2:	4681      	mov	r9, r0
1000c0f4:	e7a8      	b.n	1000c048 <_dtoa_r+0x8c4>
1000c0f6:	4601      	mov	r1, r0
1000c0f8:	4620      	mov	r0, r4
1000c0fa:	9305      	str	r3, [sp, #20]
1000c0fc:	f001 fb3a 	bl	1000d774 <_Bfree>
1000c100:	2201      	movs	r2, #1
1000c102:	9b05      	ldr	r3, [sp, #20]
1000c104:	e7c6      	b.n	1000c094 <_dtoa_r+0x910>
1000c106:	f001 fb3f 	bl	1000d788 <__multadd>
1000c10a:	462f      	mov	r7, r5
1000c10c:	4606      	mov	r6, r0
1000c10e:	4681      	mov	r9, r0
1000c110:	e79a      	b.n	1000c048 <_dtoa_r+0x8c4>
1000c112:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000c114:	2b02      	cmp	r3, #2
1000c116:	f340 8081 	ble.w	1000c21c <_dtoa_r+0xa98>
1000c11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c11c:	2b00      	cmp	r3, #0
1000c11e:	f47f ad9e 	bne.w	1000bc5e <_dtoa_r+0x4da>
1000c122:	4641      	mov	r1, r8
1000c124:	2205      	movs	r2, #5
1000c126:	4620      	mov	r0, r4
1000c128:	f001 fb2e 	bl	1000d788 <__multadd>
1000c12c:	4601      	mov	r1, r0
1000c12e:	4680      	mov	r8, r0
1000c130:	4658      	mov	r0, fp
1000c132:	f001 fd8f 	bl	1000dc54 <__mcmp>
1000c136:	2800      	cmp	r0, #0
1000c138:	f77f ad91 	ble.w	1000bc5e <_dtoa_r+0x4da>
1000c13c:	9d04      	ldr	r5, [sp, #16]
1000c13e:	9b08      	ldr	r3, [sp, #32]
1000c140:	2231      	movs	r2, #49	; 0x31
1000c142:	f805 2b01 	strb.w	r2, [r5], #1
1000c146:	3301      	adds	r3, #1
1000c148:	3301      	adds	r3, #1
1000c14a:	4641      	mov	r1, r8
1000c14c:	4620      	mov	r0, r4
1000c14e:	9308      	str	r3, [sp, #32]
1000c150:	f001 fb10 	bl	1000d774 <_Bfree>
1000c154:	2e00      	cmp	r6, #0
1000c156:	f47f af23 	bne.w	1000bfa0 <_dtoa_r+0x81c>
1000c15a:	e53d      	b.n	1000bbd8 <_dtoa_r+0x454>
1000c15c:	4641      	mov	r1, r8
1000c15e:	4658      	mov	r0, fp
1000c160:	f001 fd78 	bl	1000dc54 <__mcmp>
1000c164:	2800      	cmp	r0, #0
1000c166:	f6bf aec9 	bge.w	1000befc <_dtoa_r+0x778>
1000c16a:	4659      	mov	r1, fp
1000c16c:	2300      	movs	r3, #0
1000c16e:	220a      	movs	r2, #10
1000c170:	4620      	mov	r0, r4
1000c172:	f001 fb09 	bl	1000d788 <__multadd>
1000c176:	9b08      	ldr	r3, [sp, #32]
1000c178:	1e5f      	subs	r7, r3, #1
1000c17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c17c:	4683      	mov	fp, r0
1000c17e:	2b00      	cmp	r3, #0
1000c180:	f47f af3c 	bne.w	1000bffc <_dtoa_r+0x878>
1000c184:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000c186:	2b00      	cmp	r3, #0
1000c188:	f340 820a 	ble.w	1000c5a0 <_dtoa_r+0xe1c>
1000c18c:	9309      	str	r3, [sp, #36]	; 0x24
1000c18e:	e6c0      	b.n	1000bf12 <_dtoa_r+0x78e>
1000c190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000c192:	4659      	mov	r1, fp
1000c194:	4620      	mov	r0, r4
1000c196:	f001 fcab 	bl	1000daf0 <__pow5mult>
1000c19a:	4683      	mov	fp, r0
1000c19c:	e674      	b.n	1000be88 <_dtoa_r+0x704>
1000c19e:	4ba1      	ldr	r3, [pc, #644]	; (1000c424 <_dtoa_r+0xca0>)
1000c1a0:	9304      	str	r3, [sp, #16]
1000c1a2:	3303      	adds	r3, #3
1000c1a4:	f7ff bbce 	b.w	1000b944 <_dtoa_r+0x1c0>
1000c1a8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
1000c1ac:	2900      	cmp	r1, #0
1000c1ae:	f47f ae78 	bne.w	1000bea2 <_dtoa_r+0x71e>
1000c1b2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1000c1b6:	2b00      	cmp	r3, #0
1000c1b8:	f000 80d3 	beq.w	1000c362 <_dtoa_r+0xbde>
1000c1bc:	9b02      	ldr	r3, [sp, #8]
1000c1be:	9306      	str	r3, [sp, #24]
1000c1c0:	e671      	b.n	1000bea6 <_dtoa_r+0x722>
1000c1c2:	2301      	movs	r3, #1
1000c1c4:	930a      	str	r3, [sp, #40]	; 0x28
1000c1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000c1c8:	2b00      	cmp	r3, #0
1000c1ca:	dd3f      	ble.n	1000c24c <_dtoa_r+0xac8>
1000c1cc:	9310      	str	r3, [sp, #64]	; 0x40
1000c1ce:	9309      	str	r3, [sp, #36]	; 0x24
1000c1d0:	461e      	mov	r6, r3
1000c1d2:	2100      	movs	r1, #0
1000c1d4:	2e17      	cmp	r6, #23
1000c1d6:	6461      	str	r1, [r4, #68]	; 0x44
1000c1d8:	f77f ac02 	ble.w	1000b9e0 <_dtoa_r+0x25c>
1000c1dc:	2201      	movs	r2, #1
1000c1de:	2304      	movs	r3, #4
1000c1e0:	005b      	lsls	r3, r3, #1
1000c1e2:	f103 0014 	add.w	r0, r3, #20
1000c1e6:	42b0      	cmp	r0, r6
1000c1e8:	4611      	mov	r1, r2
1000c1ea:	f102 0201 	add.w	r2, r2, #1
1000c1ee:	d9f7      	bls.n	1000c1e0 <_dtoa_r+0xa5c>
1000c1f0:	6461      	str	r1, [r4, #68]	; 0x44
1000c1f2:	f7ff bbf5 	b.w	1000b9e0 <_dtoa_r+0x25c>
1000c1f6:	2301      	movs	r3, #1
1000c1f8:	930a      	str	r3, [sp, #40]	; 0x28
1000c1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000c1fc:	9a08      	ldr	r2, [sp, #32]
1000c1fe:	4413      	add	r3, r2
1000c200:	9310      	str	r3, [sp, #64]	; 0x40
1000c202:	3301      	adds	r3, #1
1000c204:	2b01      	cmp	r3, #1
1000c206:	461e      	mov	r6, r3
1000c208:	9309      	str	r3, [sp, #36]	; 0x24
1000c20a:	bfb8      	it	lt
1000c20c:	2601      	movlt	r6, #1
1000c20e:	e7e0      	b.n	1000c1d2 <_dtoa_r+0xa4e>
1000c210:	2300      	movs	r3, #0
1000c212:	930a      	str	r3, [sp, #40]	; 0x28
1000c214:	e7f1      	b.n	1000c1fa <_dtoa_r+0xa76>
1000c216:	2300      	movs	r3, #0
1000c218:	930a      	str	r3, [sp, #40]	; 0x28
1000c21a:	e7d4      	b.n	1000c1c6 <_dtoa_r+0xa42>
1000c21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c21e:	2b00      	cmp	r3, #0
1000c220:	f47f aef9 	bne.w	1000c016 <_dtoa_r+0x892>
1000c224:	4641      	mov	r1, r8
1000c226:	4658      	mov	r0, fp
1000c228:	f7ff fa1a 	bl	1000b660 <quorem>
1000c22c:	9a08      	ldr	r2, [sp, #32]
1000c22e:	9d04      	ldr	r5, [sp, #16]
1000c230:	f100 0330 	add.w	r3, r0, #48	; 0x30
1000c234:	3201      	adds	r2, #1
1000c236:	9208      	str	r2, [sp, #32]
1000c238:	f805 3b01 	strb.w	r3, [r5], #1
1000c23c:	f04f 0a00 	mov.w	sl, #0
1000c240:	e681      	b.n	1000bf46 <_dtoa_r+0x7c2>
1000c242:	1bdf      	subs	r7, r3, r7
1000c244:	e5c4      	b.n	1000bdd0 <_dtoa_r+0x64c>
1000c246:	2702      	movs	r7, #2
1000c248:	f7ff bbf7 	b.w	1000ba3a <_dtoa_r+0x2b6>
1000c24c:	2301      	movs	r3, #1
1000c24e:	9321      	str	r3, [sp, #132]	; 0x84
1000c250:	9309      	str	r3, [sp, #36]	; 0x24
1000c252:	f7ff bbc1 	b.w	1000b9d8 <_dtoa_r+0x254>
1000c256:	d103      	bne.n	1000c260 <_dtoa_r+0xadc>
1000c258:	9b02      	ldr	r3, [sp, #8]
1000c25a:	07db      	lsls	r3, r3, #31
1000c25c:	f53f ae82 	bmi.w	1000bf64 <_dtoa_r+0x7e0>
1000c260:	1e6b      	subs	r3, r5, #1
1000c262:	e001      	b.n	1000c268 <_dtoa_r+0xae4>
1000c264:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000c268:	2a30      	cmp	r2, #48	; 0x30
1000c26a:	f103 0501 	add.w	r5, r3, #1
1000c26e:	d0f9      	beq.n	1000c264 <_dtoa_r+0xae0>
1000c270:	e686      	b.n	1000bf80 <_dtoa_r+0x7fc>
1000c272:	9a08      	ldr	r2, [sp, #32]
1000c274:	3201      	adds	r2, #1
1000c276:	9208      	str	r2, [sp, #32]
1000c278:	9a04      	ldr	r2, [sp, #16]
1000c27a:	2331      	movs	r3, #49	; 0x31
1000c27c:	7013      	strb	r3, [r2, #0]
1000c27e:	e67f      	b.n	1000bf80 <_dtoa_r+0x7fc>
1000c280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000c282:	2a00      	cmp	r2, #0
1000c284:	f000 812f 	beq.w	1000c4e6 <_dtoa_r+0xd62>
1000c288:	f203 4333 	addw	r3, r3, #1075	; 0x433
1000c28c:	9a05      	ldr	r2, [sp, #20]
1000c28e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1000c290:	441a      	add	r2, r3
1000c292:	464d      	mov	r5, r9
1000c294:	9205      	str	r2, [sp, #20]
1000c296:	4499      	add	r9, r3
1000c298:	e5a4      	b.n	1000bde4 <_dtoa_r+0x660>
1000c29a:	4638      	mov	r0, r7
1000c29c:	f003 fc88 	bl	1000fbb0 <__aeabi_i2d>
1000c2a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000c2a4:	f003 fcee 	bl	1000fc84 <__aeabi_dmul>
1000c2a8:	4b5f      	ldr	r3, [pc, #380]	; (1000c428 <_dtoa_r+0xca4>)
1000c2aa:	2200      	movs	r2, #0
1000c2ac:	f003 fb34 	bl	1000f918 <__adddf3>
1000c2b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
1000c2b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1000c2b8:	930f      	str	r3, [sp, #60]	; 0x3c
1000c2ba:	2200      	movs	r2, #0
1000c2bc:	4b5b      	ldr	r3, [pc, #364]	; (1000c42c <_dtoa_r+0xca8>)
1000c2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000c2c2:	f003 fb27 	bl	1000f914 <__aeabi_dsub>
1000c2c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1000c2ca:	4606      	mov	r6, r0
1000c2cc:	460f      	mov	r7, r1
1000c2ce:	f003 ff69 	bl	100101a4 <__aeabi_dcmpgt>
1000c2d2:	2800      	cmp	r0, #0
1000c2d4:	f040 808f 	bne.w	1000c3f6 <_dtoa_r+0xc72>
1000c2d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1000c2dc:	4602      	mov	r2, r0
1000c2de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1000c2e2:	4630      	mov	r0, r6
1000c2e4:	4639      	mov	r1, r7
1000c2e6:	f003 ff3f 	bl	10010168 <__aeabi_dcmplt>
1000c2ea:	2800      	cmp	r0, #0
1000c2ec:	f43f ac8e 	beq.w	1000bc0c <_dtoa_r+0x488>
1000c2f0:	f04f 0800 	mov.w	r8, #0
1000c2f4:	4646      	mov	r6, r8
1000c2f6:	e4b2      	b.n	1000bc5e <_dtoa_r+0x4da>
1000c2f8:	f000 80f9 	beq.w	1000c4ee <_dtoa_r+0xd6a>
1000c2fc:	9b08      	ldr	r3, [sp, #32]
1000c2fe:	425d      	negs	r5, r3
1000c300:	4b4b      	ldr	r3, [pc, #300]	; (1000c430 <_dtoa_r+0xcac>)
1000c302:	f005 020f 	and.w	r2, r5, #15
1000c306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000c30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000c312:	f003 fcb7 	bl	1000fc84 <__aeabi_dmul>
1000c316:	112d      	asrs	r5, r5, #4
1000c318:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000c31c:	f000 80e7 	beq.w	1000c4ee <_dtoa_r+0xd6a>
1000c320:	4e44      	ldr	r6, [pc, #272]	; (1000c434 <_dtoa_r+0xcb0>)
1000c322:	2300      	movs	r3, #0
1000c324:	2702      	movs	r7, #2
1000c326:	07ea      	lsls	r2, r5, #31
1000c328:	d505      	bpl.n	1000c336 <_dtoa_r+0xbb2>
1000c32a:	e9d6 2300 	ldrd	r2, r3, [r6]
1000c32e:	f003 fca9 	bl	1000fc84 <__aeabi_dmul>
1000c332:	3701      	adds	r7, #1
1000c334:	2301      	movs	r3, #1
1000c336:	106d      	asrs	r5, r5, #1
1000c338:	f106 0608 	add.w	r6, r6, #8
1000c33c:	d1f3      	bne.n	1000c326 <_dtoa_r+0xba2>
1000c33e:	2b00      	cmp	r3, #0
1000c340:	f43f ab94 	beq.w	1000ba6c <_dtoa_r+0x2e8>
1000c344:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000c348:	f7ff bb90 	b.w	1000ba6c <_dtoa_r+0x2e8>
1000c34c:	9b02      	ldr	r3, [sp, #8]
1000c34e:	2b00      	cmp	r3, #0
1000c350:	f47f ae44 	bne.w	1000bfdc <_dtoa_r+0x858>
1000c354:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
1000c358:	f3c2 0313 	ubfx	r3, r2, #0, #20
1000c35c:	2b00      	cmp	r3, #0
1000c35e:	f040 8134 	bne.w	1000c5ca <_dtoa_r+0xe46>
1000c362:	4b35      	ldr	r3, [pc, #212]	; (1000c438 <_dtoa_r+0xcb4>)
1000c364:	4013      	ands	r3, r2
1000c366:	2b00      	cmp	r3, #0
1000c368:	f000 80f6 	beq.w	1000c558 <_dtoa_r+0xdd4>
1000c36c:	9b05      	ldr	r3, [sp, #20]
1000c36e:	3301      	adds	r3, #1
1000c370:	9305      	str	r3, [sp, #20]
1000c372:	2301      	movs	r3, #1
1000c374:	f109 0901 	add.w	r9, r9, #1
1000c378:	9306      	str	r3, [sp, #24]
1000c37a:	e594      	b.n	1000bea6 <_dtoa_r+0x722>
1000c37c:	9908      	ldr	r1, [sp, #32]
1000c37e:	2a00      	cmp	r2, #0
1000c380:	f101 0101 	add.w	r1, r1, #1
1000c384:	9108      	str	r1, [sp, #32]
1000c386:	dd12      	ble.n	1000c3ae <_dtoa_r+0xc2a>
1000c388:	4659      	mov	r1, fp
1000c38a:	2201      	movs	r2, #1
1000c38c:	4620      	mov	r0, r4
1000c38e:	9305      	str	r3, [sp, #20]
1000c390:	f001 fbfa 	bl	1000db88 <__lshift>
1000c394:	4641      	mov	r1, r8
1000c396:	4683      	mov	fp, r0
1000c398:	f001 fc5c 	bl	1000dc54 <__mcmp>
1000c39c:	2800      	cmp	r0, #0
1000c39e:	9b05      	ldr	r3, [sp, #20]
1000c3a0:	f340 80e2 	ble.w	1000c568 <_dtoa_r+0xde4>
1000c3a4:	2b39      	cmp	r3, #57	; 0x39
1000c3a6:	f000 80d2 	beq.w	1000c54e <_dtoa_r+0xdca>
1000c3aa:	9b02      	ldr	r3, [sp, #8]
1000c3ac:	3331      	adds	r3, #49	; 0x31
1000c3ae:	46b2      	mov	sl, r6
1000c3b0:	703b      	strb	r3, [r7, #0]
1000c3b2:	464e      	mov	r6, r9
1000c3b4:	e5e4      	b.n	1000bf80 <_dtoa_r+0x7fc>
1000c3b6:	6871      	ldr	r1, [r6, #4]
1000c3b8:	4620      	mov	r0, r4
1000c3ba:	f001 f9b5 	bl	1000d728 <_Balloc>
1000c3be:	4605      	mov	r5, r0
1000c3c0:	2800      	cmp	r0, #0
1000c3c2:	f000 8109 	beq.w	1000c5d8 <_dtoa_r+0xe54>
1000c3c6:	6933      	ldr	r3, [r6, #16]
1000c3c8:	3302      	adds	r3, #2
1000c3ca:	009a      	lsls	r2, r3, #2
1000c3cc:	f106 010c 	add.w	r1, r6, #12
1000c3d0:	300c      	adds	r0, #12
1000c3d2:	f7fd f91b 	bl	1000960c <memcpy>
1000c3d6:	4629      	mov	r1, r5
1000c3d8:	2201      	movs	r2, #1
1000c3da:	4620      	mov	r0, r4
1000c3dc:	f001 fbd4 	bl	1000db88 <__lshift>
1000c3e0:	4681      	mov	r9, r0
1000c3e2:	e625      	b.n	1000c030 <_dtoa_r+0x8ac>
1000c3e4:	f8dd b008 	ldr.w	fp, [sp, #8]
1000c3e8:	9c05      	ldr	r4, [sp, #20]
1000c3ea:	f7ff bbf5 	b.w	1000bbd8 <_dtoa_r+0x454>
1000c3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c3f0:	eba9 0503 	sub.w	r5, r9, r3
1000c3f4:	e4f6      	b.n	1000bde4 <_dtoa_r+0x660>
1000c3f6:	f04f 0800 	mov.w	r8, #0
1000c3fa:	4646      	mov	r6, r8
1000c3fc:	e69e      	b.n	1000c13c <_dtoa_r+0x9b8>
1000c3fe:	9a08      	ldr	r2, [sp, #32]
1000c400:	2b39      	cmp	r3, #57	; 0x39
1000c402:	f102 0201 	add.w	r2, r2, #1
1000c406:	9208      	str	r2, [sp, #32]
1000c408:	f000 80a1 	beq.w	1000c54e <_dtoa_r+0xdca>
1000c40c:	3301      	adds	r3, #1
1000c40e:	46b2      	mov	sl, r6
1000c410:	703b      	strb	r3, [r7, #0]
1000c412:	464e      	mov	r6, r9
1000c414:	e5b4      	b.n	1000bf80 <_dtoa_r+0x7fc>
1000c416:	9a08      	ldr	r2, [sp, #32]
1000c418:	3201      	adds	r2, #1
1000c41a:	46b2      	mov	sl, r6
1000c41c:	9208      	str	r2, [sp, #32]
1000c41e:	464e      	mov	r6, r9
1000c420:	e591      	b.n	1000bf46 <_dtoa_r+0x7c2>
1000c422:	bf00      	nop
1000c424:	10010be0 	.word	0x10010be0
1000c428:	401c0000 	.word	0x401c0000
1000c42c:	40140000 	.word	0x40140000
1000c430:	10010c48 	.word	0x10010c48
1000c434:	10010d38 	.word	0x10010d38
1000c438:	7ff00000 	.word	0x7ff00000
1000c43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000c440:	f003 fc20 	bl	1000fc84 <__aeabi_dmul>
1000c444:	9b04      	ldr	r3, [sp, #16]
1000c446:	f883 8000 	strb.w	r8, [r3]
1000c44a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000c44c:	2b01      	cmp	r3, #1
1000c44e:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000c452:	d022      	beq.n	1000c49a <_dtoa_r+0xd16>
1000c454:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000c456:	9a04      	ldr	r2, [sp, #16]
1000c458:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
1000c45c:	4413      	add	r3, r2
1000c45e:	4699      	mov	r9, r3
1000c460:	2200      	movs	r2, #0
1000c462:	4b70      	ldr	r3, [pc, #448]	; (1000c624 <_dtoa_r+0xea0>)
1000c464:	4630      	mov	r0, r6
1000c466:	4639      	mov	r1, r7
1000c468:	f003 fc0c 	bl	1000fc84 <__aeabi_dmul>
1000c46c:	460f      	mov	r7, r1
1000c46e:	4606      	mov	r6, r0
1000c470:	f003 feb8 	bl	100101e4 <__aeabi_d2iz>
1000c474:	4680      	mov	r8, r0
1000c476:	f003 fb9b 	bl	1000fbb0 <__aeabi_i2d>
1000c47a:	f108 0830 	add.w	r8, r8, #48	; 0x30
1000c47e:	4602      	mov	r2, r0
1000c480:	460b      	mov	r3, r1
1000c482:	4630      	mov	r0, r6
1000c484:	4639      	mov	r1, r7
1000c486:	f003 fa45 	bl	1000f914 <__aeabi_dsub>
1000c48a:	f805 8b01 	strb.w	r8, [r5], #1
1000c48e:	454d      	cmp	r5, r9
1000c490:	4606      	mov	r6, r0
1000c492:	460f      	mov	r7, r1
1000c494:	d1e4      	bne.n	1000c460 <_dtoa_r+0xcdc>
1000c496:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
1000c49a:	4b63      	ldr	r3, [pc, #396]	; (1000c628 <_dtoa_r+0xea4>)
1000c49c:	2200      	movs	r2, #0
1000c49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000c4a2:	f003 fa39 	bl	1000f918 <__adddf3>
1000c4a6:	4632      	mov	r2, r6
1000c4a8:	463b      	mov	r3, r7
1000c4aa:	f003 fe5d 	bl	10010168 <__aeabi_dcmplt>
1000c4ae:	2800      	cmp	r0, #0
1000c4b0:	d154      	bne.n	1000c55c <_dtoa_r+0xdd8>
1000c4b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000c4b6:	2000      	movs	r0, #0
1000c4b8:	495b      	ldr	r1, [pc, #364]	; (1000c628 <_dtoa_r+0xea4>)
1000c4ba:	f003 fa2b 	bl	1000f914 <__aeabi_dsub>
1000c4be:	4632      	mov	r2, r6
1000c4c0:	463b      	mov	r3, r7
1000c4c2:	f003 fe6f 	bl	100101a4 <__aeabi_dcmpgt>
1000c4c6:	2800      	cmp	r0, #0
1000c4c8:	f43f aba0 	beq.w	1000bc0c <_dtoa_r+0x488>
1000c4cc:	e000      	b.n	1000c4d0 <_dtoa_r+0xd4c>
1000c4ce:	4615      	mov	r5, r2
1000c4d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1000c4d4:	2b30      	cmp	r3, #48	; 0x30
1000c4d6:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
1000c4da:	d0f8      	beq.n	1000c4ce <_dtoa_r+0xd4a>
1000c4dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000c4de:	3301      	adds	r3, #1
1000c4e0:	9308      	str	r3, [sp, #32]
1000c4e2:	f7ff bb79 	b.w	1000bbd8 <_dtoa_r+0x454>
1000c4e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000c4e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1000c4ec:	e6ce      	b.n	1000c28c <_dtoa_r+0xb08>
1000c4ee:	2702      	movs	r7, #2
1000c4f0:	f7ff babc 	b.w	1000ba6c <_dtoa_r+0x2e8>
1000c4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c4f6:	2b00      	cmp	r3, #0
1000c4f8:	f43f aecf 	beq.w	1000c29a <_dtoa_r+0xb16>
1000c4fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
1000c4fe:	2d00      	cmp	r5, #0
1000c500:	f77f ab84 	ble.w	1000bc0c <_dtoa_r+0x488>
1000c504:	2200      	movs	r2, #0
1000c506:	4b47      	ldr	r3, [pc, #284]	; (1000c624 <_dtoa_r+0xea0>)
1000c508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1000c50c:	f003 fbba 	bl	1000fc84 <__aeabi_dmul>
1000c510:	e9cd 0102 	strd	r0, r1, [sp, #8]
1000c514:	1c78      	adds	r0, r7, #1
1000c516:	f003 fb4b 	bl	1000fbb0 <__aeabi_i2d>
1000c51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1000c51e:	f003 fbb1 	bl	1000fc84 <__aeabi_dmul>
1000c522:	4b42      	ldr	r3, [pc, #264]	; (1000c62c <_dtoa_r+0xea8>)
1000c524:	2200      	movs	r2, #0
1000c526:	f003 f9f7 	bl	1000f918 <__adddf3>
1000c52a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
1000c52e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1000c532:	930f      	str	r3, [sp, #60]	; 0x3c
1000c534:	9b08      	ldr	r3, [sp, #32]
1000c536:	3b01      	subs	r3, #1
1000c538:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
1000c53c:	f7ff bab9 	b.w	1000bab2 <_dtoa_r+0x32e>
1000c540:	9a08      	ldr	r2, [sp, #32]
1000c542:	3201      	adds	r2, #1
1000c544:	9208      	str	r2, [sp, #32]
1000c546:	2231      	movs	r2, #49	; 0x31
1000c548:	701a      	strb	r2, [r3, #0]
1000c54a:	f7ff bb45 	b.w	1000bbd8 <_dtoa_r+0x454>
1000c54e:	2239      	movs	r2, #57	; 0x39
1000c550:	46b2      	mov	sl, r6
1000c552:	703a      	strb	r2, [r7, #0]
1000c554:	464e      	mov	r6, r9
1000c556:	e505      	b.n	1000bf64 <_dtoa_r+0x7e0>
1000c558:	9306      	str	r3, [sp, #24]
1000c55a:	e4a4      	b.n	1000bea6 <_dtoa_r+0x722>
1000c55c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000c55e:	3301      	adds	r3, #1
1000c560:	9308      	str	r3, [sp, #32]
1000c562:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1000c566:	e40f      	b.n	1000bd88 <_dtoa_r+0x604>
1000c568:	f47f af21 	bne.w	1000c3ae <_dtoa_r+0xc2a>
1000c56c:	07da      	lsls	r2, r3, #31
1000c56e:	f57f af1e 	bpl.w	1000c3ae <_dtoa_r+0xc2a>
1000c572:	e717      	b.n	1000c3a4 <_dtoa_r+0xc20>
1000c574:	4643      	mov	r3, r8
1000c576:	46a0      	mov	r8, r4
1000c578:	461c      	mov	r4, r3
1000c57a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000c57c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1000c580:	3301      	adds	r3, #1
1000c582:	9308      	str	r3, [sp, #32]
1000c584:	e400      	b.n	1000bd88 <_dtoa_r+0x604>
1000c586:	9a08      	ldr	r2, [sp, #32]
1000c588:	2b39      	cmp	r3, #57	; 0x39
1000c58a:	f102 0201 	add.w	r2, r2, #1
1000c58e:	9208      	str	r2, [sp, #32]
1000c590:	f107 0501 	add.w	r5, r7, #1
1000c594:	d0db      	beq.n	1000c54e <_dtoa_r+0xdca>
1000c596:	f1ba 0f00 	cmp.w	sl, #0
1000c59a:	f73f af06 	bgt.w	1000c3aa <_dtoa_r+0xc26>
1000c59e:	e706      	b.n	1000c3ae <_dtoa_r+0xc2a>
1000c5a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000c5a2:	2b02      	cmp	r3, #2
1000c5a4:	dc01      	bgt.n	1000c5aa <_dtoa_r+0xe26>
1000c5a6:	9708      	str	r7, [sp, #32]
1000c5a8:	e63c      	b.n	1000c224 <_dtoa_r+0xaa0>
1000c5aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000c5ac:	e9cd 7308 	strd	r7, r3, [sp, #32]
1000c5b0:	e5b3      	b.n	1000c11a <_dtoa_r+0x996>
1000c5b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000c5b4:	2b02      	cmp	r3, #2
1000c5b6:	dcf8      	bgt.n	1000c5aa <_dtoa_r+0xe26>
1000c5b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000c5ba:	9708      	str	r7, [sp, #32]
1000c5bc:	9309      	str	r3, [sp, #36]	; 0x24
1000c5be:	e52a      	b.n	1000c016 <_dtoa_r+0x892>
1000c5c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000c5c2:	3301      	adds	r3, #1
1000c5c4:	9308      	str	r3, [sp, #32]
1000c5c6:	f7ff bbdf 	b.w	1000bd88 <_dtoa_r+0x604>
1000c5ca:	9b02      	ldr	r3, [sp, #8]
1000c5cc:	9306      	str	r3, [sp, #24]
1000c5ce:	e507      	b.n	1000bfe0 <_dtoa_r+0x85c>
1000c5d0:	4b17      	ldr	r3, [pc, #92]	; (1000c630 <_dtoa_r+0xeac>)
1000c5d2:	9304      	str	r3, [sp, #16]
1000c5d4:	f7ff b90f 	b.w	1000b7f6 <_dtoa_r+0x72>
1000c5d8:	4602      	mov	r2, r0
1000c5da:	4b16      	ldr	r3, [pc, #88]	; (1000c634 <_dtoa_r+0xeb0>)
1000c5dc:	4816      	ldr	r0, [pc, #88]	; (1000c638 <_dtoa_r+0xeb4>)
1000c5de:	f240 21ea 	movw	r1, #746	; 0x2ea
1000c5e2:	f002 fe03 	bl	1000f1ec <__assert_func>
1000c5e6:	2500      	movs	r5, #0
1000c5e8:	6465      	str	r5, [r4, #68]	; 0x44
1000c5ea:	4629      	mov	r1, r5
1000c5ec:	4620      	mov	r0, r4
1000c5ee:	f001 f89b 	bl	1000d728 <_Balloc>
1000c5f2:	9004      	str	r0, [sp, #16]
1000c5f4:	b958      	cbnz	r0, 1000c60e <_dtoa_r+0xe8a>
1000c5f6:	4b0f      	ldr	r3, [pc, #60]	; (1000c634 <_dtoa_r+0xeb0>)
1000c5f8:	480f      	ldr	r0, [pc, #60]	; (1000c638 <_dtoa_r+0xeb4>)
1000c5fa:	2200      	movs	r2, #0
1000c5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1000c600:	f002 fdf4 	bl	1000f1ec <__assert_func>
1000c604:	f43f ac64 	beq.w	1000bed0 <_dtoa_r+0x74c>
1000c608:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1000c60c:	e4ce      	b.n	1000bfac <_dtoa_r+0x828>
1000c60e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1000c612:	9309      	str	r3, [sp, #36]	; 0x24
1000c614:	9a04      	ldr	r2, [sp, #16]
1000c616:	9310      	str	r3, [sp, #64]	; 0x40
1000c618:	2301      	movs	r3, #1
1000c61a:	6422      	str	r2, [r4, #64]	; 0x40
1000c61c:	9521      	str	r5, [sp, #132]	; 0x84
1000c61e:	930a      	str	r3, [sp, #40]	; 0x28
1000c620:	f7ff baf8 	b.w	1000bc14 <_dtoa_r+0x490>
1000c624:	40240000 	.word	0x40240000
1000c628:	3fe00000 	.word	0x3fe00000
1000c62c:	401c0000 	.word	0x401c0000
1000c630:	10010be4 	.word	0x10010be4
1000c634:	10010bf0 	.word	0x10010bf0
1000c638:	10010c04 	.word	0x10010c04

1000c63c <__sflush_r>:
1000c63c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1000c640:	b29a      	uxth	r2, r3
1000c642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000c646:	460c      	mov	r4, r1
1000c648:	0711      	lsls	r1, r2, #28
1000c64a:	4680      	mov	r8, r0
1000c64c:	d448      	bmi.n	1000c6e0 <__sflush_r+0xa4>
1000c64e:	6862      	ldr	r2, [r4, #4]
1000c650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1000c654:	2a00      	cmp	r2, #0
1000c656:	81a3      	strh	r3, [r4, #12]
1000c658:	dd5d      	ble.n	1000c716 <__sflush_r+0xda>
1000c65a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1000c65c:	2d00      	cmp	r5, #0
1000c65e:	d057      	beq.n	1000c710 <__sflush_r+0xd4>
1000c660:	2200      	movs	r2, #0
1000c662:	b29b      	uxth	r3, r3
1000c664:	f8d8 6000 	ldr.w	r6, [r8]
1000c668:	69e1      	ldr	r1, [r4, #28]
1000c66a:	f8c8 2000 	str.w	r2, [r8]
1000c66e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1000c672:	d154      	bne.n	1000c71e <__sflush_r+0xe2>
1000c674:	2301      	movs	r3, #1
1000c676:	4640      	mov	r0, r8
1000c678:	47a8      	blx	r5
1000c67a:	1c43      	adds	r3, r0, #1
1000c67c:	d066      	beq.n	1000c74c <__sflush_r+0x110>
1000c67e:	89a3      	ldrh	r3, [r4, #12]
1000c680:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1000c682:	69e1      	ldr	r1, [r4, #28]
1000c684:	075f      	lsls	r7, r3, #29
1000c686:	d505      	bpl.n	1000c694 <__sflush_r+0x58>
1000c688:	6862      	ldr	r2, [r4, #4]
1000c68a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1000c68c:	1a80      	subs	r0, r0, r2
1000c68e:	b10b      	cbz	r3, 1000c694 <__sflush_r+0x58>
1000c690:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1000c692:	1ac0      	subs	r0, r0, r3
1000c694:	4602      	mov	r2, r0
1000c696:	2300      	movs	r3, #0
1000c698:	4640      	mov	r0, r8
1000c69a:	47a8      	blx	r5
1000c69c:	1c45      	adds	r5, r0, #1
1000c69e:	d148      	bne.n	1000c732 <__sflush_r+0xf6>
1000c6a0:	f8d8 2000 	ldr.w	r2, [r8]
1000c6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000c6a8:	2a00      	cmp	r2, #0
1000c6aa:	d05c      	beq.n	1000c766 <__sflush_r+0x12a>
1000c6ac:	2a1d      	cmp	r2, #29
1000c6ae:	d001      	beq.n	1000c6b4 <__sflush_r+0x78>
1000c6b0:	2a16      	cmp	r2, #22
1000c6b2:	d164      	bne.n	1000c77e <__sflush_r+0x142>
1000c6b4:	6922      	ldr	r2, [r4, #16]
1000c6b6:	2100      	movs	r1, #0
1000c6b8:	e9c4 2100 	strd	r2, r1, [r4]
1000c6bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1000c6c0:	81a3      	strh	r3, [r4, #12]
1000c6c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
1000c6c4:	f8c8 6000 	str.w	r6, [r8]
1000c6c8:	b311      	cbz	r1, 1000c710 <__sflush_r+0xd4>
1000c6ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
1000c6ce:	4299      	cmp	r1, r3
1000c6d0:	d002      	beq.n	1000c6d8 <__sflush_r+0x9c>
1000c6d2:	4640      	mov	r0, r8
1000c6d4:	f000 f9ce 	bl	1000ca74 <_free_r>
1000c6d8:	2000      	movs	r0, #0
1000c6da:	6320      	str	r0, [r4, #48]	; 0x30
1000c6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000c6e0:	6926      	ldr	r6, [r4, #16]
1000c6e2:	b1ae      	cbz	r6, 1000c710 <__sflush_r+0xd4>
1000c6e4:	6825      	ldr	r5, [r4, #0]
1000c6e6:	6026      	str	r6, [r4, #0]
1000c6e8:	0791      	lsls	r1, r2, #30
1000c6ea:	bf0c      	ite	eq
1000c6ec:	6963      	ldreq	r3, [r4, #20]
1000c6ee:	2300      	movne	r3, #0
1000c6f0:	1bad      	subs	r5, r5, r6
1000c6f2:	60a3      	str	r3, [r4, #8]
1000c6f4:	e00a      	b.n	1000c70c <__sflush_r+0xd0>
1000c6f6:	462b      	mov	r3, r5
1000c6f8:	4632      	mov	r2, r6
1000c6fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
1000c6fc:	69e1      	ldr	r1, [r4, #28]
1000c6fe:	4640      	mov	r0, r8
1000c700:	47b8      	blx	r7
1000c702:	2800      	cmp	r0, #0
1000c704:	eba5 0500 	sub.w	r5, r5, r0
1000c708:	4406      	add	r6, r0
1000c70a:	dd0a      	ble.n	1000c722 <__sflush_r+0xe6>
1000c70c:	2d00      	cmp	r5, #0
1000c70e:	dcf2      	bgt.n	1000c6f6 <__sflush_r+0xba>
1000c710:	2000      	movs	r0, #0
1000c712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000c716:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1000c718:	2a00      	cmp	r2, #0
1000c71a:	dc9e      	bgt.n	1000c65a <__sflush_r+0x1e>
1000c71c:	e7f8      	b.n	1000c710 <__sflush_r+0xd4>
1000c71e:	6d20      	ldr	r0, [r4, #80]	; 0x50
1000c720:	e7b0      	b.n	1000c684 <__sflush_r+0x48>
1000c722:	89a3      	ldrh	r3, [r4, #12]
1000c724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000c728:	81a3      	strh	r3, [r4, #12]
1000c72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000c72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000c732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000c736:	6922      	ldr	r2, [r4, #16]
1000c738:	6022      	str	r2, [r4, #0]
1000c73a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1000c73e:	2200      	movs	r2, #0
1000c740:	6062      	str	r2, [r4, #4]
1000c742:	04da      	lsls	r2, r3, #19
1000c744:	81a3      	strh	r3, [r4, #12]
1000c746:	d5bc      	bpl.n	1000c6c2 <__sflush_r+0x86>
1000c748:	6520      	str	r0, [r4, #80]	; 0x50
1000c74a:	e7ba      	b.n	1000c6c2 <__sflush_r+0x86>
1000c74c:	f8d8 3000 	ldr.w	r3, [r8]
1000c750:	2b00      	cmp	r3, #0
1000c752:	d094      	beq.n	1000c67e <__sflush_r+0x42>
1000c754:	2b1d      	cmp	r3, #29
1000c756:	d00f      	beq.n	1000c778 <__sflush_r+0x13c>
1000c758:	2b16      	cmp	r3, #22
1000c75a:	d00d      	beq.n	1000c778 <__sflush_r+0x13c>
1000c75c:	89a3      	ldrh	r3, [r4, #12]
1000c75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000c762:	81a3      	strh	r3, [r4, #12]
1000c764:	e7d5      	b.n	1000c712 <__sflush_r+0xd6>
1000c766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1000c76a:	6921      	ldr	r1, [r4, #16]
1000c76c:	81a3      	strh	r3, [r4, #12]
1000c76e:	04db      	lsls	r3, r3, #19
1000c770:	e9c4 1200 	strd	r1, r2, [r4]
1000c774:	d5a5      	bpl.n	1000c6c2 <__sflush_r+0x86>
1000c776:	e7e7      	b.n	1000c748 <__sflush_r+0x10c>
1000c778:	f8c8 6000 	str.w	r6, [r8]
1000c77c:	e7c8      	b.n	1000c710 <__sflush_r+0xd4>
1000c77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000c782:	81a3      	strh	r3, [r4, #12]
1000c784:	e7c5      	b.n	1000c712 <__sflush_r+0xd6>
1000c786:	bf00      	nop

1000c788 <_fflush_r>:
1000c788:	b510      	push	{r4, lr}
1000c78a:	4604      	mov	r4, r0
1000c78c:	b082      	sub	sp, #8
1000c78e:	b108      	cbz	r0, 1000c794 <_fflush_r+0xc>
1000c790:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000c792:	b123      	cbz	r3, 1000c79e <_fflush_r+0x16>
1000c794:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
1000c798:	b948      	cbnz	r0, 1000c7ae <_fflush_r+0x26>
1000c79a:	b002      	add	sp, #8
1000c79c:	bd10      	pop	{r4, pc}
1000c79e:	9101      	str	r1, [sp, #4]
1000c7a0:	f000 f8f8 	bl	1000c994 <__sinit>
1000c7a4:	9901      	ldr	r1, [sp, #4]
1000c7a6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
1000c7aa:	2800      	cmp	r0, #0
1000c7ac:	d0f5      	beq.n	1000c79a <_fflush_r+0x12>
1000c7ae:	4620      	mov	r0, r4
1000c7b0:	b002      	add	sp, #8
1000c7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000c7b6:	f7ff bf41 	b.w	1000c63c <__sflush_r>
1000c7ba:	bf00      	nop

1000c7bc <fflush>:
1000c7bc:	b120      	cbz	r0, 1000c7c8 <fflush+0xc>
1000c7be:	4b05      	ldr	r3, [pc, #20]	; (1000c7d4 <fflush+0x18>)
1000c7c0:	4601      	mov	r1, r0
1000c7c2:	6818      	ldr	r0, [r3, #0]
1000c7c4:	f7ff bfe0 	b.w	1000c788 <_fflush_r>
1000c7c8:	4b03      	ldr	r3, [pc, #12]	; (1000c7d8 <fflush+0x1c>)
1000c7ca:	4904      	ldr	r1, [pc, #16]	; (1000c7dc <fflush+0x20>)
1000c7cc:	6818      	ldr	r0, [r3, #0]
1000c7ce:	f000 bbf5 	b.w	1000cfbc <_fwalk_reent>
1000c7d2:	bf00      	nop
1000c7d4:	200000a0 	.word	0x200000a0
1000c7d8:	10010a70 	.word	0x10010a70
1000c7dc:	1000c789 	.word	0x1000c789

1000c7e0 <__fp_lock>:
1000c7e0:	2000      	movs	r0, #0
1000c7e2:	4770      	bx	lr

1000c7e4 <_cleanup_r>:
1000c7e4:	4901      	ldr	r1, [pc, #4]	; (1000c7ec <_cleanup_r+0x8>)
1000c7e6:	f000 bbe9 	b.w	1000cfbc <_fwalk_reent>
1000c7ea:	bf00      	nop
1000c7ec:	1000f2b9 	.word	0x1000f2b9

1000c7f0 <__sinit.part.0>:
1000c7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000c7f4:	6845      	ldr	r5, [r0, #4]
1000c7f6:	4b2c      	ldr	r3, [pc, #176]	; (1000c8a8 <__sinit.part.0+0xb8>)
1000c7f8:	63c3      	str	r3, [r0, #60]	; 0x3c
1000c7fa:	2400      	movs	r4, #0
1000c7fc:	4607      	mov	r7, r0
1000c7fe:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
1000c802:	2304      	movs	r3, #4
1000c804:	2103      	movs	r1, #3
1000c806:	e9c0 12b9 	strd	r1, r2, [r0, #740]	; 0x2e4
1000c80a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
1000c80e:	4621      	mov	r1, r4
1000c810:	60eb      	str	r3, [r5, #12]
1000c812:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1000c816:	666c      	str	r4, [r5, #100]	; 0x64
1000c818:	e9c5 4400 	strd	r4, r4, [r5]
1000c81c:	60ac      	str	r4, [r5, #8]
1000c81e:	e9c5 4404 	strd	r4, r4, [r5, #16]
1000c822:	61ac      	str	r4, [r5, #24]
1000c824:	2208      	movs	r2, #8
1000c826:	f7fc fff3 	bl	10009810 <memset>
1000c82a:	f8df b088 	ldr.w	fp, [pc, #136]	; 1000c8b4 <__sinit.part.0+0xc4>
1000c82e:	68be      	ldr	r6, [r7, #8]
1000c830:	f8df a084 	ldr.w	sl, [pc, #132]	; 1000c8b8 <__sinit.part.0+0xc8>
1000c834:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1000c8bc <__sinit.part.0+0xcc>
1000c838:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1000c8c0 <__sinit.part.0+0xd0>
1000c83c:	4b1b      	ldr	r3, [pc, #108]	; (1000c8ac <__sinit.part.0+0xbc>)
1000c83e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1000c842:	e9c5 5b07 	strd	r5, fp, [r5, #28]
1000c846:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
1000c84a:	4621      	mov	r1, r4
1000c84c:	60f3      	str	r3, [r6, #12]
1000c84e:	2208      	movs	r2, #8
1000c850:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1000c854:	6674      	str	r4, [r6, #100]	; 0x64
1000c856:	e9c6 4400 	strd	r4, r4, [r6]
1000c85a:	60b4      	str	r4, [r6, #8]
1000c85c:	e9c6 4404 	strd	r4, r4, [r6, #16]
1000c860:	61b4      	str	r4, [r6, #24]
1000c862:	f7fc ffd5 	bl	10009810 <memset>
1000c866:	68fd      	ldr	r5, [r7, #12]
1000c868:	4b11      	ldr	r3, [pc, #68]	; (1000c8b0 <__sinit.part.0+0xc0>)
1000c86a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
1000c86e:	e9c6 6b07 	strd	r6, fp, [r6, #28]
1000c872:	e9c6 a909 	strd	sl, r9, [r6, #36]	; 0x24
1000c876:	4621      	mov	r1, r4
1000c878:	60eb      	str	r3, [r5, #12]
1000c87a:	666c      	str	r4, [r5, #100]	; 0x64
1000c87c:	e9c5 4400 	strd	r4, r4, [r5]
1000c880:	60ac      	str	r4, [r5, #8]
1000c882:	e9c5 4404 	strd	r4, r4, [r5, #16]
1000c886:	61ac      	str	r4, [r5, #24]
1000c888:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1000c88c:	2208      	movs	r2, #8
1000c88e:	f7fc ffbf 	bl	10009810 <memset>
1000c892:	2301      	movs	r3, #1
1000c894:	e9c5 5b07 	strd	r5, fp, [r5, #28]
1000c898:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
1000c89c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1000c8a0:	63bb      	str	r3, [r7, #56]	; 0x38
1000c8a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000c8a6:	bf00      	nop
1000c8a8:	1000c7e5 	.word	0x1000c7e5
1000c8ac:	00010009 	.word	0x00010009
1000c8b0:	00020012 	.word	0x00020012
1000c8b4:	1000e431 	.word	0x1000e431
1000c8b8:	1000e459 	.word	0x1000e459
1000c8bc:	1000e499 	.word	0x1000e499
1000c8c0:	1000e4b9 	.word	0x1000e4b9

1000c8c4 <__fp_unlock>:
1000c8c4:	2000      	movs	r0, #0
1000c8c6:	4770      	bx	lr

1000c8c8 <__sfmoreglue>:
1000c8c8:	b570      	push	{r4, r5, r6, lr}
1000c8ca:	1e4a      	subs	r2, r1, #1
1000c8cc:	2568      	movs	r5, #104	; 0x68
1000c8ce:	fb05 f502 	mul.w	r5, r5, r2
1000c8d2:	460e      	mov	r6, r1
1000c8d4:	f105 0174 	add.w	r1, r5, #116	; 0x74
1000c8d8:	f000 fc1c 	bl	1000d114 <_malloc_r>
1000c8dc:	4604      	mov	r4, r0
1000c8de:	b140      	cbz	r0, 1000c8f2 <__sfmoreglue+0x2a>
1000c8e0:	2100      	movs	r1, #0
1000c8e2:	300c      	adds	r0, #12
1000c8e4:	6066      	str	r6, [r4, #4]
1000c8e6:	f105 0268 	add.w	r2, r5, #104	; 0x68
1000c8ea:	6021      	str	r1, [r4, #0]
1000c8ec:	60a0      	str	r0, [r4, #8]
1000c8ee:	f7fc ff8f 	bl	10009810 <memset>
1000c8f2:	4620      	mov	r0, r4
1000c8f4:	bd70      	pop	{r4, r5, r6, pc}
1000c8f6:	bf00      	nop

1000c8f8 <__sfp>:
1000c8f8:	4b1f      	ldr	r3, [pc, #124]	; (1000c978 <__sfp+0x80>)
1000c8fa:	b570      	push	{r4, r5, r6, lr}
1000c8fc:	681d      	ldr	r5, [r3, #0]
1000c8fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
1000c900:	4606      	mov	r6, r0
1000c902:	b34b      	cbz	r3, 1000c958 <__sfp+0x60>
1000c904:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
1000c908:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
1000c90c:	3b01      	subs	r3, #1
1000c90e:	d505      	bpl.n	1000c91c <__sfp+0x24>
1000c910:	e01e      	b.n	1000c950 <__sfp+0x58>
1000c912:	3b01      	subs	r3, #1
1000c914:	1c5a      	adds	r2, r3, #1
1000c916:	f104 0468 	add.w	r4, r4, #104	; 0x68
1000c91a:	d019      	beq.n	1000c950 <__sfp+0x58>
1000c91c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000c920:	2a00      	cmp	r2, #0
1000c922:	d1f6      	bne.n	1000c912 <__sfp+0x1a>
1000c924:	2500      	movs	r5, #0
1000c926:	4b15      	ldr	r3, [pc, #84]	; (1000c97c <__sfp+0x84>)
1000c928:	6665      	str	r5, [r4, #100]	; 0x64
1000c92a:	e9c4 5500 	strd	r5, r5, [r4]
1000c92e:	60a5      	str	r5, [r4, #8]
1000c930:	e9c4 5504 	strd	r5, r5, [r4, #16]
1000c934:	61a5      	str	r5, [r4, #24]
1000c936:	4629      	mov	r1, r5
1000c938:	60e3      	str	r3, [r4, #12]
1000c93a:	2208      	movs	r2, #8
1000c93c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1000c940:	f7fc ff66 	bl	10009810 <memset>
1000c944:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
1000c948:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
1000c94c:	4620      	mov	r0, r4
1000c94e:	bd70      	pop	{r4, r5, r6, pc}
1000c950:	682c      	ldr	r4, [r5, #0]
1000c952:	b12c      	cbz	r4, 1000c960 <__sfp+0x68>
1000c954:	4625      	mov	r5, r4
1000c956:	e7d7      	b.n	1000c908 <__sfp+0x10>
1000c958:	4628      	mov	r0, r5
1000c95a:	f7ff ff49 	bl	1000c7f0 <__sinit.part.0>
1000c95e:	e7d1      	b.n	1000c904 <__sfp+0xc>
1000c960:	2104      	movs	r1, #4
1000c962:	4630      	mov	r0, r6
1000c964:	f7ff ffb0 	bl	1000c8c8 <__sfmoreglue>
1000c968:	4604      	mov	r4, r0
1000c96a:	6028      	str	r0, [r5, #0]
1000c96c:	2800      	cmp	r0, #0
1000c96e:	d1f1      	bne.n	1000c954 <__sfp+0x5c>
1000c970:	230c      	movs	r3, #12
1000c972:	6033      	str	r3, [r6, #0]
1000c974:	e7ea      	b.n	1000c94c <__sfp+0x54>
1000c976:	bf00      	nop
1000c978:	10010a70 	.word	0x10010a70
1000c97c:	ffff0001 	.word	0xffff0001

1000c980 <_cleanup>:
1000c980:	4b02      	ldr	r3, [pc, #8]	; (1000c98c <_cleanup+0xc>)
1000c982:	4903      	ldr	r1, [pc, #12]	; (1000c990 <_cleanup+0x10>)
1000c984:	6818      	ldr	r0, [r3, #0]
1000c986:	f000 bb19 	b.w	1000cfbc <_fwalk_reent>
1000c98a:	bf00      	nop
1000c98c:	10010a70 	.word	0x10010a70
1000c990:	1000f2b9 	.word	0x1000f2b9

1000c994 <__sinit>:
1000c994:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000c996:	b103      	cbz	r3, 1000c99a <__sinit+0x6>
1000c998:	4770      	bx	lr
1000c99a:	e729      	b.n	1000c7f0 <__sinit.part.0>

1000c99c <__sfp_lock_acquire>:
1000c99c:	4770      	bx	lr
1000c99e:	bf00      	nop

1000c9a0 <__sfp_lock_release>:
1000c9a0:	4770      	bx	lr
1000c9a2:	bf00      	nop

1000c9a4 <__sinit_lock_acquire>:
1000c9a4:	4770      	bx	lr
1000c9a6:	bf00      	nop

1000c9a8 <__sinit_lock_release>:
1000c9a8:	4770      	bx	lr
1000c9aa:	bf00      	nop

1000c9ac <__fp_lock_all>:
1000c9ac:	4b02      	ldr	r3, [pc, #8]	; (1000c9b8 <__fp_lock_all+0xc>)
1000c9ae:	4903      	ldr	r1, [pc, #12]	; (1000c9bc <__fp_lock_all+0x10>)
1000c9b0:	6818      	ldr	r0, [r3, #0]
1000c9b2:	f000 badd 	b.w	1000cf70 <_fwalk>
1000c9b6:	bf00      	nop
1000c9b8:	200000a0 	.word	0x200000a0
1000c9bc:	1000c7e1 	.word	0x1000c7e1

1000c9c0 <__fp_unlock_all>:
1000c9c0:	4b02      	ldr	r3, [pc, #8]	; (1000c9cc <__fp_unlock_all+0xc>)
1000c9c2:	4903      	ldr	r1, [pc, #12]	; (1000c9d0 <__fp_unlock_all+0x10>)
1000c9c4:	6818      	ldr	r0, [r3, #0]
1000c9c6:	f000 bad3 	b.w	1000cf70 <_fwalk>
1000c9ca:	bf00      	nop
1000c9cc:	200000a0 	.word	0x200000a0
1000c9d0:	1000c8c5 	.word	0x1000c8c5

1000c9d4 <_malloc_trim_r>:
1000c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c9d6:	4f24      	ldr	r7, [pc, #144]	; (1000ca68 <_malloc_trim_r+0x94>)
1000c9d8:	460c      	mov	r4, r1
1000c9da:	4606      	mov	r6, r0
1000c9dc:	f000 fea0 	bl	1000d720 <__malloc_lock>
1000c9e0:	68bb      	ldr	r3, [r7, #8]
1000c9e2:	685d      	ldr	r5, [r3, #4]
1000c9e4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1000c9e8:	310f      	adds	r1, #15
1000c9ea:	f025 0503 	bic.w	r5, r5, #3
1000c9ee:	4429      	add	r1, r5
1000c9f0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1000c9f4:	f021 010f 	bic.w	r1, r1, #15
1000c9f8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1000c9fc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1000ca00:	db07      	blt.n	1000ca12 <_malloc_trim_r+0x3e>
1000ca02:	2100      	movs	r1, #0
1000ca04:	4630      	mov	r0, r6
1000ca06:	f001 fd01 	bl	1000e40c <_sbrk_r>
1000ca0a:	68bb      	ldr	r3, [r7, #8]
1000ca0c:	442b      	add	r3, r5
1000ca0e:	4298      	cmp	r0, r3
1000ca10:	d004      	beq.n	1000ca1c <_malloc_trim_r+0x48>
1000ca12:	4630      	mov	r0, r6
1000ca14:	f000 fe86 	bl	1000d724 <__malloc_unlock>
1000ca18:	2000      	movs	r0, #0
1000ca1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ca1c:	4261      	negs	r1, r4
1000ca1e:	4630      	mov	r0, r6
1000ca20:	f001 fcf4 	bl	1000e40c <_sbrk_r>
1000ca24:	3001      	adds	r0, #1
1000ca26:	d00d      	beq.n	1000ca44 <_malloc_trim_r+0x70>
1000ca28:	4b10      	ldr	r3, [pc, #64]	; (1000ca6c <_malloc_trim_r+0x98>)
1000ca2a:	68ba      	ldr	r2, [r7, #8]
1000ca2c:	6819      	ldr	r1, [r3, #0]
1000ca2e:	1b2d      	subs	r5, r5, r4
1000ca30:	f045 0501 	orr.w	r5, r5, #1
1000ca34:	4630      	mov	r0, r6
1000ca36:	1b09      	subs	r1, r1, r4
1000ca38:	6055      	str	r5, [r2, #4]
1000ca3a:	6019      	str	r1, [r3, #0]
1000ca3c:	f000 fe72 	bl	1000d724 <__malloc_unlock>
1000ca40:	2001      	movs	r0, #1
1000ca42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ca44:	2100      	movs	r1, #0
1000ca46:	4630      	mov	r0, r6
1000ca48:	f001 fce0 	bl	1000e40c <_sbrk_r>
1000ca4c:	68ba      	ldr	r2, [r7, #8]
1000ca4e:	1a83      	subs	r3, r0, r2
1000ca50:	2b0f      	cmp	r3, #15
1000ca52:	ddde      	ble.n	1000ca12 <_malloc_trim_r+0x3e>
1000ca54:	4c06      	ldr	r4, [pc, #24]	; (1000ca70 <_malloc_trim_r+0x9c>)
1000ca56:	4905      	ldr	r1, [pc, #20]	; (1000ca6c <_malloc_trim_r+0x98>)
1000ca58:	6824      	ldr	r4, [r4, #0]
1000ca5a:	f043 0301 	orr.w	r3, r3, #1
1000ca5e:	1b00      	subs	r0, r0, r4
1000ca60:	6053      	str	r3, [r2, #4]
1000ca62:	6008      	str	r0, [r1, #0]
1000ca64:	e7d5      	b.n	1000ca12 <_malloc_trim_r+0x3e>
1000ca66:	bf00      	nop
1000ca68:	200004d0 	.word	0x200004d0
1000ca6c:	20011134 	.word	0x20011134
1000ca70:	200008d8 	.word	0x200008d8

1000ca74 <_free_r>:
1000ca74:	2900      	cmp	r1, #0
1000ca76:	d05e      	beq.n	1000cb36 <_free_r+0xc2>
1000ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ca7a:	460f      	mov	r7, r1
1000ca7c:	4606      	mov	r6, r0
1000ca7e:	f000 fe4f 	bl	1000d720 <__malloc_lock>
1000ca82:	f857 cc04 	ldr.w	ip, [r7, #-4]
1000ca86:	4d75      	ldr	r5, [pc, #468]	; (1000cc5c <_free_r+0x1e8>)
1000ca88:	f02c 0301 	bic.w	r3, ip, #1
1000ca8c:	f1a7 0008 	sub.w	r0, r7, #8
1000ca90:	18c2      	adds	r2, r0, r3
1000ca92:	68a9      	ldr	r1, [r5, #8]
1000ca94:	6854      	ldr	r4, [r2, #4]
1000ca96:	4291      	cmp	r1, r2
1000ca98:	f024 0403 	bic.w	r4, r4, #3
1000ca9c:	f000 8084 	beq.w	1000cba8 <_free_r+0x134>
1000caa0:	f01c 0f01 	tst.w	ip, #1
1000caa4:	6054      	str	r4, [r2, #4]
1000caa6:	eb02 0104 	add.w	r1, r2, r4
1000caaa:	d133      	bne.n	1000cb14 <_free_r+0xa0>
1000caac:	f857 ec08 	ldr.w	lr, [r7, #-8]
1000cab0:	6849      	ldr	r1, [r1, #4]
1000cab2:	eba0 000e 	sub.w	r0, r0, lr
1000cab6:	f105 0c08 	add.w	ip, r5, #8
1000caba:	6887      	ldr	r7, [r0, #8]
1000cabc:	4567      	cmp	r7, ip
1000cabe:	4473      	add	r3, lr
1000cac0:	f001 0101 	and.w	r1, r1, #1
1000cac4:	d060      	beq.n	1000cb88 <_free_r+0x114>
1000cac6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1000caca:	f8c7 e00c 	str.w	lr, [r7, #12]
1000cace:	f8ce 7008 	str.w	r7, [lr, #8]
1000cad2:	2900      	cmp	r1, #0
1000cad4:	f000 808d 	beq.w	1000cbf2 <_free_r+0x17e>
1000cad8:	f043 0101 	orr.w	r1, r3, #1
1000cadc:	6041      	str	r1, [r0, #4]
1000cade:	6013      	str	r3, [r2, #0]
1000cae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1000cae4:	d230      	bcs.n	1000cb48 <_free_r+0xd4>
1000cae6:	08db      	lsrs	r3, r3, #3
1000cae8:	1c59      	adds	r1, r3, #1
1000caea:	686c      	ldr	r4, [r5, #4]
1000caec:	109a      	asrs	r2, r3, #2
1000caee:	2301      	movs	r3, #1
1000caf0:	4093      	lsls	r3, r2
1000caf2:	4323      	orrs	r3, r4
1000caf4:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
1000caf8:	f855 4031 	ldr.w	r4, [r5, r1, lsl #3]
1000cafc:	606b      	str	r3, [r5, #4]
1000cafe:	3a08      	subs	r2, #8
1000cb00:	e9c0 4202 	strd	r4, r2, [r0, #8]
1000cb04:	f845 0031 	str.w	r0, [r5, r1, lsl #3]
1000cb08:	60e0      	str	r0, [r4, #12]
1000cb0a:	4630      	mov	r0, r6
1000cb0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1000cb10:	f000 be08 	b.w	1000d724 <__malloc_unlock>
1000cb14:	6849      	ldr	r1, [r1, #4]
1000cb16:	07c9      	lsls	r1, r1, #31
1000cb18:	d40e      	bmi.n	1000cb38 <_free_r+0xc4>
1000cb1a:	4423      	add	r3, r4
1000cb1c:	f105 0c08 	add.w	ip, r5, #8
1000cb20:	6891      	ldr	r1, [r2, #8]
1000cb22:	4561      	cmp	r1, ip
1000cb24:	f043 0401 	orr.w	r4, r3, #1
1000cb28:	d06b      	beq.n	1000cc02 <_free_r+0x18e>
1000cb2a:	68d2      	ldr	r2, [r2, #12]
1000cb2c:	60ca      	str	r2, [r1, #12]
1000cb2e:	6091      	str	r1, [r2, #8]
1000cb30:	6044      	str	r4, [r0, #4]
1000cb32:	50c3      	str	r3, [r0, r3]
1000cb34:	e7d4      	b.n	1000cae0 <_free_r+0x6c>
1000cb36:	4770      	bx	lr
1000cb38:	f043 0101 	orr.w	r1, r3, #1
1000cb3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1000cb40:	f847 1c04 	str.w	r1, [r7, #-4]
1000cb44:	6013      	str	r3, [r2, #0]
1000cb46:	d3ce      	bcc.n	1000cae6 <_free_r+0x72>
1000cb48:	0a5a      	lsrs	r2, r3, #9
1000cb4a:	2a04      	cmp	r2, #4
1000cb4c:	d846      	bhi.n	1000cbdc <_free_r+0x168>
1000cb4e:	099a      	lsrs	r2, r3, #6
1000cb50:	f102 0739 	add.w	r7, r2, #57	; 0x39
1000cb54:	00ff      	lsls	r7, r7, #3
1000cb56:	f102 0138 	add.w	r1, r2, #56	; 0x38
1000cb5a:	19ec      	adds	r4, r5, r7
1000cb5c:	59ea      	ldr	r2, [r5, r7]
1000cb5e:	3c08      	subs	r4, #8
1000cb60:	4294      	cmp	r4, r2
1000cb62:	d055      	beq.n	1000cc10 <_free_r+0x19c>
1000cb64:	6851      	ldr	r1, [r2, #4]
1000cb66:	f021 0103 	bic.w	r1, r1, #3
1000cb6a:	4299      	cmp	r1, r3
1000cb6c:	d902      	bls.n	1000cb74 <_free_r+0x100>
1000cb6e:	6892      	ldr	r2, [r2, #8]
1000cb70:	4294      	cmp	r4, r2
1000cb72:	d1f7      	bne.n	1000cb64 <_free_r+0xf0>
1000cb74:	68d4      	ldr	r4, [r2, #12]
1000cb76:	e9c0 2402 	strd	r2, r4, [r0, #8]
1000cb7a:	60a0      	str	r0, [r4, #8]
1000cb7c:	60d0      	str	r0, [r2, #12]
1000cb7e:	4630      	mov	r0, r6
1000cb80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1000cb84:	f000 bdce 	b.w	1000d724 <__malloc_unlock>
1000cb88:	2900      	cmp	r1, #0
1000cb8a:	d162      	bne.n	1000cc52 <_free_r+0x1de>
1000cb8c:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
1000cb90:	4423      	add	r3, r4
1000cb92:	f043 0401 	orr.w	r4, r3, #1
1000cb96:	60d1      	str	r1, [r2, #12]
1000cb98:	608a      	str	r2, [r1, #8]
1000cb9a:	6044      	str	r4, [r0, #4]
1000cb9c:	50c3      	str	r3, [r0, r3]
1000cb9e:	4630      	mov	r0, r6
1000cba0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1000cba4:	f000 bdbe 	b.w	1000d724 <__malloc_unlock>
1000cba8:	f01c 0f01 	tst.w	ip, #1
1000cbac:	4423      	add	r3, r4
1000cbae:	d107      	bne.n	1000cbc0 <_free_r+0x14c>
1000cbb0:	f857 2c08 	ldr.w	r2, [r7, #-8]
1000cbb4:	1a80      	subs	r0, r0, r2
1000cbb6:	4413      	add	r3, r2
1000cbb8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1000cbbc:	60ca      	str	r2, [r1, #12]
1000cbbe:	6091      	str	r1, [r2, #8]
1000cbc0:	4a27      	ldr	r2, [pc, #156]	; (1000cc60 <_free_r+0x1ec>)
1000cbc2:	6812      	ldr	r2, [r2, #0]
1000cbc4:	f043 0101 	orr.w	r1, r3, #1
1000cbc8:	429a      	cmp	r2, r3
1000cbca:	6041      	str	r1, [r0, #4]
1000cbcc:	60a8      	str	r0, [r5, #8]
1000cbce:	d89c      	bhi.n	1000cb0a <_free_r+0x96>
1000cbd0:	4b24      	ldr	r3, [pc, #144]	; (1000cc64 <_free_r+0x1f0>)
1000cbd2:	4630      	mov	r0, r6
1000cbd4:	6819      	ldr	r1, [r3, #0]
1000cbd6:	f7ff fefd 	bl	1000c9d4 <_malloc_trim_r>
1000cbda:	e796      	b.n	1000cb0a <_free_r+0x96>
1000cbdc:	2a14      	cmp	r2, #20
1000cbde:	d90a      	bls.n	1000cbf6 <_free_r+0x182>
1000cbe0:	2a54      	cmp	r2, #84	; 0x54
1000cbe2:	d81d      	bhi.n	1000cc20 <_free_r+0x1ac>
1000cbe4:	0b1a      	lsrs	r2, r3, #12
1000cbe6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1000cbea:	00ff      	lsls	r7, r7, #3
1000cbec:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1000cbf0:	e7b3      	b.n	1000cb5a <_free_r+0xe6>
1000cbf2:	4423      	add	r3, r4
1000cbf4:	e794      	b.n	1000cb20 <_free_r+0xac>
1000cbf6:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1000cbfa:	00ff      	lsls	r7, r7, #3
1000cbfc:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1000cc00:	e7ab      	b.n	1000cb5a <_free_r+0xe6>
1000cc02:	e9c5 0004 	strd	r0, r0, [r5, #16]
1000cc06:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1000cc0a:	6044      	str	r4, [r0, #4]
1000cc0c:	50c3      	str	r3, [r0, r3]
1000cc0e:	e77c      	b.n	1000cb0a <_free_r+0x96>
1000cc10:	686b      	ldr	r3, [r5, #4]
1000cc12:	1089      	asrs	r1, r1, #2
1000cc14:	2701      	movs	r7, #1
1000cc16:	fa07 f101 	lsl.w	r1, r7, r1
1000cc1a:	4319      	orrs	r1, r3
1000cc1c:	6069      	str	r1, [r5, #4]
1000cc1e:	e7aa      	b.n	1000cb76 <_free_r+0x102>
1000cc20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1000cc24:	d806      	bhi.n	1000cc34 <_free_r+0x1c0>
1000cc26:	0bda      	lsrs	r2, r3, #15
1000cc28:	f102 0778 	add.w	r7, r2, #120	; 0x78
1000cc2c:	00ff      	lsls	r7, r7, #3
1000cc2e:	f102 0177 	add.w	r1, r2, #119	; 0x77
1000cc32:	e792      	b.n	1000cb5a <_free_r+0xe6>
1000cc34:	f240 5154 	movw	r1, #1364	; 0x554
1000cc38:	428a      	cmp	r2, r1
1000cc3a:	d806      	bhi.n	1000cc4a <_free_r+0x1d6>
1000cc3c:	0c9a      	lsrs	r2, r3, #18
1000cc3e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1000cc42:	00ff      	lsls	r7, r7, #3
1000cc44:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1000cc48:	e787      	b.n	1000cb5a <_free_r+0xe6>
1000cc4a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1000cc4e:	217e      	movs	r1, #126	; 0x7e
1000cc50:	e783      	b.n	1000cb5a <_free_r+0xe6>
1000cc52:	f043 0101 	orr.w	r1, r3, #1
1000cc56:	6041      	str	r1, [r0, #4]
1000cc58:	6013      	str	r3, [r2, #0]
1000cc5a:	e756      	b.n	1000cb0a <_free_r+0x96>
1000cc5c:	200004d0 	.word	0x200004d0
1000cc60:	200008dc 	.word	0x200008dc
1000cc64:	20011130 	.word	0x20011130

1000cc68 <__sfvwrite_r>:
1000cc68:	6893      	ldr	r3, [r2, #8]
1000cc6a:	2b00      	cmp	r3, #0
1000cc6c:	f000 8102 	beq.w	1000ce74 <__sfvwrite_r+0x20c>
1000cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000cc74:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1000cc78:	b29b      	uxth	r3, r3
1000cc7a:	460c      	mov	r4, r1
1000cc7c:	0719      	lsls	r1, r3, #28
1000cc7e:	b083      	sub	sp, #12
1000cc80:	4682      	mov	sl, r0
1000cc82:	4690      	mov	r8, r2
1000cc84:	d535      	bpl.n	1000ccf2 <__sfvwrite_r+0x8a>
1000cc86:	6922      	ldr	r2, [r4, #16]
1000cc88:	b39a      	cbz	r2, 1000ccf2 <__sfvwrite_r+0x8a>
1000cc8a:	f013 0202 	ands.w	r2, r3, #2
1000cc8e:	f8d8 6000 	ldr.w	r6, [r8]
1000cc92:	d03d      	beq.n	1000cd10 <__sfvwrite_r+0xa8>
1000cc94:	2700      	movs	r7, #0
1000cc96:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1000cc9a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1000cc9e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1000cf6c <__sfvwrite_r+0x304>
1000cca2:	463d      	mov	r5, r7
1000cca4:	454d      	cmp	r5, r9
1000cca6:	462b      	mov	r3, r5
1000cca8:	463a      	mov	r2, r7
1000ccaa:	bf28      	it	cs
1000ccac:	464b      	movcs	r3, r9
1000ccae:	4661      	mov	r1, ip
1000ccb0:	4650      	mov	r0, sl
1000ccb2:	b1d5      	cbz	r5, 1000ccea <__sfvwrite_r+0x82>
1000ccb4:	47d8      	blx	fp
1000ccb6:	2800      	cmp	r0, #0
1000ccb8:	f340 80d2 	ble.w	1000ce60 <__sfvwrite_r+0x1f8>
1000ccbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
1000ccc0:	1a1b      	subs	r3, r3, r0
1000ccc2:	4407      	add	r7, r0
1000ccc4:	1a2d      	subs	r5, r5, r0
1000ccc6:	f8c8 3008 	str.w	r3, [r8, #8]
1000ccca:	2b00      	cmp	r3, #0
1000cccc:	f000 80b7 	beq.w	1000ce3e <__sfvwrite_r+0x1d6>
1000ccd0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1000ccd4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1000ccd8:	454d      	cmp	r5, r9
1000ccda:	462b      	mov	r3, r5
1000ccdc:	463a      	mov	r2, r7
1000ccde:	bf28      	it	cs
1000cce0:	464b      	movcs	r3, r9
1000cce2:	4661      	mov	r1, ip
1000cce4:	4650      	mov	r0, sl
1000cce6:	2d00      	cmp	r5, #0
1000cce8:	d1e4      	bne.n	1000ccb4 <__sfvwrite_r+0x4c>
1000ccea:	e9d6 7500 	ldrd	r7, r5, [r6]
1000ccee:	3608      	adds	r6, #8
1000ccf0:	e7d8      	b.n	1000cca4 <__sfvwrite_r+0x3c>
1000ccf2:	4621      	mov	r1, r4
1000ccf4:	4650      	mov	r0, sl
1000ccf6:	f7fe fc0d 	bl	1000b514 <__swsetup_r>
1000ccfa:	2800      	cmp	r0, #0
1000ccfc:	f040 8130 	bne.w	1000cf60 <__sfvwrite_r+0x2f8>
1000cd00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000cd04:	f8d8 6000 	ldr.w	r6, [r8]
1000cd08:	b29b      	uxth	r3, r3
1000cd0a:	f013 0202 	ands.w	r2, r3, #2
1000cd0e:	d1c1      	bne.n	1000cc94 <__sfvwrite_r+0x2c>
1000cd10:	f013 0901 	ands.w	r9, r3, #1
1000cd14:	f040 80b0 	bne.w	1000ce78 <__sfvwrite_r+0x210>
1000cd18:	68a7      	ldr	r7, [r4, #8]
1000cd1a:	6820      	ldr	r0, [r4, #0]
1000cd1c:	464d      	mov	r5, r9
1000cd1e:	2d00      	cmp	r5, #0
1000cd20:	d054      	beq.n	1000cdcc <__sfvwrite_r+0x164>
1000cd22:	059a      	lsls	r2, r3, #22
1000cd24:	f140 80bc 	bpl.w	1000cea0 <__sfvwrite_r+0x238>
1000cd28:	42af      	cmp	r7, r5
1000cd2a:	46bb      	mov	fp, r7
1000cd2c:	f200 80e7 	bhi.w	1000cefe <__sfvwrite_r+0x296>
1000cd30:	f413 6f90 	tst.w	r3, #1152	; 0x480
1000cd34:	d02f      	beq.n	1000cd96 <__sfvwrite_r+0x12e>
1000cd36:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1000cd3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1000cd3e:	eba0 0b01 	sub.w	fp, r0, r1
1000cd42:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1000cd46:	1c68      	adds	r0, r5, #1
1000cd48:	107f      	asrs	r7, r7, #1
1000cd4a:	4458      	add	r0, fp
1000cd4c:	42b8      	cmp	r0, r7
1000cd4e:	463a      	mov	r2, r7
1000cd50:	bf84      	itt	hi
1000cd52:	4607      	movhi	r7, r0
1000cd54:	463a      	movhi	r2, r7
1000cd56:	055b      	lsls	r3, r3, #21
1000cd58:	f140 80e9 	bpl.w	1000cf2e <__sfvwrite_r+0x2c6>
1000cd5c:	4611      	mov	r1, r2
1000cd5e:	4650      	mov	r0, sl
1000cd60:	f000 f9d8 	bl	1000d114 <_malloc_r>
1000cd64:	2800      	cmp	r0, #0
1000cd66:	f000 80f5 	beq.w	1000cf54 <__sfvwrite_r+0x2ec>
1000cd6a:	465a      	mov	r2, fp
1000cd6c:	6921      	ldr	r1, [r4, #16]
1000cd6e:	9001      	str	r0, [sp, #4]
1000cd70:	f7fc fc4c 	bl	1000960c <memcpy>
1000cd74:	89a2      	ldrh	r2, [r4, #12]
1000cd76:	9b01      	ldr	r3, [sp, #4]
1000cd78:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1000cd7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1000cd80:	81a2      	strh	r2, [r4, #12]
1000cd82:	eba7 020b 	sub.w	r2, r7, fp
1000cd86:	eb03 000b 	add.w	r0, r3, fp
1000cd8a:	6167      	str	r7, [r4, #20]
1000cd8c:	6123      	str	r3, [r4, #16]
1000cd8e:	6020      	str	r0, [r4, #0]
1000cd90:	60a2      	str	r2, [r4, #8]
1000cd92:	462f      	mov	r7, r5
1000cd94:	46ab      	mov	fp, r5
1000cd96:	465a      	mov	r2, fp
1000cd98:	4649      	mov	r1, r9
1000cd9a:	f7fc fcd1 	bl	10009740 <memmove>
1000cd9e:	68a2      	ldr	r2, [r4, #8]
1000cda0:	6823      	ldr	r3, [r4, #0]
1000cda2:	1bd2      	subs	r2, r2, r7
1000cda4:	445b      	add	r3, fp
1000cda6:	462f      	mov	r7, r5
1000cda8:	60a2      	str	r2, [r4, #8]
1000cdaa:	6023      	str	r3, [r4, #0]
1000cdac:	2500      	movs	r5, #0
1000cdae:	f8d8 3008 	ldr.w	r3, [r8, #8]
1000cdb2:	1bdb      	subs	r3, r3, r7
1000cdb4:	44b9      	add	r9, r7
1000cdb6:	f8c8 3008 	str.w	r3, [r8, #8]
1000cdba:	2b00      	cmp	r3, #0
1000cdbc:	d03f      	beq.n	1000ce3e <__sfvwrite_r+0x1d6>
1000cdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000cdc2:	68a7      	ldr	r7, [r4, #8]
1000cdc4:	6820      	ldr	r0, [r4, #0]
1000cdc6:	b29b      	uxth	r3, r3
1000cdc8:	2d00      	cmp	r5, #0
1000cdca:	d1aa      	bne.n	1000cd22 <__sfvwrite_r+0xba>
1000cdcc:	e9d6 9500 	ldrd	r9, r5, [r6]
1000cdd0:	3608      	adds	r6, #8
1000cdd2:	e7a4      	b.n	1000cd1e <__sfvwrite_r+0xb6>
1000cdd4:	f10b 0308 	add.w	r3, fp, #8
1000cdd8:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1000cddc:	469b      	mov	fp, r3
1000cdde:	3308      	adds	r3, #8
1000cde0:	2f00      	cmp	r7, #0
1000cde2:	d0f9      	beq.n	1000cdd8 <__sfvwrite_r+0x170>
1000cde4:	463a      	mov	r2, r7
1000cde6:	210a      	movs	r1, #10
1000cde8:	4630      	mov	r0, r6
1000cdea:	f000 fc49 	bl	1000d680 <memchr>
1000cdee:	2800      	cmp	r0, #0
1000cdf0:	d053      	beq.n	1000ce9a <__sfvwrite_r+0x232>
1000cdf2:	3001      	adds	r0, #1
1000cdf4:	eba0 0906 	sub.w	r9, r0, r6
1000cdf8:	464b      	mov	r3, r9
1000cdfa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1000cdfe:	6820      	ldr	r0, [r4, #0]
1000ce00:	42bb      	cmp	r3, r7
1000ce02:	bf28      	it	cs
1000ce04:	463b      	movcs	r3, r7
1000ce06:	4288      	cmp	r0, r1
1000ce08:	d903      	bls.n	1000ce12 <__sfvwrite_r+0x1aa>
1000ce0a:	68a5      	ldr	r5, [r4, #8]
1000ce0c:	4415      	add	r5, r2
1000ce0e:	42ab      	cmp	r3, r5
1000ce10:	dc19      	bgt.n	1000ce46 <__sfvwrite_r+0x1de>
1000ce12:	429a      	cmp	r2, r3
1000ce14:	dc7d      	bgt.n	1000cf12 <__sfvwrite_r+0x2aa>
1000ce16:	4613      	mov	r3, r2
1000ce18:	6a65      	ldr	r5, [r4, #36]	; 0x24
1000ce1a:	69e1      	ldr	r1, [r4, #28]
1000ce1c:	4632      	mov	r2, r6
1000ce1e:	4650      	mov	r0, sl
1000ce20:	47a8      	blx	r5
1000ce22:	1e05      	subs	r5, r0, #0
1000ce24:	dd1c      	ble.n	1000ce60 <__sfvwrite_r+0x1f8>
1000ce26:	ebb9 0905 	subs.w	r9, r9, r5
1000ce2a:	d06b      	beq.n	1000cf04 <__sfvwrite_r+0x29c>
1000ce2c:	2001      	movs	r0, #1
1000ce2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
1000ce32:	1b5b      	subs	r3, r3, r5
1000ce34:	442e      	add	r6, r5
1000ce36:	1b7f      	subs	r7, r7, r5
1000ce38:	f8c8 3008 	str.w	r3, [r8, #8]
1000ce3c:	bb13      	cbnz	r3, 1000ce84 <__sfvwrite_r+0x21c>
1000ce3e:	2000      	movs	r0, #0
1000ce40:	b003      	add	sp, #12
1000ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ce46:	4631      	mov	r1, r6
1000ce48:	462a      	mov	r2, r5
1000ce4a:	f7fc fc79 	bl	10009740 <memmove>
1000ce4e:	6823      	ldr	r3, [r4, #0]
1000ce50:	442b      	add	r3, r5
1000ce52:	6023      	str	r3, [r4, #0]
1000ce54:	4621      	mov	r1, r4
1000ce56:	4650      	mov	r0, sl
1000ce58:	f7ff fc96 	bl	1000c788 <_fflush_r>
1000ce5c:	2800      	cmp	r0, #0
1000ce5e:	d0e2      	beq.n	1000ce26 <__sfvwrite_r+0x1be>
1000ce60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000ce64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000ce68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000ce6c:	81a3      	strh	r3, [r4, #12]
1000ce6e:	b003      	add	sp, #12
1000ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ce74:	2000      	movs	r0, #0
1000ce76:	4770      	bx	lr
1000ce78:	4633      	mov	r3, r6
1000ce7a:	4691      	mov	r9, r2
1000ce7c:	4610      	mov	r0, r2
1000ce7e:	4617      	mov	r7, r2
1000ce80:	464e      	mov	r6, r9
1000ce82:	469b      	mov	fp, r3
1000ce84:	2f00      	cmp	r7, #0
1000ce86:	d0a5      	beq.n	1000cdd4 <__sfvwrite_r+0x16c>
1000ce88:	2800      	cmp	r0, #0
1000ce8a:	d1b5      	bne.n	1000cdf8 <__sfvwrite_r+0x190>
1000ce8c:	463a      	mov	r2, r7
1000ce8e:	210a      	movs	r1, #10
1000ce90:	4630      	mov	r0, r6
1000ce92:	f000 fbf5 	bl	1000d680 <memchr>
1000ce96:	2800      	cmp	r0, #0
1000ce98:	d1ab      	bne.n	1000cdf2 <__sfvwrite_r+0x18a>
1000ce9a:	1c7b      	adds	r3, r7, #1
1000ce9c:	4699      	mov	r9, r3
1000ce9e:	e7ac      	b.n	1000cdfa <__sfvwrite_r+0x192>
1000cea0:	6923      	ldr	r3, [r4, #16]
1000cea2:	4283      	cmp	r3, r0
1000cea4:	d315      	bcc.n	1000ced2 <__sfvwrite_r+0x26a>
1000cea6:	6961      	ldr	r1, [r4, #20]
1000cea8:	42a9      	cmp	r1, r5
1000ceaa:	d812      	bhi.n	1000ced2 <__sfvwrite_r+0x26a>
1000ceac:	4b2e      	ldr	r3, [pc, #184]	; (1000cf68 <__sfvwrite_r+0x300>)
1000ceae:	6a67      	ldr	r7, [r4, #36]	; 0x24
1000ceb0:	429d      	cmp	r5, r3
1000ceb2:	bf94      	ite	ls
1000ceb4:	462b      	movls	r3, r5
1000ceb6:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1000ceba:	464a      	mov	r2, r9
1000cebc:	fb93 f3f1 	sdiv	r3, r3, r1
1000cec0:	4650      	mov	r0, sl
1000cec2:	fb01 f303 	mul.w	r3, r1, r3
1000cec6:	69e1      	ldr	r1, [r4, #28]
1000cec8:	47b8      	blx	r7
1000ceca:	1e07      	subs	r7, r0, #0
1000cecc:	ddc8      	ble.n	1000ce60 <__sfvwrite_r+0x1f8>
1000cece:	1bed      	subs	r5, r5, r7
1000ced0:	e76d      	b.n	1000cdae <__sfvwrite_r+0x146>
1000ced2:	42af      	cmp	r7, r5
1000ced4:	bf28      	it	cs
1000ced6:	462f      	movcs	r7, r5
1000ced8:	463a      	mov	r2, r7
1000ceda:	4649      	mov	r1, r9
1000cedc:	f7fc fc30 	bl	10009740 <memmove>
1000cee0:	68a3      	ldr	r3, [r4, #8]
1000cee2:	6822      	ldr	r2, [r4, #0]
1000cee4:	1bdb      	subs	r3, r3, r7
1000cee6:	443a      	add	r2, r7
1000cee8:	60a3      	str	r3, [r4, #8]
1000ceea:	6022      	str	r2, [r4, #0]
1000ceec:	2b00      	cmp	r3, #0
1000ceee:	d1ee      	bne.n	1000cece <__sfvwrite_r+0x266>
1000cef0:	4621      	mov	r1, r4
1000cef2:	4650      	mov	r0, sl
1000cef4:	f7ff fc48 	bl	1000c788 <_fflush_r>
1000cef8:	2800      	cmp	r0, #0
1000cefa:	d0e8      	beq.n	1000cece <__sfvwrite_r+0x266>
1000cefc:	e7b0      	b.n	1000ce60 <__sfvwrite_r+0x1f8>
1000cefe:	462f      	mov	r7, r5
1000cf00:	46ab      	mov	fp, r5
1000cf02:	e748      	b.n	1000cd96 <__sfvwrite_r+0x12e>
1000cf04:	4621      	mov	r1, r4
1000cf06:	4650      	mov	r0, sl
1000cf08:	f7ff fc3e 	bl	1000c788 <_fflush_r>
1000cf0c:	2800      	cmp	r0, #0
1000cf0e:	d08e      	beq.n	1000ce2e <__sfvwrite_r+0x1c6>
1000cf10:	e7a6      	b.n	1000ce60 <__sfvwrite_r+0x1f8>
1000cf12:	461a      	mov	r2, r3
1000cf14:	4631      	mov	r1, r6
1000cf16:	9301      	str	r3, [sp, #4]
1000cf18:	f7fc fc12 	bl	10009740 <memmove>
1000cf1c:	9b01      	ldr	r3, [sp, #4]
1000cf1e:	68a1      	ldr	r1, [r4, #8]
1000cf20:	6822      	ldr	r2, [r4, #0]
1000cf22:	1ac9      	subs	r1, r1, r3
1000cf24:	441a      	add	r2, r3
1000cf26:	60a1      	str	r1, [r4, #8]
1000cf28:	6022      	str	r2, [r4, #0]
1000cf2a:	461d      	mov	r5, r3
1000cf2c:	e77b      	b.n	1000ce26 <__sfvwrite_r+0x1be>
1000cf2e:	4650      	mov	r0, sl
1000cf30:	f001 f8b6 	bl	1000e0a0 <_realloc_r>
1000cf34:	4603      	mov	r3, r0
1000cf36:	2800      	cmp	r0, #0
1000cf38:	f47f af23 	bne.w	1000cd82 <__sfvwrite_r+0x11a>
1000cf3c:	6921      	ldr	r1, [r4, #16]
1000cf3e:	4650      	mov	r0, sl
1000cf40:	f7ff fd98 	bl	1000ca74 <_free_r>
1000cf44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000cf48:	220c      	movs	r2, #12
1000cf4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1000cf4e:	f8ca 2000 	str.w	r2, [sl]
1000cf52:	e787      	b.n	1000ce64 <__sfvwrite_r+0x1fc>
1000cf54:	230c      	movs	r3, #12
1000cf56:	f8ca 3000 	str.w	r3, [sl]
1000cf5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000cf5e:	e781      	b.n	1000ce64 <__sfvwrite_r+0x1fc>
1000cf60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000cf64:	e76c      	b.n	1000ce40 <__sfvwrite_r+0x1d8>
1000cf66:	bf00      	nop
1000cf68:	7ffffffe 	.word	0x7ffffffe
1000cf6c:	7ffffc00 	.word	0x7ffffc00

1000cf70 <_fwalk>:
1000cf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000cf74:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1000cf78:	d01b      	beq.n	1000cfb2 <_fwalk+0x42>
1000cf7a:	4688      	mov	r8, r1
1000cf7c:	2600      	movs	r6, #0
1000cf7e:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1000cf82:	3d01      	subs	r5, #1
1000cf84:	d40f      	bmi.n	1000cfa6 <_fwalk+0x36>
1000cf86:	89a3      	ldrh	r3, [r4, #12]
1000cf88:	2b01      	cmp	r3, #1
1000cf8a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1000cf8e:	d906      	bls.n	1000cf9e <_fwalk+0x2e>
1000cf90:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1000cf94:	3301      	adds	r3, #1
1000cf96:	4620      	mov	r0, r4
1000cf98:	d001      	beq.n	1000cf9e <_fwalk+0x2e>
1000cf9a:	47c0      	blx	r8
1000cf9c:	4306      	orrs	r6, r0
1000cf9e:	1c6b      	adds	r3, r5, #1
1000cfa0:	f104 0468 	add.w	r4, r4, #104	; 0x68
1000cfa4:	d1ef      	bne.n	1000cf86 <_fwalk+0x16>
1000cfa6:	683f      	ldr	r7, [r7, #0]
1000cfa8:	2f00      	cmp	r7, #0
1000cfaa:	d1e8      	bne.n	1000cf7e <_fwalk+0xe>
1000cfac:	4630      	mov	r0, r6
1000cfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000cfb2:	463e      	mov	r6, r7
1000cfb4:	4630      	mov	r0, r6
1000cfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000cfba:	bf00      	nop

1000cfbc <_fwalk_reent>:
1000cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000cfc0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1000cfc4:	d01f      	beq.n	1000d006 <_fwalk_reent+0x4a>
1000cfc6:	4688      	mov	r8, r1
1000cfc8:	4606      	mov	r6, r0
1000cfca:	f04f 0900 	mov.w	r9, #0
1000cfce:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1000cfd2:	3d01      	subs	r5, #1
1000cfd4:	d411      	bmi.n	1000cffa <_fwalk_reent+0x3e>
1000cfd6:	89a3      	ldrh	r3, [r4, #12]
1000cfd8:	2b01      	cmp	r3, #1
1000cfda:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1000cfde:	d908      	bls.n	1000cff2 <_fwalk_reent+0x36>
1000cfe0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1000cfe4:	3301      	adds	r3, #1
1000cfe6:	4621      	mov	r1, r4
1000cfe8:	4630      	mov	r0, r6
1000cfea:	d002      	beq.n	1000cff2 <_fwalk_reent+0x36>
1000cfec:	47c0      	blx	r8
1000cfee:	ea49 0900 	orr.w	r9, r9, r0
1000cff2:	1c6b      	adds	r3, r5, #1
1000cff4:	f104 0468 	add.w	r4, r4, #104	; 0x68
1000cff8:	d1ed      	bne.n	1000cfd6 <_fwalk_reent+0x1a>
1000cffa:	683f      	ldr	r7, [r7, #0]
1000cffc:	2f00      	cmp	r7, #0
1000cffe:	d1e6      	bne.n	1000cfce <_fwalk_reent+0x12>
1000d000:	4648      	mov	r0, r9
1000d002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d006:	46b9      	mov	r9, r7
1000d008:	4648      	mov	r0, r9
1000d00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d00e:	bf00      	nop

1000d010 <__localeconv_l>:
1000d010:	30f0      	adds	r0, #240	; 0xf0
1000d012:	4770      	bx	lr

1000d014 <_localeconv_r>:
1000d014:	4800      	ldr	r0, [pc, #0]	; (1000d018 <_localeconv_r+0x4>)
1000d016:	4770      	bx	lr
1000d018:	200009d0 	.word	0x200009d0

1000d01c <localeconv>:
1000d01c:	4800      	ldr	r0, [pc, #0]	; (1000d020 <localeconv+0x4>)
1000d01e:	4770      	bx	lr
1000d020:	200009d0 	.word	0x200009d0

1000d024 <__swhatbuf_r>:
1000d024:	b570      	push	{r4, r5, r6, lr}
1000d026:	460c      	mov	r4, r1
1000d028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000d02c:	2900      	cmp	r1, #0
1000d02e:	b096      	sub	sp, #88	; 0x58
1000d030:	4615      	mov	r5, r2
1000d032:	461e      	mov	r6, r3
1000d034:	db14      	blt.n	1000d060 <__swhatbuf_r+0x3c>
1000d036:	466a      	mov	r2, sp
1000d038:	f002 fa34 	bl	1000f4a4 <_fstat_r>
1000d03c:	2800      	cmp	r0, #0
1000d03e:	db0f      	blt.n	1000d060 <__swhatbuf_r+0x3c>
1000d040:	9a01      	ldr	r2, [sp, #4]
1000d042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1000d046:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1000d04a:	fab2 f282 	clz	r2, r2
1000d04e:	0952      	lsrs	r2, r2, #5
1000d050:	f44f 6380 	mov.w	r3, #1024	; 0x400
1000d054:	f44f 6000 	mov.w	r0, #2048	; 0x800
1000d058:	6032      	str	r2, [r6, #0]
1000d05a:	602b      	str	r3, [r5, #0]
1000d05c:	b016      	add	sp, #88	; 0x58
1000d05e:	bd70      	pop	{r4, r5, r6, pc}
1000d060:	89a2      	ldrh	r2, [r4, #12]
1000d062:	2300      	movs	r3, #0
1000d064:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1000d068:	6033      	str	r3, [r6, #0]
1000d06a:	d004      	beq.n	1000d076 <__swhatbuf_r+0x52>
1000d06c:	2240      	movs	r2, #64	; 0x40
1000d06e:	4618      	mov	r0, r3
1000d070:	602a      	str	r2, [r5, #0]
1000d072:	b016      	add	sp, #88	; 0x58
1000d074:	bd70      	pop	{r4, r5, r6, pc}
1000d076:	f44f 6380 	mov.w	r3, #1024	; 0x400
1000d07a:	602b      	str	r3, [r5, #0]
1000d07c:	b016      	add	sp, #88	; 0x58
1000d07e:	bd70      	pop	{r4, r5, r6, pc}

1000d080 <__smakebuf_r>:
1000d080:	898a      	ldrh	r2, [r1, #12]
1000d082:	0792      	lsls	r2, r2, #30
1000d084:	460b      	mov	r3, r1
1000d086:	d506      	bpl.n	1000d096 <__smakebuf_r+0x16>
1000d088:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000d08c:	2101      	movs	r1, #1
1000d08e:	601a      	str	r2, [r3, #0]
1000d090:	e9c3 2104 	strd	r2, r1, [r3, #16]
1000d094:	4770      	bx	lr
1000d096:	b570      	push	{r4, r5, r6, lr}
1000d098:	b082      	sub	sp, #8
1000d09a:	ab01      	add	r3, sp, #4
1000d09c:	466a      	mov	r2, sp
1000d09e:	460c      	mov	r4, r1
1000d0a0:	4606      	mov	r6, r0
1000d0a2:	f7ff ffbf 	bl	1000d024 <__swhatbuf_r>
1000d0a6:	9900      	ldr	r1, [sp, #0]
1000d0a8:	4605      	mov	r5, r0
1000d0aa:	4630      	mov	r0, r6
1000d0ac:	f000 f832 	bl	1000d114 <_malloc_r>
1000d0b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000d0b4:	b170      	cbz	r0, 1000d0d4 <__smakebuf_r+0x54>
1000d0b6:	4916      	ldr	r1, [pc, #88]	; (1000d110 <__smakebuf_r+0x90>)
1000d0b8:	63f1      	str	r1, [r6, #60]	; 0x3c
1000d0ba:	9a01      	ldr	r2, [sp, #4]
1000d0bc:	9900      	ldr	r1, [sp, #0]
1000d0be:	6020      	str	r0, [r4, #0]
1000d0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000d0c4:	81a3      	strh	r3, [r4, #12]
1000d0c6:	e9c4 0104 	strd	r0, r1, [r4, #16]
1000d0ca:	b98a      	cbnz	r2, 1000d0f0 <__smakebuf_r+0x70>
1000d0cc:	432b      	orrs	r3, r5
1000d0ce:	81a3      	strh	r3, [r4, #12]
1000d0d0:	b002      	add	sp, #8
1000d0d2:	bd70      	pop	{r4, r5, r6, pc}
1000d0d4:	059a      	lsls	r2, r3, #22
1000d0d6:	d4fb      	bmi.n	1000d0d0 <__smakebuf_r+0x50>
1000d0d8:	f023 0303 	bic.w	r3, r3, #3
1000d0dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
1000d0e0:	f043 0302 	orr.w	r3, r3, #2
1000d0e4:	2101      	movs	r1, #1
1000d0e6:	81a3      	strh	r3, [r4, #12]
1000d0e8:	6022      	str	r2, [r4, #0]
1000d0ea:	e9c4 2104 	strd	r2, r1, [r4, #16]
1000d0ee:	e7ef      	b.n	1000d0d0 <__smakebuf_r+0x50>
1000d0f0:	4630      	mov	r0, r6
1000d0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000d0f6:	f002 f9e9 	bl	1000f4cc <_isatty_r>
1000d0fa:	b910      	cbnz	r0, 1000d102 <__smakebuf_r+0x82>
1000d0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000d100:	e7e4      	b.n	1000d0cc <__smakebuf_r+0x4c>
1000d102:	89a3      	ldrh	r3, [r4, #12]
1000d104:	f023 0303 	bic.w	r3, r3, #3
1000d108:	f043 0301 	orr.w	r3, r3, #1
1000d10c:	b21b      	sxth	r3, r3
1000d10e:	e7dd      	b.n	1000d0cc <__smakebuf_r+0x4c>
1000d110:	1000c7e5 	.word	0x1000c7e5

1000d114 <_malloc_r>:
1000d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d118:	f101 050b 	add.w	r5, r1, #11
1000d11c:	2d16      	cmp	r5, #22
1000d11e:	b083      	sub	sp, #12
1000d120:	4606      	mov	r6, r0
1000d122:	d823      	bhi.n	1000d16c <_malloc_r+0x58>
1000d124:	2910      	cmp	r1, #16
1000d126:	f200 80b9 	bhi.w	1000d29c <_malloc_r+0x188>
1000d12a:	f000 faf9 	bl	1000d720 <__malloc_lock>
1000d12e:	2510      	movs	r5, #16
1000d130:	2318      	movs	r3, #24
1000d132:	2002      	movs	r0, #2
1000d134:	4fcd      	ldr	r7, [pc, #820]	; (1000d46c <_malloc_r+0x358>)
1000d136:	443b      	add	r3, r7
1000d138:	f1a3 0208 	sub.w	r2, r3, #8
1000d13c:	685c      	ldr	r4, [r3, #4]
1000d13e:	4294      	cmp	r4, r2
1000d140:	f000 80b9 	beq.w	1000d2b6 <_malloc_r+0x1a2>
1000d144:	6863      	ldr	r3, [r4, #4]
1000d146:	f023 0303 	bic.w	r3, r3, #3
1000d14a:	4423      	add	r3, r4
1000d14c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1000d150:	685a      	ldr	r2, [r3, #4]
1000d152:	60e9      	str	r1, [r5, #12]
1000d154:	f042 0201 	orr.w	r2, r2, #1
1000d158:	4630      	mov	r0, r6
1000d15a:	608d      	str	r5, [r1, #8]
1000d15c:	605a      	str	r2, [r3, #4]
1000d15e:	f000 fae1 	bl	1000d724 <__malloc_unlock>
1000d162:	3408      	adds	r4, #8
1000d164:	4620      	mov	r0, r4
1000d166:	b003      	add	sp, #12
1000d168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d16c:	f035 0507 	bics.w	r5, r5, #7
1000d170:	f100 8094 	bmi.w	1000d29c <_malloc_r+0x188>
1000d174:	42a9      	cmp	r1, r5
1000d176:	f200 8091 	bhi.w	1000d29c <_malloc_r+0x188>
1000d17a:	f000 fad1 	bl	1000d720 <__malloc_lock>
1000d17e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1000d182:	f0c0 819d 	bcc.w	1000d4c0 <_malloc_r+0x3ac>
1000d186:	0a6b      	lsrs	r3, r5, #9
1000d188:	f000 808f 	beq.w	1000d2aa <_malloc_r+0x196>
1000d18c:	2b04      	cmp	r3, #4
1000d18e:	f200 8173 	bhi.w	1000d478 <_malloc_r+0x364>
1000d192:	09ab      	lsrs	r3, r5, #6
1000d194:	f103 0039 	add.w	r0, r3, #57	; 0x39
1000d198:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1000d19c:	00c3      	lsls	r3, r0, #3
1000d19e:	4fb3      	ldr	r7, [pc, #716]	; (1000d46c <_malloc_r+0x358>)
1000d1a0:	443b      	add	r3, r7
1000d1a2:	f1a3 0108 	sub.w	r1, r3, #8
1000d1a6:	685c      	ldr	r4, [r3, #4]
1000d1a8:	42a1      	cmp	r1, r4
1000d1aa:	d106      	bne.n	1000d1ba <_malloc_r+0xa6>
1000d1ac:	e00c      	b.n	1000d1c8 <_malloc_r+0xb4>
1000d1ae:	2a00      	cmp	r2, #0
1000d1b0:	f280 812b 	bge.w	1000d40a <_malloc_r+0x2f6>
1000d1b4:	68e4      	ldr	r4, [r4, #12]
1000d1b6:	42a1      	cmp	r1, r4
1000d1b8:	d006      	beq.n	1000d1c8 <_malloc_r+0xb4>
1000d1ba:	6863      	ldr	r3, [r4, #4]
1000d1bc:	f023 0303 	bic.w	r3, r3, #3
1000d1c0:	1b5a      	subs	r2, r3, r5
1000d1c2:	2a0f      	cmp	r2, #15
1000d1c4:	ddf3      	ble.n	1000d1ae <_malloc_r+0x9a>
1000d1c6:	4660      	mov	r0, ip
1000d1c8:	693c      	ldr	r4, [r7, #16]
1000d1ca:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 1000d470 <_malloc_r+0x35c>
1000d1ce:	4564      	cmp	r4, ip
1000d1d0:	d07c      	beq.n	1000d2cc <_malloc_r+0x1b8>
1000d1d2:	6863      	ldr	r3, [r4, #4]
1000d1d4:	f023 0303 	bic.w	r3, r3, #3
1000d1d8:	1b5a      	subs	r2, r3, r5
1000d1da:	2a0f      	cmp	r2, #15
1000d1dc:	f300 817e 	bgt.w	1000d4dc <_malloc_r+0x3c8>
1000d1e0:	2a00      	cmp	r2, #0
1000d1e2:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1000d1e6:	f280 816f 	bge.w	1000d4c8 <_malloc_r+0x3b4>
1000d1ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1000d1ee:	f080 811a 	bcs.w	1000d426 <_malloc_r+0x312>
1000d1f2:	08db      	lsrs	r3, r3, #3
1000d1f4:	1c59      	adds	r1, r3, #1
1000d1f6:	687a      	ldr	r2, [r7, #4]
1000d1f8:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1000d1fc:	f8c4 8008 	str.w	r8, [r4, #8]
1000d200:	f04f 0e01 	mov.w	lr, #1
1000d204:	109b      	asrs	r3, r3, #2
1000d206:	fa0e f303 	lsl.w	r3, lr, r3
1000d20a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1000d20e:	4313      	orrs	r3, r2
1000d210:	f1ae 0208 	sub.w	r2, lr, #8
1000d214:	60e2      	str	r2, [r4, #12]
1000d216:	607b      	str	r3, [r7, #4]
1000d218:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1000d21c:	f8c8 400c 	str.w	r4, [r8, #12]
1000d220:	1082      	asrs	r2, r0, #2
1000d222:	2401      	movs	r4, #1
1000d224:	4094      	lsls	r4, r2
1000d226:	429c      	cmp	r4, r3
1000d228:	d856      	bhi.n	1000d2d8 <_malloc_r+0x1c4>
1000d22a:	421c      	tst	r4, r3
1000d22c:	d106      	bne.n	1000d23c <_malloc_r+0x128>
1000d22e:	f020 0003 	bic.w	r0, r0, #3
1000d232:	0064      	lsls	r4, r4, #1
1000d234:	421c      	tst	r4, r3
1000d236:	f100 0004 	add.w	r0, r0, #4
1000d23a:	d0fa      	beq.n	1000d232 <_malloc_r+0x11e>
1000d23c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1000d240:	46ce      	mov	lr, r9
1000d242:	4680      	mov	r8, r0
1000d244:	f8de 300c 	ldr.w	r3, [lr, #12]
1000d248:	459e      	cmp	lr, r3
1000d24a:	d107      	bne.n	1000d25c <_malloc_r+0x148>
1000d24c:	e120      	b.n	1000d490 <_malloc_r+0x37c>
1000d24e:	2a00      	cmp	r2, #0
1000d250:	f280 8127 	bge.w	1000d4a2 <_malloc_r+0x38e>
1000d254:	68db      	ldr	r3, [r3, #12]
1000d256:	459e      	cmp	lr, r3
1000d258:	f000 811a 	beq.w	1000d490 <_malloc_r+0x37c>
1000d25c:	6859      	ldr	r1, [r3, #4]
1000d25e:	f021 0103 	bic.w	r1, r1, #3
1000d262:	1b4a      	subs	r2, r1, r5
1000d264:	2a0f      	cmp	r2, #15
1000d266:	ddf2      	ble.n	1000d24e <_malloc_r+0x13a>
1000d268:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1000d26c:	195c      	adds	r4, r3, r5
1000d26e:	f045 0501 	orr.w	r5, r5, #1
1000d272:	605d      	str	r5, [r3, #4]
1000d274:	f042 0501 	orr.w	r5, r2, #1
1000d278:	f8c8 e00c 	str.w	lr, [r8, #12]
1000d27c:	4630      	mov	r0, r6
1000d27e:	f8ce 8008 	str.w	r8, [lr, #8]
1000d282:	e9c7 4404 	strd	r4, r4, [r7, #16]
1000d286:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1000d28a:	6065      	str	r5, [r4, #4]
1000d28c:	505a      	str	r2, [r3, r1]
1000d28e:	9300      	str	r3, [sp, #0]
1000d290:	f000 fa48 	bl	1000d724 <__malloc_unlock>
1000d294:	9b00      	ldr	r3, [sp, #0]
1000d296:	f103 0408 	add.w	r4, r3, #8
1000d29a:	e002      	b.n	1000d2a2 <_malloc_r+0x18e>
1000d29c:	230c      	movs	r3, #12
1000d29e:	6033      	str	r3, [r6, #0]
1000d2a0:	2400      	movs	r4, #0
1000d2a2:	4620      	mov	r0, r4
1000d2a4:	b003      	add	sp, #12
1000d2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d2aa:	f44f 7300 	mov.w	r3, #512	; 0x200
1000d2ae:	2040      	movs	r0, #64	; 0x40
1000d2b0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1000d2b4:	e773      	b.n	1000d19e <_malloc_r+0x8a>
1000d2b6:	68dc      	ldr	r4, [r3, #12]
1000d2b8:	42a3      	cmp	r3, r4
1000d2ba:	bf08      	it	eq
1000d2bc:	3002      	addeq	r0, #2
1000d2be:	f47f af41 	bne.w	1000d144 <_malloc_r+0x30>
1000d2c2:	693c      	ldr	r4, [r7, #16]
1000d2c4:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 1000d470 <_malloc_r+0x35c>
1000d2c8:	4564      	cmp	r4, ip
1000d2ca:	d182      	bne.n	1000d1d2 <_malloc_r+0xbe>
1000d2cc:	687b      	ldr	r3, [r7, #4]
1000d2ce:	1082      	asrs	r2, r0, #2
1000d2d0:	2401      	movs	r4, #1
1000d2d2:	4094      	lsls	r4, r2
1000d2d4:	429c      	cmp	r4, r3
1000d2d6:	d9a8      	bls.n	1000d22a <_malloc_r+0x116>
1000d2d8:	68bc      	ldr	r4, [r7, #8]
1000d2da:	6863      	ldr	r3, [r4, #4]
1000d2dc:	f023 0803 	bic.w	r8, r3, #3
1000d2e0:	45a8      	cmp	r8, r5
1000d2e2:	d303      	bcc.n	1000d2ec <_malloc_r+0x1d8>
1000d2e4:	eba8 0305 	sub.w	r3, r8, r5
1000d2e8:	2b0f      	cmp	r3, #15
1000d2ea:	dc7e      	bgt.n	1000d3ea <_malloc_r+0x2d6>
1000d2ec:	f8df 9184 	ldr.w	r9, [pc, #388]	; 1000d474 <_malloc_r+0x360>
1000d2f0:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
1000d2f4:	f8d9 3000 	ldr.w	r3, [r9]
1000d2f8:	3201      	adds	r2, #1
1000d2fa:	eb04 0a08 	add.w	sl, r4, r8
1000d2fe:	442b      	add	r3, r5
1000d300:	f000 8137 	beq.w	1000d572 <_malloc_r+0x45e>
1000d304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000d308:	330f      	adds	r3, #15
1000d30a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1000d30e:	f02b 0b0f 	bic.w	fp, fp, #15
1000d312:	4659      	mov	r1, fp
1000d314:	4630      	mov	r0, r6
1000d316:	f001 f879 	bl	1000e40c <_sbrk_r>
1000d31a:	1c41      	adds	r1, r0, #1
1000d31c:	4602      	mov	r2, r0
1000d31e:	f000 80f7 	beq.w	1000d510 <_malloc_r+0x3fc>
1000d322:	4582      	cmp	sl, r0
1000d324:	f200 80f2 	bhi.w	1000d50c <_malloc_r+0x3f8>
1000d328:	f8d9 1004 	ldr.w	r1, [r9, #4]
1000d32c:	4459      	add	r1, fp
1000d32e:	f8c9 1004 	str.w	r1, [r9, #4]
1000d332:	460b      	mov	r3, r1
1000d334:	f000 8153 	beq.w	1000d5de <_malloc_r+0x4ca>
1000d338:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
1000d33c:	3101      	adds	r1, #1
1000d33e:	bf1b      	ittet	ne
1000d340:	eba2 0a0a 	subne.w	sl, r2, sl
1000d344:	4453      	addne	r3, sl
1000d346:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
1000d34a:	f8c9 3004 	strne.w	r3, [r9, #4]
1000d34e:	f012 0307 	ands.w	r3, r2, #7
1000d352:	f000 811a 	beq.w	1000d58a <_malloc_r+0x476>
1000d356:	f1c3 0108 	rsb	r1, r3, #8
1000d35a:	440a      	add	r2, r1
1000d35c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
1000d360:	4493      	add	fp, r2
1000d362:	3108      	adds	r1, #8
1000d364:	eba1 010b 	sub.w	r1, r1, fp
1000d368:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
1000d36c:	4651      	mov	r1, sl
1000d36e:	4630      	mov	r0, r6
1000d370:	9301      	str	r3, [sp, #4]
1000d372:	9200      	str	r2, [sp, #0]
1000d374:	f001 f84a 	bl	1000e40c <_sbrk_r>
1000d378:	1c42      	adds	r2, r0, #1
1000d37a:	e9dd 2300 	ldrd	r2, r3, [sp]
1000d37e:	f000 8153 	beq.w	1000d628 <_malloc_r+0x514>
1000d382:	1a83      	subs	r3, r0, r2
1000d384:	eb03 0b0a 	add.w	fp, r3, sl
1000d388:	f8d9 1004 	ldr.w	r1, [r9, #4]
1000d38c:	60ba      	str	r2, [r7, #8]
1000d38e:	f04b 0301 	orr.w	r3, fp, #1
1000d392:	4451      	add	r1, sl
1000d394:	42bc      	cmp	r4, r7
1000d396:	6053      	str	r3, [r2, #4]
1000d398:	f8c9 1004 	str.w	r1, [r9, #4]
1000d39c:	f000 812b 	beq.w	1000d5f6 <_malloc_r+0x4e2>
1000d3a0:	f1b8 0f0f 	cmp.w	r8, #15
1000d3a4:	f240 8129 	bls.w	1000d5fa <_malloc_r+0x4e6>
1000d3a8:	6863      	ldr	r3, [r4, #4]
1000d3aa:	f1a8 000c 	sub.w	r0, r8, #12
1000d3ae:	f020 0007 	bic.w	r0, r0, #7
1000d3b2:	f003 0301 	and.w	r3, r3, #1
1000d3b6:	eb04 0c00 	add.w	ip, r4, r0
1000d3ba:	4303      	orrs	r3, r0
1000d3bc:	f04f 0e05 	mov.w	lr, #5
1000d3c0:	280f      	cmp	r0, #15
1000d3c2:	6063      	str	r3, [r4, #4]
1000d3c4:	e9cc ee01 	strd	lr, lr, [ip, #4]
1000d3c8:	f200 8135 	bhi.w	1000d636 <_malloc_r+0x522>
1000d3cc:	6853      	ldr	r3, [r2, #4]
1000d3ce:	4614      	mov	r4, r2
1000d3d0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
1000d3d4:	428a      	cmp	r2, r1
1000d3d6:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
1000d3da:	bf38      	it	cc
1000d3dc:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
1000d3e0:	428a      	cmp	r2, r1
1000d3e2:	bf38      	it	cc
1000d3e4:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
1000d3e8:	e094      	b.n	1000d514 <_malloc_r+0x400>
1000d3ea:	1962      	adds	r2, r4, r5
1000d3ec:	f043 0301 	orr.w	r3, r3, #1
1000d3f0:	f045 0501 	orr.w	r5, r5, #1
1000d3f4:	6065      	str	r5, [r4, #4]
1000d3f6:	4630      	mov	r0, r6
1000d3f8:	60ba      	str	r2, [r7, #8]
1000d3fa:	6053      	str	r3, [r2, #4]
1000d3fc:	f000 f992 	bl	1000d724 <__malloc_unlock>
1000d400:	3408      	adds	r4, #8
1000d402:	4620      	mov	r0, r4
1000d404:	b003      	add	sp, #12
1000d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d40a:	4423      	add	r3, r4
1000d40c:	68e1      	ldr	r1, [r4, #12]
1000d40e:	685a      	ldr	r2, [r3, #4]
1000d410:	68a5      	ldr	r5, [r4, #8]
1000d412:	f042 0201 	orr.w	r2, r2, #1
1000d416:	60e9      	str	r1, [r5, #12]
1000d418:	4630      	mov	r0, r6
1000d41a:	608d      	str	r5, [r1, #8]
1000d41c:	605a      	str	r2, [r3, #4]
1000d41e:	f000 f981 	bl	1000d724 <__malloc_unlock>
1000d422:	3408      	adds	r4, #8
1000d424:	e73d      	b.n	1000d2a2 <_malloc_r+0x18e>
1000d426:	0a5a      	lsrs	r2, r3, #9
1000d428:	2a04      	cmp	r2, #4
1000d42a:	d969      	bls.n	1000d500 <_malloc_r+0x3ec>
1000d42c:	2a14      	cmp	r2, #20
1000d42e:	f200 80be 	bhi.w	1000d5ae <_malloc_r+0x49a>
1000d432:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1000d436:	00c9      	lsls	r1, r1, #3
1000d438:	325b      	adds	r2, #91	; 0x5b
1000d43a:	eb07 0e01 	add.w	lr, r7, r1
1000d43e:	5879      	ldr	r1, [r7, r1]
1000d440:	f1ae 0e08 	sub.w	lr, lr, #8
1000d444:	458e      	cmp	lr, r1
1000d446:	f000 8097 	beq.w	1000d578 <_malloc_r+0x464>
1000d44a:	684a      	ldr	r2, [r1, #4]
1000d44c:	f022 0203 	bic.w	r2, r2, #3
1000d450:	429a      	cmp	r2, r3
1000d452:	d902      	bls.n	1000d45a <_malloc_r+0x346>
1000d454:	6889      	ldr	r1, [r1, #8]
1000d456:	458e      	cmp	lr, r1
1000d458:	d1f7      	bne.n	1000d44a <_malloc_r+0x336>
1000d45a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1000d45e:	687b      	ldr	r3, [r7, #4]
1000d460:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1000d464:	f8ce 4008 	str.w	r4, [lr, #8]
1000d468:	60cc      	str	r4, [r1, #12]
1000d46a:	e6d9      	b.n	1000d220 <_malloc_r+0x10c>
1000d46c:	200004d0 	.word	0x200004d0
1000d470:	200004d8 	.word	0x200004d8
1000d474:	20011130 	.word	0x20011130
1000d478:	2b14      	cmp	r3, #20
1000d47a:	d959      	bls.n	1000d530 <_malloc_r+0x41c>
1000d47c:	2b54      	cmp	r3, #84	; 0x54
1000d47e:	f200 809e 	bhi.w	1000d5be <_malloc_r+0x4aa>
1000d482:	0b2b      	lsrs	r3, r5, #12
1000d484:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1000d488:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1000d48c:	00c3      	lsls	r3, r0, #3
1000d48e:	e686      	b.n	1000d19e <_malloc_r+0x8a>
1000d490:	f108 0801 	add.w	r8, r8, #1
1000d494:	f018 0f03 	tst.w	r8, #3
1000d498:	f10e 0e08 	add.w	lr, lr, #8
1000d49c:	f47f aed2 	bne.w	1000d244 <_malloc_r+0x130>
1000d4a0:	e051      	b.n	1000d546 <_malloc_r+0x432>
1000d4a2:	4419      	add	r1, r3
1000d4a4:	461c      	mov	r4, r3
1000d4a6:	684a      	ldr	r2, [r1, #4]
1000d4a8:	68db      	ldr	r3, [r3, #12]
1000d4aa:	f854 5f08 	ldr.w	r5, [r4, #8]!
1000d4ae:	f042 0201 	orr.w	r2, r2, #1
1000d4b2:	604a      	str	r2, [r1, #4]
1000d4b4:	4630      	mov	r0, r6
1000d4b6:	60eb      	str	r3, [r5, #12]
1000d4b8:	609d      	str	r5, [r3, #8]
1000d4ba:	f000 f933 	bl	1000d724 <__malloc_unlock>
1000d4be:	e6f0      	b.n	1000d2a2 <_malloc_r+0x18e>
1000d4c0:	08e8      	lsrs	r0, r5, #3
1000d4c2:	f105 0308 	add.w	r3, r5, #8
1000d4c6:	e635      	b.n	1000d134 <_malloc_r+0x20>
1000d4c8:	4423      	add	r3, r4
1000d4ca:	4630      	mov	r0, r6
1000d4cc:	685a      	ldr	r2, [r3, #4]
1000d4ce:	f042 0201 	orr.w	r2, r2, #1
1000d4d2:	605a      	str	r2, [r3, #4]
1000d4d4:	3408      	adds	r4, #8
1000d4d6:	f000 f925 	bl	1000d724 <__malloc_unlock>
1000d4da:	e6e2      	b.n	1000d2a2 <_malloc_r+0x18e>
1000d4dc:	1961      	adds	r1, r4, r5
1000d4de:	f045 0e01 	orr.w	lr, r5, #1
1000d4e2:	f042 0501 	orr.w	r5, r2, #1
1000d4e6:	f8c4 e004 	str.w	lr, [r4, #4]
1000d4ea:	4630      	mov	r0, r6
1000d4ec:	e9c7 1104 	strd	r1, r1, [r7, #16]
1000d4f0:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1000d4f4:	604d      	str	r5, [r1, #4]
1000d4f6:	50e2      	str	r2, [r4, r3]
1000d4f8:	f000 f914 	bl	1000d724 <__malloc_unlock>
1000d4fc:	3408      	adds	r4, #8
1000d4fe:	e6d0      	b.n	1000d2a2 <_malloc_r+0x18e>
1000d500:	099a      	lsrs	r2, r3, #6
1000d502:	f102 0139 	add.w	r1, r2, #57	; 0x39
1000d506:	00c9      	lsls	r1, r1, #3
1000d508:	3238      	adds	r2, #56	; 0x38
1000d50a:	e796      	b.n	1000d43a <_malloc_r+0x326>
1000d50c:	42bc      	cmp	r4, r7
1000d50e:	d060      	beq.n	1000d5d2 <_malloc_r+0x4be>
1000d510:	68bc      	ldr	r4, [r7, #8]
1000d512:	6863      	ldr	r3, [r4, #4]
1000d514:	f023 0b03 	bic.w	fp, r3, #3
1000d518:	45ab      	cmp	fp, r5
1000d51a:	ebab 0305 	sub.w	r3, fp, r5
1000d51e:	d302      	bcc.n	1000d526 <_malloc_r+0x412>
1000d520:	2b0f      	cmp	r3, #15
1000d522:	f73f af62 	bgt.w	1000d3ea <_malloc_r+0x2d6>
1000d526:	4630      	mov	r0, r6
1000d528:	f000 f8fc 	bl	1000d724 <__malloc_unlock>
1000d52c:	2400      	movs	r4, #0
1000d52e:	e6b8      	b.n	1000d2a2 <_malloc_r+0x18e>
1000d530:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1000d534:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1000d538:	00c3      	lsls	r3, r0, #3
1000d53a:	e630      	b.n	1000d19e <_malloc_r+0x8a>
1000d53c:	f859 3908 	ldr.w	r3, [r9], #-8
1000d540:	454b      	cmp	r3, r9
1000d542:	f040 8096 	bne.w	1000d672 <_malloc_r+0x55e>
1000d546:	f010 0f03 	tst.w	r0, #3
1000d54a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1000d54e:	d1f5      	bne.n	1000d53c <_malloc_r+0x428>
1000d550:	687b      	ldr	r3, [r7, #4]
1000d552:	ea23 0304 	bic.w	r3, r3, r4
1000d556:	607b      	str	r3, [r7, #4]
1000d558:	0064      	lsls	r4, r4, #1
1000d55a:	429c      	cmp	r4, r3
1000d55c:	f63f aebc 	bhi.w	1000d2d8 <_malloc_r+0x1c4>
1000d560:	b91c      	cbnz	r4, 1000d56a <_malloc_r+0x456>
1000d562:	e6b9      	b.n	1000d2d8 <_malloc_r+0x1c4>
1000d564:	0064      	lsls	r4, r4, #1
1000d566:	f108 0804 	add.w	r8, r8, #4
1000d56a:	421c      	tst	r4, r3
1000d56c:	d0fa      	beq.n	1000d564 <_malloc_r+0x450>
1000d56e:	4640      	mov	r0, r8
1000d570:	e664      	b.n	1000d23c <_malloc_r+0x128>
1000d572:	f103 0b10 	add.w	fp, r3, #16
1000d576:	e6cc      	b.n	1000d312 <_malloc_r+0x1fe>
1000d578:	687b      	ldr	r3, [r7, #4]
1000d57a:	1092      	asrs	r2, r2, #2
1000d57c:	f04f 0801 	mov.w	r8, #1
1000d580:	fa08 f202 	lsl.w	r2, r8, r2
1000d584:	4313      	orrs	r3, r2
1000d586:	607b      	str	r3, [r7, #4]
1000d588:	e76a      	b.n	1000d460 <_malloc_r+0x34c>
1000d58a:	eb02 010b 	add.w	r1, r2, fp
1000d58e:	4249      	negs	r1, r1
1000d590:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
1000d594:	4651      	mov	r1, sl
1000d596:	4630      	mov	r0, r6
1000d598:	9301      	str	r3, [sp, #4]
1000d59a:	9200      	str	r2, [sp, #0]
1000d59c:	f000 ff36 	bl	1000e40c <_sbrk_r>
1000d5a0:	1c43      	adds	r3, r0, #1
1000d5a2:	e9dd 2300 	ldrd	r2, r3, [sp]
1000d5a6:	f47f aeec 	bne.w	1000d382 <_malloc_r+0x26e>
1000d5aa:	469a      	mov	sl, r3
1000d5ac:	e6ec      	b.n	1000d388 <_malloc_r+0x274>
1000d5ae:	2a54      	cmp	r2, #84	; 0x54
1000d5b0:	d826      	bhi.n	1000d600 <_malloc_r+0x4ec>
1000d5b2:	0b1a      	lsrs	r2, r3, #12
1000d5b4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1000d5b8:	00c9      	lsls	r1, r1, #3
1000d5ba:	326e      	adds	r2, #110	; 0x6e
1000d5bc:	e73d      	b.n	1000d43a <_malloc_r+0x326>
1000d5be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1000d5c2:	d826      	bhi.n	1000d612 <_malloc_r+0x4fe>
1000d5c4:	0beb      	lsrs	r3, r5, #15
1000d5c6:	f103 0078 	add.w	r0, r3, #120	; 0x78
1000d5ca:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1000d5ce:	00c3      	lsls	r3, r0, #3
1000d5d0:	e5e5      	b.n	1000d19e <_malloc_r+0x8a>
1000d5d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
1000d5d6:	445b      	add	r3, fp
1000d5d8:	f8c9 3004 	str.w	r3, [r9, #4]
1000d5dc:	e6ac      	b.n	1000d338 <_malloc_r+0x224>
1000d5de:	f3ca 000b 	ubfx	r0, sl, #0, #12
1000d5e2:	2800      	cmp	r0, #0
1000d5e4:	f47f aea8 	bne.w	1000d338 <_malloc_r+0x224>
1000d5e8:	eb08 030b 	add.w	r3, r8, fp
1000d5ec:	68bc      	ldr	r4, [r7, #8]
1000d5ee:	f043 0301 	orr.w	r3, r3, #1
1000d5f2:	6063      	str	r3, [r4, #4]
1000d5f4:	e6ec      	b.n	1000d3d0 <_malloc_r+0x2bc>
1000d5f6:	4614      	mov	r4, r2
1000d5f8:	e6ea      	b.n	1000d3d0 <_malloc_r+0x2bc>
1000d5fa:	2301      	movs	r3, #1
1000d5fc:	6053      	str	r3, [r2, #4]
1000d5fe:	e792      	b.n	1000d526 <_malloc_r+0x412>
1000d600:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1000d604:	d821      	bhi.n	1000d64a <_malloc_r+0x536>
1000d606:	0bda      	lsrs	r2, r3, #15
1000d608:	f102 0178 	add.w	r1, r2, #120	; 0x78
1000d60c:	00c9      	lsls	r1, r1, #3
1000d60e:	3277      	adds	r2, #119	; 0x77
1000d610:	e713      	b.n	1000d43a <_malloc_r+0x326>
1000d612:	f240 5254 	movw	r2, #1364	; 0x554
1000d616:	4293      	cmp	r3, r2
1000d618:	d821      	bhi.n	1000d65e <_malloc_r+0x54a>
1000d61a:	0cab      	lsrs	r3, r5, #18
1000d61c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1000d620:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1000d624:	00c3      	lsls	r3, r0, #3
1000d626:	e5ba      	b.n	1000d19e <_malloc_r+0x8a>
1000d628:	3b08      	subs	r3, #8
1000d62a:	449b      	add	fp, r3
1000d62c:	ebab 0b02 	sub.w	fp, fp, r2
1000d630:	f04f 0a00 	mov.w	sl, #0
1000d634:	e6a8      	b.n	1000d388 <_malloc_r+0x274>
1000d636:	f104 0108 	add.w	r1, r4, #8
1000d63a:	4630      	mov	r0, r6
1000d63c:	f7ff fa1a 	bl	1000ca74 <_free_r>
1000d640:	68bc      	ldr	r4, [r7, #8]
1000d642:	f8d9 1004 	ldr.w	r1, [r9, #4]
1000d646:	6863      	ldr	r3, [r4, #4]
1000d648:	e6c2      	b.n	1000d3d0 <_malloc_r+0x2bc>
1000d64a:	f240 5154 	movw	r1, #1364	; 0x554
1000d64e:	428a      	cmp	r2, r1
1000d650:	d80b      	bhi.n	1000d66a <_malloc_r+0x556>
1000d652:	0c9a      	lsrs	r2, r3, #18
1000d654:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1000d658:	00c9      	lsls	r1, r1, #3
1000d65a:	327c      	adds	r2, #124	; 0x7c
1000d65c:	e6ed      	b.n	1000d43a <_malloc_r+0x326>
1000d65e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1000d662:	207f      	movs	r0, #127	; 0x7f
1000d664:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1000d668:	e599      	b.n	1000d19e <_malloc_r+0x8a>
1000d66a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1000d66e:	227e      	movs	r2, #126	; 0x7e
1000d670:	e6e3      	b.n	1000d43a <_malloc_r+0x326>
1000d672:	687b      	ldr	r3, [r7, #4]
1000d674:	e770      	b.n	1000d558 <_malloc_r+0x444>
1000d676:	bf00      	nop
	...

1000d680 <memchr>:
1000d680:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1000d684:	2a10      	cmp	r2, #16
1000d686:	db2b      	blt.n	1000d6e0 <memchr+0x60>
1000d688:	f010 0f07 	tst.w	r0, #7
1000d68c:	d008      	beq.n	1000d6a0 <memchr+0x20>
1000d68e:	f810 3b01 	ldrb.w	r3, [r0], #1
1000d692:	3a01      	subs	r2, #1
1000d694:	428b      	cmp	r3, r1
1000d696:	d02d      	beq.n	1000d6f4 <memchr+0x74>
1000d698:	f010 0f07 	tst.w	r0, #7
1000d69c:	b342      	cbz	r2, 1000d6f0 <memchr+0x70>
1000d69e:	d1f6      	bne.n	1000d68e <memchr+0xe>
1000d6a0:	b4f0      	push	{r4, r5, r6, r7}
1000d6a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1000d6a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000d6aa:	f022 0407 	bic.w	r4, r2, #7
1000d6ae:	f07f 0700 	mvns.w	r7, #0
1000d6b2:	2300      	movs	r3, #0
1000d6b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1000d6b8:	3c08      	subs	r4, #8
1000d6ba:	ea85 0501 	eor.w	r5, r5, r1
1000d6be:	ea86 0601 	eor.w	r6, r6, r1
1000d6c2:	fa85 f547 	uadd8	r5, r5, r7
1000d6c6:	faa3 f587 	sel	r5, r3, r7
1000d6ca:	fa86 f647 	uadd8	r6, r6, r7
1000d6ce:	faa5 f687 	sel	r6, r5, r7
1000d6d2:	b98e      	cbnz	r6, 1000d6f8 <memchr+0x78>
1000d6d4:	d1ee      	bne.n	1000d6b4 <memchr+0x34>
1000d6d6:	bcf0      	pop	{r4, r5, r6, r7}
1000d6d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1000d6dc:	f002 0207 	and.w	r2, r2, #7
1000d6e0:	b132      	cbz	r2, 1000d6f0 <memchr+0x70>
1000d6e2:	f810 3b01 	ldrb.w	r3, [r0], #1
1000d6e6:	3a01      	subs	r2, #1
1000d6e8:	ea83 0301 	eor.w	r3, r3, r1
1000d6ec:	b113      	cbz	r3, 1000d6f4 <memchr+0x74>
1000d6ee:	d1f8      	bne.n	1000d6e2 <memchr+0x62>
1000d6f0:	2000      	movs	r0, #0
1000d6f2:	4770      	bx	lr
1000d6f4:	3801      	subs	r0, #1
1000d6f6:	4770      	bx	lr
1000d6f8:	2d00      	cmp	r5, #0
1000d6fa:	bf06      	itte	eq
1000d6fc:	4635      	moveq	r5, r6
1000d6fe:	3803      	subeq	r0, #3
1000d700:	3807      	subne	r0, #7
1000d702:	f015 0f01 	tst.w	r5, #1
1000d706:	d107      	bne.n	1000d718 <memchr+0x98>
1000d708:	3001      	adds	r0, #1
1000d70a:	f415 7f80 	tst.w	r5, #256	; 0x100
1000d70e:	bf02      	ittt	eq
1000d710:	3001      	addeq	r0, #1
1000d712:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1000d716:	3001      	addeq	r0, #1
1000d718:	bcf0      	pop	{r4, r5, r6, r7}
1000d71a:	3801      	subs	r0, #1
1000d71c:	4770      	bx	lr
1000d71e:	bf00      	nop

1000d720 <__malloc_lock>:
1000d720:	4770      	bx	lr
1000d722:	bf00      	nop

1000d724 <__malloc_unlock>:
1000d724:	4770      	bx	lr
1000d726:	bf00      	nop

1000d728 <_Balloc>:
1000d728:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000d72a:	b570      	push	{r4, r5, r6, lr}
1000d72c:	4605      	mov	r5, r0
1000d72e:	460c      	mov	r4, r1
1000d730:	b14b      	cbz	r3, 1000d746 <_Balloc+0x1e>
1000d732:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1000d736:	b180      	cbz	r0, 1000d75a <_Balloc+0x32>
1000d738:	6802      	ldr	r2, [r0, #0]
1000d73a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1000d73e:	2300      	movs	r3, #0
1000d740:	e9c0 3303 	strd	r3, r3, [r0, #12]
1000d744:	bd70      	pop	{r4, r5, r6, pc}
1000d746:	2221      	movs	r2, #33	; 0x21
1000d748:	2104      	movs	r1, #4
1000d74a:	f001 fd73 	bl	1000f234 <_calloc_r>
1000d74e:	4603      	mov	r3, r0
1000d750:	64e8      	str	r0, [r5, #76]	; 0x4c
1000d752:	2800      	cmp	r0, #0
1000d754:	d1ed      	bne.n	1000d732 <_Balloc+0xa>
1000d756:	2000      	movs	r0, #0
1000d758:	bd70      	pop	{r4, r5, r6, pc}
1000d75a:	2101      	movs	r1, #1
1000d75c:	fa01 f604 	lsl.w	r6, r1, r4
1000d760:	1d72      	adds	r2, r6, #5
1000d762:	4628      	mov	r0, r5
1000d764:	0092      	lsls	r2, r2, #2
1000d766:	f001 fd65 	bl	1000f234 <_calloc_r>
1000d76a:	2800      	cmp	r0, #0
1000d76c:	d0f3      	beq.n	1000d756 <_Balloc+0x2e>
1000d76e:	e9c0 4601 	strd	r4, r6, [r0, #4]
1000d772:	e7e4      	b.n	1000d73e <_Balloc+0x16>

1000d774 <_Bfree>:
1000d774:	b131      	cbz	r1, 1000d784 <_Bfree+0x10>
1000d776:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000d778:	684a      	ldr	r2, [r1, #4]
1000d77a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1000d77e:	6008      	str	r0, [r1, #0]
1000d780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1000d784:	4770      	bx	lr
1000d786:	bf00      	nop

1000d788 <__multadd>:
1000d788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d78a:	690c      	ldr	r4, [r1, #16]
1000d78c:	b083      	sub	sp, #12
1000d78e:	460d      	mov	r5, r1
1000d790:	4606      	mov	r6, r0
1000d792:	f101 0c14 	add.w	ip, r1, #20
1000d796:	2700      	movs	r7, #0
1000d798:	f8dc 0000 	ldr.w	r0, [ip]
1000d79c:	b281      	uxth	r1, r0
1000d79e:	fb02 3301 	mla	r3, r2, r1, r3
1000d7a2:	0c19      	lsrs	r1, r3, #16
1000d7a4:	0c00      	lsrs	r0, r0, #16
1000d7a6:	fb02 1000 	mla	r0, r2, r0, r1
1000d7aa:	b29b      	uxth	r3, r3
1000d7ac:	3701      	adds	r7, #1
1000d7ae:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1000d7b2:	42bc      	cmp	r4, r7
1000d7b4:	f84c 3b04 	str.w	r3, [ip], #4
1000d7b8:	ea4f 4310 	mov.w	r3, r0, lsr #16
1000d7bc:	dcec      	bgt.n	1000d798 <__multadd+0x10>
1000d7be:	b13b      	cbz	r3, 1000d7d0 <__multadd+0x48>
1000d7c0:	68aa      	ldr	r2, [r5, #8]
1000d7c2:	42a2      	cmp	r2, r4
1000d7c4:	dd07      	ble.n	1000d7d6 <__multadd+0x4e>
1000d7c6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1000d7ca:	3401      	adds	r4, #1
1000d7cc:	6153      	str	r3, [r2, #20]
1000d7ce:	612c      	str	r4, [r5, #16]
1000d7d0:	4628      	mov	r0, r5
1000d7d2:	b003      	add	sp, #12
1000d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7d6:	6869      	ldr	r1, [r5, #4]
1000d7d8:	9301      	str	r3, [sp, #4]
1000d7da:	4630      	mov	r0, r6
1000d7dc:	3101      	adds	r1, #1
1000d7de:	f7ff ffa3 	bl	1000d728 <_Balloc>
1000d7e2:	9b01      	ldr	r3, [sp, #4]
1000d7e4:	4607      	mov	r7, r0
1000d7e6:	b1b8      	cbz	r0, 1000d818 <__multadd+0x90>
1000d7e8:	692a      	ldr	r2, [r5, #16]
1000d7ea:	9301      	str	r3, [sp, #4]
1000d7ec:	3202      	adds	r2, #2
1000d7ee:	f105 010c 	add.w	r1, r5, #12
1000d7f2:	0092      	lsls	r2, r2, #2
1000d7f4:	300c      	adds	r0, #12
1000d7f6:	f7fb ff09 	bl	1000960c <memcpy>
1000d7fa:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1000d7fc:	6869      	ldr	r1, [r5, #4]
1000d7fe:	9b01      	ldr	r3, [sp, #4]
1000d800:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1000d804:	6028      	str	r0, [r5, #0]
1000d806:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1000d80a:	463d      	mov	r5, r7
1000d80c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1000d810:	3401      	adds	r4, #1
1000d812:	6153      	str	r3, [r2, #20]
1000d814:	612c      	str	r4, [r5, #16]
1000d816:	e7db      	b.n	1000d7d0 <__multadd+0x48>
1000d818:	4602      	mov	r2, r0
1000d81a:	4b02      	ldr	r3, [pc, #8]	; (1000d824 <__multadd+0x9c>)
1000d81c:	4802      	ldr	r0, [pc, #8]	; (1000d828 <__multadd+0xa0>)
1000d81e:	21b5      	movs	r1, #181	; 0xb5
1000d820:	f001 fce4 	bl	1000f1ec <__assert_func>
1000d824:	10010bf0 	.word	0x10010bf0
1000d828:	10010d60 	.word	0x10010d60

1000d82c <__s2b>:
1000d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000d830:	4c26      	ldr	r4, [pc, #152]	; (1000d8cc <__s2b+0xa0>)
1000d832:	9e08      	ldr	r6, [sp, #32]
1000d834:	461d      	mov	r5, r3
1000d836:	3308      	adds	r3, #8
1000d838:	fb84 4c03 	smull	r4, ip, r4, r3
1000d83c:	2d09      	cmp	r5, #9
1000d83e:	ea4f 73e3 	mov.w	r3, r3, asr #31
1000d842:	4690      	mov	r8, r2
1000d844:	4607      	mov	r7, r0
1000d846:	460c      	mov	r4, r1
1000d848:	ebc3 026c 	rsb	r2, r3, ip, asr #1
1000d84c:	dd36      	ble.n	1000d8bc <__s2b+0x90>
1000d84e:	2301      	movs	r3, #1
1000d850:	2100      	movs	r1, #0
1000d852:	005b      	lsls	r3, r3, #1
1000d854:	429a      	cmp	r2, r3
1000d856:	f101 0101 	add.w	r1, r1, #1
1000d85a:	dcfa      	bgt.n	1000d852 <__s2b+0x26>
1000d85c:	4638      	mov	r0, r7
1000d85e:	f7ff ff63 	bl	1000d728 <_Balloc>
1000d862:	b368      	cbz	r0, 1000d8c0 <__s2b+0x94>
1000d864:	2301      	movs	r3, #1
1000d866:	f1b8 0f09 	cmp.w	r8, #9
1000d86a:	e9c0 3604 	strd	r3, r6, [r0, #16]
1000d86e:	dc13      	bgt.n	1000d898 <__s2b+0x6c>
1000d870:	340a      	adds	r4, #10
1000d872:	f04f 0809 	mov.w	r8, #9
1000d876:	4545      	cmp	r5, r8
1000d878:	dd0c      	ble.n	1000d894 <__s2b+0x68>
1000d87a:	eba5 0508 	sub.w	r5, r5, r8
1000d87e:	4425      	add	r5, r4
1000d880:	f814 3b01 	ldrb.w	r3, [r4], #1
1000d884:	4601      	mov	r1, r0
1000d886:	3b30      	subs	r3, #48	; 0x30
1000d888:	220a      	movs	r2, #10
1000d88a:	4638      	mov	r0, r7
1000d88c:	f7ff ff7c 	bl	1000d788 <__multadd>
1000d890:	42a5      	cmp	r5, r4
1000d892:	d1f5      	bne.n	1000d880 <__s2b+0x54>
1000d894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000d898:	f104 0909 	add.w	r9, r4, #9
1000d89c:	464e      	mov	r6, r9
1000d89e:	4444      	add	r4, r8
1000d8a0:	f816 3b01 	ldrb.w	r3, [r6], #1
1000d8a4:	4601      	mov	r1, r0
1000d8a6:	3b30      	subs	r3, #48	; 0x30
1000d8a8:	220a      	movs	r2, #10
1000d8aa:	4638      	mov	r0, r7
1000d8ac:	f7ff ff6c 	bl	1000d788 <__multadd>
1000d8b0:	42b4      	cmp	r4, r6
1000d8b2:	d1f5      	bne.n	1000d8a0 <__s2b+0x74>
1000d8b4:	f1a8 0408 	sub.w	r4, r8, #8
1000d8b8:	444c      	add	r4, r9
1000d8ba:	e7dc      	b.n	1000d876 <__s2b+0x4a>
1000d8bc:	2100      	movs	r1, #0
1000d8be:	e7cd      	b.n	1000d85c <__s2b+0x30>
1000d8c0:	4602      	mov	r2, r0
1000d8c2:	4b03      	ldr	r3, [pc, #12]	; (1000d8d0 <__s2b+0xa4>)
1000d8c4:	4803      	ldr	r0, [pc, #12]	; (1000d8d4 <__s2b+0xa8>)
1000d8c6:	21ce      	movs	r1, #206	; 0xce
1000d8c8:	f001 fc90 	bl	1000f1ec <__assert_func>
1000d8cc:	38e38e39 	.word	0x38e38e39
1000d8d0:	10010bf0 	.word	0x10010bf0
1000d8d4:	10010d60 	.word	0x10010d60

1000d8d8 <__hi0bits>:
1000d8d8:	0c02      	lsrs	r2, r0, #16
1000d8da:	0412      	lsls	r2, r2, #16
1000d8dc:	4603      	mov	r3, r0
1000d8de:	b9ca      	cbnz	r2, 1000d914 <__hi0bits+0x3c>
1000d8e0:	0403      	lsls	r3, r0, #16
1000d8e2:	2010      	movs	r0, #16
1000d8e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1000d8e8:	bf04      	itt	eq
1000d8ea:	021b      	lsleq	r3, r3, #8
1000d8ec:	3008      	addeq	r0, #8
1000d8ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1000d8f2:	bf04      	itt	eq
1000d8f4:	011b      	lsleq	r3, r3, #4
1000d8f6:	3004      	addeq	r0, #4
1000d8f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1000d8fc:	bf04      	itt	eq
1000d8fe:	009b      	lsleq	r3, r3, #2
1000d900:	3002      	addeq	r0, #2
1000d902:	2b00      	cmp	r3, #0
1000d904:	db05      	blt.n	1000d912 <__hi0bits+0x3a>
1000d906:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1000d90a:	f100 0001 	add.w	r0, r0, #1
1000d90e:	bf08      	it	eq
1000d910:	2020      	moveq	r0, #32
1000d912:	4770      	bx	lr
1000d914:	2000      	movs	r0, #0
1000d916:	e7e5      	b.n	1000d8e4 <__hi0bits+0xc>

1000d918 <__lo0bits>:
1000d918:	6803      	ldr	r3, [r0, #0]
1000d91a:	f013 0207 	ands.w	r2, r3, #7
1000d91e:	4601      	mov	r1, r0
1000d920:	d007      	beq.n	1000d932 <__lo0bits+0x1a>
1000d922:	07da      	lsls	r2, r3, #31
1000d924:	d420      	bmi.n	1000d968 <__lo0bits+0x50>
1000d926:	0798      	lsls	r0, r3, #30
1000d928:	d522      	bpl.n	1000d970 <__lo0bits+0x58>
1000d92a:	085b      	lsrs	r3, r3, #1
1000d92c:	600b      	str	r3, [r1, #0]
1000d92e:	2001      	movs	r0, #1
1000d930:	4770      	bx	lr
1000d932:	b298      	uxth	r0, r3
1000d934:	b9b0      	cbnz	r0, 1000d964 <__lo0bits+0x4c>
1000d936:	0c1b      	lsrs	r3, r3, #16
1000d938:	2010      	movs	r0, #16
1000d93a:	f013 0fff 	tst.w	r3, #255	; 0xff
1000d93e:	bf04      	itt	eq
1000d940:	0a1b      	lsreq	r3, r3, #8
1000d942:	3008      	addeq	r0, #8
1000d944:	071a      	lsls	r2, r3, #28
1000d946:	bf04      	itt	eq
1000d948:	091b      	lsreq	r3, r3, #4
1000d94a:	3004      	addeq	r0, #4
1000d94c:	079a      	lsls	r2, r3, #30
1000d94e:	bf04      	itt	eq
1000d950:	089b      	lsreq	r3, r3, #2
1000d952:	3002      	addeq	r0, #2
1000d954:	07da      	lsls	r2, r3, #31
1000d956:	d403      	bmi.n	1000d960 <__lo0bits+0x48>
1000d958:	085b      	lsrs	r3, r3, #1
1000d95a:	f100 0001 	add.w	r0, r0, #1
1000d95e:	d005      	beq.n	1000d96c <__lo0bits+0x54>
1000d960:	600b      	str	r3, [r1, #0]
1000d962:	4770      	bx	lr
1000d964:	4610      	mov	r0, r2
1000d966:	e7e8      	b.n	1000d93a <__lo0bits+0x22>
1000d968:	2000      	movs	r0, #0
1000d96a:	4770      	bx	lr
1000d96c:	2020      	movs	r0, #32
1000d96e:	4770      	bx	lr
1000d970:	089b      	lsrs	r3, r3, #2
1000d972:	600b      	str	r3, [r1, #0]
1000d974:	2002      	movs	r0, #2
1000d976:	4770      	bx	lr

1000d978 <__i2b>:
1000d978:	b510      	push	{r4, lr}
1000d97a:	460c      	mov	r4, r1
1000d97c:	2101      	movs	r1, #1
1000d97e:	f7ff fed3 	bl	1000d728 <_Balloc>
1000d982:	4602      	mov	r2, r0
1000d984:	b118      	cbz	r0, 1000d98e <__i2b+0x16>
1000d986:	2301      	movs	r3, #1
1000d988:	e9c0 3404 	strd	r3, r4, [r0, #16]
1000d98c:	bd10      	pop	{r4, pc}
1000d98e:	4b03      	ldr	r3, [pc, #12]	; (1000d99c <__i2b+0x24>)
1000d990:	4803      	ldr	r0, [pc, #12]	; (1000d9a0 <__i2b+0x28>)
1000d992:	f44f 71a0 	mov.w	r1, #320	; 0x140
1000d996:	f001 fc29 	bl	1000f1ec <__assert_func>
1000d99a:	bf00      	nop
1000d99c:	10010bf0 	.word	0x10010bf0
1000d9a0:	10010d60 	.word	0x10010d60

1000d9a4 <__multiply>:
1000d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d9a8:	690e      	ldr	r6, [r1, #16]
1000d9aa:	6917      	ldr	r7, [r2, #16]
1000d9ac:	42be      	cmp	r6, r7
1000d9ae:	b083      	sub	sp, #12
1000d9b0:	460c      	mov	r4, r1
1000d9b2:	4615      	mov	r5, r2
1000d9b4:	db05      	blt.n	1000d9c2 <__multiply+0x1e>
1000d9b6:	463a      	mov	r2, r7
1000d9b8:	462b      	mov	r3, r5
1000d9ba:	4637      	mov	r7, r6
1000d9bc:	460d      	mov	r5, r1
1000d9be:	4616      	mov	r6, r2
1000d9c0:	461c      	mov	r4, r3
1000d9c2:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1000d9c6:	eb07 0806 	add.w	r8, r7, r6
1000d9ca:	4543      	cmp	r3, r8
1000d9cc:	bfb8      	it	lt
1000d9ce:	3101      	addlt	r1, #1
1000d9d0:	f7ff feaa 	bl	1000d728 <_Balloc>
1000d9d4:	9000      	str	r0, [sp, #0]
1000d9d6:	2800      	cmp	r0, #0
1000d9d8:	d07f      	beq.n	1000dada <__multiply+0x136>
1000d9da:	9b00      	ldr	r3, [sp, #0]
1000d9dc:	f103 0a14 	add.w	sl, r3, #20
1000d9e0:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1000d9e4:	45ca      	cmp	sl, r9
1000d9e6:	d205      	bcs.n	1000d9f4 <__multiply+0x50>
1000d9e8:	4653      	mov	r3, sl
1000d9ea:	2100      	movs	r1, #0
1000d9ec:	f843 1b04 	str.w	r1, [r3], #4
1000d9f0:	4599      	cmp	r9, r3
1000d9f2:	d8fb      	bhi.n	1000d9ec <__multiply+0x48>
1000d9f4:	f104 0e14 	add.w	lr, r4, #20
1000d9f8:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1000d9fc:	f105 0314 	add.w	r3, r5, #20
1000da00:	45de      	cmp	lr, fp
1000da02:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1000da06:	d253      	bcs.n	1000dab0 <__multiply+0x10c>
1000da08:	f8cd 8004 	str.w	r8, [sp, #4]
1000da0c:	4698      	mov	r8, r3
1000da0e:	e005      	b.n	1000da1c <__multiply+0x78>
1000da10:	0c09      	lsrs	r1, r1, #16
1000da12:	d128      	bne.n	1000da66 <__multiply+0xc2>
1000da14:	45f3      	cmp	fp, lr
1000da16:	f10a 0a04 	add.w	sl, sl, #4
1000da1a:	d947      	bls.n	1000daac <__multiply+0x108>
1000da1c:	f85e 1b04 	ldr.w	r1, [lr], #4
1000da20:	b28e      	uxth	r6, r1
1000da22:	2e00      	cmp	r6, #0
1000da24:	d0f4      	beq.n	1000da10 <__multiply+0x6c>
1000da26:	4645      	mov	r5, r8
1000da28:	4654      	mov	r4, sl
1000da2a:	2300      	movs	r3, #0
1000da2c:	f855 1b04 	ldr.w	r1, [r5], #4
1000da30:	6820      	ldr	r0, [r4, #0]
1000da32:	b28a      	uxth	r2, r1
1000da34:	fa1f fc80 	uxth.w	ip, r0
1000da38:	fb06 c202 	mla	r2, r6, r2, ip
1000da3c:	0c09      	lsrs	r1, r1, #16
1000da3e:	0c00      	lsrs	r0, r0, #16
1000da40:	4413      	add	r3, r2
1000da42:	fb06 0201 	mla	r2, r6, r1, r0
1000da46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1000da4a:	b29b      	uxth	r3, r3
1000da4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000da50:	42af      	cmp	r7, r5
1000da52:	f844 3b04 	str.w	r3, [r4], #4
1000da56:	ea4f 4312 	mov.w	r3, r2, lsr #16
1000da5a:	d8e7      	bhi.n	1000da2c <__multiply+0x88>
1000da5c:	6023      	str	r3, [r4, #0]
1000da5e:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1000da62:	0c09      	lsrs	r1, r1, #16
1000da64:	d0d6      	beq.n	1000da14 <__multiply+0x70>
1000da66:	f8da 3000 	ldr.w	r3, [sl]
1000da6a:	4640      	mov	r0, r8
1000da6c:	461a      	mov	r2, r3
1000da6e:	4654      	mov	r4, sl
1000da70:	f04f 0c00 	mov.w	ip, #0
1000da74:	8805      	ldrh	r5, [r0, #0]
1000da76:	0c12      	lsrs	r2, r2, #16
1000da78:	fb01 2205 	mla	r2, r1, r5, r2
1000da7c:	4494      	add	ip, r2
1000da7e:	b29b      	uxth	r3, r3
1000da80:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1000da84:	f844 3b04 	str.w	r3, [r4], #4
1000da88:	f850 3b04 	ldr.w	r3, [r0], #4
1000da8c:	6822      	ldr	r2, [r4, #0]
1000da8e:	0c1b      	lsrs	r3, r3, #16
1000da90:	b295      	uxth	r5, r2
1000da92:	fb01 5303 	mla	r3, r1, r3, r5
1000da96:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1000da9a:	4287      	cmp	r7, r0
1000da9c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1000daa0:	d8e8      	bhi.n	1000da74 <__multiply+0xd0>
1000daa2:	45f3      	cmp	fp, lr
1000daa4:	6023      	str	r3, [r4, #0]
1000daa6:	f10a 0a04 	add.w	sl, sl, #4
1000daaa:	d8b7      	bhi.n	1000da1c <__multiply+0x78>
1000daac:	f8dd 8004 	ldr.w	r8, [sp, #4]
1000dab0:	f1b8 0f00 	cmp.w	r8, #0
1000dab4:	dd0b      	ble.n	1000dace <__multiply+0x12a>
1000dab6:	f859 3c04 	ldr.w	r3, [r9, #-4]
1000daba:	f1a9 0904 	sub.w	r9, r9, #4
1000dabe:	b11b      	cbz	r3, 1000dac8 <__multiply+0x124>
1000dac0:	e005      	b.n	1000dace <__multiply+0x12a>
1000dac2:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1000dac6:	b913      	cbnz	r3, 1000dace <__multiply+0x12a>
1000dac8:	f1b8 0801 	subs.w	r8, r8, #1
1000dacc:	d1f9      	bne.n	1000dac2 <__multiply+0x11e>
1000dace:	9800      	ldr	r0, [sp, #0]
1000dad0:	f8c0 8010 	str.w	r8, [r0, #16]
1000dad4:	b003      	add	sp, #12
1000dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000dada:	4602      	mov	r2, r0
1000dadc:	4b02      	ldr	r3, [pc, #8]	; (1000dae8 <__multiply+0x144>)
1000dade:	4803      	ldr	r0, [pc, #12]	; (1000daec <__multiply+0x148>)
1000dae0:	f240 115d 	movw	r1, #349	; 0x15d
1000dae4:	f001 fb82 	bl	1000f1ec <__assert_func>
1000dae8:	10010bf0 	.word	0x10010bf0
1000daec:	10010d60 	.word	0x10010d60

1000daf0 <__pow5mult>:
1000daf0:	f012 0303 	ands.w	r3, r2, #3
1000daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000daf8:	4614      	mov	r4, r2
1000dafa:	4607      	mov	r7, r0
1000dafc:	d12e      	bne.n	1000db5c <__pow5mult+0x6c>
1000dafe:	460d      	mov	r5, r1
1000db00:	10a4      	asrs	r4, r4, #2
1000db02:	d01c      	beq.n	1000db3e <__pow5mult+0x4e>
1000db04:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1000db06:	b396      	cbz	r6, 1000db6e <__pow5mult+0x7e>
1000db08:	07e3      	lsls	r3, r4, #31
1000db0a:	f04f 0800 	mov.w	r8, #0
1000db0e:	d406      	bmi.n	1000db1e <__pow5mult+0x2e>
1000db10:	1064      	asrs	r4, r4, #1
1000db12:	d014      	beq.n	1000db3e <__pow5mult+0x4e>
1000db14:	6830      	ldr	r0, [r6, #0]
1000db16:	b1a8      	cbz	r0, 1000db44 <__pow5mult+0x54>
1000db18:	4606      	mov	r6, r0
1000db1a:	07e3      	lsls	r3, r4, #31
1000db1c:	d5f8      	bpl.n	1000db10 <__pow5mult+0x20>
1000db1e:	4632      	mov	r2, r6
1000db20:	4629      	mov	r1, r5
1000db22:	4638      	mov	r0, r7
1000db24:	f7ff ff3e 	bl	1000d9a4 <__multiply>
1000db28:	b1b5      	cbz	r5, 1000db58 <__pow5mult+0x68>
1000db2a:	686a      	ldr	r2, [r5, #4]
1000db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000db2e:	1064      	asrs	r4, r4, #1
1000db30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000db34:	6029      	str	r1, [r5, #0]
1000db36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1000db3a:	4605      	mov	r5, r0
1000db3c:	d1ea      	bne.n	1000db14 <__pow5mult+0x24>
1000db3e:	4628      	mov	r0, r5
1000db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000db44:	4632      	mov	r2, r6
1000db46:	4631      	mov	r1, r6
1000db48:	4638      	mov	r0, r7
1000db4a:	f7ff ff2b 	bl	1000d9a4 <__multiply>
1000db4e:	6030      	str	r0, [r6, #0]
1000db50:	f8c0 8000 	str.w	r8, [r0]
1000db54:	4606      	mov	r6, r0
1000db56:	e7e0      	b.n	1000db1a <__pow5mult+0x2a>
1000db58:	4605      	mov	r5, r0
1000db5a:	e7d9      	b.n	1000db10 <__pow5mult+0x20>
1000db5c:	3b01      	subs	r3, #1
1000db5e:	4a09      	ldr	r2, [pc, #36]	; (1000db84 <__pow5mult+0x94>)
1000db60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1000db64:	2300      	movs	r3, #0
1000db66:	f7ff fe0f 	bl	1000d788 <__multadd>
1000db6a:	4605      	mov	r5, r0
1000db6c:	e7c8      	b.n	1000db00 <__pow5mult+0x10>
1000db6e:	f240 2171 	movw	r1, #625	; 0x271
1000db72:	4638      	mov	r0, r7
1000db74:	f7ff ff00 	bl	1000d978 <__i2b>
1000db78:	2300      	movs	r3, #0
1000db7a:	64b8      	str	r0, [r7, #72]	; 0x48
1000db7c:	4606      	mov	r6, r0
1000db7e:	6003      	str	r3, [r0, #0]
1000db80:	e7c2      	b.n	1000db08 <__pow5mult+0x18>
1000db82:	bf00      	nop
1000db84:	10010c38 	.word	0x10010c38

1000db88 <__lshift>:
1000db88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000db8c:	690e      	ldr	r6, [r1, #16]
1000db8e:	460d      	mov	r5, r1
1000db90:	ea4f 1962 	mov.w	r9, r2, asr #5
1000db94:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1000db98:	444e      	add	r6, r9
1000db9a:	1c74      	adds	r4, r6, #1
1000db9c:	429c      	cmp	r4, r3
1000db9e:	4690      	mov	r8, r2
1000dba0:	4607      	mov	r7, r0
1000dba2:	dd04      	ble.n	1000dbae <__lshift+0x26>
1000dba4:	005b      	lsls	r3, r3, #1
1000dba6:	429c      	cmp	r4, r3
1000dba8:	f101 0101 	add.w	r1, r1, #1
1000dbac:	dcfa      	bgt.n	1000dba4 <__lshift+0x1c>
1000dbae:	4638      	mov	r0, r7
1000dbb0:	f7ff fdba 	bl	1000d728 <_Balloc>
1000dbb4:	2800      	cmp	r0, #0
1000dbb6:	d042      	beq.n	1000dc3e <__lshift+0xb6>
1000dbb8:	f1b9 0f00 	cmp.w	r9, #0
1000dbbc:	f100 0c14 	add.w	ip, r0, #20
1000dbc0:	dd0e      	ble.n	1000dbe0 <__lshift+0x58>
1000dbc2:	f109 0905 	add.w	r9, r9, #5
1000dbc6:	ea4f 0989 	mov.w	r9, r9, lsl #2
1000dbca:	eb00 0109 	add.w	r1, r0, r9
1000dbce:	4663      	mov	r3, ip
1000dbd0:	2200      	movs	r2, #0
1000dbd2:	f843 2b04 	str.w	r2, [r3], #4
1000dbd6:	428b      	cmp	r3, r1
1000dbd8:	d1fb      	bne.n	1000dbd2 <__lshift+0x4a>
1000dbda:	f1a9 0914 	sub.w	r9, r9, #20
1000dbde:	44cc      	add	ip, r9
1000dbe0:	6929      	ldr	r1, [r5, #16]
1000dbe2:	f105 0314 	add.w	r3, r5, #20
1000dbe6:	f018 081f 	ands.w	r8, r8, #31
1000dbea:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1000dbee:	d01d      	beq.n	1000dc2c <__lshift+0xa4>
1000dbf0:	f1c8 0920 	rsb	r9, r8, #32
1000dbf4:	2200      	movs	r2, #0
1000dbf6:	6819      	ldr	r1, [r3, #0]
1000dbf8:	fa01 f108 	lsl.w	r1, r1, r8
1000dbfc:	4311      	orrs	r1, r2
1000dbfe:	f84c 1b04 	str.w	r1, [ip], #4
1000dc02:	f853 2b04 	ldr.w	r2, [r3], #4
1000dc06:	4573      	cmp	r3, lr
1000dc08:	fa22 f209 	lsr.w	r2, r2, r9
1000dc0c:	d3f3      	bcc.n	1000dbf6 <__lshift+0x6e>
1000dc0e:	f8cc 2000 	str.w	r2, [ip]
1000dc12:	2a00      	cmp	r2, #0
1000dc14:	bf18      	it	ne
1000dc16:	4626      	movne	r6, r4
1000dc18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000dc1a:	686a      	ldr	r2, [r5, #4]
1000dc1c:	6106      	str	r6, [r0, #16]
1000dc1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000dc22:	6029      	str	r1, [r5, #0]
1000dc24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1000dc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000dc2c:	f1ac 0c04 	sub.w	ip, ip, #4
1000dc30:	f853 2b04 	ldr.w	r2, [r3], #4
1000dc34:	f84c 2f04 	str.w	r2, [ip, #4]!
1000dc38:	459e      	cmp	lr, r3
1000dc3a:	d8f9      	bhi.n	1000dc30 <__lshift+0xa8>
1000dc3c:	e7ec      	b.n	1000dc18 <__lshift+0x90>
1000dc3e:	4602      	mov	r2, r0
1000dc40:	4b02      	ldr	r3, [pc, #8]	; (1000dc4c <__lshift+0xc4>)
1000dc42:	4803      	ldr	r0, [pc, #12]	; (1000dc50 <__lshift+0xc8>)
1000dc44:	f240 11d9 	movw	r1, #473	; 0x1d9
1000dc48:	f001 fad0 	bl	1000f1ec <__assert_func>
1000dc4c:	10010bf0 	.word	0x10010bf0
1000dc50:	10010d60 	.word	0x10010d60

1000dc54 <__mcmp>:
1000dc54:	b430      	push	{r4, r5}
1000dc56:	690b      	ldr	r3, [r1, #16]
1000dc58:	4605      	mov	r5, r0
1000dc5a:	6900      	ldr	r0, [r0, #16]
1000dc5c:	1ac0      	subs	r0, r0, r3
1000dc5e:	d110      	bne.n	1000dc82 <__mcmp+0x2e>
1000dc60:	009b      	lsls	r3, r3, #2
1000dc62:	3514      	adds	r5, #20
1000dc64:	3114      	adds	r1, #20
1000dc66:	4419      	add	r1, r3
1000dc68:	442b      	add	r3, r5
1000dc6a:	e001      	b.n	1000dc70 <__mcmp+0x1c>
1000dc6c:	429d      	cmp	r5, r3
1000dc6e:	d208      	bcs.n	1000dc82 <__mcmp+0x2e>
1000dc70:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1000dc74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1000dc78:	4294      	cmp	r4, r2
1000dc7a:	d0f7      	beq.n	1000dc6c <__mcmp+0x18>
1000dc7c:	d203      	bcs.n	1000dc86 <__mcmp+0x32>
1000dc7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000dc82:	bc30      	pop	{r4, r5}
1000dc84:	4770      	bx	lr
1000dc86:	2001      	movs	r0, #1
1000dc88:	bc30      	pop	{r4, r5}
1000dc8a:	4770      	bx	lr

1000dc8c <__mdiff>:
1000dc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000dc90:	4616      	mov	r6, r2
1000dc92:	690b      	ldr	r3, [r1, #16]
1000dc94:	6912      	ldr	r2, [r2, #16]
1000dc96:	eba3 0802 	sub.w	r8, r3, r2
1000dc9a:	f1b8 0f00 	cmp.w	r8, #0
1000dc9e:	460d      	mov	r5, r1
1000dca0:	d167      	bne.n	1000dd72 <__mdiff+0xe6>
1000dca2:	0092      	lsls	r2, r2, #2
1000dca4:	f101 0714 	add.w	r7, r1, #20
1000dca8:	f106 0114 	add.w	r1, r6, #20
1000dcac:	18bb      	adds	r3, r7, r2
1000dcae:	4411      	add	r1, r2
1000dcb0:	e001      	b.n	1000dcb6 <__mdiff+0x2a>
1000dcb2:	429f      	cmp	r7, r3
1000dcb4:	d261      	bcs.n	1000dd7a <__mdiff+0xee>
1000dcb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1000dcba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
1000dcbe:	42a2      	cmp	r2, r4
1000dcc0:	d0f7      	beq.n	1000dcb2 <__mdiff+0x26>
1000dcc2:	d350      	bcc.n	1000dd66 <__mdiff+0xda>
1000dcc4:	6869      	ldr	r1, [r5, #4]
1000dcc6:	f7ff fd2f 	bl	1000d728 <_Balloc>
1000dcca:	2800      	cmp	r0, #0
1000dccc:	d05f      	beq.n	1000dd8e <__mdiff+0x102>
1000dcce:	692f      	ldr	r7, [r5, #16]
1000dcd0:	6933      	ldr	r3, [r6, #16]
1000dcd2:	f8c0 800c 	str.w	r8, [r0, #12]
1000dcd6:	f106 0214 	add.w	r2, r6, #20
1000dcda:	3514      	adds	r5, #20
1000dcdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
1000dce0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
1000dce4:	f100 0614 	add.w	r6, r0, #20
1000dce8:	2100      	movs	r1, #0
1000dcea:	e000      	b.n	1000dcee <__mdiff+0x62>
1000dcec:	4626      	mov	r6, r4
1000dcee:	f852 4b04 	ldr.w	r4, [r2], #4
1000dcf2:	f855 8b04 	ldr.w	r8, [r5], #4
1000dcf6:	fa1f f984 	uxth.w	r9, r4
1000dcfa:	fa11 f388 	uxtah	r3, r1, r8
1000dcfe:	0c21      	lsrs	r1, r4, #16
1000dd00:	eba3 0309 	sub.w	r3, r3, r9
1000dd04:	ebc1 4118 	rsb	r1, r1, r8, lsr #16
1000dd08:	eb01 4123 	add.w	r1, r1, r3, asr #16
1000dd0c:	4634      	mov	r4, r6
1000dd0e:	b29b      	uxth	r3, r3
1000dd10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1000dd14:	4596      	cmp	lr, r2
1000dd16:	ea4f 4121 	mov.w	r1, r1, asr #16
1000dd1a:	f844 3b04 	str.w	r3, [r4], #4
1000dd1e:	46a8      	mov	r8, r5
1000dd20:	d8e4      	bhi.n	1000dcec <__mdiff+0x60>
1000dd22:	45ac      	cmp	ip, r5
1000dd24:	d916      	bls.n	1000dd54 <__mdiff+0xc8>
1000dd26:	4626      	mov	r6, r4
1000dd28:	f858 2b04 	ldr.w	r2, [r8], #4
1000dd2c:	fa11 f382 	uxtah	r3, r1, r2
1000dd30:	1419      	asrs	r1, r3, #16
1000dd32:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1000dd36:	b29b      	uxth	r3, r3
1000dd38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1000dd3c:	45c4      	cmp	ip, r8
1000dd3e:	f846 3b04 	str.w	r3, [r6], #4
1000dd42:	ea4f 4121 	mov.w	r1, r1, asr #16
1000dd46:	d8ef      	bhi.n	1000dd28 <__mdiff+0x9c>
1000dd48:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
1000dd4c:	1b76      	subs	r6, r6, r5
1000dd4e:	f026 0603 	bic.w	r6, r6, #3
1000dd52:	4426      	add	r6, r4
1000dd54:	b923      	cbnz	r3, 1000dd60 <__mdiff+0xd4>
1000dd56:	f856 3d04 	ldr.w	r3, [r6, #-4]!
1000dd5a:	3f01      	subs	r7, #1
1000dd5c:	2b00      	cmp	r3, #0
1000dd5e:	d0fa      	beq.n	1000dd56 <__mdiff+0xca>
1000dd60:	6107      	str	r7, [r0, #16]
1000dd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000dd66:	462b      	mov	r3, r5
1000dd68:	f04f 0801 	mov.w	r8, #1
1000dd6c:	4635      	mov	r5, r6
1000dd6e:	461e      	mov	r6, r3
1000dd70:	e7a8      	b.n	1000dcc4 <__mdiff+0x38>
1000dd72:	dbf8      	blt.n	1000dd66 <__mdiff+0xda>
1000dd74:	f04f 0800 	mov.w	r8, #0
1000dd78:	e7a4      	b.n	1000dcc4 <__mdiff+0x38>
1000dd7a:	2100      	movs	r1, #0
1000dd7c:	f7ff fcd4 	bl	1000d728 <_Balloc>
1000dd80:	b160      	cbz	r0, 1000dd9c <__mdiff+0x110>
1000dd82:	2201      	movs	r2, #1
1000dd84:	2300      	movs	r3, #0
1000dd86:	e9c0 2304 	strd	r2, r3, [r0, #16]
1000dd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000dd8e:	4602      	mov	r2, r0
1000dd90:	4b06      	ldr	r3, [pc, #24]	; (1000ddac <__mdiff+0x120>)
1000dd92:	4807      	ldr	r0, [pc, #28]	; (1000ddb0 <__mdiff+0x124>)
1000dd94:	f44f 7110 	mov.w	r1, #576	; 0x240
1000dd98:	f001 fa28 	bl	1000f1ec <__assert_func>
1000dd9c:	4602      	mov	r2, r0
1000dd9e:	4b03      	ldr	r3, [pc, #12]	; (1000ddac <__mdiff+0x120>)
1000dda0:	4803      	ldr	r0, [pc, #12]	; (1000ddb0 <__mdiff+0x124>)
1000dda2:	f240 2132 	movw	r1, #562	; 0x232
1000dda6:	f001 fa21 	bl	1000f1ec <__assert_func>
1000ddaa:	bf00      	nop
1000ddac:	10010bf0 	.word	0x10010bf0
1000ddb0:	10010d60 	.word	0x10010d60

1000ddb4 <__ulp>:
1000ddb4:	4b0e      	ldr	r3, [pc, #56]	; (1000ddf0 <__ulp+0x3c>)
1000ddb6:	400b      	ands	r3, r1
1000ddb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
1000ddbc:	2b00      	cmp	r3, #0
1000ddbe:	dd02      	ble.n	1000ddc6 <__ulp+0x12>
1000ddc0:	2000      	movs	r0, #0
1000ddc2:	4619      	mov	r1, r3
1000ddc4:	4770      	bx	lr
1000ddc6:	425b      	negs	r3, r3
1000ddc8:	151b      	asrs	r3, r3, #20
1000ddca:	2b13      	cmp	r3, #19
1000ddcc:	dc05      	bgt.n	1000ddda <__ulp+0x26>
1000ddce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
1000ddd2:	2000      	movs	r0, #0
1000ddd4:	fa42 f103 	asr.w	r1, r2, r3
1000ddd8:	4770      	bx	lr
1000ddda:	3b14      	subs	r3, #20
1000dddc:	2b1e      	cmp	r3, #30
1000ddde:	bfda      	itte	le
1000dde0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
1000dde4:	fa22 f303 	lsrle.w	r3, r2, r3
1000dde8:	2301      	movgt	r3, #1
1000ddea:	2100      	movs	r1, #0
1000ddec:	4618      	mov	r0, r3
1000ddee:	4770      	bx	lr
1000ddf0:	7ff00000 	.word	0x7ff00000

1000ddf4 <__b2d>:
1000ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ddf8:	6906      	ldr	r6, [r0, #16]
1000ddfa:	f100 0814 	add.w	r8, r0, #20
1000ddfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
1000de02:	f856 7c04 	ldr.w	r7, [r6, #-4]
1000de06:	4638      	mov	r0, r7
1000de08:	f7ff fd66 	bl	1000d8d8 <__hi0bits>
1000de0c:	f1c0 0320 	rsb	r3, r0, #32
1000de10:	280a      	cmp	r0, #10
1000de12:	600b      	str	r3, [r1, #0]
1000de14:	f1a6 0204 	sub.w	r2, r6, #4
1000de18:	dd2e      	ble.n	1000de78 <__b2d+0x84>
1000de1a:	4590      	cmp	r8, r2
1000de1c:	f1a0 030b 	sub.w	r3, r0, #11
1000de20:	d21b      	bcs.n	1000de5a <__b2d+0x66>
1000de22:	f856 0c08 	ldr.w	r0, [r6, #-8]
1000de26:	b313      	cbz	r3, 1000de6e <__b2d+0x7a>
1000de28:	f1c3 0120 	rsb	r1, r3, #32
1000de2c:	fa20 f201 	lsr.w	r2, r0, r1
1000de30:	409f      	lsls	r7, r3
1000de32:	4317      	orrs	r7, r2
1000de34:	f1a6 0208 	sub.w	r2, r6, #8
1000de38:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
1000de3c:	4590      	cmp	r8, r2
1000de3e:	fa00 f003 	lsl.w	r0, r0, r3
1000de42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1000de46:	d203      	bcs.n	1000de50 <__b2d+0x5c>
1000de48:	f856 3c0c 	ldr.w	r3, [r6, #-12]
1000de4c:	40cb      	lsrs	r3, r1
1000de4e:	4318      	orrs	r0, r3
1000de50:	4604      	mov	r4, r0
1000de52:	4620      	mov	r0, r4
1000de54:	4629      	mov	r1, r5
1000de56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000de5a:	b13b      	cbz	r3, 1000de6c <__b2d+0x78>
1000de5c:	fa07 f303 	lsl.w	r3, r7, r3
1000de60:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
1000de64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1000de68:	2000      	movs	r0, #0
1000de6a:	e7f1      	b.n	1000de50 <__b2d+0x5c>
1000de6c:	4618      	mov	r0, r3
1000de6e:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
1000de72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1000de76:	e7eb      	b.n	1000de50 <__b2d+0x5c>
1000de78:	4590      	cmp	r8, r2
1000de7a:	bf38      	it	cc
1000de7c:	f856 2c08 	ldrcc.w	r2, [r6, #-8]
1000de80:	f1c0 030b 	rsb	r3, r0, #11
1000de84:	fa27 f103 	lsr.w	r1, r7, r3
1000de88:	bf38      	it	cc
1000de8a:	40da      	lsrcc	r2, r3
1000de8c:	f100 0315 	add.w	r3, r0, #21
1000de90:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
1000de94:	bf28      	it	cs
1000de96:	2200      	movcs	r2, #0
1000de98:	fa07 f303 	lsl.w	r3, r7, r3
1000de9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1000dea0:	ea43 0402 	orr.w	r4, r3, r2
1000dea4:	4620      	mov	r0, r4
1000dea6:	4629      	mov	r1, r5
1000dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1000deac <__d2b>:
1000deac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000deae:	2101      	movs	r1, #1
1000deb0:	b083      	sub	sp, #12
1000deb2:	4616      	mov	r6, r2
1000deb4:	461f      	mov	r7, r3
1000deb6:	f7ff fc37 	bl	1000d728 <_Balloc>
1000deba:	4604      	mov	r4, r0
1000debc:	2800      	cmp	r0, #0
1000debe:	d04a      	beq.n	1000df56 <__d2b+0xaa>
1000dec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
1000dec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
1000dec8:	b10d      	cbz	r5, 1000dece <__d2b+0x22>
1000deca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1000dece:	2e00      	cmp	r6, #0
1000ded0:	9301      	str	r3, [sp, #4]
1000ded2:	d022      	beq.n	1000df1a <__d2b+0x6e>
1000ded4:	4668      	mov	r0, sp
1000ded6:	9600      	str	r6, [sp, #0]
1000ded8:	f7ff fd1e 	bl	1000d918 <__lo0bits>
1000dedc:	2800      	cmp	r0, #0
1000dede:	d036      	beq.n	1000df4e <__d2b+0xa2>
1000dee0:	e9dd 1300 	ldrd	r1, r3, [sp]
1000dee4:	f1c0 0220 	rsb	r2, r0, #32
1000dee8:	fa03 f202 	lsl.w	r2, r3, r2
1000deec:	430a      	orrs	r2, r1
1000deee:	40c3      	lsrs	r3, r0
1000def0:	9301      	str	r3, [sp, #4]
1000def2:	6162      	str	r2, [r4, #20]
1000def4:	2b00      	cmp	r3, #0
1000def6:	bf14      	ite	ne
1000def8:	2102      	movne	r1, #2
1000defa:	2101      	moveq	r1, #1
1000defc:	61a3      	str	r3, [r4, #24]
1000defe:	6121      	str	r1, [r4, #16]
1000df00:	b1ad      	cbz	r5, 1000df2e <__d2b+0x82>
1000df02:	9b08      	ldr	r3, [sp, #32]
1000df04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
1000df08:	4405      	add	r5, r0
1000df0a:	601d      	str	r5, [r3, #0]
1000df0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000df0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1000df12:	6018      	str	r0, [r3, #0]
1000df14:	4620      	mov	r0, r4
1000df16:	b003      	add	sp, #12
1000df18:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df1a:	a801      	add	r0, sp, #4
1000df1c:	f7ff fcfc 	bl	1000d918 <__lo0bits>
1000df20:	9b01      	ldr	r3, [sp, #4]
1000df22:	6163      	str	r3, [r4, #20]
1000df24:	2101      	movs	r1, #1
1000df26:	3020      	adds	r0, #32
1000df28:	6121      	str	r1, [r4, #16]
1000df2a:	2d00      	cmp	r5, #0
1000df2c:	d1e9      	bne.n	1000df02 <__d2b+0x56>
1000df2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
1000df32:	9a08      	ldr	r2, [sp, #32]
1000df34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1000df38:	6010      	str	r0, [r2, #0]
1000df3a:	6918      	ldr	r0, [r3, #16]
1000df3c:	f7ff fccc 	bl	1000d8d8 <__hi0bits>
1000df40:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000df42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1000df46:	6018      	str	r0, [r3, #0]
1000df48:	4620      	mov	r0, r4
1000df4a:	b003      	add	sp, #12
1000df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df4e:	e9dd 2300 	ldrd	r2, r3, [sp]
1000df52:	6162      	str	r2, [r4, #20]
1000df54:	e7ce      	b.n	1000def4 <__d2b+0x48>
1000df56:	4602      	mov	r2, r0
1000df58:	4b02      	ldr	r3, [pc, #8]	; (1000df64 <__d2b+0xb8>)
1000df5a:	4803      	ldr	r0, [pc, #12]	; (1000df68 <__d2b+0xbc>)
1000df5c:	f240 310a 	movw	r1, #778	; 0x30a
1000df60:	f001 f944 	bl	1000f1ec <__assert_func>
1000df64:	10010bf0 	.word	0x10010bf0
1000df68:	10010d60 	.word	0x10010d60

1000df6c <__ratio>:
1000df6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000df70:	b083      	sub	sp, #12
1000df72:	4688      	mov	r8, r1
1000df74:	4669      	mov	r1, sp
1000df76:	4681      	mov	r9, r0
1000df78:	f7ff ff3c 	bl	1000ddf4 <__b2d>
1000df7c:	4604      	mov	r4, r0
1000df7e:	460d      	mov	r5, r1
1000df80:	4640      	mov	r0, r8
1000df82:	a901      	add	r1, sp, #4
1000df84:	f7ff ff36 	bl	1000ddf4 <__b2d>
1000df88:	460f      	mov	r7, r1
1000df8a:	e9dd 1300 	ldrd	r1, r3, [sp]
1000df8e:	4606      	mov	r6, r0
1000df90:	f8d9 2010 	ldr.w	r2, [r9, #16]
1000df94:	f8d8 0010 	ldr.w	r0, [r8, #16]
1000df98:	1acb      	subs	r3, r1, r3
1000df9a:	1a12      	subs	r2, r2, r0
1000df9c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1000dfa0:	2b00      	cmp	r3, #0
1000dfa2:	dd0b      	ble.n	1000dfbc <__ratio+0x50>
1000dfa4:	eb05 5903 	add.w	r9, r5, r3, lsl #20
1000dfa8:	464d      	mov	r5, r9
1000dfaa:	4632      	mov	r2, r6
1000dfac:	463b      	mov	r3, r7
1000dfae:	4620      	mov	r0, r4
1000dfb0:	4629      	mov	r1, r5
1000dfb2:	f001 ff91 	bl	1000fed8 <__aeabi_ddiv>
1000dfb6:	b003      	add	sp, #12
1000dfb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000dfbc:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
1000dfc0:	eb07 5103 	add.w	r1, r7, r3, lsl #20
1000dfc4:	460f      	mov	r7, r1
1000dfc6:	e7f0      	b.n	1000dfaa <__ratio+0x3e>

1000dfc8 <_mprec_log10>:
1000dfc8:	2817      	cmp	r0, #23
1000dfca:	b5d0      	push	{r4, r6, r7, lr}
1000dfcc:	4604      	mov	r4, r0
1000dfce:	dd0a      	ble.n	1000dfe6 <_mprec_log10+0x1e>
1000dfd0:	4908      	ldr	r1, [pc, #32]	; (1000dff4 <_mprec_log10+0x2c>)
1000dfd2:	4f09      	ldr	r7, [pc, #36]	; (1000dff8 <_mprec_log10+0x30>)
1000dfd4:	2000      	movs	r0, #0
1000dfd6:	2600      	movs	r6, #0
1000dfd8:	4632      	mov	r2, r6
1000dfda:	463b      	mov	r3, r7
1000dfdc:	f001 fe52 	bl	1000fc84 <__aeabi_dmul>
1000dfe0:	3c01      	subs	r4, #1
1000dfe2:	d1f9      	bne.n	1000dfd8 <_mprec_log10+0x10>
1000dfe4:	bdd0      	pop	{r4, r6, r7, pc}
1000dfe6:	4b05      	ldr	r3, [pc, #20]	; (1000dffc <_mprec_log10+0x34>)
1000dfe8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
1000dfec:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1000dff0:	bdd0      	pop	{r4, r6, r7, pc}
1000dff2:	bf00      	nop
1000dff4:	3ff00000 	.word	0x3ff00000
1000dff8:	40240000 	.word	0x40240000
1000dffc:	10010c38 	.word	0x10010c38

1000e000 <__copybits>:
1000e000:	b470      	push	{r4, r5, r6}
1000e002:	6914      	ldr	r4, [r2, #16]
1000e004:	1e4e      	subs	r6, r1, #1
1000e006:	f102 0314 	add.w	r3, r2, #20
1000e00a:	1176      	asrs	r6, r6, #5
1000e00c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1000e010:	3601      	adds	r6, #1
1000e012:	428b      	cmp	r3, r1
1000e014:	eb00 0686 	add.w	r6, r0, r6, lsl #2
1000e018:	d20c      	bcs.n	1000e034 <__copybits+0x34>
1000e01a:	1f04      	subs	r4, r0, #4
1000e01c:	f853 5b04 	ldr.w	r5, [r3], #4
1000e020:	f844 5f04 	str.w	r5, [r4, #4]!
1000e024:	4299      	cmp	r1, r3
1000e026:	d8f9      	bhi.n	1000e01c <__copybits+0x1c>
1000e028:	1a8b      	subs	r3, r1, r2
1000e02a:	3b15      	subs	r3, #21
1000e02c:	f023 0303 	bic.w	r3, r3, #3
1000e030:	3304      	adds	r3, #4
1000e032:	4418      	add	r0, r3
1000e034:	4286      	cmp	r6, r0
1000e036:	d904      	bls.n	1000e042 <__copybits+0x42>
1000e038:	2300      	movs	r3, #0
1000e03a:	f840 3b04 	str.w	r3, [r0], #4
1000e03e:	4286      	cmp	r6, r0
1000e040:	d8fb      	bhi.n	1000e03a <__copybits+0x3a>
1000e042:	bc70      	pop	{r4, r5, r6}
1000e044:	4770      	bx	lr
1000e046:	bf00      	nop

1000e048 <__any_on>:
1000e048:	6903      	ldr	r3, [r0, #16]
1000e04a:	114a      	asrs	r2, r1, #5
1000e04c:	4293      	cmp	r3, r2
1000e04e:	b410      	push	{r4}
1000e050:	f100 0414 	add.w	r4, r0, #20
1000e054:	da10      	bge.n	1000e078 <__any_on+0x30>
1000e056:	eb04 0383 	add.w	r3, r4, r3, lsl #2
1000e05a:	429c      	cmp	r4, r3
1000e05c:	d21e      	bcs.n	1000e09c <__any_on+0x54>
1000e05e:	f853 0c04 	ldr.w	r0, [r3, #-4]
1000e062:	3b04      	subs	r3, #4
1000e064:	b118      	cbz	r0, 1000e06e <__any_on+0x26>
1000e066:	e015      	b.n	1000e094 <__any_on+0x4c>
1000e068:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1000e06c:	b992      	cbnz	r2, 1000e094 <__any_on+0x4c>
1000e06e:	429c      	cmp	r4, r3
1000e070:	d3fa      	bcc.n	1000e068 <__any_on+0x20>
1000e072:	f85d 4b04 	ldr.w	r4, [sp], #4
1000e076:	4770      	bx	lr
1000e078:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000e07c:	dded      	ble.n	1000e05a <__any_on+0x12>
1000e07e:	f011 011f 	ands.w	r1, r1, #31
1000e082:	d0ea      	beq.n	1000e05a <__any_on+0x12>
1000e084:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1000e088:	fa20 f201 	lsr.w	r2, r0, r1
1000e08c:	fa02 f101 	lsl.w	r1, r2, r1
1000e090:	4288      	cmp	r0, r1
1000e092:	d0e2      	beq.n	1000e05a <__any_on+0x12>
1000e094:	2001      	movs	r0, #1
1000e096:	f85d 4b04 	ldr.w	r4, [sp], #4
1000e09a:	4770      	bx	lr
1000e09c:	2000      	movs	r0, #0
1000e09e:	e7e8      	b.n	1000e072 <__any_on+0x2a>

1000e0a0 <_realloc_r>:
1000e0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e0a4:	4617      	mov	r7, r2
1000e0a6:	2900      	cmp	r1, #0
1000e0a8:	f000 80bb 	beq.w	1000e222 <_realloc_r+0x182>
1000e0ac:	f107 040b 	add.w	r4, r7, #11
1000e0b0:	4681      	mov	r9, r0
1000e0b2:	460d      	mov	r5, r1
1000e0b4:	f7ff fb34 	bl	1000d720 <__malloc_lock>
1000e0b8:	2c16      	cmp	r4, #22
1000e0ba:	d85e      	bhi.n	1000e17a <_realloc_r+0xda>
1000e0bc:	2410      	movs	r4, #16
1000e0be:	4622      	mov	r2, r4
1000e0c0:	42a7      	cmp	r7, r4
1000e0c2:	d85f      	bhi.n	1000e184 <_realloc_r+0xe4>
1000e0c4:	f855 ec04 	ldr.w	lr, [r5, #-4]
1000e0c8:	f02e 0603 	bic.w	r6, lr, #3
1000e0cc:	f1a5 0808 	sub.w	r8, r5, #8
1000e0d0:	4296      	cmp	r6, r2
1000e0d2:	eb08 0a06 	add.w	sl, r8, r6
1000e0d6:	f280 8081 	bge.w	1000e1dc <_realloc_r+0x13c>
1000e0da:	4bcb      	ldr	r3, [pc, #812]	; (1000e408 <_realloc_r+0x368>)
1000e0dc:	f8da 0004 	ldr.w	r0, [sl, #4]
1000e0e0:	6899      	ldr	r1, [r3, #8]
1000e0e2:	4551      	cmp	r1, sl
1000e0e4:	f000 80b5 	beq.w	1000e252 <_realloc_r+0x1b2>
1000e0e8:	f020 0301 	bic.w	r3, r0, #1
1000e0ec:	4453      	add	r3, sl
1000e0ee:	685b      	ldr	r3, [r3, #4]
1000e0f0:	07db      	lsls	r3, r3, #31
1000e0f2:	f100 808a 	bmi.w	1000e20a <_realloc_r+0x16a>
1000e0f6:	f020 0003 	bic.w	r0, r0, #3
1000e0fa:	1833      	adds	r3, r6, r0
1000e0fc:	4293      	cmp	r3, r2
1000e0fe:	f280 8112 	bge.w	1000e326 <_realloc_r+0x286>
1000e102:	f01e 0f01 	tst.w	lr, #1
1000e106:	d10f      	bne.n	1000e128 <_realloc_r+0x88>
1000e108:	f855 3c08 	ldr.w	r3, [r5, #-8]
1000e10c:	eba8 0b03 	sub.w	fp, r8, r3
1000e110:	f8db 1004 	ldr.w	r1, [fp, #4]
1000e114:	f021 0103 	bic.w	r1, r1, #3
1000e118:	4408      	add	r0, r1
1000e11a:	1983      	adds	r3, r0, r6
1000e11c:	4293      	cmp	r3, r2
1000e11e:	f280 8116 	bge.w	1000e34e <_realloc_r+0x2ae>
1000e122:	1873      	adds	r3, r6, r1
1000e124:	4293      	cmp	r3, r2
1000e126:	da34      	bge.n	1000e192 <_realloc_r+0xf2>
1000e128:	4639      	mov	r1, r7
1000e12a:	4648      	mov	r0, r9
1000e12c:	f7fe fff2 	bl	1000d114 <_malloc_r>
1000e130:	4607      	mov	r7, r0
1000e132:	b1e0      	cbz	r0, 1000e16e <_realloc_r+0xce>
1000e134:	f855 3c04 	ldr.w	r3, [r5, #-4]
1000e138:	f023 0301 	bic.w	r3, r3, #1
1000e13c:	4443      	add	r3, r8
1000e13e:	f1a0 0208 	sub.w	r2, r0, #8
1000e142:	4293      	cmp	r3, r2
1000e144:	f000 80f7 	beq.w	1000e336 <_realloc_r+0x296>
1000e148:	1f32      	subs	r2, r6, #4
1000e14a:	2a24      	cmp	r2, #36	; 0x24
1000e14c:	f200 80fb 	bhi.w	1000e346 <_realloc_r+0x2a6>
1000e150:	2a13      	cmp	r2, #19
1000e152:	6829      	ldr	r1, [r5, #0]
1000e154:	f200 80c9 	bhi.w	1000e2ea <_realloc_r+0x24a>
1000e158:	4603      	mov	r3, r0
1000e15a:	462a      	mov	r2, r5
1000e15c:	6019      	str	r1, [r3, #0]
1000e15e:	6851      	ldr	r1, [r2, #4]
1000e160:	6059      	str	r1, [r3, #4]
1000e162:	6892      	ldr	r2, [r2, #8]
1000e164:	609a      	str	r2, [r3, #8]
1000e166:	4629      	mov	r1, r5
1000e168:	4648      	mov	r0, r9
1000e16a:	f7fe fc83 	bl	1000ca74 <_free_r>
1000e16e:	4648      	mov	r0, r9
1000e170:	f7ff fad8 	bl	1000d724 <__malloc_unlock>
1000e174:	4638      	mov	r0, r7
1000e176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e17a:	f024 0407 	bic.w	r4, r4, #7
1000e17e:	2c00      	cmp	r4, #0
1000e180:	4622      	mov	r2, r4
1000e182:	da9d      	bge.n	1000e0c0 <_realloc_r+0x20>
1000e184:	230c      	movs	r3, #12
1000e186:	f8c9 3000 	str.w	r3, [r9]
1000e18a:	2700      	movs	r7, #0
1000e18c:	4638      	mov	r0, r7
1000e18e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e192:	465f      	mov	r7, fp
1000e194:	f8db 100c 	ldr.w	r1, [fp, #12]
1000e198:	f857 0f08 	ldr.w	r0, [r7, #8]!
1000e19c:	1f32      	subs	r2, r6, #4
1000e19e:	2a24      	cmp	r2, #36	; 0x24
1000e1a0:	60c1      	str	r1, [r0, #12]
1000e1a2:	eb0b 0a03 	add.w	sl, fp, r3
1000e1a6:	6088      	str	r0, [r1, #8]
1000e1a8:	f200 80d9 	bhi.w	1000e35e <_realloc_r+0x2be>
1000e1ac:	2a13      	cmp	r2, #19
1000e1ae:	6829      	ldr	r1, [r5, #0]
1000e1b0:	f240 80d3 	bls.w	1000e35a <_realloc_r+0x2ba>
1000e1b4:	f8cb 1008 	str.w	r1, [fp, #8]
1000e1b8:	6869      	ldr	r1, [r5, #4]
1000e1ba:	f8cb 100c 	str.w	r1, [fp, #12]
1000e1be:	2a1b      	cmp	r2, #27
1000e1c0:	68a9      	ldr	r1, [r5, #8]
1000e1c2:	f200 80e0 	bhi.w	1000e386 <_realloc_r+0x2e6>
1000e1c6:	f10b 0210 	add.w	r2, fp, #16
1000e1ca:	3508      	adds	r5, #8
1000e1cc:	6011      	str	r1, [r2, #0]
1000e1ce:	6869      	ldr	r1, [r5, #4]
1000e1d0:	6051      	str	r1, [r2, #4]
1000e1d2:	68a9      	ldr	r1, [r5, #8]
1000e1d4:	6091      	str	r1, [r2, #8]
1000e1d6:	461e      	mov	r6, r3
1000e1d8:	46d8      	mov	r8, fp
1000e1da:	463d      	mov	r5, r7
1000e1dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
1000e1e0:	1b32      	subs	r2, r6, r4
1000e1e2:	2a0f      	cmp	r2, #15
1000e1e4:	f003 0301 	and.w	r3, r3, #1
1000e1e8:	d820      	bhi.n	1000e22c <_realloc_r+0x18c>
1000e1ea:	4333      	orrs	r3, r6
1000e1ec:	f8c8 3004 	str.w	r3, [r8, #4]
1000e1f0:	f8da 3004 	ldr.w	r3, [sl, #4]
1000e1f4:	f043 0301 	orr.w	r3, r3, #1
1000e1f8:	f8ca 3004 	str.w	r3, [sl, #4]
1000e1fc:	4648      	mov	r0, r9
1000e1fe:	462f      	mov	r7, r5
1000e200:	f7ff fa90 	bl	1000d724 <__malloc_unlock>
1000e204:	4638      	mov	r0, r7
1000e206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e20a:	f01e 0f01 	tst.w	lr, #1
1000e20e:	d18b      	bne.n	1000e128 <_realloc_r+0x88>
1000e210:	f855 3c08 	ldr.w	r3, [r5, #-8]
1000e214:	eba8 0b03 	sub.w	fp, r8, r3
1000e218:	f8db 1004 	ldr.w	r1, [fp, #4]
1000e21c:	f021 0103 	bic.w	r1, r1, #3
1000e220:	e77f      	b.n	1000e122 <_realloc_r+0x82>
1000e222:	4611      	mov	r1, r2
1000e224:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e228:	f7fe bf74 	b.w	1000d114 <_malloc_r>
1000e22c:	eb08 0104 	add.w	r1, r8, r4
1000e230:	4323      	orrs	r3, r4
1000e232:	f042 0201 	orr.w	r2, r2, #1
1000e236:	f8c8 3004 	str.w	r3, [r8, #4]
1000e23a:	604a      	str	r2, [r1, #4]
1000e23c:	f8da 3004 	ldr.w	r3, [sl, #4]
1000e240:	f043 0301 	orr.w	r3, r3, #1
1000e244:	3108      	adds	r1, #8
1000e246:	f8ca 3004 	str.w	r3, [sl, #4]
1000e24a:	4648      	mov	r0, r9
1000e24c:	f7fe fc12 	bl	1000ca74 <_free_r>
1000e250:	e7d4      	b.n	1000e1fc <_realloc_r+0x15c>
1000e252:	f020 0003 	bic.w	r0, r0, #3
1000e256:	1831      	adds	r1, r6, r0
1000e258:	f104 0c10 	add.w	ip, r4, #16
1000e25c:	4561      	cmp	r1, ip
1000e25e:	da4f      	bge.n	1000e300 <_realloc_r+0x260>
1000e260:	f01e 0f01 	tst.w	lr, #1
1000e264:	f47f af60 	bne.w	1000e128 <_realloc_r+0x88>
1000e268:	f855 1c08 	ldr.w	r1, [r5, #-8]
1000e26c:	eba8 0b01 	sub.w	fp, r8, r1
1000e270:	f8db 1004 	ldr.w	r1, [fp, #4]
1000e274:	f021 0103 	bic.w	r1, r1, #3
1000e278:	4408      	add	r0, r1
1000e27a:	eb00 0a06 	add.w	sl, r0, r6
1000e27e:	45d4      	cmp	ip, sl
1000e280:	f73f af4f 	bgt.w	1000e122 <_realloc_r+0x82>
1000e284:	465f      	mov	r7, fp
1000e286:	f8db 100c 	ldr.w	r1, [fp, #12]
1000e28a:	f857 0f08 	ldr.w	r0, [r7, #8]!
1000e28e:	1f32      	subs	r2, r6, #4
1000e290:	2a24      	cmp	r2, #36	; 0x24
1000e292:	60c1      	str	r1, [r0, #12]
1000e294:	6088      	str	r0, [r1, #8]
1000e296:	f200 8099 	bhi.w	1000e3cc <_realloc_r+0x32c>
1000e29a:	2a13      	cmp	r2, #19
1000e29c:	6829      	ldr	r1, [r5, #0]
1000e29e:	f240 8093 	bls.w	1000e3c8 <_realloc_r+0x328>
1000e2a2:	f8cb 1008 	str.w	r1, [fp, #8]
1000e2a6:	6869      	ldr	r1, [r5, #4]
1000e2a8:	f8cb 100c 	str.w	r1, [fp, #12]
1000e2ac:	2a1b      	cmp	r2, #27
1000e2ae:	68a9      	ldr	r1, [r5, #8]
1000e2b0:	f200 8092 	bhi.w	1000e3d8 <_realloc_r+0x338>
1000e2b4:	f10b 0210 	add.w	r2, fp, #16
1000e2b8:	3508      	adds	r5, #8
1000e2ba:	6011      	str	r1, [r2, #0]
1000e2bc:	6869      	ldr	r1, [r5, #4]
1000e2be:	6051      	str	r1, [r2, #4]
1000e2c0:	68a9      	ldr	r1, [r5, #8]
1000e2c2:	6091      	str	r1, [r2, #8]
1000e2c4:	eb0b 0104 	add.w	r1, fp, r4
1000e2c8:	ebaa 0204 	sub.w	r2, sl, r4
1000e2cc:	f042 0201 	orr.w	r2, r2, #1
1000e2d0:	6099      	str	r1, [r3, #8]
1000e2d2:	604a      	str	r2, [r1, #4]
1000e2d4:	f8db 3004 	ldr.w	r3, [fp, #4]
1000e2d8:	f003 0301 	and.w	r3, r3, #1
1000e2dc:	431c      	orrs	r4, r3
1000e2de:	4648      	mov	r0, r9
1000e2e0:	f8cb 4004 	str.w	r4, [fp, #4]
1000e2e4:	f7ff fa1e 	bl	1000d724 <__malloc_unlock>
1000e2e8:	e750      	b.n	1000e18c <_realloc_r+0xec>
1000e2ea:	6001      	str	r1, [r0, #0]
1000e2ec:	686b      	ldr	r3, [r5, #4]
1000e2ee:	6043      	str	r3, [r0, #4]
1000e2f0:	2a1b      	cmp	r2, #27
1000e2f2:	d83c      	bhi.n	1000e36e <_realloc_r+0x2ce>
1000e2f4:	f105 0208 	add.w	r2, r5, #8
1000e2f8:	f100 0308 	add.w	r3, r0, #8
1000e2fc:	68a9      	ldr	r1, [r5, #8]
1000e2fe:	e72d      	b.n	1000e15c <_realloc_r+0xbc>
1000e300:	eb08 0004 	add.w	r0, r8, r4
1000e304:	1b0a      	subs	r2, r1, r4
1000e306:	f042 0201 	orr.w	r2, r2, #1
1000e30a:	6098      	str	r0, [r3, #8]
1000e30c:	6042      	str	r2, [r0, #4]
1000e30e:	f855 3c04 	ldr.w	r3, [r5, #-4]
1000e312:	f003 0301 	and.w	r3, r3, #1
1000e316:	431c      	orrs	r4, r3
1000e318:	4648      	mov	r0, r9
1000e31a:	f845 4c04 	str.w	r4, [r5, #-4]
1000e31e:	f7ff fa01 	bl	1000d724 <__malloc_unlock>
1000e322:	462f      	mov	r7, r5
1000e324:	e732      	b.n	1000e18c <_realloc_r+0xec>
1000e326:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1000e32a:	461e      	mov	r6, r3
1000e32c:	60ca      	str	r2, [r1, #12]
1000e32e:	eb08 0a03 	add.w	sl, r8, r3
1000e332:	6091      	str	r1, [r2, #8]
1000e334:	e752      	b.n	1000e1dc <_realloc_r+0x13c>
1000e336:	f850 3c04 	ldr.w	r3, [r0, #-4]
1000e33a:	f023 0303 	bic.w	r3, r3, #3
1000e33e:	441e      	add	r6, r3
1000e340:	eb08 0a06 	add.w	sl, r8, r6
1000e344:	e74a      	b.n	1000e1dc <_realloc_r+0x13c>
1000e346:	4629      	mov	r1, r5
1000e348:	f7fb f9fa 	bl	10009740 <memmove>
1000e34c:	e70b      	b.n	1000e166 <_realloc_r+0xc6>
1000e34e:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1000e352:	465f      	mov	r7, fp
1000e354:	60ca      	str	r2, [r1, #12]
1000e356:	6091      	str	r1, [r2, #8]
1000e358:	e71c      	b.n	1000e194 <_realloc_r+0xf4>
1000e35a:	463a      	mov	r2, r7
1000e35c:	e736      	b.n	1000e1cc <_realloc_r+0x12c>
1000e35e:	4629      	mov	r1, r5
1000e360:	4638      	mov	r0, r7
1000e362:	461e      	mov	r6, r3
1000e364:	46d8      	mov	r8, fp
1000e366:	f7fb f9eb 	bl	10009740 <memmove>
1000e36a:	463d      	mov	r5, r7
1000e36c:	e736      	b.n	1000e1dc <_realloc_r+0x13c>
1000e36e:	68ab      	ldr	r3, [r5, #8]
1000e370:	6083      	str	r3, [r0, #8]
1000e372:	68eb      	ldr	r3, [r5, #12]
1000e374:	60c3      	str	r3, [r0, #12]
1000e376:	2a24      	cmp	r2, #36	; 0x24
1000e378:	d011      	beq.n	1000e39e <_realloc_r+0x2fe>
1000e37a:	f105 0210 	add.w	r2, r5, #16
1000e37e:	f100 0310 	add.w	r3, r0, #16
1000e382:	6929      	ldr	r1, [r5, #16]
1000e384:	e6ea      	b.n	1000e15c <_realloc_r+0xbc>
1000e386:	f8cb 1010 	str.w	r1, [fp, #16]
1000e38a:	68e9      	ldr	r1, [r5, #12]
1000e38c:	f8cb 1014 	str.w	r1, [fp, #20]
1000e390:	2a24      	cmp	r2, #36	; 0x24
1000e392:	d00e      	beq.n	1000e3b2 <_realloc_r+0x312>
1000e394:	6929      	ldr	r1, [r5, #16]
1000e396:	f10b 0218 	add.w	r2, fp, #24
1000e39a:	3510      	adds	r5, #16
1000e39c:	e716      	b.n	1000e1cc <_realloc_r+0x12c>
1000e39e:	692b      	ldr	r3, [r5, #16]
1000e3a0:	6103      	str	r3, [r0, #16]
1000e3a2:	696b      	ldr	r3, [r5, #20]
1000e3a4:	6143      	str	r3, [r0, #20]
1000e3a6:	69a9      	ldr	r1, [r5, #24]
1000e3a8:	f105 0218 	add.w	r2, r5, #24
1000e3ac:	f100 0318 	add.w	r3, r0, #24
1000e3b0:	e6d4      	b.n	1000e15c <_realloc_r+0xbc>
1000e3b2:	692a      	ldr	r2, [r5, #16]
1000e3b4:	f8cb 2018 	str.w	r2, [fp, #24]
1000e3b8:	696a      	ldr	r2, [r5, #20]
1000e3ba:	f8cb 201c 	str.w	r2, [fp, #28]
1000e3be:	69a9      	ldr	r1, [r5, #24]
1000e3c0:	f10b 0220 	add.w	r2, fp, #32
1000e3c4:	3518      	adds	r5, #24
1000e3c6:	e701      	b.n	1000e1cc <_realloc_r+0x12c>
1000e3c8:	463a      	mov	r2, r7
1000e3ca:	e776      	b.n	1000e2ba <_realloc_r+0x21a>
1000e3cc:	4629      	mov	r1, r5
1000e3ce:	4638      	mov	r0, r7
1000e3d0:	f7fb f9b6 	bl	10009740 <memmove>
1000e3d4:	4b0c      	ldr	r3, [pc, #48]	; (1000e408 <_realloc_r+0x368>)
1000e3d6:	e775      	b.n	1000e2c4 <_realloc_r+0x224>
1000e3d8:	f8cb 1010 	str.w	r1, [fp, #16]
1000e3dc:	68e9      	ldr	r1, [r5, #12]
1000e3de:	f8cb 1014 	str.w	r1, [fp, #20]
1000e3e2:	2a24      	cmp	r2, #36	; 0x24
1000e3e4:	d004      	beq.n	1000e3f0 <_realloc_r+0x350>
1000e3e6:	6929      	ldr	r1, [r5, #16]
1000e3e8:	f10b 0218 	add.w	r2, fp, #24
1000e3ec:	3510      	adds	r5, #16
1000e3ee:	e764      	b.n	1000e2ba <_realloc_r+0x21a>
1000e3f0:	692a      	ldr	r2, [r5, #16]
1000e3f2:	f8cb 2018 	str.w	r2, [fp, #24]
1000e3f6:	696a      	ldr	r2, [r5, #20]
1000e3f8:	f8cb 201c 	str.w	r2, [fp, #28]
1000e3fc:	69a9      	ldr	r1, [r5, #24]
1000e3fe:	f10b 0220 	add.w	r2, fp, #32
1000e402:	3518      	adds	r5, #24
1000e404:	e759      	b.n	1000e2ba <_realloc_r+0x21a>
1000e406:	bf00      	nop
1000e408:	200004d0 	.word	0x200004d0

1000e40c <_sbrk_r>:
1000e40c:	b538      	push	{r3, r4, r5, lr}
1000e40e:	4c07      	ldr	r4, [pc, #28]	; (1000e42c <_sbrk_r+0x20>)
1000e410:	2300      	movs	r3, #0
1000e412:	4605      	mov	r5, r0
1000e414:	4608      	mov	r0, r1
1000e416:	6023      	str	r3, [r4, #0]
1000e418:	f7f7 fcea 	bl	10005df0 <_sbrk>
1000e41c:	1c43      	adds	r3, r0, #1
1000e41e:	d000      	beq.n	1000e422 <_sbrk_r+0x16>
1000e420:	bd38      	pop	{r3, r4, r5, pc}
1000e422:	6823      	ldr	r3, [r4, #0]
1000e424:	2b00      	cmp	r3, #0
1000e426:	d0fb      	beq.n	1000e420 <_sbrk_r+0x14>
1000e428:	602b      	str	r3, [r5, #0]
1000e42a:	bd38      	pop	{r3, r4, r5, pc}
1000e42c:	2001132c 	.word	0x2001132c

1000e430 <__sread>:
1000e430:	b510      	push	{r4, lr}
1000e432:	460c      	mov	r4, r1
1000e434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000e438:	f001 f8be 	bl	1000f5b8 <_read_r>
1000e43c:	2800      	cmp	r0, #0
1000e43e:	db03      	blt.n	1000e448 <__sread+0x18>
1000e440:	6d23      	ldr	r3, [r4, #80]	; 0x50
1000e442:	4403      	add	r3, r0
1000e444:	6523      	str	r3, [r4, #80]	; 0x50
1000e446:	bd10      	pop	{r4, pc}
1000e448:	89a3      	ldrh	r3, [r4, #12]
1000e44a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1000e44e:	81a3      	strh	r3, [r4, #12]
1000e450:	bd10      	pop	{r4, pc}
1000e452:	bf00      	nop

1000e454 <__seofread>:
1000e454:	2000      	movs	r0, #0
1000e456:	4770      	bx	lr

1000e458 <__swrite>:
1000e458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000e45c:	4616      	mov	r6, r2
1000e45e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000e462:	461f      	mov	r7, r3
1000e464:	05d3      	lsls	r3, r2, #23
1000e466:	460c      	mov	r4, r1
1000e468:	4605      	mov	r5, r0
1000e46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000e46e:	d409      	bmi.n	1000e484 <__swrite+0x2c>
1000e470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1000e474:	81a2      	strh	r2, [r4, #12]
1000e476:	463b      	mov	r3, r7
1000e478:	4632      	mov	r2, r6
1000e47a:	4628      	mov	r0, r5
1000e47c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000e480:	f000 be9e 	b.w	1000f1c0 <_write_r>
1000e484:	2200      	movs	r2, #0
1000e486:	2302      	movs	r3, #2
1000e488:	f001 f860 	bl	1000f54c <_lseek_r>
1000e48c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000e490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000e494:	e7ec      	b.n	1000e470 <__swrite+0x18>
1000e496:	bf00      	nop

1000e498 <__sseek>:
1000e498:	b510      	push	{r4, lr}
1000e49a:	460c      	mov	r4, r1
1000e49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000e4a0:	f001 f854 	bl	1000f54c <_lseek_r>
1000e4a4:	89a3      	ldrh	r3, [r4, #12]
1000e4a6:	1c42      	adds	r2, r0, #1
1000e4a8:	bf0e      	itee	eq
1000e4aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1000e4ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1000e4b2:	6520      	strne	r0, [r4, #80]	; 0x50
1000e4b4:	81a3      	strh	r3, [r4, #12]
1000e4b6:	bd10      	pop	{r4, pc}

1000e4b8 <__sclose>:
1000e4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000e4bc:	f000 beea 	b.w	1000f294 <_close_r>

1000e4c0 <__sprint_r.part.0>:
1000e4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e4c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1000e4c6:	049c      	lsls	r4, r3, #18
1000e4c8:	4693      	mov	fp, r2
1000e4ca:	d52d      	bpl.n	1000e528 <__sprint_r.part.0+0x68>
1000e4cc:	6893      	ldr	r3, [r2, #8]
1000e4ce:	6812      	ldr	r2, [r2, #0]
1000e4d0:	b343      	cbz	r3, 1000e524 <__sprint_r.part.0+0x64>
1000e4d2:	460e      	mov	r6, r1
1000e4d4:	4607      	mov	r7, r0
1000e4d6:	f102 0908 	add.w	r9, r2, #8
1000e4da:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1000e4de:	ea5f 089a 	movs.w	r8, sl, lsr #2
1000e4e2:	d015      	beq.n	1000e510 <__sprint_r.part.0+0x50>
1000e4e4:	3d04      	subs	r5, #4
1000e4e6:	2400      	movs	r4, #0
1000e4e8:	e001      	b.n	1000e4ee <__sprint_r.part.0+0x2e>
1000e4ea:	45a0      	cmp	r8, r4
1000e4ec:	d00e      	beq.n	1000e50c <__sprint_r.part.0+0x4c>
1000e4ee:	4632      	mov	r2, r6
1000e4f0:	f855 1f04 	ldr.w	r1, [r5, #4]!
1000e4f4:	4638      	mov	r0, r7
1000e4f6:	f000 ffa1 	bl	1000f43c <_fputwc_r>
1000e4fa:	1c43      	adds	r3, r0, #1
1000e4fc:	f104 0401 	add.w	r4, r4, #1
1000e500:	d1f3      	bne.n	1000e4ea <__sprint_r.part.0+0x2a>
1000e502:	2300      	movs	r3, #0
1000e504:	e9cb 3301 	strd	r3, r3, [fp, #4]
1000e508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e50c:	f8db 3008 	ldr.w	r3, [fp, #8]
1000e510:	f02a 0a03 	bic.w	sl, sl, #3
1000e514:	eba3 030a 	sub.w	r3, r3, sl
1000e518:	f8cb 3008 	str.w	r3, [fp, #8]
1000e51c:	f109 0908 	add.w	r9, r9, #8
1000e520:	2b00      	cmp	r3, #0
1000e522:	d1da      	bne.n	1000e4da <__sprint_r.part.0+0x1a>
1000e524:	2000      	movs	r0, #0
1000e526:	e7ec      	b.n	1000e502 <__sprint_r.part.0+0x42>
1000e528:	f7fe fb9e 	bl	1000cc68 <__sfvwrite_r>
1000e52c:	2300      	movs	r3, #0
1000e52e:	e9cb 3301 	strd	r3, r3, [fp, #4]
1000e532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e536:	bf00      	nop

1000e538 <__sprint_r>:
1000e538:	6893      	ldr	r3, [r2, #8]
1000e53a:	b103      	cbz	r3, 1000e53e <__sprint_r+0x6>
1000e53c:	e7c0      	b.n	1000e4c0 <__sprint_r.part.0>
1000e53e:	b410      	push	{r4}
1000e540:	4618      	mov	r0, r3
1000e542:	6053      	str	r3, [r2, #4]
1000e544:	f85d 4b04 	ldr.w	r4, [sp], #4
1000e548:	4770      	bx	lr
1000e54a:	bf00      	nop

1000e54c <_vfiprintf_r>:
1000e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e550:	b0ab      	sub	sp, #172	; 0xac
1000e552:	461c      	mov	r4, r3
1000e554:	468a      	mov	sl, r1
1000e556:	4690      	mov	r8, r2
1000e558:	e9cd 3004 	strd	r3, r0, [sp, #16]
1000e55c:	b118      	cbz	r0, 1000e566 <_vfiprintf_r+0x1a>
1000e55e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000e560:	2b00      	cmp	r3, #0
1000e562:	f000 82ff 	beq.w	1000eb64 <_vfiprintf_r+0x618>
1000e566:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
1000e56a:	b28a      	uxth	r2, r1
1000e56c:	0490      	lsls	r0, r2, #18
1000e56e:	d40a      	bmi.n	1000e586 <_vfiprintf_r+0x3a>
1000e570:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
1000e574:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
1000e578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
1000e57c:	f8aa 200c 	strh.w	r2, [sl, #12]
1000e580:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
1000e584:	b292      	uxth	r2, r2
1000e586:	0711      	lsls	r1, r2, #28
1000e588:	f140 80ca 	bpl.w	1000e720 <_vfiprintf_r+0x1d4>
1000e58c:	f8da 3010 	ldr.w	r3, [sl, #16]
1000e590:	2b00      	cmp	r3, #0
1000e592:	f000 80c5 	beq.w	1000e720 <_vfiprintf_r+0x1d4>
1000e596:	f002 021a 	and.w	r2, r2, #26
1000e59a:	2a0a      	cmp	r2, #10
1000e59c:	f000 80ce 	beq.w	1000e73c <_vfiprintf_r+0x1f0>
1000e5a0:	2300      	movs	r3, #0
1000e5a2:	9308      	str	r3, [sp, #32]
1000e5a4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1000e5a8:	9302      	str	r3, [sp, #8]
1000e5aa:	ab1a      	add	r3, sp, #104	; 0x68
1000e5ac:	930d      	str	r3, [sp, #52]	; 0x34
1000e5ae:	469b      	mov	fp, r3
1000e5b0:	f898 3000 	ldrb.w	r3, [r8]
1000e5b4:	2b00      	cmp	r3, #0
1000e5b6:	f000 80df 	beq.w	1000e778 <_vfiprintf_r+0x22c>
1000e5ba:	2b25      	cmp	r3, #37	; 0x25
1000e5bc:	f000 851c 	beq.w	1000eff8 <_vfiprintf_r+0xaac>
1000e5c0:	4645      	mov	r5, r8
1000e5c2:	e003      	b.n	1000e5cc <_vfiprintf_r+0x80>
1000e5c4:	2b25      	cmp	r3, #37	; 0x25
1000e5c6:	f000 80c6 	beq.w	1000e756 <_vfiprintf_r+0x20a>
1000e5ca:	4625      	mov	r5, r4
1000e5cc:	786b      	ldrb	r3, [r5, #1]
1000e5ce:	1c6c      	adds	r4, r5, #1
1000e5d0:	2b00      	cmp	r3, #0
1000e5d2:	d1f7      	bne.n	1000e5c4 <_vfiprintf_r+0x78>
1000e5d4:	ebb4 0608 	subs.w	r6, r4, r8
1000e5d8:	f000 80ce 	beq.w	1000e778 <_vfiprintf_r+0x22c>
1000e5dc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
1000e5e0:	3301      	adds	r3, #1
1000e5e2:	4432      	add	r2, r6
1000e5e4:	2b07      	cmp	r3, #7
1000e5e6:	f8cb 8000 	str.w	r8, [fp]
1000e5ea:	f8cb 6004 	str.w	r6, [fp, #4]
1000e5ee:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
1000e5f2:	f300 80b5 	bgt.w	1000e760 <_vfiprintf_r+0x214>
1000e5f6:	f10b 0b08 	add.w	fp, fp, #8
1000e5fa:	9a02      	ldr	r2, [sp, #8]
1000e5fc:	786b      	ldrb	r3, [r5, #1]
1000e5fe:	4432      	add	r2, r6
1000e600:	9202      	str	r2, [sp, #8]
1000e602:	2b00      	cmp	r3, #0
1000e604:	f000 80b8 	beq.w	1000e778 <_vfiprintf_r+0x22c>
1000e608:	f04f 0300 	mov.w	r3, #0
1000e60c:	2100      	movs	r1, #0
1000e60e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
1000e612:	7863      	ldrb	r3, [r4, #1]
1000e614:	9103      	str	r1, [sp, #12]
1000e616:	4608      	mov	r0, r1
1000e618:	460f      	mov	r7, r1
1000e61a:	f104 0801 	add.w	r8, r4, #1
1000e61e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1000e622:	f108 0801 	add.w	r8, r8, #1
1000e626:	f1a3 0220 	sub.w	r2, r3, #32
1000e62a:	2a58      	cmp	r2, #88	; 0x58
1000e62c:	f200 829d 	bhi.w	1000eb6a <_vfiprintf_r+0x61e>
1000e630:	e8df f012 	tbh	[pc, r2, lsl #1]
1000e634:	029b00f9 	.word	0x029b00f9
1000e638:	00f4029b 	.word	0x00f4029b
1000e63c:	029b029b 	.word	0x029b029b
1000e640:	029b029b 	.word	0x029b029b
1000e644:	029b029b 	.word	0x029b029b
1000e648:	00e400e9 	.word	0x00e400e9
1000e64c:	00df029b 	.word	0x00df029b
1000e650:	029b00c6 	.word	0x029b00c6
1000e654:	00b200c1 	.word	0x00b200c1
1000e658:	00b200b2 	.word	0x00b200b2
1000e65c:	00b200b2 	.word	0x00b200b2
1000e660:	00b200b2 	.word	0x00b200b2
1000e664:	00b200b2 	.word	0x00b200b2
1000e668:	029b029b 	.word	0x029b029b
1000e66c:	029b029b 	.word	0x029b029b
1000e670:	029b029b 	.word	0x029b029b
1000e674:	029b029b 	.word	0x029b029b
1000e678:	029b029b 	.word	0x029b029b
1000e67c:	029b0228 	.word	0x029b0228
1000e680:	029b029b 	.word	0x029b029b
1000e684:	029b029b 	.word	0x029b029b
1000e688:	029b029b 	.word	0x029b029b
1000e68c:	029b029b 	.word	0x029b029b
1000e690:	0067029b 	.word	0x0067029b
1000e694:	029b029b 	.word	0x029b029b
1000e698:	029b029b 	.word	0x029b029b
1000e69c:	0059029b 	.word	0x0059029b
1000e6a0:	029b029b 	.word	0x029b029b
1000e6a4:	029b0213 	.word	0x029b0213
1000e6a8:	029b029b 	.word	0x029b029b
1000e6ac:	029b029b 	.word	0x029b029b
1000e6b0:	029b029b 	.word	0x029b029b
1000e6b4:	029b029b 	.word	0x029b029b
1000e6b8:	0184029b 	.word	0x0184029b
1000e6bc:	029b0157 	.word	0x029b0157
1000e6c0:	029b029b 	.word	0x029b029b
1000e6c4:	01570152 	.word	0x01570152
1000e6c8:	029b029b 	.word	0x029b029b
1000e6cc:	029b0145 	.word	0x029b0145
1000e6d0:	0069026e 	.word	0x0069026e
1000e6d4:	0140023f 	.word	0x0140023f
1000e6d8:	0120029b 	.word	0x0120029b
1000e6dc:	005b029b 	.word	0x005b029b
1000e6e0:	029b029b 	.word	0x029b029b
1000e6e4:	0101      	.short	0x0101
1000e6e6:	f047 0710 	orr.w	r7, r7, #16
1000e6ea:	06ba      	lsls	r2, r7, #26
1000e6ec:	9b04      	ldr	r3, [sp, #16]
1000e6ee:	f140 8222 	bpl.w	1000eb36 <_vfiprintf_r+0x5ea>
1000e6f2:	3307      	adds	r3, #7
1000e6f4:	f023 0307 	bic.w	r3, r3, #7
1000e6f8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1000e6fc:	9304      	str	r3, [sp, #16]
1000e6fe:	2301      	movs	r3, #1
1000e700:	e1e5      	b.n	1000eace <_vfiprintf_r+0x582>
1000e702:	f047 0710 	orr.w	r7, r7, #16
1000e706:	f017 0320 	ands.w	r3, r7, #32
1000e70a:	f000 8221 	beq.w	1000eb50 <_vfiprintf_r+0x604>
1000e70e:	9b04      	ldr	r3, [sp, #16]
1000e710:	3307      	adds	r3, #7
1000e712:	f023 0307 	bic.w	r3, r3, #7
1000e716:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1000e71a:	9304      	str	r3, [sp, #16]
1000e71c:	2300      	movs	r3, #0
1000e71e:	e1d6      	b.n	1000eace <_vfiprintf_r+0x582>
1000e720:	4651      	mov	r1, sl
1000e722:	9805      	ldr	r0, [sp, #20]
1000e724:	f7fc fef6 	bl	1000b514 <__swsetup_r>
1000e728:	2800      	cmp	r0, #0
1000e72a:	f040 84f4 	bne.w	1000f116 <_vfiprintf_r+0xbca>
1000e72e:	f8ba 200c 	ldrh.w	r2, [sl, #12]
1000e732:	f002 021a 	and.w	r2, r2, #26
1000e736:	2a0a      	cmp	r2, #10
1000e738:	f47f af32 	bne.w	1000e5a0 <_vfiprintf_r+0x54>
1000e73c:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
1000e740:	2b00      	cmp	r3, #0
1000e742:	f6ff af2d 	blt.w	1000e5a0 <_vfiprintf_r+0x54>
1000e746:	4623      	mov	r3, r4
1000e748:	4642      	mov	r2, r8
1000e74a:	4651      	mov	r1, sl
1000e74c:	9805      	ldr	r0, [sp, #20]
1000e74e:	f000 fd01 	bl	1000f154 <__sbprintf>
1000e752:	9002      	str	r0, [sp, #8]
1000e754:	e01c      	b.n	1000e790 <_vfiprintf_r+0x244>
1000e756:	ebb4 0608 	subs.w	r6, r4, r8
1000e75a:	f43f af55 	beq.w	1000e608 <_vfiprintf_r+0xbc>
1000e75e:	e73d      	b.n	1000e5dc <_vfiprintf_r+0x90>
1000e760:	2a00      	cmp	r2, #0
1000e762:	f000 840f 	beq.w	1000ef84 <_vfiprintf_r+0xa38>
1000e766:	aa0d      	add	r2, sp, #52	; 0x34
1000e768:	4651      	mov	r1, sl
1000e76a:	9805      	ldr	r0, [sp, #20]
1000e76c:	f7ff fea8 	bl	1000e4c0 <__sprint_r.part.0>
1000e770:	b948      	cbnz	r0, 1000e786 <_vfiprintf_r+0x23a>
1000e772:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000e776:	e740      	b.n	1000e5fa <_vfiprintf_r+0xae>
1000e778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000e77a:	b123      	cbz	r3, 1000e786 <_vfiprintf_r+0x23a>
1000e77c:	9805      	ldr	r0, [sp, #20]
1000e77e:	aa0d      	add	r2, sp, #52	; 0x34
1000e780:	4651      	mov	r1, sl
1000e782:	f7ff fe9d 	bl	1000e4c0 <__sprint_r.part.0>
1000e786:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1000e78a:	065b      	lsls	r3, r3, #25
1000e78c:	f100 84c3 	bmi.w	1000f116 <_vfiprintf_r+0xbca>
1000e790:	9802      	ldr	r0, [sp, #8]
1000e792:	b02b      	add	sp, #172	; 0xac
1000e794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e798:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1000e79c:	2400      	movs	r4, #0
1000e79e:	f818 3b01 	ldrb.w	r3, [r8], #1
1000e7a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
1000e7a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
1000e7aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1000e7ae:	2a09      	cmp	r2, #9
1000e7b0:	d9f5      	bls.n	1000e79e <_vfiprintf_r+0x252>
1000e7b2:	9403      	str	r4, [sp, #12]
1000e7b4:	e737      	b.n	1000e626 <_vfiprintf_r+0xda>
1000e7b6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
1000e7ba:	f898 3000 	ldrb.w	r3, [r8]
1000e7be:	e730      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e7c0:	4644      	mov	r4, r8
1000e7c2:	f814 3b01 	ldrb.w	r3, [r4], #1
1000e7c6:	2b2a      	cmp	r3, #42	; 0x2a
1000e7c8:	f000 84aa 	beq.w	1000f120 <_vfiprintf_r+0xbd4>
1000e7cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1000e7d0:	2a09      	cmp	r2, #9
1000e7d2:	46a0      	mov	r8, r4
1000e7d4:	f04f 0900 	mov.w	r9, #0
1000e7d8:	f63f af25 	bhi.w	1000e626 <_vfiprintf_r+0xda>
1000e7dc:	f818 3b01 	ldrb.w	r3, [r8], #1
1000e7e0:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1000e7e4:	eb02 0949 	add.w	r9, r2, r9, lsl #1
1000e7e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1000e7ec:	2a09      	cmp	r2, #9
1000e7ee:	d9f5      	bls.n	1000e7dc <_vfiprintf_r+0x290>
1000e7f0:	e719      	b.n	1000e626 <_vfiprintf_r+0xda>
1000e7f2:	f898 3000 	ldrb.w	r3, [r8]
1000e7f6:	f047 0704 	orr.w	r7, r7, #4
1000e7fa:	e712      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e7fc:	f898 3000 	ldrb.w	r3, [r8]
1000e800:	2101      	movs	r1, #1
1000e802:	202b      	movs	r0, #43	; 0x2b
1000e804:	e70d      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e806:	9a04      	ldr	r2, [sp, #16]
1000e808:	f898 3000 	ldrb.w	r3, [r8]
1000e80c:	f852 4b04 	ldr.w	r4, [r2], #4
1000e810:	9403      	str	r4, [sp, #12]
1000e812:	2c00      	cmp	r4, #0
1000e814:	f2c0 8415 	blt.w	1000f042 <_vfiprintf_r+0xaf6>
1000e818:	9204      	str	r2, [sp, #16]
1000e81a:	e702      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e81c:	f047 0701 	orr.w	r7, r7, #1
1000e820:	f898 3000 	ldrb.w	r3, [r8]
1000e824:	e6fd      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e826:	f898 3000 	ldrb.w	r3, [r8]
1000e82a:	2800      	cmp	r0, #0
1000e82c:	f47f aef9 	bne.w	1000e622 <_vfiprintf_r+0xd6>
1000e830:	2101      	movs	r1, #1
1000e832:	2020      	movs	r0, #32
1000e834:	e6f5      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e836:	2900      	cmp	r1, #0
1000e838:	f040 845b 	bne.w	1000f0f2 <_vfiprintf_r+0xba6>
1000e83c:	4ac2      	ldr	r2, [pc, #776]	; (1000eb48 <_vfiprintf_r+0x5fc>)
1000e83e:	9208      	str	r2, [sp, #32]
1000e840:	06b8      	lsls	r0, r7, #26
1000e842:	9a04      	ldr	r2, [sp, #16]
1000e844:	f140 8112 	bpl.w	1000ea6c <_vfiprintf_r+0x520>
1000e848:	3207      	adds	r2, #7
1000e84a:	f022 0207 	bic.w	r2, r2, #7
1000e84e:	e8f2 4502 	ldrd	r4, r5, [r2], #8
1000e852:	9204      	str	r2, [sp, #16]
1000e854:	07fe      	lsls	r6, r7, #31
1000e856:	f140 8198 	bpl.w	1000eb8a <_vfiprintf_r+0x63e>
1000e85a:	ea54 0205 	orrs.w	r2, r4, r5
1000e85e:	f000 8194 	beq.w	1000eb8a <_vfiprintf_r+0x63e>
1000e862:	2230      	movs	r2, #48	; 0x30
1000e864:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
1000e868:	f047 0702 	orr.w	r7, r7, #2
1000e86c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
1000e870:	2302      	movs	r3, #2
1000e872:	e12c      	b.n	1000eace <_vfiprintf_r+0x582>
1000e874:	9c04      	ldr	r4, [sp, #16]
1000e876:	f854 6b04 	ldr.w	r6, [r4], #4
1000e87a:	f04f 0300 	mov.w	r3, #0
1000e87e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
1000e882:	2e00      	cmp	r6, #0
1000e884:	f000 8407 	beq.w	1000f096 <_vfiprintf_r+0xb4a>
1000e888:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1000e88c:	f000 83de 	beq.w	1000f04c <_vfiprintf_r+0xb00>
1000e890:	464a      	mov	r2, r9
1000e892:	2100      	movs	r1, #0
1000e894:	4630      	mov	r0, r6
1000e896:	f7fe fef3 	bl	1000d680 <memchr>
1000e89a:	2800      	cmp	r0, #0
1000e89c:	f000 8419 	beq.w	1000f0d2 <_vfiprintf_r+0xb86>
1000e8a0:	1b83      	subs	r3, r0, r6
1000e8a2:	9301      	str	r3, [sp, #4]
1000e8a4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1000e8a8:	9404      	str	r4, [sp, #16]
1000e8aa:	9700      	str	r7, [sp, #0]
1000e8ac:	9306      	str	r3, [sp, #24]
1000e8ae:	f04f 0900 	mov.w	r9, #0
1000e8b2:	e1af      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000e8b4:	f047 0720 	orr.w	r7, r7, #32
1000e8b8:	f898 3000 	ldrb.w	r3, [r8]
1000e8bc:	e6b1      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e8be:	f898 3000 	ldrb.w	r3, [r8]
1000e8c2:	2b6c      	cmp	r3, #108	; 0x6c
1000e8c4:	bf03      	ittte	eq
1000e8c6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
1000e8ca:	f047 0720 	orreq.w	r7, r7, #32
1000e8ce:	f108 0801 	addeq.w	r8, r8, #1
1000e8d2:	f047 0710 	orrne.w	r7, r7, #16
1000e8d6:	e6a4      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e8d8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
1000e8dc:	f898 3000 	ldrb.w	r3, [r8]
1000e8e0:	e69f      	b.n	1000e622 <_vfiprintf_r+0xd6>
1000e8e2:	2900      	cmp	r1, #0
1000e8e4:	f040 8401 	bne.w	1000f0ea <_vfiprintf_r+0xb9e>
1000e8e8:	06ba      	lsls	r2, r7, #26
1000e8ea:	9b04      	ldr	r3, [sp, #16]
1000e8ec:	f140 80d3 	bpl.w	1000ea96 <_vfiprintf_r+0x54a>
1000e8f0:	3307      	adds	r3, #7
1000e8f2:	f023 0307 	bic.w	r3, r3, #7
1000e8f6:	4619      	mov	r1, r3
1000e8f8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1000e8fc:	9104      	str	r1, [sp, #16]
1000e8fe:	4614      	mov	r4, r2
1000e900:	461d      	mov	r5, r3
1000e902:	2a00      	cmp	r2, #0
1000e904:	f173 0300 	sbcs.w	r3, r3, #0
1000e908:	f2c0 8349 	blt.w	1000ef9e <_vfiprintf_r+0xa52>
1000e90c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1000e910:	9306      	str	r3, [sp, #24]
1000e912:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1000e916:	f000 8314 	beq.w	1000ef42 <_vfiprintf_r+0x9f6>
1000e91a:	f027 0380 	bic.w	r3, r7, #128	; 0x80
1000e91e:	9300      	str	r3, [sp, #0]
1000e920:	ea54 0305 	orrs.w	r3, r4, r5
1000e924:	f040 830c 	bne.w	1000ef40 <_vfiprintf_r+0x9f4>
1000e928:	f1b9 0f00 	cmp.w	r9, #0
1000e92c:	f040 83cf 	bne.w	1000f0ce <_vfiprintf_r+0xb82>
1000e930:	f04f 0900 	mov.w	r9, #0
1000e934:	f8cd 9004 	str.w	r9, [sp, #4]
1000e938:	ae1a      	add	r6, sp, #104	; 0x68
1000e93a:	e16b      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000e93c:	9b04      	ldr	r3, [sp, #16]
1000e93e:	2501      	movs	r5, #1
1000e940:	f853 2b04 	ldr.w	r2, [r3], #4
1000e944:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
1000e948:	f04f 0100 	mov.w	r1, #0
1000e94c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
1000e950:	9304      	str	r3, [sp, #16]
1000e952:	9501      	str	r5, [sp, #4]
1000e954:	ae10      	add	r6, sp, #64	; 0x40
1000e956:	9700      	str	r7, [sp, #0]
1000e958:	f04f 0900 	mov.w	r9, #0
1000e95c:	9b00      	ldr	r3, [sp, #0]
1000e95e:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
1000e962:	f013 0302 	ands.w	r3, r3, #2
1000e966:	9306      	str	r3, [sp, #24]
1000e968:	9b00      	ldr	r3, [sp, #0]
1000e96a:	bf18      	it	ne
1000e96c:	3502      	addne	r5, #2
1000e96e:	1c50      	adds	r0, r2, #1
1000e970:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1000e974:	4601      	mov	r1, r0
1000e976:	9307      	str	r3, [sp, #28]
1000e978:	d104      	bne.n	1000e984 <_vfiprintf_r+0x438>
1000e97a:	9b03      	ldr	r3, [sp, #12]
1000e97c:	1b5c      	subs	r4, r3, r5
1000e97e:	2c00      	cmp	r4, #0
1000e980:	f300 8224 	bgt.w	1000edcc <_vfiprintf_r+0x880>
1000e984:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
1000e988:	f10b 0008 	add.w	r0, fp, #8
1000e98c:	b17c      	cbz	r4, 1000e9ae <_vfiprintf_r+0x462>
1000e98e:	f10c 0c01 	add.w	ip, ip, #1
1000e992:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
1000e996:	2201      	movs	r2, #1
1000e998:	2907      	cmp	r1, #7
1000e99a:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	; 0x38
1000e99e:	e9cb 4200 	strd	r4, r2, [fp]
1000e9a2:	f300 81f3 	bgt.w	1000ed8c <_vfiprintf_r+0x840>
1000e9a6:	460a      	mov	r2, r1
1000e9a8:	4683      	mov	fp, r0
1000e9aa:	3101      	adds	r1, #1
1000e9ac:	3008      	adds	r0, #8
1000e9ae:	9b06      	ldr	r3, [sp, #24]
1000e9b0:	b1e3      	cbz	r3, 1000e9ec <_vfiprintf_r+0x4a0>
1000e9b2:	f10c 0c02 	add.w	ip, ip, #2
1000e9b6:	aa0c      	add	r2, sp, #48	; 0x30
1000e9b8:	2302      	movs	r3, #2
1000e9ba:	2907      	cmp	r1, #7
1000e9bc:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	; 0x38
1000e9c0:	e9cb 2300 	strd	r2, r3, [fp]
1000e9c4:	f340 81fc 	ble.w	1000edc0 <_vfiprintf_r+0x874>
1000e9c8:	f1bc 0f00 	cmp.w	ip, #0
1000e9cc:	f000 82fd 	beq.w	1000efca <_vfiprintf_r+0xa7e>
1000e9d0:	aa0d      	add	r2, sp, #52	; 0x34
1000e9d2:	4651      	mov	r1, sl
1000e9d4:	9805      	ldr	r0, [sp, #20]
1000e9d6:	f7ff fd73 	bl	1000e4c0 <__sprint_r.part.0>
1000e9da:	2800      	cmp	r0, #0
1000e9dc:	f47f aed3 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000e9e0:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
1000e9e4:	a81c      	add	r0, sp, #112	; 0x70
1000e9e6:	1c51      	adds	r1, r2, #1
1000e9e8:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000e9ec:	9b07      	ldr	r3, [sp, #28]
1000e9ee:	2b80      	cmp	r3, #128	; 0x80
1000e9f0:	f000 811b 	beq.w	1000ec2a <_vfiprintf_r+0x6de>
1000e9f4:	9b01      	ldr	r3, [sp, #4]
1000e9f6:	eba9 0703 	sub.w	r7, r9, r3
1000e9fa:	2f00      	cmp	r7, #0
1000e9fc:	f300 8172 	bgt.w	1000ece4 <_vfiprintf_r+0x798>
1000ea00:	9a01      	ldr	r2, [sp, #4]
1000ea02:	910e      	str	r1, [sp, #56]	; 0x38
1000ea04:	4613      	mov	r3, r2
1000ea06:	4463      	add	r3, ip
1000ea08:	2907      	cmp	r1, #7
1000ea0a:	930f      	str	r3, [sp, #60]	; 0x3c
1000ea0c:	e9cb 6200 	strd	r6, r2, [fp]
1000ea10:	dd0c      	ble.n	1000ea2c <_vfiprintf_r+0x4e0>
1000ea12:	2b00      	cmp	r3, #0
1000ea14:	f000 8223 	beq.w	1000ee5e <_vfiprintf_r+0x912>
1000ea18:	aa0d      	add	r2, sp, #52	; 0x34
1000ea1a:	4651      	mov	r1, sl
1000ea1c:	9805      	ldr	r0, [sp, #20]
1000ea1e:	f7ff fd4f 	bl	1000e4c0 <__sprint_r.part.0>
1000ea22:	2800      	cmp	r0, #0
1000ea24:	f47f aeaf 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000ea28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ea2a:	a81a      	add	r0, sp, #104	; 0x68
1000ea2c:	9a00      	ldr	r2, [sp, #0]
1000ea2e:	0752      	lsls	r2, r2, #29
1000ea30:	d504      	bpl.n	1000ea3c <_vfiprintf_r+0x4f0>
1000ea32:	9a03      	ldr	r2, [sp, #12]
1000ea34:	1b54      	subs	r4, r2, r5
1000ea36:	2c00      	cmp	r4, #0
1000ea38:	f300 821a 	bgt.w	1000ee70 <_vfiprintf_r+0x924>
1000ea3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
1000ea40:	42a9      	cmp	r1, r5
1000ea42:	bfac      	ite	ge
1000ea44:	1852      	addge	r2, r2, r1
1000ea46:	1952      	addlt	r2, r2, r5
1000ea48:	9202      	str	r2, [sp, #8]
1000ea4a:	2b00      	cmp	r3, #0
1000ea4c:	f040 8190 	bne.w	1000ed70 <_vfiprintf_r+0x824>
1000ea50:	2300      	movs	r3, #0
1000ea52:	930e      	str	r3, [sp, #56]	; 0x38
1000ea54:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000ea58:	e5aa      	b.n	1000e5b0 <_vfiprintf_r+0x64>
1000ea5a:	2900      	cmp	r1, #0
1000ea5c:	f040 8352 	bne.w	1000f104 <_vfiprintf_r+0xbb8>
1000ea60:	4a3a      	ldr	r2, [pc, #232]	; (1000eb4c <_vfiprintf_r+0x600>)
1000ea62:	9208      	str	r2, [sp, #32]
1000ea64:	06b8      	lsls	r0, r7, #26
1000ea66:	9a04      	ldr	r2, [sp, #16]
1000ea68:	f53f aeee 	bmi.w	1000e848 <_vfiprintf_r+0x2fc>
1000ea6c:	f852 4b04 	ldr.w	r4, [r2], #4
1000ea70:	9204      	str	r2, [sp, #16]
1000ea72:	06f9      	lsls	r1, r7, #27
1000ea74:	f100 829c 	bmi.w	1000efb0 <_vfiprintf_r+0xa64>
1000ea78:	067a      	lsls	r2, r7, #25
1000ea7a:	f140 8299 	bpl.w	1000efb0 <_vfiprintf_r+0xa64>
1000ea7e:	b2a4      	uxth	r4, r4
1000ea80:	2500      	movs	r5, #0
1000ea82:	e6e7      	b.n	1000e854 <_vfiprintf_r+0x308>
1000ea84:	2900      	cmp	r1, #0
1000ea86:	f040 832d 	bne.w	1000f0e4 <_vfiprintf_r+0xb98>
1000ea8a:	f047 0710 	orr.w	r7, r7, #16
1000ea8e:	06ba      	lsls	r2, r7, #26
1000ea90:	9b04      	ldr	r3, [sp, #16]
1000ea92:	f53f af2d 	bmi.w	1000e8f0 <_vfiprintf_r+0x3a4>
1000ea96:	f853 4b04 	ldr.w	r4, [r3], #4
1000ea9a:	9304      	str	r3, [sp, #16]
1000ea9c:	06fe      	lsls	r6, r7, #27
1000ea9e:	f100 8276 	bmi.w	1000ef8e <_vfiprintf_r+0xa42>
1000eaa2:	067d      	lsls	r5, r7, #25
1000eaa4:	f140 8273 	bpl.w	1000ef8e <_vfiprintf_r+0xa42>
1000eaa8:	b224      	sxth	r4, r4
1000eaaa:	17e5      	asrs	r5, r4, #31
1000eaac:	4622      	mov	r2, r4
1000eaae:	462b      	mov	r3, r5
1000eab0:	e727      	b.n	1000e902 <_vfiprintf_r+0x3b6>
1000eab2:	9b04      	ldr	r3, [sp, #16]
1000eab4:	f853 4b04 	ldr.w	r4, [r3], #4
1000eab8:	9304      	str	r3, [sp, #16]
1000eaba:	f647 0230 	movw	r2, #30768	; 0x7830
1000eabe:	4b22      	ldr	r3, [pc, #136]	; (1000eb48 <_vfiprintf_r+0x5fc>)
1000eac0:	9308      	str	r3, [sp, #32]
1000eac2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
1000eac6:	f047 0702 	orr.w	r7, r7, #2
1000eaca:	2500      	movs	r5, #0
1000eacc:	2302      	movs	r3, #2
1000eace:	f04f 0200 	mov.w	r2, #0
1000ead2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
1000ead6:	2200      	movs	r2, #0
1000ead8:	9206      	str	r2, [sp, #24]
1000eada:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1000eade:	d057      	beq.n	1000eb90 <_vfiprintf_r+0x644>
1000eae0:	f027 0280 	bic.w	r2, r7, #128	; 0x80
1000eae4:	9200      	str	r2, [sp, #0]
1000eae6:	ea54 0205 	orrs.w	r2, r4, r5
1000eaea:	d150      	bne.n	1000eb8e <_vfiprintf_r+0x642>
1000eaec:	f1b9 0f00 	cmp.w	r9, #0
1000eaf0:	f040 8209 	bne.w	1000ef06 <_vfiprintf_r+0x9ba>
1000eaf4:	2b00      	cmp	r3, #0
1000eaf6:	f47f af1b 	bne.w	1000e930 <_vfiprintf_r+0x3e4>
1000eafa:	f017 0301 	ands.w	r3, r7, #1
1000eafe:	9301      	str	r3, [sp, #4]
1000eb00:	f000 827d 	beq.w	1000effe <_vfiprintf_r+0xab2>
1000eb04:	2330      	movs	r3, #48	; 0x30
1000eb06:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1000eb0a:	f10d 0667 	add.w	r6, sp, #103	; 0x67
1000eb0e:	e081      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000eb10:	2900      	cmp	r1, #0
1000eb12:	f040 82f2 	bne.w	1000f0fa <_vfiprintf_r+0xbae>
1000eb16:	9a04      	ldr	r2, [sp, #16]
1000eb18:	06bc      	lsls	r4, r7, #26
1000eb1a:	f852 3b04 	ldr.w	r3, [r2], #4
1000eb1e:	9204      	str	r2, [sp, #16]
1000eb20:	f100 8282 	bmi.w	1000f028 <_vfiprintf_r+0xadc>
1000eb24:	06f8      	lsls	r0, r7, #27
1000eb26:	f100 82aa 	bmi.w	1000f07e <_vfiprintf_r+0xb32>
1000eb2a:	0679      	lsls	r1, r7, #25
1000eb2c:	f140 82a7 	bpl.w	1000f07e <_vfiprintf_r+0xb32>
1000eb30:	9a02      	ldr	r2, [sp, #8]
1000eb32:	801a      	strh	r2, [r3, #0]
1000eb34:	e53c      	b.n	1000e5b0 <_vfiprintf_r+0x64>
1000eb36:	f853 4b04 	ldr.w	r4, [r3], #4
1000eb3a:	9304      	str	r3, [sp, #16]
1000eb3c:	06fe      	lsls	r6, r7, #27
1000eb3e:	f140 826d 	bpl.w	1000f01c <_vfiprintf_r+0xad0>
1000eb42:	2500      	movs	r5, #0
1000eb44:	2301      	movs	r3, #1
1000eb46:	e7c2      	b.n	1000eace <_vfiprintf_r+0x582>
1000eb48:	10010abc 	.word	0x10010abc
1000eb4c:	10010aa8 	.word	0x10010aa8
1000eb50:	9a04      	ldr	r2, [sp, #16]
1000eb52:	f852 4b04 	ldr.w	r4, [r2], #4
1000eb56:	9204      	str	r2, [sp, #16]
1000eb58:	f017 0210 	ands.w	r2, r7, #16
1000eb5c:	f000 8257 	beq.w	1000f00e <_vfiprintf_r+0xac2>
1000eb60:	2500      	movs	r5, #0
1000eb62:	e7b4      	b.n	1000eace <_vfiprintf_r+0x582>
1000eb64:	f7fd ff16 	bl	1000c994 <__sinit>
1000eb68:	e4fd      	b.n	1000e566 <_vfiprintf_r+0x1a>
1000eb6a:	2900      	cmp	r1, #0
1000eb6c:	f040 82ac 	bne.w	1000f0c8 <_vfiprintf_r+0xb7c>
1000eb70:	2b00      	cmp	r3, #0
1000eb72:	f43f ae01 	beq.w	1000e778 <_vfiprintf_r+0x22c>
1000eb76:	2501      	movs	r5, #1
1000eb78:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
1000eb7c:	f04f 0300 	mov.w	r3, #0
1000eb80:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
1000eb84:	9501      	str	r5, [sp, #4]
1000eb86:	ae10      	add	r6, sp, #64	; 0x40
1000eb88:	e6e5      	b.n	1000e956 <_vfiprintf_r+0x40a>
1000eb8a:	2302      	movs	r3, #2
1000eb8c:	e79f      	b.n	1000eace <_vfiprintf_r+0x582>
1000eb8e:	9f00      	ldr	r7, [sp, #0]
1000eb90:	2b01      	cmp	r3, #1
1000eb92:	f000 81d6 	beq.w	1000ef42 <_vfiprintf_r+0x9f6>
1000eb96:	2b02      	cmp	r3, #2
1000eb98:	f000 81bc 	beq.w	1000ef14 <_vfiprintf_r+0x9c8>
1000eb9c:	a91a      	add	r1, sp, #104	; 0x68
1000eb9e:	e000      	b.n	1000eba2 <_vfiprintf_r+0x656>
1000eba0:	4631      	mov	r1, r6
1000eba2:	08e2      	lsrs	r2, r4, #3
1000eba4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1000eba8:	08e8      	lsrs	r0, r5, #3
1000ebaa:	f004 0307 	and.w	r3, r4, #7
1000ebae:	4605      	mov	r5, r0
1000ebb0:	4614      	mov	r4, r2
1000ebb2:	3330      	adds	r3, #48	; 0x30
1000ebb4:	ea54 0205 	orrs.w	r2, r4, r5
1000ebb8:	f801 3c01 	strb.w	r3, [r1, #-1]
1000ebbc:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1000ebc0:	d1ee      	bne.n	1000eba0 <_vfiprintf_r+0x654>
1000ebc2:	07f8      	lsls	r0, r7, #31
1000ebc4:	d522      	bpl.n	1000ec0c <_vfiprintf_r+0x6c0>
1000ebc6:	2b30      	cmp	r3, #48	; 0x30
1000ebc8:	d020      	beq.n	1000ec0c <_vfiprintf_r+0x6c0>
1000ebca:	2330      	movs	r3, #48	; 0x30
1000ebcc:	3902      	subs	r1, #2
1000ebce:	f806 3c01 	strb.w	r3, [r6, #-1]
1000ebd2:	ab1a      	add	r3, sp, #104	; 0x68
1000ebd4:	1a5b      	subs	r3, r3, r1
1000ebd6:	9700      	str	r7, [sp, #0]
1000ebd8:	9301      	str	r3, [sp, #4]
1000ebda:	460e      	mov	r6, r1
1000ebdc:	e01a      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000ebde:	ae1a      	add	r6, sp, #104	; 0x68
1000ebe0:	e001      	b.n	1000ebe6 <_vfiprintf_r+0x69a>
1000ebe2:	4604      	mov	r4, r0
1000ebe4:	460d      	mov	r5, r1
1000ebe6:	220a      	movs	r2, #10
1000ebe8:	2300      	movs	r3, #0
1000ebea:	4620      	mov	r0, r4
1000ebec:	4629      	mov	r1, r5
1000ebee:	f001 fb21 	bl	10010234 <__aeabi_uldivmod>
1000ebf2:	3230      	adds	r2, #48	; 0x30
1000ebf4:	f806 2d01 	strb.w	r2, [r6, #-1]!
1000ebf8:	2300      	movs	r3, #0
1000ebfa:	220a      	movs	r2, #10
1000ebfc:	4620      	mov	r0, r4
1000ebfe:	4629      	mov	r1, r5
1000ec00:	f001 fb18 	bl	10010234 <__aeabi_uldivmod>
1000ec04:	2d00      	cmp	r5, #0
1000ec06:	bf08      	it	eq
1000ec08:	2c0a      	cmpeq	r4, #10
1000ec0a:	d2ea      	bcs.n	1000ebe2 <_vfiprintf_r+0x696>
1000ec0c:	ab1a      	add	r3, sp, #104	; 0x68
1000ec0e:	1b9b      	subs	r3, r3, r6
1000ec10:	9700      	str	r7, [sp, #0]
1000ec12:	9301      	str	r3, [sp, #4]
1000ec14:	9b01      	ldr	r3, [sp, #4]
1000ec16:	454b      	cmp	r3, r9
1000ec18:	bfb8      	it	lt
1000ec1a:	464b      	movlt	r3, r9
1000ec1c:	461d      	mov	r5, r3
1000ec1e:	9b06      	ldr	r3, [sp, #24]
1000ec20:	2b00      	cmp	r3, #0
1000ec22:	f43f ae9b 	beq.w	1000e95c <_vfiprintf_r+0x410>
1000ec26:	3501      	adds	r5, #1
1000ec28:	e698      	b.n	1000e95c <_vfiprintf_r+0x410>
1000ec2a:	9b03      	ldr	r3, [sp, #12]
1000ec2c:	1b5f      	subs	r7, r3, r5
1000ec2e:	2f00      	cmp	r7, #0
1000ec30:	f77f aee0 	ble.w	1000e9f4 <_vfiprintf_r+0x4a8>
1000ec34:	2f10      	cmp	r7, #16
1000ec36:	4cc0      	ldr	r4, [pc, #768]	; (1000ef38 <_vfiprintf_r+0x9ec>)
1000ec38:	f340 826a 	ble.w	1000f110 <_vfiprintf_r+0xbc4>
1000ec3c:	4663      	mov	r3, ip
1000ec3e:	46dc      	mov	ip, fp
1000ec40:	46ab      	mov	fp, r5
1000ec42:	4625      	mov	r5, r4
1000ec44:	9c05      	ldr	r4, [sp, #20]
1000ec46:	e006      	b.n	1000ec56 <_vfiprintf_r+0x70a>
1000ec48:	1c90      	adds	r0, r2, #2
1000ec4a:	f10c 0c08 	add.w	ip, ip, #8
1000ec4e:	460a      	mov	r2, r1
1000ec50:	3f10      	subs	r7, #16
1000ec52:	2f10      	cmp	r7, #16
1000ec54:	dd1e      	ble.n	1000ec94 <_vfiprintf_r+0x748>
1000ec56:	1c51      	adds	r1, r2, #1
1000ec58:	3310      	adds	r3, #16
1000ec5a:	2010      	movs	r0, #16
1000ec5c:	2907      	cmp	r1, #7
1000ec5e:	930f      	str	r3, [sp, #60]	; 0x3c
1000ec60:	f8cc 5000 	str.w	r5, [ip]
1000ec64:	f8cc 0004 	str.w	r0, [ip, #4]
1000ec68:	910e      	str	r1, [sp, #56]	; 0x38
1000ec6a:	dded      	ble.n	1000ec48 <_vfiprintf_r+0x6fc>
1000ec6c:	aa0d      	add	r2, sp, #52	; 0x34
1000ec6e:	4651      	mov	r1, sl
1000ec70:	4620      	mov	r0, r4
1000ec72:	2b00      	cmp	r3, #0
1000ec74:	f000 8085 	beq.w	1000ed82 <_vfiprintf_r+0x836>
1000ec78:	f7ff fc22 	bl	1000e4c0 <__sprint_r.part.0>
1000ec7c:	2800      	cmp	r0, #0
1000ec7e:	f47f ad82 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000ec82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1000ec86:	3f10      	subs	r7, #16
1000ec88:	2f10      	cmp	r7, #16
1000ec8a:	f102 0001 	add.w	r0, r2, #1
1000ec8e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
1000ec92:	dce0      	bgt.n	1000ec56 <_vfiprintf_r+0x70a>
1000ec94:	462c      	mov	r4, r5
1000ec96:	465d      	mov	r5, fp
1000ec98:	46e3      	mov	fp, ip
1000ec9a:	469c      	mov	ip, r3
1000ec9c:	f10b 0308 	add.w	r3, fp, #8
1000eca0:	44bc      	add	ip, r7
1000eca2:	2807      	cmp	r0, #7
1000eca4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
1000eca8:	e9cb 4700 	strd	r4, r7, [fp]
1000ecac:	900e      	str	r0, [sp, #56]	; 0x38
1000ecae:	f340 81a8 	ble.w	1000f002 <_vfiprintf_r+0xab6>
1000ecb2:	f1bc 0f00 	cmp.w	ip, #0
1000ecb6:	f000 81f8 	beq.w	1000f0aa <_vfiprintf_r+0xb5e>
1000ecba:	aa0d      	add	r2, sp, #52	; 0x34
1000ecbc:	4651      	mov	r1, sl
1000ecbe:	9805      	ldr	r0, [sp, #20]
1000ecc0:	f7ff fbfe 	bl	1000e4c0 <__sprint_r.part.0>
1000ecc4:	2800      	cmp	r0, #0
1000ecc6:	f47f ad5e 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000ecca:	9b01      	ldr	r3, [sp, #4]
1000eccc:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
1000ecd0:	eba9 0703 	sub.w	r7, r9, r3
1000ecd4:	2f00      	cmp	r7, #0
1000ecd6:	f102 0101 	add.w	r1, r2, #1
1000ecda:	a81c      	add	r0, sp, #112	; 0x70
1000ecdc:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000ece0:	f77f ae8e 	ble.w	1000ea00 <_vfiprintf_r+0x4b4>
1000ece4:	2f10      	cmp	r7, #16
1000ece6:	4c94      	ldr	r4, [pc, #592]	; (1000ef38 <_vfiprintf_r+0x9ec>)
1000ece8:	f340 81dd 	ble.w	1000f0a6 <_vfiprintf_r+0xb5a>
1000ecec:	4663      	mov	r3, ip
1000ecee:	f04f 0910 	mov.w	r9, #16
1000ecf2:	46dc      	mov	ip, fp
1000ecf4:	46ab      	mov	fp, r5
1000ecf6:	4625      	mov	r5, r4
1000ecf8:	9c05      	ldr	r4, [sp, #20]
1000ecfa:	e006      	b.n	1000ed0a <_vfiprintf_r+0x7be>
1000ecfc:	1c91      	adds	r1, r2, #2
1000ecfe:	f10c 0c08 	add.w	ip, ip, #8
1000ed02:	4602      	mov	r2, r0
1000ed04:	3f10      	subs	r7, #16
1000ed06:	2f10      	cmp	r7, #16
1000ed08:	dd19      	ble.n	1000ed3e <_vfiprintf_r+0x7f2>
1000ed0a:	1c50      	adds	r0, r2, #1
1000ed0c:	3310      	adds	r3, #16
1000ed0e:	2807      	cmp	r0, #7
1000ed10:	930f      	str	r3, [sp, #60]	; 0x3c
1000ed12:	e9cc 5900 	strd	r5, r9, [ip]
1000ed16:	900e      	str	r0, [sp, #56]	; 0x38
1000ed18:	ddf0      	ble.n	1000ecfc <_vfiprintf_r+0x7b0>
1000ed1a:	aa0d      	add	r2, sp, #52	; 0x34
1000ed1c:	4651      	mov	r1, sl
1000ed1e:	4620      	mov	r0, r4
1000ed20:	b30b      	cbz	r3, 1000ed66 <_vfiprintf_r+0x81a>
1000ed22:	f7ff fbcd 	bl	1000e4c0 <__sprint_r.part.0>
1000ed26:	2800      	cmp	r0, #0
1000ed28:	f47f ad2d 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000ed2c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1000ed30:	3f10      	subs	r7, #16
1000ed32:	2f10      	cmp	r7, #16
1000ed34:	f102 0101 	add.w	r1, r2, #1
1000ed38:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
1000ed3c:	dce5      	bgt.n	1000ed0a <_vfiprintf_r+0x7be>
1000ed3e:	462c      	mov	r4, r5
1000ed40:	465d      	mov	r5, fp
1000ed42:	46e3      	mov	fp, ip
1000ed44:	469c      	mov	ip, r3
1000ed46:	f10b 0308 	add.w	r3, fp, #8
1000ed4a:	44bc      	add	ip, r7
1000ed4c:	2907      	cmp	r1, #7
1000ed4e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
1000ed52:	e9cb 4700 	strd	r4, r7, [fp]
1000ed56:	910e      	str	r1, [sp, #56]	; 0x38
1000ed58:	f300 8101 	bgt.w	1000ef5e <_vfiprintf_r+0xa12>
1000ed5c:	3101      	adds	r1, #1
1000ed5e:	f103 0008 	add.w	r0, r3, #8
1000ed62:	469b      	mov	fp, r3
1000ed64:	e64c      	b.n	1000ea00 <_vfiprintf_r+0x4b4>
1000ed66:	2101      	movs	r1, #1
1000ed68:	461a      	mov	r2, r3
1000ed6a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
1000ed6e:	e7c9      	b.n	1000ed04 <_vfiprintf_r+0x7b8>
1000ed70:	aa0d      	add	r2, sp, #52	; 0x34
1000ed72:	4651      	mov	r1, sl
1000ed74:	9805      	ldr	r0, [sp, #20]
1000ed76:	f7ff fba3 	bl	1000e4c0 <__sprint_r.part.0>
1000ed7a:	2800      	cmp	r0, #0
1000ed7c:	f43f ae68 	beq.w	1000ea50 <_vfiprintf_r+0x504>
1000ed80:	e501      	b.n	1000e786 <_vfiprintf_r+0x23a>
1000ed82:	2001      	movs	r0, #1
1000ed84:	461a      	mov	r2, r3
1000ed86:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
1000ed8a:	e761      	b.n	1000ec50 <_vfiprintf_r+0x704>
1000ed8c:	f1bc 0f00 	cmp.w	ip, #0
1000ed90:	f000 8110 	beq.w	1000efb4 <_vfiprintf_r+0xa68>
1000ed94:	aa0d      	add	r2, sp, #52	; 0x34
1000ed96:	4651      	mov	r1, sl
1000ed98:	9805      	ldr	r0, [sp, #20]
1000ed9a:	f7ff fb91 	bl	1000e4c0 <__sprint_r.part.0>
1000ed9e:	2800      	cmp	r0, #0
1000eda0:	f47f acf1 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000eda4:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
1000eda8:	a81c      	add	r0, sp, #112	; 0x70
1000edaa:	1c51      	adds	r1, r2, #1
1000edac:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000edb0:	e5fd      	b.n	1000e9ae <_vfiprintf_r+0x462>
1000edb2:	2302      	movs	r3, #2
1000edb4:	aa0c      	add	r2, sp, #48	; 0x30
1000edb6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
1000edba:	469c      	mov	ip, r3
1000edbc:	a81c      	add	r0, sp, #112	; 0x70
1000edbe:	2101      	movs	r1, #1
1000edc0:	4683      	mov	fp, r0
1000edc2:	460a      	mov	r2, r1
1000edc4:	1c51      	adds	r1, r2, #1
1000edc6:	f10b 0008 	add.w	r0, fp, #8
1000edca:	e60f      	b.n	1000e9ec <_vfiprintf_r+0x4a0>
1000edcc:	2c10      	cmp	r4, #16
1000edce:	4f5b      	ldr	r7, [pc, #364]	; (1000ef3c <_vfiprintf_r+0x9f0>)
1000edd0:	f340 8196 	ble.w	1000f100 <_vfiprintf_r+0xbb4>
1000edd4:	9609      	str	r6, [sp, #36]	; 0x24
1000edd6:	4659      	mov	r1, fp
1000edd8:	2310      	movs	r3, #16
1000edda:	46c3      	mov	fp, r8
1000eddc:	4666      	mov	r6, ip
1000edde:	46a8      	mov	r8, r5
1000ede0:	9d05      	ldr	r5, [sp, #20]
1000ede2:	e007      	b.n	1000edf4 <_vfiprintf_r+0x8a8>
1000ede4:	f102 0e02 	add.w	lr, r2, #2
1000ede8:	3108      	adds	r1, #8
1000edea:	4602      	mov	r2, r0
1000edec:	3c10      	subs	r4, #16
1000edee:	2c10      	cmp	r4, #16
1000edf0:	dd1a      	ble.n	1000ee28 <_vfiprintf_r+0x8dc>
1000edf2:	1c50      	adds	r0, r2, #1
1000edf4:	3610      	adds	r6, #16
1000edf6:	2807      	cmp	r0, #7
1000edf8:	960f      	str	r6, [sp, #60]	; 0x3c
1000edfa:	e9c1 7300 	strd	r7, r3, [r1]
1000edfe:	900e      	str	r0, [sp, #56]	; 0x38
1000ee00:	ddf0      	ble.n	1000ede4 <_vfiprintf_r+0x898>
1000ee02:	aa0d      	add	r2, sp, #52	; 0x34
1000ee04:	4651      	mov	r1, sl
1000ee06:	4628      	mov	r0, r5
1000ee08:	b326      	cbz	r6, 1000ee54 <_vfiprintf_r+0x908>
1000ee0a:	f7ff fb59 	bl	1000e4c0 <__sprint_r.part.0>
1000ee0e:	2800      	cmp	r0, #0
1000ee10:	f47f acb9 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000ee14:	e9dd 260e 	ldrd	r2, r6, [sp, #56]	; 0x38
1000ee18:	3c10      	subs	r4, #16
1000ee1a:	2c10      	cmp	r4, #16
1000ee1c:	f102 0e01 	add.w	lr, r2, #1
1000ee20:	a91a      	add	r1, sp, #104	; 0x68
1000ee22:	f04f 0310 	mov.w	r3, #16
1000ee26:	dce4      	bgt.n	1000edf2 <_vfiprintf_r+0x8a6>
1000ee28:	46b4      	mov	ip, r6
1000ee2a:	9e09      	ldr	r6, [sp, #36]	; 0x24
1000ee2c:	4645      	mov	r5, r8
1000ee2e:	46d8      	mov	r8, fp
1000ee30:	468b      	mov	fp, r1
1000ee32:	44a4      	add	ip, r4
1000ee34:	f1be 0f07 	cmp.w	lr, #7
1000ee38:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
1000ee3c:	e9cb 7400 	strd	r7, r4, [fp]
1000ee40:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
1000ee44:	f300 80c7 	bgt.w	1000efd6 <_vfiprintf_r+0xa8a>
1000ee48:	f10b 0b08 	add.w	fp, fp, #8
1000ee4c:	f10e 0101 	add.w	r1, lr, #1
1000ee50:	4672      	mov	r2, lr
1000ee52:	e597      	b.n	1000e984 <_vfiprintf_r+0x438>
1000ee54:	4632      	mov	r2, r6
1000ee56:	f04f 0e01 	mov.w	lr, #1
1000ee5a:	a91a      	add	r1, sp, #104	; 0x68
1000ee5c:	e7c6      	b.n	1000edec <_vfiprintf_r+0x8a0>
1000ee5e:	9a00      	ldr	r2, [sp, #0]
1000ee60:	930e      	str	r3, [sp, #56]	; 0x38
1000ee62:	0751      	lsls	r1, r2, #29
1000ee64:	d547      	bpl.n	1000eef6 <_vfiprintf_r+0x9aa>
1000ee66:	9a03      	ldr	r2, [sp, #12]
1000ee68:	1b54      	subs	r4, r2, r5
1000ee6a:	2c00      	cmp	r4, #0
1000ee6c:	dd43      	ble.n	1000eef6 <_vfiprintf_r+0x9aa>
1000ee6e:	a81a      	add	r0, sp, #104	; 0x68
1000ee70:	2c10      	cmp	r4, #16
1000ee72:	990e      	ldr	r1, [sp, #56]	; 0x38
1000ee74:	4f31      	ldr	r7, [pc, #196]	; (1000ef3c <_vfiprintf_r+0x9f0>)
1000ee76:	f340 8148 	ble.w	1000f10a <_vfiprintf_r+0xbbe>
1000ee7a:	2610      	movs	r6, #16
1000ee7c:	f8dd 9014 	ldr.w	r9, [sp, #20]
1000ee80:	e006      	b.n	1000ee90 <_vfiprintf_r+0x944>
1000ee82:	f101 0c02 	add.w	ip, r1, #2
1000ee86:	3008      	adds	r0, #8
1000ee88:	4611      	mov	r1, r2
1000ee8a:	3c10      	subs	r4, #16
1000ee8c:	2c10      	cmp	r4, #16
1000ee8e:	dd18      	ble.n	1000eec2 <_vfiprintf_r+0x976>
1000ee90:	1c4a      	adds	r2, r1, #1
1000ee92:	3310      	adds	r3, #16
1000ee94:	2a07      	cmp	r2, #7
1000ee96:	930f      	str	r3, [sp, #60]	; 0x3c
1000ee98:	e9c0 7600 	strd	r7, r6, [r0]
1000ee9c:	920e      	str	r2, [sp, #56]	; 0x38
1000ee9e:	ddf0      	ble.n	1000ee82 <_vfiprintf_r+0x936>
1000eea0:	aa0d      	add	r2, sp, #52	; 0x34
1000eea2:	4651      	mov	r1, sl
1000eea4:	4648      	mov	r0, r9
1000eea6:	b30b      	cbz	r3, 1000eeec <_vfiprintf_r+0x9a0>
1000eea8:	f7ff fb0a 	bl	1000e4c0 <__sprint_r.part.0>
1000eeac:	2800      	cmp	r0, #0
1000eeae:	f47f ac6a 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000eeb2:	e9dd 130e 	ldrd	r1, r3, [sp, #56]	; 0x38
1000eeb6:	3c10      	subs	r4, #16
1000eeb8:	2c10      	cmp	r4, #16
1000eeba:	f101 0c01 	add.w	ip, r1, #1
1000eebe:	a81a      	add	r0, sp, #104	; 0x68
1000eec0:	dce6      	bgt.n	1000ee90 <_vfiprintf_r+0x944>
1000eec2:	4423      	add	r3, r4
1000eec4:	f1bc 0f07 	cmp.w	ip, #7
1000eec8:	930f      	str	r3, [sp, #60]	; 0x3c
1000eeca:	e9c0 7400 	strd	r7, r4, [r0]
1000eece:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
1000eed2:	f77f adb3 	ble.w	1000ea3c <_vfiprintf_r+0x4f0>
1000eed6:	b173      	cbz	r3, 1000eef6 <_vfiprintf_r+0x9aa>
1000eed8:	aa0d      	add	r2, sp, #52	; 0x34
1000eeda:	4651      	mov	r1, sl
1000eedc:	9805      	ldr	r0, [sp, #20]
1000eede:	f7ff faef 	bl	1000e4c0 <__sprint_r.part.0>
1000eee2:	2800      	cmp	r0, #0
1000eee4:	f47f ac4f 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000eee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000eeea:	e5a7      	b.n	1000ea3c <_vfiprintf_r+0x4f0>
1000eeec:	f04f 0c01 	mov.w	ip, #1
1000eef0:	4619      	mov	r1, r3
1000eef2:	a81a      	add	r0, sp, #104	; 0x68
1000eef4:	e7c9      	b.n	1000ee8a <_vfiprintf_r+0x93e>
1000eef6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
1000eefa:	42aa      	cmp	r2, r5
1000eefc:	bfac      	ite	ge
1000eefe:	189b      	addge	r3, r3, r2
1000ef00:	195b      	addlt	r3, r3, r5
1000ef02:	9302      	str	r3, [sp, #8]
1000ef04:	e5a4      	b.n	1000ea50 <_vfiprintf_r+0x504>
1000ef06:	2b01      	cmp	r3, #1
1000ef08:	f000 80e1 	beq.w	1000f0ce <_vfiprintf_r+0xb82>
1000ef0c:	2b02      	cmp	r3, #2
1000ef0e:	9f00      	ldr	r7, [sp, #0]
1000ef10:	f47f ae44 	bne.w	1000eb9c <_vfiprintf_r+0x650>
1000ef14:	9808      	ldr	r0, [sp, #32]
1000ef16:	ae1a      	add	r6, sp, #104	; 0x68
1000ef18:	0923      	lsrs	r3, r4, #4
1000ef1a:	f004 010f 	and.w	r1, r4, #15
1000ef1e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1000ef22:	092a      	lsrs	r2, r5, #4
1000ef24:	461c      	mov	r4, r3
1000ef26:	4615      	mov	r5, r2
1000ef28:	5c43      	ldrb	r3, [r0, r1]
1000ef2a:	f806 3d01 	strb.w	r3, [r6, #-1]!
1000ef2e:	ea54 0305 	orrs.w	r3, r4, r5
1000ef32:	d1f1      	bne.n	1000ef18 <_vfiprintf_r+0x9cc>
1000ef34:	e66a      	b.n	1000ec0c <_vfiprintf_r+0x6c0>
1000ef36:	bf00      	nop
1000ef38:	10010da4 	.word	0x10010da4
1000ef3c:	10010d94 	.word	0x10010d94
1000ef40:	9f00      	ldr	r7, [sp, #0]
1000ef42:	2d00      	cmp	r5, #0
1000ef44:	bf08      	it	eq
1000ef46:	2c0a      	cmpeq	r4, #10
1000ef48:	f4bf ae49 	bcs.w	1000ebde <_vfiprintf_r+0x692>
1000ef4c:	3430      	adds	r4, #48	; 0x30
1000ef4e:	2301      	movs	r3, #1
1000ef50:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
1000ef54:	9700      	str	r7, [sp, #0]
1000ef56:	9301      	str	r3, [sp, #4]
1000ef58:	f10d 0667 	add.w	r6, sp, #103	; 0x67
1000ef5c:	e65a      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000ef5e:	f1bc 0f00 	cmp.w	ip, #0
1000ef62:	f000 8090 	beq.w	1000f086 <_vfiprintf_r+0xb3a>
1000ef66:	aa0d      	add	r2, sp, #52	; 0x34
1000ef68:	4651      	mov	r1, sl
1000ef6a:	9805      	ldr	r0, [sp, #20]
1000ef6c:	f7ff faa8 	bl	1000e4c0 <__sprint_r.part.0>
1000ef70:	2800      	cmp	r0, #0
1000ef72:	f47f ac08 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000ef76:	e9dd 1c0e 	ldrd	r1, ip, [sp, #56]	; 0x38
1000ef7a:	a81c      	add	r0, sp, #112	; 0x70
1000ef7c:	3101      	adds	r1, #1
1000ef7e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000ef82:	e53d      	b.n	1000ea00 <_vfiprintf_r+0x4b4>
1000ef84:	920e      	str	r2, [sp, #56]	; 0x38
1000ef86:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000ef8a:	f7ff bb36 	b.w	1000e5fa <_vfiprintf_r+0xae>
1000ef8e:	17e5      	asrs	r5, r4, #31
1000ef90:	4622      	mov	r2, r4
1000ef92:	462b      	mov	r3, r5
1000ef94:	2a00      	cmp	r2, #0
1000ef96:	f173 0300 	sbcs.w	r3, r3, #0
1000ef9a:	f6bf acb7 	bge.w	1000e90c <_vfiprintf_r+0x3c0>
1000ef9e:	232d      	movs	r3, #45	; 0x2d
1000efa0:	4264      	negs	r4, r4
1000efa2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
1000efa6:	9306      	str	r3, [sp, #24]
1000efa8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1000efac:	2301      	movs	r3, #1
1000efae:	e594      	b.n	1000eada <_vfiprintf_r+0x58e>
1000efb0:	2500      	movs	r5, #0
1000efb2:	e44f      	b.n	1000e854 <_vfiprintf_r+0x308>
1000efb4:	9b06      	ldr	r3, [sp, #24]
1000efb6:	2b00      	cmp	r3, #0
1000efb8:	d03d      	beq.n	1000f036 <_vfiprintf_r+0xaea>
1000efba:	2302      	movs	r3, #2
1000efbc:	a90c      	add	r1, sp, #48	; 0x30
1000efbe:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
1000efc2:	469c      	mov	ip, r3
1000efc4:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
1000efc8:	e6fc      	b.n	1000edc4 <_vfiprintf_r+0x878>
1000efca:	a81c      	add	r0, sp, #112	; 0x70
1000efcc:	2101      	movs	r1, #1
1000efce:	4662      	mov	r2, ip
1000efd0:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000efd4:	e50a      	b.n	1000e9ec <_vfiprintf_r+0x4a0>
1000efd6:	f1bc 0f00 	cmp.w	ip, #0
1000efda:	d043      	beq.n	1000f064 <_vfiprintf_r+0xb18>
1000efdc:	aa0d      	add	r2, sp, #52	; 0x34
1000efde:	4651      	mov	r1, sl
1000efe0:	9805      	ldr	r0, [sp, #20]
1000efe2:	f7ff fa6d 	bl	1000e4c0 <__sprint_r.part.0>
1000efe6:	2800      	cmp	r0, #0
1000efe8:	f47f abcd 	bne.w	1000e786 <_vfiprintf_r+0x23a>
1000efec:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
1000eff0:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000eff4:	1c51      	adds	r1, r2, #1
1000eff6:	e4c5      	b.n	1000e984 <_vfiprintf_r+0x438>
1000eff8:	4644      	mov	r4, r8
1000effa:	f7ff bb05 	b.w	1000e608 <_vfiprintf_r+0xbc>
1000effe:	ae1a      	add	r6, sp, #104	; 0x68
1000f000:	e608      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000f002:	1c41      	adds	r1, r0, #1
1000f004:	4602      	mov	r2, r0
1000f006:	469b      	mov	fp, r3
1000f008:	f103 0008 	add.w	r0, r3, #8
1000f00c:	e4f2      	b.n	1000e9f4 <_vfiprintf_r+0x4a8>
1000f00e:	f017 0340 	ands.w	r3, r7, #64	; 0x40
1000f012:	bf1c      	itt	ne
1000f014:	4613      	movne	r3, r2
1000f016:	b2a4      	uxthne	r4, r4
1000f018:	2500      	movs	r5, #0
1000f01a:	e558      	b.n	1000eace <_vfiprintf_r+0x582>
1000f01c:	067d      	lsls	r5, r7, #25
1000f01e:	bf48      	it	mi
1000f020:	b2a4      	uxthmi	r4, r4
1000f022:	2500      	movs	r5, #0
1000f024:	2301      	movs	r3, #1
1000f026:	e552      	b.n	1000eace <_vfiprintf_r+0x582>
1000f028:	9a02      	ldr	r2, [sp, #8]
1000f02a:	4610      	mov	r0, r2
1000f02c:	17d1      	asrs	r1, r2, #31
1000f02e:	e9c3 0100 	strd	r0, r1, [r3]
1000f032:	f7ff babd 	b.w	1000e5b0 <_vfiprintf_r+0x64>
1000f036:	4611      	mov	r1, r2
1000f038:	a81c      	add	r0, sp, #112	; 0x70
1000f03a:	4662      	mov	r2, ip
1000f03c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000f040:	e4d4      	b.n	1000e9ec <_vfiprintf_r+0x4a0>
1000f042:	4264      	negs	r4, r4
1000f044:	e9cd 4203 	strd	r4, r2, [sp, #12]
1000f048:	f7ff bbd5 	b.w	1000e7f6 <_vfiprintf_r+0x2aa>
1000f04c:	4630      	mov	r0, r6
1000f04e:	9404      	str	r4, [sp, #16]
1000f050:	9700      	str	r7, [sp, #0]
1000f052:	f7fa fe75 	bl	10009d40 <strlen>
1000f056:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1000f05a:	9001      	str	r0, [sp, #4]
1000f05c:	9306      	str	r3, [sp, #24]
1000f05e:	f04f 0900 	mov.w	r9, #0
1000f062:	e5d7      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000f064:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
1000f068:	bb2a      	cbnz	r2, 1000f0b6 <_vfiprintf_r+0xb6a>
1000f06a:	9b06      	ldr	r3, [sp, #24]
1000f06c:	2b00      	cmp	r3, #0
1000f06e:	f47f aea0 	bne.w	1000edb2 <_vfiprintf_r+0x866>
1000f072:	4662      	mov	r2, ip
1000f074:	a81c      	add	r0, sp, #112	; 0x70
1000f076:	2101      	movs	r1, #1
1000f078:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000f07c:	e4ba      	b.n	1000e9f4 <_vfiprintf_r+0x4a8>
1000f07e:	9a02      	ldr	r2, [sp, #8]
1000f080:	601a      	str	r2, [r3, #0]
1000f082:	f7ff ba95 	b.w	1000e5b0 <_vfiprintf_r+0x64>
1000f086:	9b01      	ldr	r3, [sp, #4]
1000f088:	931b      	str	r3, [sp, #108]	; 0x6c
1000f08a:	2201      	movs	r2, #1
1000f08c:	930f      	str	r3, [sp, #60]	; 0x3c
1000f08e:	961a      	str	r6, [sp, #104]	; 0x68
1000f090:	920e      	str	r2, [sp, #56]	; 0x38
1000f092:	a81c      	add	r0, sp, #112	; 0x70
1000f094:	e4ca      	b.n	1000ea2c <_vfiprintf_r+0x4e0>
1000f096:	464d      	mov	r5, r9
1000f098:	2d06      	cmp	r5, #6
1000f09a:	bf28      	it	cs
1000f09c:	2506      	movcs	r5, #6
1000f09e:	9501      	str	r5, [sp, #4]
1000f0a0:	9404      	str	r4, [sp, #16]
1000f0a2:	4e25      	ldr	r6, [pc, #148]	; (1000f138 <_vfiprintf_r+0xbec>)
1000f0a4:	e457      	b.n	1000e956 <_vfiprintf_r+0x40a>
1000f0a6:	4603      	mov	r3, r0
1000f0a8:	e64f      	b.n	1000ed4a <_vfiprintf_r+0x7fe>
1000f0aa:	a81c      	add	r0, sp, #112	; 0x70
1000f0ac:	2101      	movs	r1, #1
1000f0ae:	4662      	mov	r2, ip
1000f0b0:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
1000f0b4:	e49e      	b.n	1000e9f4 <_vfiprintf_r+0x4a8>
1000f0b6:	2201      	movs	r2, #1
1000f0b8:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
1000f0bc:	901a      	str	r0, [sp, #104]	; 0x68
1000f0be:	4694      	mov	ip, r2
1000f0c0:	921b      	str	r2, [sp, #108]	; 0x6c
1000f0c2:	4611      	mov	r1, r2
1000f0c4:	a81c      	add	r0, sp, #112	; 0x70
1000f0c6:	e46e      	b.n	1000e9a6 <_vfiprintf_r+0x45a>
1000f0c8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
1000f0cc:	e550      	b.n	1000eb70 <_vfiprintf_r+0x624>
1000f0ce:	9f00      	ldr	r7, [sp, #0]
1000f0d0:	e73c      	b.n	1000ef4c <_vfiprintf_r+0xa00>
1000f0d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1000f0d6:	f8cd 9004 	str.w	r9, [sp, #4]
1000f0da:	9306      	str	r3, [sp, #24]
1000f0dc:	9404      	str	r4, [sp, #16]
1000f0de:	9700      	str	r7, [sp, #0]
1000f0e0:	4681      	mov	r9, r0
1000f0e2:	e597      	b.n	1000ec14 <_vfiprintf_r+0x6c8>
1000f0e4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
1000f0e8:	e4cf      	b.n	1000ea8a <_vfiprintf_r+0x53e>
1000f0ea:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
1000f0ee:	f7ff bbfb 	b.w	1000e8e8 <_vfiprintf_r+0x39c>
1000f0f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
1000f0f6:	f7ff bba1 	b.w	1000e83c <_vfiprintf_r+0x2f0>
1000f0fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
1000f0fe:	e50a      	b.n	1000eb16 <_vfiprintf_r+0x5ca>
1000f100:	4686      	mov	lr, r0
1000f102:	e696      	b.n	1000ee32 <_vfiprintf_r+0x8e6>
1000f104:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
1000f108:	e4aa      	b.n	1000ea60 <_vfiprintf_r+0x514>
1000f10a:	f101 0c01 	add.w	ip, r1, #1
1000f10e:	e6d8      	b.n	1000eec2 <_vfiprintf_r+0x976>
1000f110:	4603      	mov	r3, r0
1000f112:	4608      	mov	r0, r1
1000f114:	e5c4      	b.n	1000eca0 <_vfiprintf_r+0x754>
1000f116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1000f11a:	9302      	str	r3, [sp, #8]
1000f11c:	f7ff bb38 	b.w	1000e790 <_vfiprintf_r+0x244>
1000f120:	9d04      	ldr	r5, [sp, #16]
1000f122:	f898 3001 	ldrb.w	r3, [r8, #1]
1000f126:	f855 2b04 	ldr.w	r2, [r5], #4
1000f12a:	9504      	str	r5, [sp, #16]
1000f12c:	46a0      	mov	r8, r4
1000f12e:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
1000f132:	f7ff ba76 	b.w	1000e622 <_vfiprintf_r+0xd6>
1000f136:	bf00      	nop
1000f138:	10010ad0 	.word	0x10010ad0

1000f13c <vfiprintf>:
1000f13c:	b410      	push	{r4}
1000f13e:	4c04      	ldr	r4, [pc, #16]	; (1000f150 <vfiprintf+0x14>)
1000f140:	4613      	mov	r3, r2
1000f142:	460a      	mov	r2, r1
1000f144:	4601      	mov	r1, r0
1000f146:	6820      	ldr	r0, [r4, #0]
1000f148:	f85d 4b04 	ldr.w	r4, [sp], #4
1000f14c:	f7ff b9fe 	b.w	1000e54c <_vfiprintf_r>
1000f150:	200000a0 	.word	0x200000a0

1000f154 <__sbprintf>:
1000f154:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f156:	460c      	mov	r4, r1
1000f158:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
1000f15c:	8989      	ldrh	r1, [r1, #12]
1000f15e:	6e66      	ldr	r6, [r4, #100]	; 0x64
1000f160:	89e5      	ldrh	r5, [r4, #14]
1000f162:	9619      	str	r6, [sp, #100]	; 0x64
1000f164:	f021 0102 	bic.w	r1, r1, #2
1000f168:	6a66      	ldr	r6, [r4, #36]	; 0x24
1000f16a:	f8ad 500e 	strh.w	r5, [sp, #14]
1000f16e:	2500      	movs	r5, #0
1000f170:	69e7      	ldr	r7, [r4, #28]
1000f172:	f8ad 100c 	strh.w	r1, [sp, #12]
1000f176:	9609      	str	r6, [sp, #36]	; 0x24
1000f178:	9506      	str	r5, [sp, #24]
1000f17a:	ae1a      	add	r6, sp, #104	; 0x68
1000f17c:	f44f 6580 	mov.w	r5, #1024	; 0x400
1000f180:	4669      	mov	r1, sp
1000f182:	9600      	str	r6, [sp, #0]
1000f184:	9604      	str	r6, [sp, #16]
1000f186:	9502      	str	r5, [sp, #8]
1000f188:	9505      	str	r5, [sp, #20]
1000f18a:	9707      	str	r7, [sp, #28]
1000f18c:	4606      	mov	r6, r0
1000f18e:	f7ff f9dd 	bl	1000e54c <_vfiprintf_r>
1000f192:	1e05      	subs	r5, r0, #0
1000f194:	db07      	blt.n	1000f1a6 <__sbprintf+0x52>
1000f196:	4630      	mov	r0, r6
1000f198:	4669      	mov	r1, sp
1000f19a:	f7fd faf5 	bl	1000c788 <_fflush_r>
1000f19e:	2800      	cmp	r0, #0
1000f1a0:	bf18      	it	ne
1000f1a2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1000f1a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1000f1aa:	065b      	lsls	r3, r3, #25
1000f1ac:	d503      	bpl.n	1000f1b6 <__sbprintf+0x62>
1000f1ae:	89a3      	ldrh	r3, [r4, #12]
1000f1b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000f1b4:	81a3      	strh	r3, [r4, #12]
1000f1b6:	4628      	mov	r0, r5
1000f1b8:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
1000f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1be:	bf00      	nop

1000f1c0 <_write_r>:
1000f1c0:	b570      	push	{r4, r5, r6, lr}
1000f1c2:	460d      	mov	r5, r1
1000f1c4:	4c08      	ldr	r4, [pc, #32]	; (1000f1e8 <_write_r+0x28>)
1000f1c6:	4611      	mov	r1, r2
1000f1c8:	4606      	mov	r6, r0
1000f1ca:	461a      	mov	r2, r3
1000f1cc:	4628      	mov	r0, r5
1000f1ce:	2300      	movs	r3, #0
1000f1d0:	6023      	str	r3, [r4, #0]
1000f1d2:	f7f5 f937 	bl	10004444 <_write>
1000f1d6:	1c43      	adds	r3, r0, #1
1000f1d8:	d000      	beq.n	1000f1dc <_write_r+0x1c>
1000f1da:	bd70      	pop	{r4, r5, r6, pc}
1000f1dc:	6823      	ldr	r3, [r4, #0]
1000f1de:	2b00      	cmp	r3, #0
1000f1e0:	d0fb      	beq.n	1000f1da <_write_r+0x1a>
1000f1e2:	6033      	str	r3, [r6, #0]
1000f1e4:	bd70      	pop	{r4, r5, r6, pc}
1000f1e6:	bf00      	nop
1000f1e8:	2001132c 	.word	0x2001132c

1000f1ec <__assert_func>:
1000f1ec:	b500      	push	{lr}
1000f1ee:	4c0a      	ldr	r4, [pc, #40]	; (1000f218 <__assert_func+0x2c>)
1000f1f0:	6826      	ldr	r6, [r4, #0]
1000f1f2:	4605      	mov	r5, r0
1000f1f4:	b085      	sub	sp, #20
1000f1f6:	461c      	mov	r4, r3
1000f1f8:	68f0      	ldr	r0, [r6, #12]
1000f1fa:	b152      	cbz	r2, 1000f212 <__assert_func+0x26>
1000f1fc:	4b07      	ldr	r3, [pc, #28]	; (1000f21c <__assert_func+0x30>)
1000f1fe:	9100      	str	r1, [sp, #0]
1000f200:	e9cd 3201 	strd	r3, r2, [sp, #4]
1000f204:	4906      	ldr	r1, [pc, #24]	; (1000f220 <__assert_func+0x34>)
1000f206:	462b      	mov	r3, r5
1000f208:	4622      	mov	r2, r4
1000f20a:	f000 f8af 	bl	1000f36c <fiprintf>
1000f20e:	f000 fa9f 	bl	1000f750 <abort>
1000f212:	4b04      	ldr	r3, [pc, #16]	; (1000f224 <__assert_func+0x38>)
1000f214:	461a      	mov	r2, r3
1000f216:	e7f2      	b.n	1000f1fe <__assert_func+0x12>
1000f218:	200000a0 	.word	0x200000a0
1000f21c:	10010db4 	.word	0x10010db4
1000f220:	10010dc4 	.word	0x10010dc4
1000f224:	10010dc0 	.word	0x10010dc0

1000f228 <__assert>:
1000f228:	b508      	push	{r3, lr}
1000f22a:	4613      	mov	r3, r2
1000f22c:	2200      	movs	r2, #0
1000f22e:	f7ff ffdd 	bl	1000f1ec <__assert_func>
1000f232:	bf00      	nop

1000f234 <_calloc_r>:
1000f234:	b510      	push	{r4, lr}
1000f236:	fb02 f101 	mul.w	r1, r2, r1
1000f23a:	f7fd ff6b 	bl	1000d114 <_malloc_r>
1000f23e:	4604      	mov	r4, r0
1000f240:	b168      	cbz	r0, 1000f25e <_calloc_r+0x2a>
1000f242:	f850 2c04 	ldr.w	r2, [r0, #-4]
1000f246:	f022 0203 	bic.w	r2, r2, #3
1000f24a:	3a04      	subs	r2, #4
1000f24c:	2a24      	cmp	r2, #36	; 0x24
1000f24e:	d818      	bhi.n	1000f282 <_calloc_r+0x4e>
1000f250:	2a13      	cmp	r2, #19
1000f252:	d806      	bhi.n	1000f262 <_calloc_r+0x2e>
1000f254:	4602      	mov	r2, r0
1000f256:	2300      	movs	r3, #0
1000f258:	e9c2 3300 	strd	r3, r3, [r2]
1000f25c:	6093      	str	r3, [r2, #8]
1000f25e:	4620      	mov	r0, r4
1000f260:	bd10      	pop	{r4, pc}
1000f262:	2300      	movs	r3, #0
1000f264:	2a1b      	cmp	r2, #27
1000f266:	e9c0 3300 	strd	r3, r3, [r0]
1000f26a:	d90f      	bls.n	1000f28c <_calloc_r+0x58>
1000f26c:	2a24      	cmp	r2, #36	; 0x24
1000f26e:	e9c0 3302 	strd	r3, r3, [r0, #8]
1000f272:	bf12      	itee	ne
1000f274:	f100 0210 	addne.w	r2, r0, #16
1000f278:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1000f27c:	f100 0218 	addeq.w	r2, r0, #24
1000f280:	e7e9      	b.n	1000f256 <_calloc_r+0x22>
1000f282:	2100      	movs	r1, #0
1000f284:	f7fa fac4 	bl	10009810 <memset>
1000f288:	4620      	mov	r0, r4
1000f28a:	bd10      	pop	{r4, pc}
1000f28c:	f100 0208 	add.w	r2, r0, #8
1000f290:	e7e1      	b.n	1000f256 <_calloc_r+0x22>
1000f292:	bf00      	nop

1000f294 <_close_r>:
1000f294:	b538      	push	{r3, r4, r5, lr}
1000f296:	4c07      	ldr	r4, [pc, #28]	; (1000f2b4 <_close_r+0x20>)
1000f298:	2300      	movs	r3, #0
1000f29a:	4605      	mov	r5, r0
1000f29c:	4608      	mov	r0, r1
1000f29e:	6023      	str	r3, [r4, #0]
1000f2a0:	f7f5 f89c 	bl	100043dc <_close>
1000f2a4:	1c43      	adds	r3, r0, #1
1000f2a6:	d000      	beq.n	1000f2aa <_close_r+0x16>
1000f2a8:	bd38      	pop	{r3, r4, r5, pc}
1000f2aa:	6823      	ldr	r3, [r4, #0]
1000f2ac:	2b00      	cmp	r3, #0
1000f2ae:	d0fb      	beq.n	1000f2a8 <_close_r+0x14>
1000f2b0:	602b      	str	r3, [r5, #0]
1000f2b2:	bd38      	pop	{r3, r4, r5, pc}
1000f2b4:	2001132c 	.word	0x2001132c

1000f2b8 <_fclose_r>:
1000f2b8:	b570      	push	{r4, r5, r6, lr}
1000f2ba:	b139      	cbz	r1, 1000f2cc <_fclose_r+0x14>
1000f2bc:	4605      	mov	r5, r0
1000f2be:	460c      	mov	r4, r1
1000f2c0:	b108      	cbz	r0, 1000f2c6 <_fclose_r+0xe>
1000f2c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000f2c4:	b383      	cbz	r3, 1000f328 <_fclose_r+0x70>
1000f2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000f2ca:	b913      	cbnz	r3, 1000f2d2 <_fclose_r+0x1a>
1000f2cc:	2600      	movs	r6, #0
1000f2ce:	4630      	mov	r0, r6
1000f2d0:	bd70      	pop	{r4, r5, r6, pc}
1000f2d2:	4621      	mov	r1, r4
1000f2d4:	4628      	mov	r0, r5
1000f2d6:	f7fd f9b1 	bl	1000c63c <__sflush_r>
1000f2da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1000f2dc:	4606      	mov	r6, r0
1000f2de:	b133      	cbz	r3, 1000f2ee <_fclose_r+0x36>
1000f2e0:	69e1      	ldr	r1, [r4, #28]
1000f2e2:	4628      	mov	r0, r5
1000f2e4:	4798      	blx	r3
1000f2e6:	2800      	cmp	r0, #0
1000f2e8:	bfb8      	it	lt
1000f2ea:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1000f2ee:	89a3      	ldrh	r3, [r4, #12]
1000f2f0:	061b      	lsls	r3, r3, #24
1000f2f2:	d420      	bmi.n	1000f336 <_fclose_r+0x7e>
1000f2f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
1000f2f6:	b141      	cbz	r1, 1000f30a <_fclose_r+0x52>
1000f2f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
1000f2fc:	4299      	cmp	r1, r3
1000f2fe:	d002      	beq.n	1000f306 <_fclose_r+0x4e>
1000f300:	4628      	mov	r0, r5
1000f302:	f7fd fbb7 	bl	1000ca74 <_free_r>
1000f306:	2300      	movs	r3, #0
1000f308:	6323      	str	r3, [r4, #48]	; 0x30
1000f30a:	6c61      	ldr	r1, [r4, #68]	; 0x44
1000f30c:	b121      	cbz	r1, 1000f318 <_fclose_r+0x60>
1000f30e:	4628      	mov	r0, r5
1000f310:	f7fd fbb0 	bl	1000ca74 <_free_r>
1000f314:	2300      	movs	r3, #0
1000f316:	6463      	str	r3, [r4, #68]	; 0x44
1000f318:	f7fd fb40 	bl	1000c99c <__sfp_lock_acquire>
1000f31c:	2300      	movs	r3, #0
1000f31e:	81a3      	strh	r3, [r4, #12]
1000f320:	f7fd fb3e 	bl	1000c9a0 <__sfp_lock_release>
1000f324:	4630      	mov	r0, r6
1000f326:	bd70      	pop	{r4, r5, r6, pc}
1000f328:	f7fd fb34 	bl	1000c994 <__sinit>
1000f32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000f330:	2b00      	cmp	r3, #0
1000f332:	d0cb      	beq.n	1000f2cc <_fclose_r+0x14>
1000f334:	e7cd      	b.n	1000f2d2 <_fclose_r+0x1a>
1000f336:	6921      	ldr	r1, [r4, #16]
1000f338:	4628      	mov	r0, r5
1000f33a:	f7fd fb9b 	bl	1000ca74 <_free_r>
1000f33e:	e7d9      	b.n	1000f2f4 <_fclose_r+0x3c>

1000f340 <fclose>:
1000f340:	4b02      	ldr	r3, [pc, #8]	; (1000f34c <fclose+0xc>)
1000f342:	4601      	mov	r1, r0
1000f344:	6818      	ldr	r0, [r3, #0]
1000f346:	f7ff bfb7 	b.w	1000f2b8 <_fclose_r>
1000f34a:	bf00      	nop
1000f34c:	200000a0 	.word	0x200000a0

1000f350 <_fiprintf_r>:
1000f350:	b40c      	push	{r2, r3}
1000f352:	b500      	push	{lr}
1000f354:	b083      	sub	sp, #12
1000f356:	ab04      	add	r3, sp, #16
1000f358:	f853 2b04 	ldr.w	r2, [r3], #4
1000f35c:	9301      	str	r3, [sp, #4]
1000f35e:	f7ff f8f5 	bl	1000e54c <_vfiprintf_r>
1000f362:	b003      	add	sp, #12
1000f364:	f85d eb04 	ldr.w	lr, [sp], #4
1000f368:	b002      	add	sp, #8
1000f36a:	4770      	bx	lr

1000f36c <fiprintf>:
1000f36c:	b40e      	push	{r1, r2, r3}
1000f36e:	b510      	push	{r4, lr}
1000f370:	b083      	sub	sp, #12
1000f372:	ab05      	add	r3, sp, #20
1000f374:	4c06      	ldr	r4, [pc, #24]	; (1000f390 <fiprintf+0x24>)
1000f376:	f853 2b04 	ldr.w	r2, [r3], #4
1000f37a:	9301      	str	r3, [sp, #4]
1000f37c:	4601      	mov	r1, r0
1000f37e:	6820      	ldr	r0, [r4, #0]
1000f380:	f7ff f8e4 	bl	1000e54c <_vfiprintf_r>
1000f384:	b003      	add	sp, #12
1000f386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000f38a:	b003      	add	sp, #12
1000f38c:	4770      	bx	lr
1000f38e:	bf00      	nop
1000f390:	200000a0 	.word	0x200000a0

1000f394 <__fputwc>:
1000f394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000f398:	b082      	sub	sp, #8
1000f39a:	4680      	mov	r8, r0
1000f39c:	4689      	mov	r9, r1
1000f39e:	4614      	mov	r4, r2
1000f3a0:	f000 f8c6 	bl	1000f530 <__locale_mb_cur_max>
1000f3a4:	2801      	cmp	r0, #1
1000f3a6:	d103      	bne.n	1000f3b0 <__fputwc+0x1c>
1000f3a8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1000f3ac:	2bfe      	cmp	r3, #254	; 0xfe
1000f3ae:	d936      	bls.n	1000f41e <__fputwc+0x8a>
1000f3b0:	464a      	mov	r2, r9
1000f3b2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1000f3b6:	a901      	add	r1, sp, #4
1000f3b8:	4640      	mov	r0, r8
1000f3ba:	f000 f973 	bl	1000f6a4 <_wcrtomb_r>
1000f3be:	1c42      	adds	r2, r0, #1
1000f3c0:	4606      	mov	r6, r0
1000f3c2:	d032      	beq.n	1000f42a <__fputwc+0x96>
1000f3c4:	b330      	cbz	r0, 1000f414 <__fputwc+0x80>
1000f3c6:	f89d c004 	ldrb.w	ip, [sp, #4]
1000f3ca:	2500      	movs	r5, #0
1000f3cc:	f10d 0a04 	add.w	sl, sp, #4
1000f3d0:	e009      	b.n	1000f3e6 <__fputwc+0x52>
1000f3d2:	6823      	ldr	r3, [r4, #0]
1000f3d4:	1c5a      	adds	r2, r3, #1
1000f3d6:	6022      	str	r2, [r4, #0]
1000f3d8:	f883 c000 	strb.w	ip, [r3]
1000f3dc:	3501      	adds	r5, #1
1000f3de:	42b5      	cmp	r5, r6
1000f3e0:	d218      	bcs.n	1000f414 <__fputwc+0x80>
1000f3e2:	f815 c00a 	ldrb.w	ip, [r5, sl]
1000f3e6:	68a3      	ldr	r3, [r4, #8]
1000f3e8:	3b01      	subs	r3, #1
1000f3ea:	2b00      	cmp	r3, #0
1000f3ec:	60a3      	str	r3, [r4, #8]
1000f3ee:	daf0      	bge.n	1000f3d2 <__fputwc+0x3e>
1000f3f0:	69a7      	ldr	r7, [r4, #24]
1000f3f2:	42bb      	cmp	r3, r7
1000f3f4:	4661      	mov	r1, ip
1000f3f6:	4622      	mov	r2, r4
1000f3f8:	4640      	mov	r0, r8
1000f3fa:	db02      	blt.n	1000f402 <__fputwc+0x6e>
1000f3fc:	f1bc 0f0a 	cmp.w	ip, #10
1000f400:	d1e7      	bne.n	1000f3d2 <__fputwc+0x3e>
1000f402:	f000 f8ef 	bl	1000f5e4 <__swbuf_r>
1000f406:	1c43      	adds	r3, r0, #1
1000f408:	d1e8      	bne.n	1000f3dc <__fputwc+0x48>
1000f40a:	4606      	mov	r6, r0
1000f40c:	4630      	mov	r0, r6
1000f40e:	b002      	add	sp, #8
1000f410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f414:	464e      	mov	r6, r9
1000f416:	4630      	mov	r0, r6
1000f418:	b002      	add	sp, #8
1000f41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f41e:	fa5f fc89 	uxtb.w	ip, r9
1000f422:	4606      	mov	r6, r0
1000f424:	f88d c004 	strb.w	ip, [sp, #4]
1000f428:	e7cf      	b.n	1000f3ca <__fputwc+0x36>
1000f42a:	89a3      	ldrh	r3, [r4, #12]
1000f42c:	4630      	mov	r0, r6
1000f42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000f432:	81a3      	strh	r3, [r4, #12]
1000f434:	b002      	add	sp, #8
1000f436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f43a:	bf00      	nop

1000f43c <_fputwc_r>:
1000f43c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1000f440:	f413 5f00 	tst.w	r3, #8192	; 0x2000
1000f444:	d10b      	bne.n	1000f45e <_fputwc_r+0x22>
1000f446:	b410      	push	{r4}
1000f448:	6e54      	ldr	r4, [r2, #100]	; 0x64
1000f44a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1000f44e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
1000f452:	6654      	str	r4, [r2, #100]	; 0x64
1000f454:	8193      	strh	r3, [r2, #12]
1000f456:	f85d 4b04 	ldr.w	r4, [sp], #4
1000f45a:	f7ff bf9b 	b.w	1000f394 <__fputwc>
1000f45e:	f7ff bf99 	b.w	1000f394 <__fputwc>
1000f462:	bf00      	nop

1000f464 <fputwc>:
1000f464:	4b0e      	ldr	r3, [pc, #56]	; (1000f4a0 <fputwc+0x3c>)
1000f466:	b570      	push	{r4, r5, r6, lr}
1000f468:	681d      	ldr	r5, [r3, #0]
1000f46a:	4606      	mov	r6, r0
1000f46c:	460c      	mov	r4, r1
1000f46e:	b10d      	cbz	r5, 1000f474 <fputwc+0x10>
1000f470:	6bab      	ldr	r3, [r5, #56]	; 0x38
1000f472:	b18b      	cbz	r3, 1000f498 <fputwc+0x34>
1000f474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000f478:	049a      	lsls	r2, r3, #18
1000f47a:	d406      	bmi.n	1000f48a <fputwc+0x26>
1000f47c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1000f47e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1000f482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1000f486:	81a3      	strh	r3, [r4, #12]
1000f488:	6662      	str	r2, [r4, #100]	; 0x64
1000f48a:	4622      	mov	r2, r4
1000f48c:	4631      	mov	r1, r6
1000f48e:	4628      	mov	r0, r5
1000f490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1000f494:	f7ff bf7e 	b.w	1000f394 <__fputwc>
1000f498:	4628      	mov	r0, r5
1000f49a:	f7fd fa7b 	bl	1000c994 <__sinit>
1000f49e:	e7e9      	b.n	1000f474 <fputwc+0x10>
1000f4a0:	200000a0 	.word	0x200000a0

1000f4a4 <_fstat_r>:
1000f4a4:	b538      	push	{r3, r4, r5, lr}
1000f4a6:	460b      	mov	r3, r1
1000f4a8:	4c07      	ldr	r4, [pc, #28]	; (1000f4c8 <_fstat_r+0x24>)
1000f4aa:	4605      	mov	r5, r0
1000f4ac:	4611      	mov	r1, r2
1000f4ae:	4618      	mov	r0, r3
1000f4b0:	2300      	movs	r3, #0
1000f4b2:	6023      	str	r3, [r4, #0]
1000f4b4:	f7f4 ff9b 	bl	100043ee <_fstat>
1000f4b8:	1c43      	adds	r3, r0, #1
1000f4ba:	d000      	beq.n	1000f4be <_fstat_r+0x1a>
1000f4bc:	bd38      	pop	{r3, r4, r5, pc}
1000f4be:	6823      	ldr	r3, [r4, #0]
1000f4c0:	2b00      	cmp	r3, #0
1000f4c2:	d0fb      	beq.n	1000f4bc <_fstat_r+0x18>
1000f4c4:	602b      	str	r3, [r5, #0]
1000f4c6:	bd38      	pop	{r3, r4, r5, pc}
1000f4c8:	2001132c 	.word	0x2001132c

1000f4cc <_isatty_r>:
1000f4cc:	b538      	push	{r3, r4, r5, lr}
1000f4ce:	4c07      	ldr	r4, [pc, #28]	; (1000f4ec <_isatty_r+0x20>)
1000f4d0:	2300      	movs	r3, #0
1000f4d2:	4605      	mov	r5, r0
1000f4d4:	4608      	mov	r0, r1
1000f4d6:	6023      	str	r3, [r4, #0]
1000f4d8:	f7f4 ff83 	bl	100043e2 <_isatty>
1000f4dc:	1c43      	adds	r3, r0, #1
1000f4de:	d000      	beq.n	1000f4e2 <_isatty_r+0x16>
1000f4e0:	bd38      	pop	{r3, r4, r5, pc}
1000f4e2:	6823      	ldr	r3, [r4, #0]
1000f4e4:	2b00      	cmp	r3, #0
1000f4e6:	d0fb      	beq.n	1000f4e0 <_isatty_r+0x14>
1000f4e8:	602b      	str	r3, [r5, #0]
1000f4ea:	bd38      	pop	{r3, r4, r5, pc}
1000f4ec:	2001132c 	.word	0x2001132c

1000f4f0 <_setlocale_r>:
1000f4f0:	b142      	cbz	r2, 1000f504 <_setlocale_r+0x14>
1000f4f2:	b510      	push	{r4, lr}
1000f4f4:	490b      	ldr	r1, [pc, #44]	; (1000f524 <_setlocale_r+0x34>)
1000f4f6:	4610      	mov	r0, r2
1000f4f8:	4614      	mov	r4, r2
1000f4fa:	f7fa fa45 	bl	10009988 <strcmp>
1000f4fe:	b918      	cbnz	r0, 1000f508 <_setlocale_r+0x18>
1000f500:	4809      	ldr	r0, [pc, #36]	; (1000f528 <_setlocale_r+0x38>)
1000f502:	bd10      	pop	{r4, pc}
1000f504:	4808      	ldr	r0, [pc, #32]	; (1000f528 <_setlocale_r+0x38>)
1000f506:	4770      	bx	lr
1000f508:	4907      	ldr	r1, [pc, #28]	; (1000f528 <_setlocale_r+0x38>)
1000f50a:	4620      	mov	r0, r4
1000f50c:	f7fa fa3c 	bl	10009988 <strcmp>
1000f510:	2800      	cmp	r0, #0
1000f512:	d0f5      	beq.n	1000f500 <_setlocale_r+0x10>
1000f514:	4620      	mov	r0, r4
1000f516:	4905      	ldr	r1, [pc, #20]	; (1000f52c <_setlocale_r+0x3c>)
1000f518:	f7fa fa36 	bl	10009988 <strcmp>
1000f51c:	2800      	cmp	r0, #0
1000f51e:	d0ef      	beq.n	1000f500 <_setlocale_r+0x10>
1000f520:	2000      	movs	r0, #0
1000f522:	bd10      	pop	{r4, pc}
1000f524:	10010df8 	.word	0x10010df8
1000f528:	10010df4 	.word	0x10010df4
1000f52c:	10010dc0 	.word	0x10010dc0

1000f530 <__locale_mb_cur_max>:
1000f530:	4b01      	ldr	r3, [pc, #4]	; (1000f538 <__locale_mb_cur_max+0x8>)
1000f532:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1000f536:	4770      	bx	lr
1000f538:	200008e0 	.word	0x200008e0

1000f53c <setlocale>:
1000f53c:	4b02      	ldr	r3, [pc, #8]	; (1000f548 <setlocale+0xc>)
1000f53e:	460a      	mov	r2, r1
1000f540:	4601      	mov	r1, r0
1000f542:	6818      	ldr	r0, [r3, #0]
1000f544:	f7ff bfd4 	b.w	1000f4f0 <_setlocale_r>
1000f548:	200000a0 	.word	0x200000a0

1000f54c <_lseek_r>:
1000f54c:	b570      	push	{r4, r5, r6, lr}
1000f54e:	460d      	mov	r5, r1
1000f550:	4c08      	ldr	r4, [pc, #32]	; (1000f574 <_lseek_r+0x28>)
1000f552:	4611      	mov	r1, r2
1000f554:	4606      	mov	r6, r0
1000f556:	461a      	mov	r2, r3
1000f558:	4628      	mov	r0, r5
1000f55a:	2300      	movs	r3, #0
1000f55c:	6023      	str	r3, [r4, #0]
1000f55e:	f7f4 ff43 	bl	100043e8 <_lseek>
1000f562:	1c43      	adds	r3, r0, #1
1000f564:	d000      	beq.n	1000f568 <_lseek_r+0x1c>
1000f566:	bd70      	pop	{r4, r5, r6, pc}
1000f568:	6823      	ldr	r3, [r4, #0]
1000f56a:	2b00      	cmp	r3, #0
1000f56c:	d0fb      	beq.n	1000f566 <_lseek_r+0x1a>
1000f56e:	6033      	str	r3, [r6, #0]
1000f570:	bd70      	pop	{r4, r5, r6, pc}
1000f572:	bf00      	nop
1000f574:	2001132c 	.word	0x2001132c

1000f578 <_mbtowc_r>:
1000f578:	b410      	push	{r4}
1000f57a:	4c03      	ldr	r4, [pc, #12]	; (1000f588 <_mbtowc_r+0x10>)
1000f57c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
1000f580:	46a4      	mov	ip, r4
1000f582:	f85d 4b04 	ldr.w	r4, [sp], #4
1000f586:	4760      	bx	ip
1000f588:	200008e0 	.word	0x200008e0

1000f58c <__ascii_mbtowc>:
1000f58c:	b082      	sub	sp, #8
1000f58e:	b149      	cbz	r1, 1000f5a4 <__ascii_mbtowc+0x18>
1000f590:	b15a      	cbz	r2, 1000f5aa <__ascii_mbtowc+0x1e>
1000f592:	b16b      	cbz	r3, 1000f5b0 <__ascii_mbtowc+0x24>
1000f594:	7813      	ldrb	r3, [r2, #0]
1000f596:	600b      	str	r3, [r1, #0]
1000f598:	7812      	ldrb	r2, [r2, #0]
1000f59a:	1c10      	adds	r0, r2, #0
1000f59c:	bf18      	it	ne
1000f59e:	2001      	movne	r0, #1
1000f5a0:	b002      	add	sp, #8
1000f5a2:	4770      	bx	lr
1000f5a4:	a901      	add	r1, sp, #4
1000f5a6:	2a00      	cmp	r2, #0
1000f5a8:	d1f3      	bne.n	1000f592 <__ascii_mbtowc+0x6>
1000f5aa:	4610      	mov	r0, r2
1000f5ac:	b002      	add	sp, #8
1000f5ae:	4770      	bx	lr
1000f5b0:	f06f 0001 	mvn.w	r0, #1
1000f5b4:	e7f4      	b.n	1000f5a0 <__ascii_mbtowc+0x14>
1000f5b6:	bf00      	nop

1000f5b8 <_read_r>:
1000f5b8:	b570      	push	{r4, r5, r6, lr}
1000f5ba:	460d      	mov	r5, r1
1000f5bc:	4c08      	ldr	r4, [pc, #32]	; (1000f5e0 <_read_r+0x28>)
1000f5be:	4611      	mov	r1, r2
1000f5c0:	4606      	mov	r6, r0
1000f5c2:	461a      	mov	r2, r3
1000f5c4:	4628      	mov	r0, r5
1000f5c6:	2300      	movs	r3, #0
1000f5c8:	6023      	str	r3, [r4, #0]
1000f5ca:	f7f4 ff13 	bl	100043f4 <_read>
1000f5ce:	1c43      	adds	r3, r0, #1
1000f5d0:	d000      	beq.n	1000f5d4 <_read_r+0x1c>
1000f5d2:	bd70      	pop	{r4, r5, r6, pc}
1000f5d4:	6823      	ldr	r3, [r4, #0]
1000f5d6:	2b00      	cmp	r3, #0
1000f5d8:	d0fb      	beq.n	1000f5d2 <_read_r+0x1a>
1000f5da:	6033      	str	r3, [r6, #0]
1000f5dc:	bd70      	pop	{r4, r5, r6, pc}
1000f5de:	bf00      	nop
1000f5e0:	2001132c 	.word	0x2001132c

1000f5e4 <__swbuf_r>:
1000f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f5e6:	460d      	mov	r5, r1
1000f5e8:	4614      	mov	r4, r2
1000f5ea:	4606      	mov	r6, r0
1000f5ec:	b110      	cbz	r0, 1000f5f4 <__swbuf_r+0x10>
1000f5ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000f5f0:	2b00      	cmp	r3, #0
1000f5f2:	d043      	beq.n	1000f67c <__swbuf_r+0x98>
1000f5f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000f5f8:	69a3      	ldr	r3, [r4, #24]
1000f5fa:	60a3      	str	r3, [r4, #8]
1000f5fc:	b291      	uxth	r1, r2
1000f5fe:	0708      	lsls	r0, r1, #28
1000f600:	d51b      	bpl.n	1000f63a <__swbuf_r+0x56>
1000f602:	6923      	ldr	r3, [r4, #16]
1000f604:	b1cb      	cbz	r3, 1000f63a <__swbuf_r+0x56>
1000f606:	b2ed      	uxtb	r5, r5
1000f608:	0489      	lsls	r1, r1, #18
1000f60a:	462f      	mov	r7, r5
1000f60c:	d522      	bpl.n	1000f654 <__swbuf_r+0x70>
1000f60e:	6822      	ldr	r2, [r4, #0]
1000f610:	6961      	ldr	r1, [r4, #20]
1000f612:	1ad3      	subs	r3, r2, r3
1000f614:	4299      	cmp	r1, r3
1000f616:	dd29      	ble.n	1000f66c <__swbuf_r+0x88>
1000f618:	3301      	adds	r3, #1
1000f61a:	68a1      	ldr	r1, [r4, #8]
1000f61c:	1c50      	adds	r0, r2, #1
1000f61e:	3901      	subs	r1, #1
1000f620:	60a1      	str	r1, [r4, #8]
1000f622:	6020      	str	r0, [r4, #0]
1000f624:	7015      	strb	r5, [r2, #0]
1000f626:	6962      	ldr	r2, [r4, #20]
1000f628:	429a      	cmp	r2, r3
1000f62a:	d02a      	beq.n	1000f682 <__swbuf_r+0x9e>
1000f62c:	89a3      	ldrh	r3, [r4, #12]
1000f62e:	07db      	lsls	r3, r3, #31
1000f630:	d501      	bpl.n	1000f636 <__swbuf_r+0x52>
1000f632:	2d0a      	cmp	r5, #10
1000f634:	d025      	beq.n	1000f682 <__swbuf_r+0x9e>
1000f636:	4638      	mov	r0, r7
1000f638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f63a:	4621      	mov	r1, r4
1000f63c:	4630      	mov	r0, r6
1000f63e:	f7fb ff69 	bl	1000b514 <__swsetup_r>
1000f642:	bb20      	cbnz	r0, 1000f68e <__swbuf_r+0xaa>
1000f644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000f648:	6923      	ldr	r3, [r4, #16]
1000f64a:	b291      	uxth	r1, r2
1000f64c:	b2ed      	uxtb	r5, r5
1000f64e:	0489      	lsls	r1, r1, #18
1000f650:	462f      	mov	r7, r5
1000f652:	d4dc      	bmi.n	1000f60e <__swbuf_r+0x2a>
1000f654:	6e61      	ldr	r1, [r4, #100]	; 0x64
1000f656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1000f65a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1000f65e:	81a2      	strh	r2, [r4, #12]
1000f660:	6822      	ldr	r2, [r4, #0]
1000f662:	6661      	str	r1, [r4, #100]	; 0x64
1000f664:	6961      	ldr	r1, [r4, #20]
1000f666:	1ad3      	subs	r3, r2, r3
1000f668:	4299      	cmp	r1, r3
1000f66a:	dcd5      	bgt.n	1000f618 <__swbuf_r+0x34>
1000f66c:	4621      	mov	r1, r4
1000f66e:	4630      	mov	r0, r6
1000f670:	f7fd f88a 	bl	1000c788 <_fflush_r>
1000f674:	b958      	cbnz	r0, 1000f68e <__swbuf_r+0xaa>
1000f676:	6822      	ldr	r2, [r4, #0]
1000f678:	2301      	movs	r3, #1
1000f67a:	e7ce      	b.n	1000f61a <__swbuf_r+0x36>
1000f67c:	f7fd f98a 	bl	1000c994 <__sinit>
1000f680:	e7b8      	b.n	1000f5f4 <__swbuf_r+0x10>
1000f682:	4621      	mov	r1, r4
1000f684:	4630      	mov	r0, r6
1000f686:	f7fd f87f 	bl	1000c788 <_fflush_r>
1000f68a:	2800      	cmp	r0, #0
1000f68c:	d0d3      	beq.n	1000f636 <__swbuf_r+0x52>
1000f68e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1000f692:	e7d0      	b.n	1000f636 <__swbuf_r+0x52>

1000f694 <__swbuf>:
1000f694:	4b02      	ldr	r3, [pc, #8]	; (1000f6a0 <__swbuf+0xc>)
1000f696:	460a      	mov	r2, r1
1000f698:	4601      	mov	r1, r0
1000f69a:	6818      	ldr	r0, [r3, #0]
1000f69c:	f7ff bfa2 	b.w	1000f5e4 <__swbuf_r>
1000f6a0:	200000a0 	.word	0x200000a0

1000f6a4 <_wcrtomb_r>:
1000f6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6a6:	4c0b      	ldr	r4, [pc, #44]	; (1000f6d4 <_wcrtomb_r+0x30>)
1000f6a8:	b085      	sub	sp, #20
1000f6aa:	4606      	mov	r6, r0
1000f6ac:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1000f6b0:	461f      	mov	r7, r3
1000f6b2:	b121      	cbz	r1, 1000f6be <_wcrtomb_r+0x1a>
1000f6b4:	47a0      	blx	r4
1000f6b6:	1c43      	adds	r3, r0, #1
1000f6b8:	d006      	beq.n	1000f6c8 <_wcrtomb_r+0x24>
1000f6ba:	b005      	add	sp, #20
1000f6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f6be:	460a      	mov	r2, r1
1000f6c0:	a901      	add	r1, sp, #4
1000f6c2:	47a0      	blx	r4
1000f6c4:	1c43      	adds	r3, r0, #1
1000f6c6:	d1f8      	bne.n	1000f6ba <_wcrtomb_r+0x16>
1000f6c8:	2200      	movs	r2, #0
1000f6ca:	238a      	movs	r3, #138	; 0x8a
1000f6cc:	603a      	str	r2, [r7, #0]
1000f6ce:	6033      	str	r3, [r6, #0]
1000f6d0:	b005      	add	sp, #20
1000f6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f6d4:	200008e0 	.word	0x200008e0

1000f6d8 <wcrtomb>:
1000f6d8:	b570      	push	{r4, r5, r6, lr}
1000f6da:	4b0f      	ldr	r3, [pc, #60]	; (1000f718 <wcrtomb+0x40>)
1000f6dc:	4c0f      	ldr	r4, [pc, #60]	; (1000f71c <wcrtomb+0x44>)
1000f6de:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
1000f6e2:	6824      	ldr	r4, [r4, #0]
1000f6e4:	b084      	sub	sp, #16
1000f6e6:	4615      	mov	r5, r2
1000f6e8:	b140      	cbz	r0, 1000f6fc <wcrtomb+0x24>
1000f6ea:	460a      	mov	r2, r1
1000f6ec:	462b      	mov	r3, r5
1000f6ee:	4601      	mov	r1, r0
1000f6f0:	4620      	mov	r0, r4
1000f6f2:	47b0      	blx	r6
1000f6f4:	1c43      	adds	r3, r0, #1
1000f6f6:	d008      	beq.n	1000f70a <wcrtomb+0x32>
1000f6f8:	b004      	add	sp, #16
1000f6fa:	bd70      	pop	{r4, r5, r6, pc}
1000f6fc:	4602      	mov	r2, r0
1000f6fe:	462b      	mov	r3, r5
1000f700:	a901      	add	r1, sp, #4
1000f702:	4620      	mov	r0, r4
1000f704:	47b0      	blx	r6
1000f706:	1c43      	adds	r3, r0, #1
1000f708:	d1f6      	bne.n	1000f6f8 <wcrtomb+0x20>
1000f70a:	2200      	movs	r2, #0
1000f70c:	238a      	movs	r3, #138	; 0x8a
1000f70e:	602a      	str	r2, [r5, #0]
1000f710:	6023      	str	r3, [r4, #0]
1000f712:	b004      	add	sp, #16
1000f714:	bd70      	pop	{r4, r5, r6, pc}
1000f716:	bf00      	nop
1000f718:	200008e0 	.word	0x200008e0
1000f71c:	200000a0 	.word	0x200000a0

1000f720 <_wctomb_r>:
1000f720:	b410      	push	{r4}
1000f722:	4c03      	ldr	r4, [pc, #12]	; (1000f730 <_wctomb_r+0x10>)
1000f724:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1000f728:	46a4      	mov	ip, r4
1000f72a:	f85d 4b04 	ldr.w	r4, [sp], #4
1000f72e:	4760      	bx	ip
1000f730:	200008e0 	.word	0x200008e0

1000f734 <__ascii_wctomb>:
1000f734:	b149      	cbz	r1, 1000f74a <__ascii_wctomb+0x16>
1000f736:	2aff      	cmp	r2, #255	; 0xff
1000f738:	d802      	bhi.n	1000f740 <__ascii_wctomb+0xc>
1000f73a:	700a      	strb	r2, [r1, #0]
1000f73c:	2001      	movs	r0, #1
1000f73e:	4770      	bx	lr
1000f740:	238a      	movs	r3, #138	; 0x8a
1000f742:	6003      	str	r3, [r0, #0]
1000f744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f748:	4770      	bx	lr
1000f74a:	4608      	mov	r0, r1
1000f74c:	4770      	bx	lr
1000f74e:	bf00      	nop

1000f750 <abort>:
1000f750:	b508      	push	{r3, lr}
1000f752:	2006      	movs	r0, #6
1000f754:	f000 f890 	bl	1000f878 <raise>
1000f758:	2001      	movs	r0, #1
1000f75a:	f000 f8d5 	bl	1000f908 <_exit>
1000f75e:	bf00      	nop

1000f760 <_init_signal_r.part.0>:
1000f760:	b510      	push	{r4, lr}
1000f762:	2180      	movs	r1, #128	; 0x80
1000f764:	4604      	mov	r4, r0
1000f766:	f7fd fcd5 	bl	1000d114 <_malloc_r>
1000f76a:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
1000f76e:	b140      	cbz	r0, 1000f782 <_init_signal_r.part.0+0x22>
1000f770:	1f03      	subs	r3, r0, #4
1000f772:	2200      	movs	r2, #0
1000f774:	307c      	adds	r0, #124	; 0x7c
1000f776:	f843 2f04 	str.w	r2, [r3, #4]!
1000f77a:	4283      	cmp	r3, r0
1000f77c:	d1fb      	bne.n	1000f776 <_init_signal_r.part.0+0x16>
1000f77e:	2000      	movs	r0, #0
1000f780:	bd10      	pop	{r4, pc}
1000f782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f786:	bd10      	pop	{r4, pc}

1000f788 <_init_signal_r>:
1000f788:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
1000f78c:	b10b      	cbz	r3, 1000f792 <_init_signal_r+0xa>
1000f78e:	2000      	movs	r0, #0
1000f790:	4770      	bx	lr
1000f792:	e7e5      	b.n	1000f760 <_init_signal_r.part.0>

1000f794 <_signal_r>:
1000f794:	291f      	cmp	r1, #31
1000f796:	b570      	push	{r4, r5, r6, lr}
1000f798:	4605      	mov	r5, r0
1000f79a:	d809      	bhi.n	1000f7b0 <_signal_r+0x1c>
1000f79c:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
1000f7a0:	4616      	mov	r6, r2
1000f7a2:	460c      	mov	r4, r1
1000f7a4:	b14b      	cbz	r3, 1000f7ba <_signal_r+0x26>
1000f7a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1000f7aa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
1000f7ae:	bd70      	pop	{r4, r5, r6, pc}
1000f7b0:	2216      	movs	r2, #22
1000f7b2:	6002      	str	r2, [r0, #0]
1000f7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f7b8:	bd70      	pop	{r4, r5, r6, pc}
1000f7ba:	f7ff ffd1 	bl	1000f760 <_init_signal_r.part.0>
1000f7be:	b910      	cbnz	r0, 1000f7c6 <_signal_r+0x32>
1000f7c0:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
1000f7c4:	e7ef      	b.n	1000f7a6 <_signal_r+0x12>
1000f7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f7ca:	bd70      	pop	{r4, r5, r6, pc}

1000f7cc <_raise_r>:
1000f7cc:	291f      	cmp	r1, #31
1000f7ce:	b538      	push	{r3, r4, r5, lr}
1000f7d0:	d822      	bhi.n	1000f818 <_raise_r+0x4c>
1000f7d2:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
1000f7d6:	4605      	mov	r5, r0
1000f7d8:	460c      	mov	r4, r1
1000f7da:	b16a      	cbz	r2, 1000f7f8 <_raise_r+0x2c>
1000f7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000f7e0:	b153      	cbz	r3, 1000f7f8 <_raise_r+0x2c>
1000f7e2:	2b01      	cmp	r3, #1
1000f7e4:	d016      	beq.n	1000f814 <_raise_r+0x48>
1000f7e6:	1c59      	adds	r1, r3, #1
1000f7e8:	d010      	beq.n	1000f80c <_raise_r+0x40>
1000f7ea:	2500      	movs	r5, #0
1000f7ec:	4620      	mov	r0, r4
1000f7ee:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
1000f7f2:	4798      	blx	r3
1000f7f4:	4628      	mov	r0, r5
1000f7f6:	bd38      	pop	{r3, r4, r5, pc}
1000f7f8:	4628      	mov	r0, r5
1000f7fa:	f000 f873 	bl	1000f8e4 <_getpid_r>
1000f7fe:	4622      	mov	r2, r4
1000f800:	4601      	mov	r1, r0
1000f802:	4628      	mov	r0, r5
1000f804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000f808:	f000 b858 	b.w	1000f8bc <_kill_r>
1000f80c:	2316      	movs	r3, #22
1000f80e:	6003      	str	r3, [r0, #0]
1000f810:	2001      	movs	r0, #1
1000f812:	bd38      	pop	{r3, r4, r5, pc}
1000f814:	2000      	movs	r0, #0
1000f816:	bd38      	pop	{r3, r4, r5, pc}
1000f818:	2316      	movs	r3, #22
1000f81a:	6003      	str	r3, [r0, #0]
1000f81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f820:	bd38      	pop	{r3, r4, r5, pc}
1000f822:	bf00      	nop

1000f824 <__sigtramp_r>:
1000f824:	291f      	cmp	r1, #31
1000f826:	d823      	bhi.n	1000f870 <__sigtramp_r+0x4c>
1000f828:	b538      	push	{r3, r4, r5, lr}
1000f82a:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
1000f82e:	4605      	mov	r5, r0
1000f830:	460c      	mov	r4, r1
1000f832:	b183      	cbz	r3, 1000f856 <__sigtramp_r+0x32>
1000f834:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
1000f838:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1000f83c:	b14a      	cbz	r2, 1000f852 <__sigtramp_r+0x2e>
1000f83e:	1c51      	adds	r1, r2, #1
1000f840:	d011      	beq.n	1000f866 <__sigtramp_r+0x42>
1000f842:	2a01      	cmp	r2, #1
1000f844:	d00d      	beq.n	1000f862 <__sigtramp_r+0x3e>
1000f846:	2500      	movs	r5, #0
1000f848:	4620      	mov	r0, r4
1000f84a:	601d      	str	r5, [r3, #0]
1000f84c:	4790      	blx	r2
1000f84e:	4628      	mov	r0, r5
1000f850:	bd38      	pop	{r3, r4, r5, pc}
1000f852:	2001      	movs	r0, #1
1000f854:	bd38      	pop	{r3, r4, r5, pc}
1000f856:	f7ff ff83 	bl	1000f760 <_init_signal_r.part.0>
1000f85a:	b930      	cbnz	r0, 1000f86a <__sigtramp_r+0x46>
1000f85c:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
1000f860:	e7e8      	b.n	1000f834 <__sigtramp_r+0x10>
1000f862:	2003      	movs	r0, #3
1000f864:	bd38      	pop	{r3, r4, r5, pc}
1000f866:	2002      	movs	r0, #2
1000f868:	bd38      	pop	{r3, r4, r5, pc}
1000f86a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f86e:	bd38      	pop	{r3, r4, r5, pc}
1000f870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f874:	4770      	bx	lr
1000f876:	bf00      	nop

1000f878 <raise>:
1000f878:	4b02      	ldr	r3, [pc, #8]	; (1000f884 <raise+0xc>)
1000f87a:	4601      	mov	r1, r0
1000f87c:	6818      	ldr	r0, [r3, #0]
1000f87e:	f7ff bfa5 	b.w	1000f7cc <_raise_r>
1000f882:	bf00      	nop
1000f884:	200000a0 	.word	0x200000a0

1000f888 <signal>:
1000f888:	4b02      	ldr	r3, [pc, #8]	; (1000f894 <signal+0xc>)
1000f88a:	460a      	mov	r2, r1
1000f88c:	4601      	mov	r1, r0
1000f88e:	6818      	ldr	r0, [r3, #0]
1000f890:	f7ff bf80 	b.w	1000f794 <_signal_r>
1000f894:	200000a0 	.word	0x200000a0

1000f898 <_init_signal>:
1000f898:	4b03      	ldr	r3, [pc, #12]	; (1000f8a8 <_init_signal+0x10>)
1000f89a:	6818      	ldr	r0, [r3, #0]
1000f89c:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
1000f8a0:	b10b      	cbz	r3, 1000f8a6 <_init_signal+0xe>
1000f8a2:	2000      	movs	r0, #0
1000f8a4:	4770      	bx	lr
1000f8a6:	e75b      	b.n	1000f760 <_init_signal_r.part.0>
1000f8a8:	200000a0 	.word	0x200000a0

1000f8ac <__sigtramp>:
1000f8ac:	4b02      	ldr	r3, [pc, #8]	; (1000f8b8 <__sigtramp+0xc>)
1000f8ae:	4601      	mov	r1, r0
1000f8b0:	6818      	ldr	r0, [r3, #0]
1000f8b2:	f7ff bfb7 	b.w	1000f824 <__sigtramp_r>
1000f8b6:	bf00      	nop
1000f8b8:	200000a0 	.word	0x200000a0

1000f8bc <_kill_r>:
1000f8bc:	b538      	push	{r3, r4, r5, lr}
1000f8be:	460b      	mov	r3, r1
1000f8c0:	4c07      	ldr	r4, [pc, #28]	; (1000f8e0 <_kill_r+0x24>)
1000f8c2:	4605      	mov	r5, r0
1000f8c4:	4611      	mov	r1, r2
1000f8c6:	4618      	mov	r0, r3
1000f8c8:	2300      	movs	r3, #0
1000f8ca:	6023      	str	r3, [r4, #0]
1000f8cc:	f000 f814 	bl	1000f8f8 <_kill>
1000f8d0:	1c43      	adds	r3, r0, #1
1000f8d2:	d000      	beq.n	1000f8d6 <_kill_r+0x1a>
1000f8d4:	bd38      	pop	{r3, r4, r5, pc}
1000f8d6:	6823      	ldr	r3, [r4, #0]
1000f8d8:	2b00      	cmp	r3, #0
1000f8da:	d0fb      	beq.n	1000f8d4 <_kill_r+0x18>
1000f8dc:	602b      	str	r3, [r5, #0]
1000f8de:	bd38      	pop	{r3, r4, r5, pc}
1000f8e0:	2001132c 	.word	0x2001132c

1000f8e4 <_getpid_r>:
1000f8e4:	f000 b800 	b.w	1000f8e8 <_getpid>

1000f8e8 <_getpid>:
1000f8e8:	4b02      	ldr	r3, [pc, #8]	; (1000f8f4 <_getpid+0xc>)
1000f8ea:	2258      	movs	r2, #88	; 0x58
1000f8ec:	601a      	str	r2, [r3, #0]
1000f8ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f8f2:	4770      	bx	lr
1000f8f4:	2001132c 	.word	0x2001132c

1000f8f8 <_kill>:
1000f8f8:	4b02      	ldr	r3, [pc, #8]	; (1000f904 <_kill+0xc>)
1000f8fa:	2258      	movs	r2, #88	; 0x58
1000f8fc:	601a      	str	r2, [r3, #0]
1000f8fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000f902:	4770      	bx	lr
1000f904:	2001132c 	.word	0x2001132c

1000f908 <_exit>:
1000f908:	e7fe      	b.n	1000f908 <_exit>
1000f90a:	bf00      	nop

1000f90c <__aeabi_drsub>:
1000f90c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1000f910:	e002      	b.n	1000f918 <__adddf3>
1000f912:	bf00      	nop

1000f914 <__aeabi_dsub>:
1000f914:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1000f918 <__adddf3>:
1000f918:	b530      	push	{r4, r5, lr}
1000f91a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1000f91e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1000f922:	ea94 0f05 	teq	r4, r5
1000f926:	bf08      	it	eq
1000f928:	ea90 0f02 	teqeq	r0, r2
1000f92c:	bf1f      	itttt	ne
1000f92e:	ea54 0c00 	orrsne.w	ip, r4, r0
1000f932:	ea55 0c02 	orrsne.w	ip, r5, r2
1000f936:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000f93a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1000f93e:	f000 80e2 	beq.w	1000fb06 <__adddf3+0x1ee>
1000f942:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000f946:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000f94a:	bfb8      	it	lt
1000f94c:	426d      	neglt	r5, r5
1000f94e:	dd0c      	ble.n	1000f96a <__adddf3+0x52>
1000f950:	442c      	add	r4, r5
1000f952:	ea80 0202 	eor.w	r2, r0, r2
1000f956:	ea81 0303 	eor.w	r3, r1, r3
1000f95a:	ea82 0000 	eor.w	r0, r2, r0
1000f95e:	ea83 0101 	eor.w	r1, r3, r1
1000f962:	ea80 0202 	eor.w	r2, r0, r2
1000f966:	ea81 0303 	eor.w	r3, r1, r3
1000f96a:	2d36      	cmp	r5, #54	; 0x36
1000f96c:	bf88      	it	hi
1000f96e:	bd30      	pophi	{r4, r5, pc}
1000f970:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1000f974:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000f978:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1000f97c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1000f980:	d002      	beq.n	1000f988 <__adddf3+0x70>
1000f982:	4240      	negs	r0, r0
1000f984:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000f988:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1000f98c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1000f990:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1000f994:	d002      	beq.n	1000f99c <__adddf3+0x84>
1000f996:	4252      	negs	r2, r2
1000f998:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1000f99c:	ea94 0f05 	teq	r4, r5
1000f9a0:	f000 80a7 	beq.w	1000faf2 <__adddf3+0x1da>
1000f9a4:	f1a4 0401 	sub.w	r4, r4, #1
1000f9a8:	f1d5 0e20 	rsbs	lr, r5, #32
1000f9ac:	db0d      	blt.n	1000f9ca <__adddf3+0xb2>
1000f9ae:	fa02 fc0e 	lsl.w	ip, r2, lr
1000f9b2:	fa22 f205 	lsr.w	r2, r2, r5
1000f9b6:	1880      	adds	r0, r0, r2
1000f9b8:	f141 0100 	adc.w	r1, r1, #0
1000f9bc:	fa03 f20e 	lsl.w	r2, r3, lr
1000f9c0:	1880      	adds	r0, r0, r2
1000f9c2:	fa43 f305 	asr.w	r3, r3, r5
1000f9c6:	4159      	adcs	r1, r3
1000f9c8:	e00e      	b.n	1000f9e8 <__adddf3+0xd0>
1000f9ca:	f1a5 0520 	sub.w	r5, r5, #32
1000f9ce:	f10e 0e20 	add.w	lr, lr, #32
1000f9d2:	2a01      	cmp	r2, #1
1000f9d4:	fa03 fc0e 	lsl.w	ip, r3, lr
1000f9d8:	bf28      	it	cs
1000f9da:	f04c 0c02 	orrcs.w	ip, ip, #2
1000f9de:	fa43 f305 	asr.w	r3, r3, r5
1000f9e2:	18c0      	adds	r0, r0, r3
1000f9e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1000f9e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000f9ec:	d507      	bpl.n	1000f9fe <__adddf3+0xe6>
1000f9ee:	f04f 0e00 	mov.w	lr, #0
1000f9f2:	f1dc 0c00 	rsbs	ip, ip, #0
1000f9f6:	eb7e 0000 	sbcs.w	r0, lr, r0
1000f9fa:	eb6e 0101 	sbc.w	r1, lr, r1
1000f9fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1000fa02:	d31b      	bcc.n	1000fa3c <__adddf3+0x124>
1000fa04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1000fa08:	d30c      	bcc.n	1000fa24 <__adddf3+0x10c>
1000fa0a:	0849      	lsrs	r1, r1, #1
1000fa0c:	ea5f 0030 	movs.w	r0, r0, rrx
1000fa10:	ea4f 0c3c 	mov.w	ip, ip, rrx
1000fa14:	f104 0401 	add.w	r4, r4, #1
1000fa18:	ea4f 5244 	mov.w	r2, r4, lsl #21
1000fa1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1000fa20:	f080 809a 	bcs.w	1000fb58 <__adddf3+0x240>
1000fa24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000fa28:	bf08      	it	eq
1000fa2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1000fa2e:	f150 0000 	adcs.w	r0, r0, #0
1000fa32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000fa36:	ea41 0105 	orr.w	r1, r1, r5
1000fa3a:	bd30      	pop	{r4, r5, pc}
1000fa3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1000fa40:	4140      	adcs	r0, r0
1000fa42:	eb41 0101 	adc.w	r1, r1, r1
1000fa46:	3c01      	subs	r4, #1
1000fa48:	bf28      	it	cs
1000fa4a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
1000fa4e:	d2e9      	bcs.n	1000fa24 <__adddf3+0x10c>
1000fa50:	f091 0f00 	teq	r1, #0
1000fa54:	bf04      	itt	eq
1000fa56:	4601      	moveq	r1, r0
1000fa58:	2000      	moveq	r0, #0
1000fa5a:	fab1 f381 	clz	r3, r1
1000fa5e:	bf08      	it	eq
1000fa60:	3320      	addeq	r3, #32
1000fa62:	f1a3 030b 	sub.w	r3, r3, #11
1000fa66:	f1b3 0220 	subs.w	r2, r3, #32
1000fa6a:	da0c      	bge.n	1000fa86 <__adddf3+0x16e>
1000fa6c:	320c      	adds	r2, #12
1000fa6e:	dd08      	ble.n	1000fa82 <__adddf3+0x16a>
1000fa70:	f102 0c14 	add.w	ip, r2, #20
1000fa74:	f1c2 020c 	rsb	r2, r2, #12
1000fa78:	fa01 f00c 	lsl.w	r0, r1, ip
1000fa7c:	fa21 f102 	lsr.w	r1, r1, r2
1000fa80:	e00c      	b.n	1000fa9c <__adddf3+0x184>
1000fa82:	f102 0214 	add.w	r2, r2, #20
1000fa86:	bfd8      	it	le
1000fa88:	f1c2 0c20 	rsble	ip, r2, #32
1000fa8c:	fa01 f102 	lsl.w	r1, r1, r2
1000fa90:	fa20 fc0c 	lsr.w	ip, r0, ip
1000fa94:	bfdc      	itt	le
1000fa96:	ea41 010c 	orrle.w	r1, r1, ip
1000fa9a:	4090      	lslle	r0, r2
1000fa9c:	1ae4      	subs	r4, r4, r3
1000fa9e:	bfa2      	ittt	ge
1000faa0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1000faa4:	4329      	orrge	r1, r5
1000faa6:	bd30      	popge	{r4, r5, pc}
1000faa8:	ea6f 0404 	mvn.w	r4, r4
1000faac:	3c1f      	subs	r4, #31
1000faae:	da1c      	bge.n	1000faea <__adddf3+0x1d2>
1000fab0:	340c      	adds	r4, #12
1000fab2:	dc0e      	bgt.n	1000fad2 <__adddf3+0x1ba>
1000fab4:	f104 0414 	add.w	r4, r4, #20
1000fab8:	f1c4 0220 	rsb	r2, r4, #32
1000fabc:	fa20 f004 	lsr.w	r0, r0, r4
1000fac0:	fa01 f302 	lsl.w	r3, r1, r2
1000fac4:	ea40 0003 	orr.w	r0, r0, r3
1000fac8:	fa21 f304 	lsr.w	r3, r1, r4
1000facc:	ea45 0103 	orr.w	r1, r5, r3
1000fad0:	bd30      	pop	{r4, r5, pc}
1000fad2:	f1c4 040c 	rsb	r4, r4, #12
1000fad6:	f1c4 0220 	rsb	r2, r4, #32
1000fada:	fa20 f002 	lsr.w	r0, r0, r2
1000fade:	fa01 f304 	lsl.w	r3, r1, r4
1000fae2:	ea40 0003 	orr.w	r0, r0, r3
1000fae6:	4629      	mov	r1, r5
1000fae8:	bd30      	pop	{r4, r5, pc}
1000faea:	fa21 f004 	lsr.w	r0, r1, r4
1000faee:	4629      	mov	r1, r5
1000faf0:	bd30      	pop	{r4, r5, pc}
1000faf2:	f094 0f00 	teq	r4, #0
1000faf6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1000fafa:	bf06      	itte	eq
1000fafc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1000fb00:	3401      	addeq	r4, #1
1000fb02:	3d01      	subne	r5, #1
1000fb04:	e74e      	b.n	1000f9a4 <__adddf3+0x8c>
1000fb06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000fb0a:	bf18      	it	ne
1000fb0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1000fb10:	d029      	beq.n	1000fb66 <__adddf3+0x24e>
1000fb12:	ea94 0f05 	teq	r4, r5
1000fb16:	bf08      	it	eq
1000fb18:	ea90 0f02 	teqeq	r0, r2
1000fb1c:	d005      	beq.n	1000fb2a <__adddf3+0x212>
1000fb1e:	ea54 0c00 	orrs.w	ip, r4, r0
1000fb22:	bf04      	itt	eq
1000fb24:	4619      	moveq	r1, r3
1000fb26:	4610      	moveq	r0, r2
1000fb28:	bd30      	pop	{r4, r5, pc}
1000fb2a:	ea91 0f03 	teq	r1, r3
1000fb2e:	bf1e      	ittt	ne
1000fb30:	2100      	movne	r1, #0
1000fb32:	2000      	movne	r0, #0
1000fb34:	bd30      	popne	{r4, r5, pc}
1000fb36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000fb3a:	d105      	bne.n	1000fb48 <__adddf3+0x230>
1000fb3c:	0040      	lsls	r0, r0, #1
1000fb3e:	4149      	adcs	r1, r1
1000fb40:	bf28      	it	cs
1000fb42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000fb46:	bd30      	pop	{r4, r5, pc}
1000fb48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1000fb4c:	bf3c      	itt	cc
1000fb4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1000fb52:	bd30      	popcc	{r4, r5, pc}
1000fb54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000fb58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1000fb5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1000fb60:	f04f 0000 	mov.w	r0, #0
1000fb64:	bd30      	pop	{r4, r5, pc}
1000fb66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000fb6a:	bf1a      	itte	ne
1000fb6c:	4619      	movne	r1, r3
1000fb6e:	4610      	movne	r0, r2
1000fb70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1000fb74:	bf1c      	itt	ne
1000fb76:	460b      	movne	r3, r1
1000fb78:	4602      	movne	r2, r0
1000fb7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1000fb7e:	bf06      	itte	eq
1000fb80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1000fb84:	ea91 0f03 	teqeq	r1, r3
1000fb88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1000fb8c:	bd30      	pop	{r4, r5, pc}
1000fb8e:	bf00      	nop

1000fb90 <__aeabi_ui2d>:
1000fb90:	f090 0f00 	teq	r0, #0
1000fb94:	bf04      	itt	eq
1000fb96:	2100      	moveq	r1, #0
1000fb98:	4770      	bxeq	lr
1000fb9a:	b530      	push	{r4, r5, lr}
1000fb9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1000fba0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000fba4:	f04f 0500 	mov.w	r5, #0
1000fba8:	f04f 0100 	mov.w	r1, #0
1000fbac:	e750      	b.n	1000fa50 <__adddf3+0x138>
1000fbae:	bf00      	nop

1000fbb0 <__aeabi_i2d>:
1000fbb0:	f090 0f00 	teq	r0, #0
1000fbb4:	bf04      	itt	eq
1000fbb6:	2100      	moveq	r1, #0
1000fbb8:	4770      	bxeq	lr
1000fbba:	b530      	push	{r4, r5, lr}
1000fbbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1000fbc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000fbc4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1000fbc8:	bf48      	it	mi
1000fbca:	4240      	negmi	r0, r0
1000fbcc:	f04f 0100 	mov.w	r1, #0
1000fbd0:	e73e      	b.n	1000fa50 <__adddf3+0x138>
1000fbd2:	bf00      	nop

1000fbd4 <__aeabi_f2d>:
1000fbd4:	0042      	lsls	r2, r0, #1
1000fbd6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1000fbda:	ea4f 0131 	mov.w	r1, r1, rrx
1000fbde:	ea4f 7002 	mov.w	r0, r2, lsl #28
1000fbe2:	bf1f      	itttt	ne
1000fbe4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1000fbe8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1000fbec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1000fbf0:	4770      	bxne	lr
1000fbf2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1000fbf6:	bf08      	it	eq
1000fbf8:	4770      	bxeq	lr
1000fbfa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1000fbfe:	bf04      	itt	eq
1000fc00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1000fc04:	4770      	bxeq	lr
1000fc06:	b530      	push	{r4, r5, lr}
1000fc08:	f44f 7460 	mov.w	r4, #896	; 0x380
1000fc0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000fc10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1000fc14:	e71c      	b.n	1000fa50 <__adddf3+0x138>
1000fc16:	bf00      	nop

1000fc18 <__aeabi_ul2d>:
1000fc18:	ea50 0201 	orrs.w	r2, r0, r1
1000fc1c:	bf08      	it	eq
1000fc1e:	4770      	bxeq	lr
1000fc20:	b530      	push	{r4, r5, lr}
1000fc22:	f04f 0500 	mov.w	r5, #0
1000fc26:	e00a      	b.n	1000fc3e <__aeabi_l2d+0x16>

1000fc28 <__aeabi_l2d>:
1000fc28:	ea50 0201 	orrs.w	r2, r0, r1
1000fc2c:	bf08      	it	eq
1000fc2e:	4770      	bxeq	lr
1000fc30:	b530      	push	{r4, r5, lr}
1000fc32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000fc36:	d502      	bpl.n	1000fc3e <__aeabi_l2d+0x16>
1000fc38:	4240      	negs	r0, r0
1000fc3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000fc3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1000fc42:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000fc46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000fc4a:	f43f aed8 	beq.w	1000f9fe <__adddf3+0xe6>
1000fc4e:	f04f 0203 	mov.w	r2, #3
1000fc52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000fc56:	bf18      	it	ne
1000fc58:	3203      	addne	r2, #3
1000fc5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000fc5e:	bf18      	it	ne
1000fc60:	3203      	addne	r2, #3
1000fc62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000fc66:	f1c2 0320 	rsb	r3, r2, #32
1000fc6a:	fa00 fc03 	lsl.w	ip, r0, r3
1000fc6e:	fa20 f002 	lsr.w	r0, r0, r2
1000fc72:	fa01 fe03 	lsl.w	lr, r1, r3
1000fc76:	ea40 000e 	orr.w	r0, r0, lr
1000fc7a:	fa21 f102 	lsr.w	r1, r1, r2
1000fc7e:	4414      	add	r4, r2
1000fc80:	e6bd      	b.n	1000f9fe <__adddf3+0xe6>
1000fc82:	bf00      	nop

1000fc84 <__aeabi_dmul>:
1000fc84:	b570      	push	{r4, r5, r6, lr}
1000fc86:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000fc8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1000fc8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1000fc92:	bf1d      	ittte	ne
1000fc94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000fc98:	ea94 0f0c 	teqne	r4, ip
1000fc9c:	ea95 0f0c 	teqne	r5, ip
1000fca0:	f000 f8de 	bleq	1000fe60 <__aeabi_dmul+0x1dc>
1000fca4:	442c      	add	r4, r5
1000fca6:	ea81 0603 	eor.w	r6, r1, r3
1000fcaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1000fcae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1000fcb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1000fcb6:	bf18      	it	ne
1000fcb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1000fcbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000fcc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1000fcc4:	d038      	beq.n	1000fd38 <__aeabi_dmul+0xb4>
1000fcc6:	fba0 ce02 	umull	ip, lr, r0, r2
1000fcca:	f04f 0500 	mov.w	r5, #0
1000fcce:	fbe1 e502 	umlal	lr, r5, r1, r2
1000fcd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1000fcd6:	fbe0 e503 	umlal	lr, r5, r0, r3
1000fcda:	f04f 0600 	mov.w	r6, #0
1000fcde:	fbe1 5603 	umlal	r5, r6, r1, r3
1000fce2:	f09c 0f00 	teq	ip, #0
1000fce6:	bf18      	it	ne
1000fce8:	f04e 0e01 	orrne.w	lr, lr, #1
1000fcec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1000fcf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1000fcf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1000fcf8:	d204      	bcs.n	1000fd04 <__aeabi_dmul+0x80>
1000fcfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1000fcfe:	416d      	adcs	r5, r5
1000fd00:	eb46 0606 	adc.w	r6, r6, r6
1000fd04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000fd08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1000fd0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1000fd10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1000fd14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000fd18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1000fd1c:	bf88      	it	hi
1000fd1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1000fd22:	d81e      	bhi.n	1000fd62 <__aeabi_dmul+0xde>
1000fd24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000fd28:	bf08      	it	eq
1000fd2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1000fd2e:	f150 0000 	adcs.w	r0, r0, #0
1000fd32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000fd36:	bd70      	pop	{r4, r5, r6, pc}
1000fd38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1000fd3c:	ea46 0101 	orr.w	r1, r6, r1
1000fd40:	ea40 0002 	orr.w	r0, r0, r2
1000fd44:	ea81 0103 	eor.w	r1, r1, r3
1000fd48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1000fd4c:	bfc2      	ittt	gt
1000fd4e:	ebd4 050c 	rsbsgt	r5, r4, ip
1000fd52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000fd56:	bd70      	popgt	{r4, r5, r6, pc}
1000fd58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000fd5c:	f04f 0e00 	mov.w	lr, #0
1000fd60:	3c01      	subs	r4, #1
1000fd62:	f300 80ab 	bgt.w	1000febc <__aeabi_dmul+0x238>
1000fd66:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000fd6a:	bfde      	ittt	le
1000fd6c:	2000      	movle	r0, #0
1000fd6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1000fd72:	bd70      	pople	{r4, r5, r6, pc}
1000fd74:	f1c4 0400 	rsb	r4, r4, #0
1000fd78:	3c20      	subs	r4, #32
1000fd7a:	da35      	bge.n	1000fde8 <__aeabi_dmul+0x164>
1000fd7c:	340c      	adds	r4, #12
1000fd7e:	dc1b      	bgt.n	1000fdb8 <__aeabi_dmul+0x134>
1000fd80:	f104 0414 	add.w	r4, r4, #20
1000fd84:	f1c4 0520 	rsb	r5, r4, #32
1000fd88:	fa00 f305 	lsl.w	r3, r0, r5
1000fd8c:	fa20 f004 	lsr.w	r0, r0, r4
1000fd90:	fa01 f205 	lsl.w	r2, r1, r5
1000fd94:	ea40 0002 	orr.w	r0, r0, r2
1000fd98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1000fd9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1000fda0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1000fda4:	fa21 f604 	lsr.w	r6, r1, r4
1000fda8:	eb42 0106 	adc.w	r1, r2, r6
1000fdac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000fdb0:	bf08      	it	eq
1000fdb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000fdb6:	bd70      	pop	{r4, r5, r6, pc}
1000fdb8:	f1c4 040c 	rsb	r4, r4, #12
1000fdbc:	f1c4 0520 	rsb	r5, r4, #32
1000fdc0:	fa00 f304 	lsl.w	r3, r0, r4
1000fdc4:	fa20 f005 	lsr.w	r0, r0, r5
1000fdc8:	fa01 f204 	lsl.w	r2, r1, r4
1000fdcc:	ea40 0002 	orr.w	r0, r0, r2
1000fdd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000fdd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1000fdd8:	f141 0100 	adc.w	r1, r1, #0
1000fddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000fde0:	bf08      	it	eq
1000fde2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000fde6:	bd70      	pop	{r4, r5, r6, pc}
1000fde8:	f1c4 0520 	rsb	r5, r4, #32
1000fdec:	fa00 f205 	lsl.w	r2, r0, r5
1000fdf0:	ea4e 0e02 	orr.w	lr, lr, r2
1000fdf4:	fa20 f304 	lsr.w	r3, r0, r4
1000fdf8:	fa01 f205 	lsl.w	r2, r1, r5
1000fdfc:	ea43 0302 	orr.w	r3, r3, r2
1000fe00:	fa21 f004 	lsr.w	r0, r1, r4
1000fe04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000fe08:	fa21 f204 	lsr.w	r2, r1, r4
1000fe0c:	ea20 0002 	bic.w	r0, r0, r2
1000fe10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1000fe14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000fe18:	bf08      	it	eq
1000fe1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000fe1e:	bd70      	pop	{r4, r5, r6, pc}
1000fe20:	f094 0f00 	teq	r4, #0
1000fe24:	d10f      	bne.n	1000fe46 <__aeabi_dmul+0x1c2>
1000fe26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000fe2a:	0040      	lsls	r0, r0, #1
1000fe2c:	eb41 0101 	adc.w	r1, r1, r1
1000fe30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1000fe34:	bf08      	it	eq
1000fe36:	3c01      	subeq	r4, #1
1000fe38:	d0f7      	beq.n	1000fe2a <__aeabi_dmul+0x1a6>
1000fe3a:	ea41 0106 	orr.w	r1, r1, r6
1000fe3e:	f095 0f00 	teq	r5, #0
1000fe42:	bf18      	it	ne
1000fe44:	4770      	bxne	lr
1000fe46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000fe4a:	0052      	lsls	r2, r2, #1
1000fe4c:	eb43 0303 	adc.w	r3, r3, r3
1000fe50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1000fe54:	bf08      	it	eq
1000fe56:	3d01      	subeq	r5, #1
1000fe58:	d0f7      	beq.n	1000fe4a <__aeabi_dmul+0x1c6>
1000fe5a:	ea43 0306 	orr.w	r3, r3, r6
1000fe5e:	4770      	bx	lr
1000fe60:	ea94 0f0c 	teq	r4, ip
1000fe64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000fe68:	bf18      	it	ne
1000fe6a:	ea95 0f0c 	teqne	r5, ip
1000fe6e:	d00c      	beq.n	1000fe8a <__aeabi_dmul+0x206>
1000fe70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1000fe74:	bf18      	it	ne
1000fe76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000fe7a:	d1d1      	bne.n	1000fe20 <__aeabi_dmul+0x19c>
1000fe7c:	ea81 0103 	eor.w	r1, r1, r3
1000fe80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000fe84:	f04f 0000 	mov.w	r0, #0
1000fe88:	bd70      	pop	{r4, r5, r6, pc}
1000fe8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1000fe8e:	bf06      	itte	eq
1000fe90:	4610      	moveq	r0, r2
1000fe92:	4619      	moveq	r1, r3
1000fe94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000fe98:	d019      	beq.n	1000fece <__aeabi_dmul+0x24a>
1000fe9a:	ea94 0f0c 	teq	r4, ip
1000fe9e:	d102      	bne.n	1000fea6 <__aeabi_dmul+0x222>
1000fea0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1000fea4:	d113      	bne.n	1000fece <__aeabi_dmul+0x24a>
1000fea6:	ea95 0f0c 	teq	r5, ip
1000feaa:	d105      	bne.n	1000feb8 <__aeabi_dmul+0x234>
1000feac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1000feb0:	bf1c      	itt	ne
1000feb2:	4610      	movne	r0, r2
1000feb4:	4619      	movne	r1, r3
1000feb6:	d10a      	bne.n	1000fece <__aeabi_dmul+0x24a>
1000feb8:	ea81 0103 	eor.w	r1, r1, r3
1000febc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1000fec0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1000fec4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1000fec8:	f04f 0000 	mov.w	r0, #0
1000fecc:	bd70      	pop	{r4, r5, r6, pc}
1000fece:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1000fed2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1000fed6:	bd70      	pop	{r4, r5, r6, pc}

1000fed8 <__aeabi_ddiv>:
1000fed8:	b570      	push	{r4, r5, r6, lr}
1000feda:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000fede:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1000fee2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1000fee6:	bf1d      	ittte	ne
1000fee8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000feec:	ea94 0f0c 	teqne	r4, ip
1000fef0:	ea95 0f0c 	teqne	r5, ip
1000fef4:	f000 f8a7 	bleq	10010046 <__aeabi_ddiv+0x16e>
1000fef8:	eba4 0405 	sub.w	r4, r4, r5
1000fefc:	ea81 0e03 	eor.w	lr, r1, r3
1000ff00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1000ff04:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000ff08:	f000 8088 	beq.w	1001001c <__aeabi_ddiv+0x144>
1000ff0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1000ff10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1000ff14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000ff18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1000ff1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1000ff20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1000ff24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000ff28:	ea4f 2600 	mov.w	r6, r0, lsl #8
1000ff2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1000ff30:	429d      	cmp	r5, r3
1000ff32:	bf08      	it	eq
1000ff34:	4296      	cmpeq	r6, r2
1000ff36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000ff3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1000ff3e:	d202      	bcs.n	1000ff46 <__aeabi_ddiv+0x6e>
1000ff40:	085b      	lsrs	r3, r3, #1
1000ff42:	ea4f 0232 	mov.w	r2, r2, rrx
1000ff46:	1ab6      	subs	r6, r6, r2
1000ff48:	eb65 0503 	sbc.w	r5, r5, r3
1000ff4c:	085b      	lsrs	r3, r3, #1
1000ff4e:	ea4f 0232 	mov.w	r2, r2, rrx
1000ff52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000ff56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000ff5a:	ebb6 0e02 	subs.w	lr, r6, r2
1000ff5e:	eb75 0e03 	sbcs.w	lr, r5, r3
1000ff62:	bf22      	ittt	cs
1000ff64:	1ab6      	subcs	r6, r6, r2
1000ff66:	4675      	movcs	r5, lr
1000ff68:	ea40 000c 	orrcs.w	r0, r0, ip
1000ff6c:	085b      	lsrs	r3, r3, #1
1000ff6e:	ea4f 0232 	mov.w	r2, r2, rrx
1000ff72:	ebb6 0e02 	subs.w	lr, r6, r2
1000ff76:	eb75 0e03 	sbcs.w	lr, r5, r3
1000ff7a:	bf22      	ittt	cs
1000ff7c:	1ab6      	subcs	r6, r6, r2
1000ff7e:	4675      	movcs	r5, lr
1000ff80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1000ff84:	085b      	lsrs	r3, r3, #1
1000ff86:	ea4f 0232 	mov.w	r2, r2, rrx
1000ff8a:	ebb6 0e02 	subs.w	lr, r6, r2
1000ff8e:	eb75 0e03 	sbcs.w	lr, r5, r3
1000ff92:	bf22      	ittt	cs
1000ff94:	1ab6      	subcs	r6, r6, r2
1000ff96:	4675      	movcs	r5, lr
1000ff98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1000ff9c:	085b      	lsrs	r3, r3, #1
1000ff9e:	ea4f 0232 	mov.w	r2, r2, rrx
1000ffa2:	ebb6 0e02 	subs.w	lr, r6, r2
1000ffa6:	eb75 0e03 	sbcs.w	lr, r5, r3
1000ffaa:	bf22      	ittt	cs
1000ffac:	1ab6      	subcs	r6, r6, r2
1000ffae:	4675      	movcs	r5, lr
1000ffb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1000ffb4:	ea55 0e06 	orrs.w	lr, r5, r6
1000ffb8:	d018      	beq.n	1000ffec <__aeabi_ddiv+0x114>
1000ffba:	ea4f 1505 	mov.w	r5, r5, lsl #4
1000ffbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1000ffc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1000ffc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1000ffca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1000ffce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1000ffd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1000ffd6:	d1c0      	bne.n	1000ff5a <__aeabi_ddiv+0x82>
1000ffd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1000ffdc:	d10b      	bne.n	1000fff6 <__aeabi_ddiv+0x11e>
1000ffde:	ea41 0100 	orr.w	r1, r1, r0
1000ffe2:	f04f 0000 	mov.w	r0, #0
1000ffe6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1000ffea:	e7b6      	b.n	1000ff5a <__aeabi_ddiv+0x82>
1000ffec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1000fff0:	bf04      	itt	eq
1000fff2:	4301      	orreq	r1, r0
1000fff4:	2000      	moveq	r0, #0
1000fff6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1000fffa:	bf88      	it	hi
1000fffc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10010000:	f63f aeaf 	bhi.w	1000fd62 <__aeabi_dmul+0xde>
10010004:	ebb5 0c03 	subs.w	ip, r5, r3
10010008:	bf04      	itt	eq
1001000a:	ebb6 0c02 	subseq.w	ip, r6, r2
1001000e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10010012:	f150 0000 	adcs.w	r0, r0, #0
10010016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1001001a:	bd70      	pop	{r4, r5, r6, pc}
1001001c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10010020:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10010024:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
10010028:	bfc2      	ittt	gt
1001002a:	ebd4 050c 	rsbsgt	r5, r4, ip
1001002e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10010032:	bd70      	popgt	{r4, r5, r6, pc}
10010034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10010038:	f04f 0e00 	mov.w	lr, #0
1001003c:	3c01      	subs	r4, #1
1001003e:	e690      	b.n	1000fd62 <__aeabi_dmul+0xde>
10010040:	ea45 0e06 	orr.w	lr, r5, r6
10010044:	e68d      	b.n	1000fd62 <__aeabi_dmul+0xde>
10010046:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1001004a:	ea94 0f0c 	teq	r4, ip
1001004e:	bf08      	it	eq
10010050:	ea95 0f0c 	teqeq	r5, ip
10010054:	f43f af3b 	beq.w	1000fece <__aeabi_dmul+0x24a>
10010058:	ea94 0f0c 	teq	r4, ip
1001005c:	d10a      	bne.n	10010074 <__aeabi_ddiv+0x19c>
1001005e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10010062:	f47f af34 	bne.w	1000fece <__aeabi_dmul+0x24a>
10010066:	ea95 0f0c 	teq	r5, ip
1001006a:	f47f af25 	bne.w	1000feb8 <__aeabi_dmul+0x234>
1001006e:	4610      	mov	r0, r2
10010070:	4619      	mov	r1, r3
10010072:	e72c      	b.n	1000fece <__aeabi_dmul+0x24a>
10010074:	ea95 0f0c 	teq	r5, ip
10010078:	d106      	bne.n	10010088 <__aeabi_ddiv+0x1b0>
1001007a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1001007e:	f43f aefd 	beq.w	1000fe7c <__aeabi_dmul+0x1f8>
10010082:	4610      	mov	r0, r2
10010084:	4619      	mov	r1, r3
10010086:	e722      	b.n	1000fece <__aeabi_dmul+0x24a>
10010088:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1001008c:	bf18      	it	ne
1001008e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10010092:	f47f aec5 	bne.w	1000fe20 <__aeabi_dmul+0x19c>
10010096:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1001009a:	f47f af0d 	bne.w	1000feb8 <__aeabi_dmul+0x234>
1001009e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100100a2:	f47f aeeb 	bne.w	1000fe7c <__aeabi_dmul+0x1f8>
100100a6:	e712      	b.n	1000fece <__aeabi_dmul+0x24a>

100100a8 <__gedf2>:
100100a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
100100ac:	e006      	b.n	100100bc <__cmpdf2+0x4>
100100ae:	bf00      	nop

100100b0 <__ledf2>:
100100b0:	f04f 0c01 	mov.w	ip, #1
100100b4:	e002      	b.n	100100bc <__cmpdf2+0x4>
100100b6:	bf00      	nop

100100b8 <__cmpdf2>:
100100b8:	f04f 0c01 	mov.w	ip, #1
100100bc:	f84d cd04 	str.w	ip, [sp, #-4]!
100100c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100100c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100100c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100100cc:	bf18      	it	ne
100100ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100100d2:	d01b      	beq.n	1001010c <__cmpdf2+0x54>
100100d4:	b001      	add	sp, #4
100100d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100100da:	bf0c      	ite	eq
100100dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100100e0:	ea91 0f03 	teqne	r1, r3
100100e4:	bf02      	ittt	eq
100100e6:	ea90 0f02 	teqeq	r0, r2
100100ea:	2000      	moveq	r0, #0
100100ec:	4770      	bxeq	lr
100100ee:	f110 0f00 	cmn.w	r0, #0
100100f2:	ea91 0f03 	teq	r1, r3
100100f6:	bf58      	it	pl
100100f8:	4299      	cmppl	r1, r3
100100fa:	bf08      	it	eq
100100fc:	4290      	cmpeq	r0, r2
100100fe:	bf2c      	ite	cs
10010100:	17d8      	asrcs	r0, r3, #31
10010102:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
10010106:	f040 0001 	orr.w	r0, r0, #1
1001010a:	4770      	bx	lr
1001010c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10010110:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10010114:	d102      	bne.n	1001011c <__cmpdf2+0x64>
10010116:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1001011a:	d107      	bne.n	1001012c <__cmpdf2+0x74>
1001011c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10010120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10010124:	d1d6      	bne.n	100100d4 <__cmpdf2+0x1c>
10010126:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1001012a:	d0d3      	beq.n	100100d4 <__cmpdf2+0x1c>
1001012c:	f85d 0b04 	ldr.w	r0, [sp], #4
10010130:	4770      	bx	lr
10010132:	bf00      	nop

10010134 <__aeabi_cdrcmple>:
10010134:	4684      	mov	ip, r0
10010136:	4610      	mov	r0, r2
10010138:	4662      	mov	r2, ip
1001013a:	468c      	mov	ip, r1
1001013c:	4619      	mov	r1, r3
1001013e:	4663      	mov	r3, ip
10010140:	e000      	b.n	10010144 <__aeabi_cdcmpeq>
10010142:	bf00      	nop

10010144 <__aeabi_cdcmpeq>:
10010144:	b501      	push	{r0, lr}
10010146:	f7ff ffb7 	bl	100100b8 <__cmpdf2>
1001014a:	2800      	cmp	r0, #0
1001014c:	bf48      	it	mi
1001014e:	f110 0f00 	cmnmi.w	r0, #0
10010152:	bd01      	pop	{r0, pc}

10010154 <__aeabi_dcmpeq>:
10010154:	f84d ed08 	str.w	lr, [sp, #-8]!
10010158:	f7ff fff4 	bl	10010144 <__aeabi_cdcmpeq>
1001015c:	bf0c      	ite	eq
1001015e:	2001      	moveq	r0, #1
10010160:	2000      	movne	r0, #0
10010162:	f85d fb08 	ldr.w	pc, [sp], #8
10010166:	bf00      	nop

10010168 <__aeabi_dcmplt>:
10010168:	f84d ed08 	str.w	lr, [sp, #-8]!
1001016c:	f7ff ffea 	bl	10010144 <__aeabi_cdcmpeq>
10010170:	bf34      	ite	cc
10010172:	2001      	movcc	r0, #1
10010174:	2000      	movcs	r0, #0
10010176:	f85d fb08 	ldr.w	pc, [sp], #8
1001017a:	bf00      	nop

1001017c <__aeabi_dcmple>:
1001017c:	f84d ed08 	str.w	lr, [sp, #-8]!
10010180:	f7ff ffe0 	bl	10010144 <__aeabi_cdcmpeq>
10010184:	bf94      	ite	ls
10010186:	2001      	movls	r0, #1
10010188:	2000      	movhi	r0, #0
1001018a:	f85d fb08 	ldr.w	pc, [sp], #8
1001018e:	bf00      	nop

10010190 <__aeabi_dcmpge>:
10010190:	f84d ed08 	str.w	lr, [sp, #-8]!
10010194:	f7ff ffce 	bl	10010134 <__aeabi_cdrcmple>
10010198:	bf94      	ite	ls
1001019a:	2001      	movls	r0, #1
1001019c:	2000      	movhi	r0, #0
1001019e:	f85d fb08 	ldr.w	pc, [sp], #8
100101a2:	bf00      	nop

100101a4 <__aeabi_dcmpgt>:
100101a4:	f84d ed08 	str.w	lr, [sp, #-8]!
100101a8:	f7ff ffc4 	bl	10010134 <__aeabi_cdrcmple>
100101ac:	bf34      	ite	cc
100101ae:	2001      	movcc	r0, #1
100101b0:	2000      	movcs	r0, #0
100101b2:	f85d fb08 	ldr.w	pc, [sp], #8
100101b6:	bf00      	nop

100101b8 <__aeabi_dcmpun>:
100101b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100101bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100101c0:	d102      	bne.n	100101c8 <__aeabi_dcmpun+0x10>
100101c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100101c6:	d10a      	bne.n	100101de <__aeabi_dcmpun+0x26>
100101c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100101cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100101d0:	d102      	bne.n	100101d8 <__aeabi_dcmpun+0x20>
100101d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100101d6:	d102      	bne.n	100101de <__aeabi_dcmpun+0x26>
100101d8:	f04f 0000 	mov.w	r0, #0
100101dc:	4770      	bx	lr
100101de:	f04f 0001 	mov.w	r0, #1
100101e2:	4770      	bx	lr

100101e4 <__aeabi_d2iz>:
100101e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
100101e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100101ec:	d215      	bcs.n	1001021a <__aeabi_d2iz+0x36>
100101ee:	d511      	bpl.n	10010214 <__aeabi_d2iz+0x30>
100101f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100101f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100101f8:	d912      	bls.n	10010220 <__aeabi_d2iz+0x3c>
100101fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
100101fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10010202:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10010206:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1001020a:	fa23 f002 	lsr.w	r0, r3, r2
1001020e:	bf18      	it	ne
10010210:	4240      	negne	r0, r0
10010212:	4770      	bx	lr
10010214:	f04f 0000 	mov.w	r0, #0
10010218:	4770      	bx	lr
1001021a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1001021e:	d105      	bne.n	1001022c <__aeabi_d2iz+0x48>
10010220:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
10010224:	bf08      	it	eq
10010226:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1001022a:	4770      	bx	lr
1001022c:	f04f 0000 	mov.w	r0, #0
10010230:	4770      	bx	lr
10010232:	bf00      	nop

10010234 <__aeabi_uldivmod>:
10010234:	b953      	cbnz	r3, 1001024c <__aeabi_uldivmod+0x18>
10010236:	b94a      	cbnz	r2, 1001024c <__aeabi_uldivmod+0x18>
10010238:	2900      	cmp	r1, #0
1001023a:	bf08      	it	eq
1001023c:	2800      	cmpeq	r0, #0
1001023e:	bf1c      	itt	ne
10010240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
10010244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
10010248:	f000 b96e 	b.w	10010528 <__aeabi_idiv0>
1001024c:	f1ad 0c08 	sub.w	ip, sp, #8
10010250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10010254:	f000 f806 	bl	10010264 <__udivmoddi4>
10010258:	f8dd e004 	ldr.w	lr, [sp, #4]
1001025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10010260:	b004      	add	sp, #16
10010262:	4770      	bx	lr

10010264 <__udivmoddi4>:
10010264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10010268:	9d08      	ldr	r5, [sp, #32]
1001026a:	4604      	mov	r4, r0
1001026c:	468c      	mov	ip, r1
1001026e:	2b00      	cmp	r3, #0
10010270:	f040 8083 	bne.w	1001037a <__udivmoddi4+0x116>
10010274:	428a      	cmp	r2, r1
10010276:	4617      	mov	r7, r2
10010278:	d947      	bls.n	1001030a <__udivmoddi4+0xa6>
1001027a:	fab2 f282 	clz	r2, r2
1001027e:	b142      	cbz	r2, 10010292 <__udivmoddi4+0x2e>
10010280:	f1c2 0020 	rsb	r0, r2, #32
10010284:	fa24 f000 	lsr.w	r0, r4, r0
10010288:	4091      	lsls	r1, r2
1001028a:	4097      	lsls	r7, r2
1001028c:	ea40 0c01 	orr.w	ip, r0, r1
10010290:	4094      	lsls	r4, r2
10010292:	ea4f 4817 	mov.w	r8, r7, lsr #16
10010296:	0c23      	lsrs	r3, r4, #16
10010298:	fbbc f6f8 	udiv	r6, ip, r8
1001029c:	fa1f fe87 	uxth.w	lr, r7
100102a0:	fb08 c116 	mls	r1, r8, r6, ip
100102a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
100102a8:	fb06 f10e 	mul.w	r1, r6, lr
100102ac:	4299      	cmp	r1, r3
100102ae:	d909      	bls.n	100102c4 <__udivmoddi4+0x60>
100102b0:	18fb      	adds	r3, r7, r3
100102b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
100102b6:	f080 8119 	bcs.w	100104ec <__udivmoddi4+0x288>
100102ba:	4299      	cmp	r1, r3
100102bc:	f240 8116 	bls.w	100104ec <__udivmoddi4+0x288>
100102c0:	3e02      	subs	r6, #2
100102c2:	443b      	add	r3, r7
100102c4:	1a5b      	subs	r3, r3, r1
100102c6:	b2a4      	uxth	r4, r4
100102c8:	fbb3 f0f8 	udiv	r0, r3, r8
100102cc:	fb08 3310 	mls	r3, r8, r0, r3
100102d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
100102d4:	fb00 fe0e 	mul.w	lr, r0, lr
100102d8:	45a6      	cmp	lr, r4
100102da:	d909      	bls.n	100102f0 <__udivmoddi4+0x8c>
100102dc:	193c      	adds	r4, r7, r4
100102de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
100102e2:	f080 8105 	bcs.w	100104f0 <__udivmoddi4+0x28c>
100102e6:	45a6      	cmp	lr, r4
100102e8:	f240 8102 	bls.w	100104f0 <__udivmoddi4+0x28c>
100102ec:	3802      	subs	r0, #2
100102ee:	443c      	add	r4, r7
100102f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
100102f4:	eba4 040e 	sub.w	r4, r4, lr
100102f8:	2600      	movs	r6, #0
100102fa:	b11d      	cbz	r5, 10010304 <__udivmoddi4+0xa0>
100102fc:	40d4      	lsrs	r4, r2
100102fe:	2300      	movs	r3, #0
10010300:	e9c5 4300 	strd	r4, r3, [r5]
10010304:	4631      	mov	r1, r6
10010306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1001030a:	b902      	cbnz	r2, 1001030e <__udivmoddi4+0xaa>
1001030c:	deff      	udf	#255	; 0xff
1001030e:	fab2 f282 	clz	r2, r2
10010312:	2a00      	cmp	r2, #0
10010314:	d150      	bne.n	100103b8 <__udivmoddi4+0x154>
10010316:	1bcb      	subs	r3, r1, r7
10010318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1001031c:	fa1f f887 	uxth.w	r8, r7
10010320:	2601      	movs	r6, #1
10010322:	fbb3 fcfe 	udiv	ip, r3, lr
10010326:	0c21      	lsrs	r1, r4, #16
10010328:	fb0e 331c 	mls	r3, lr, ip, r3
1001032c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
10010330:	fb08 f30c 	mul.w	r3, r8, ip
10010334:	428b      	cmp	r3, r1
10010336:	d907      	bls.n	10010348 <__udivmoddi4+0xe4>
10010338:	1879      	adds	r1, r7, r1
1001033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1001033e:	d202      	bcs.n	10010346 <__udivmoddi4+0xe2>
10010340:	428b      	cmp	r3, r1
10010342:	f200 80e9 	bhi.w	10010518 <__udivmoddi4+0x2b4>
10010346:	4684      	mov	ip, r0
10010348:	1ac9      	subs	r1, r1, r3
1001034a:	b2a3      	uxth	r3, r4
1001034c:	fbb1 f0fe 	udiv	r0, r1, lr
10010350:	fb0e 1110 	mls	r1, lr, r0, r1
10010354:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
10010358:	fb08 f800 	mul.w	r8, r8, r0
1001035c:	45a0      	cmp	r8, r4
1001035e:	d907      	bls.n	10010370 <__udivmoddi4+0x10c>
10010360:	193c      	adds	r4, r7, r4
10010362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
10010366:	d202      	bcs.n	1001036e <__udivmoddi4+0x10a>
10010368:	45a0      	cmp	r8, r4
1001036a:	f200 80d9 	bhi.w	10010520 <__udivmoddi4+0x2bc>
1001036e:	4618      	mov	r0, r3
10010370:	eba4 0408 	sub.w	r4, r4, r8
10010374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
10010378:	e7bf      	b.n	100102fa <__udivmoddi4+0x96>
1001037a:	428b      	cmp	r3, r1
1001037c:	d909      	bls.n	10010392 <__udivmoddi4+0x12e>
1001037e:	2d00      	cmp	r5, #0
10010380:	f000 80b1 	beq.w	100104e6 <__udivmoddi4+0x282>
10010384:	2600      	movs	r6, #0
10010386:	e9c5 0100 	strd	r0, r1, [r5]
1001038a:	4630      	mov	r0, r6
1001038c:	4631      	mov	r1, r6
1001038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10010392:	fab3 f683 	clz	r6, r3
10010396:	2e00      	cmp	r6, #0
10010398:	d14a      	bne.n	10010430 <__udivmoddi4+0x1cc>
1001039a:	428b      	cmp	r3, r1
1001039c:	d302      	bcc.n	100103a4 <__udivmoddi4+0x140>
1001039e:	4282      	cmp	r2, r0
100103a0:	f200 80b8 	bhi.w	10010514 <__udivmoddi4+0x2b0>
100103a4:	1a84      	subs	r4, r0, r2
100103a6:	eb61 0103 	sbc.w	r1, r1, r3
100103aa:	2001      	movs	r0, #1
100103ac:	468c      	mov	ip, r1
100103ae:	2d00      	cmp	r5, #0
100103b0:	d0a8      	beq.n	10010304 <__udivmoddi4+0xa0>
100103b2:	e9c5 4c00 	strd	r4, ip, [r5]
100103b6:	e7a5      	b.n	10010304 <__udivmoddi4+0xa0>
100103b8:	f1c2 0320 	rsb	r3, r2, #32
100103bc:	fa20 f603 	lsr.w	r6, r0, r3
100103c0:	4097      	lsls	r7, r2
100103c2:	fa01 f002 	lsl.w	r0, r1, r2
100103c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
100103ca:	40d9      	lsrs	r1, r3
100103cc:	4330      	orrs	r0, r6
100103ce:	0c03      	lsrs	r3, r0, #16
100103d0:	fbb1 f6fe 	udiv	r6, r1, lr
100103d4:	fa1f f887 	uxth.w	r8, r7
100103d8:	fb0e 1116 	mls	r1, lr, r6, r1
100103dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
100103e0:	fb06 f108 	mul.w	r1, r6, r8
100103e4:	4299      	cmp	r1, r3
100103e6:	fa04 f402 	lsl.w	r4, r4, r2
100103ea:	d909      	bls.n	10010400 <__udivmoddi4+0x19c>
100103ec:	18fb      	adds	r3, r7, r3
100103ee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
100103f2:	f080 808d 	bcs.w	10010510 <__udivmoddi4+0x2ac>
100103f6:	4299      	cmp	r1, r3
100103f8:	f240 808a 	bls.w	10010510 <__udivmoddi4+0x2ac>
100103fc:	3e02      	subs	r6, #2
100103fe:	443b      	add	r3, r7
10010400:	1a5b      	subs	r3, r3, r1
10010402:	b281      	uxth	r1, r0
10010404:	fbb3 f0fe 	udiv	r0, r3, lr
10010408:	fb0e 3310 	mls	r3, lr, r0, r3
1001040c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
10010410:	fb00 f308 	mul.w	r3, r0, r8
10010414:	428b      	cmp	r3, r1
10010416:	d907      	bls.n	10010428 <__udivmoddi4+0x1c4>
10010418:	1879      	adds	r1, r7, r1
1001041a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1001041e:	d273      	bcs.n	10010508 <__udivmoddi4+0x2a4>
10010420:	428b      	cmp	r3, r1
10010422:	d971      	bls.n	10010508 <__udivmoddi4+0x2a4>
10010424:	3802      	subs	r0, #2
10010426:	4439      	add	r1, r7
10010428:	1acb      	subs	r3, r1, r3
1001042a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1001042e:	e778      	b.n	10010322 <__udivmoddi4+0xbe>
10010430:	f1c6 0c20 	rsb	ip, r6, #32
10010434:	fa03 f406 	lsl.w	r4, r3, r6
10010438:	fa22 f30c 	lsr.w	r3, r2, ip
1001043c:	431c      	orrs	r4, r3
1001043e:	fa20 f70c 	lsr.w	r7, r0, ip
10010442:	fa01 f306 	lsl.w	r3, r1, r6
10010446:	ea4f 4e14 	mov.w	lr, r4, lsr #16
1001044a:	fa21 f10c 	lsr.w	r1, r1, ip
1001044e:	431f      	orrs	r7, r3
10010450:	0c3b      	lsrs	r3, r7, #16
10010452:	fbb1 f9fe 	udiv	r9, r1, lr
10010456:	fa1f f884 	uxth.w	r8, r4
1001045a:	fb0e 1119 	mls	r1, lr, r9, r1
1001045e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
10010462:	fb09 fa08 	mul.w	sl, r9, r8
10010466:	458a      	cmp	sl, r1
10010468:	fa02 f206 	lsl.w	r2, r2, r6
1001046c:	fa00 f306 	lsl.w	r3, r0, r6
10010470:	d908      	bls.n	10010484 <__udivmoddi4+0x220>
10010472:	1861      	adds	r1, r4, r1
10010474:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
10010478:	d248      	bcs.n	1001050c <__udivmoddi4+0x2a8>
1001047a:	458a      	cmp	sl, r1
1001047c:	d946      	bls.n	1001050c <__udivmoddi4+0x2a8>
1001047e:	f1a9 0902 	sub.w	r9, r9, #2
10010482:	4421      	add	r1, r4
10010484:	eba1 010a 	sub.w	r1, r1, sl
10010488:	b2bf      	uxth	r7, r7
1001048a:	fbb1 f0fe 	udiv	r0, r1, lr
1001048e:	fb0e 1110 	mls	r1, lr, r0, r1
10010492:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
10010496:	fb00 f808 	mul.w	r8, r0, r8
1001049a:	45b8      	cmp	r8, r7
1001049c:	d907      	bls.n	100104ae <__udivmoddi4+0x24a>
1001049e:	19e7      	adds	r7, r4, r7
100104a0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
100104a4:	d22e      	bcs.n	10010504 <__udivmoddi4+0x2a0>
100104a6:	45b8      	cmp	r8, r7
100104a8:	d92c      	bls.n	10010504 <__udivmoddi4+0x2a0>
100104aa:	3802      	subs	r0, #2
100104ac:	4427      	add	r7, r4
100104ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
100104b2:	eba7 0708 	sub.w	r7, r7, r8
100104b6:	fba0 8902 	umull	r8, r9, r0, r2
100104ba:	454f      	cmp	r7, r9
100104bc:	46c6      	mov	lr, r8
100104be:	4649      	mov	r1, r9
100104c0:	d31a      	bcc.n	100104f8 <__udivmoddi4+0x294>
100104c2:	d017      	beq.n	100104f4 <__udivmoddi4+0x290>
100104c4:	b15d      	cbz	r5, 100104de <__udivmoddi4+0x27a>
100104c6:	ebb3 020e 	subs.w	r2, r3, lr
100104ca:	eb67 0701 	sbc.w	r7, r7, r1
100104ce:	fa07 fc0c 	lsl.w	ip, r7, ip
100104d2:	40f2      	lsrs	r2, r6
100104d4:	ea4c 0202 	orr.w	r2, ip, r2
100104d8:	40f7      	lsrs	r7, r6
100104da:	e9c5 2700 	strd	r2, r7, [r5]
100104de:	2600      	movs	r6, #0
100104e0:	4631      	mov	r1, r6
100104e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100104e6:	462e      	mov	r6, r5
100104e8:	4628      	mov	r0, r5
100104ea:	e70b      	b.n	10010304 <__udivmoddi4+0xa0>
100104ec:	4606      	mov	r6, r0
100104ee:	e6e9      	b.n	100102c4 <__udivmoddi4+0x60>
100104f0:	4618      	mov	r0, r3
100104f2:	e6fd      	b.n	100102f0 <__udivmoddi4+0x8c>
100104f4:	4543      	cmp	r3, r8
100104f6:	d2e5      	bcs.n	100104c4 <__udivmoddi4+0x260>
100104f8:	ebb8 0e02 	subs.w	lr, r8, r2
100104fc:	eb69 0104 	sbc.w	r1, r9, r4
10010500:	3801      	subs	r0, #1
10010502:	e7df      	b.n	100104c4 <__udivmoddi4+0x260>
10010504:	4608      	mov	r0, r1
10010506:	e7d2      	b.n	100104ae <__udivmoddi4+0x24a>
10010508:	4660      	mov	r0, ip
1001050a:	e78d      	b.n	10010428 <__udivmoddi4+0x1c4>
1001050c:	4681      	mov	r9, r0
1001050e:	e7b9      	b.n	10010484 <__udivmoddi4+0x220>
10010510:	4666      	mov	r6, ip
10010512:	e775      	b.n	10010400 <__udivmoddi4+0x19c>
10010514:	4630      	mov	r0, r6
10010516:	e74a      	b.n	100103ae <__udivmoddi4+0x14a>
10010518:	f1ac 0c02 	sub.w	ip, ip, #2
1001051c:	4439      	add	r1, r7
1001051e:	e713      	b.n	10010348 <__udivmoddi4+0xe4>
10010520:	3802      	subs	r0, #2
10010522:	443c      	add	r4, r7
10010524:	e724      	b.n	10010370 <__udivmoddi4+0x10c>
10010526:	bf00      	nop

10010528 <__aeabi_idiv0>:
10010528:	4770      	bx	lr
1001052a:	bf00      	nop
1001052c:	666c6573 	.word	0x666c6573
10010530:	66656420 	.word	0x66656420
10010534:	64656e69 	.word	0x64656e69
10010538:	73617420 	.word	0x73617420
1001053c:	7369206b 	.word	0x7369206b
10010540:	6e757220 	.word	0x6e757220
10010544:	676e696e 	.word	0x676e696e
10010548:	61540020 	.word	0x61540020
1001054c:	00316b73 	.word	0x00316b73
10010550:	4f525245 	.word	0x4f525245
10010554:	46203a52 	.word	0x46203a52
10010558:	52656572 	.word	0x52656572
1001055c:	20534f54 	.word	0x20534f54
10010560:	20646964 	.word	0x20646964
10010564:	20746f6e 	.word	0x20746f6e
10010568:	72617473 	.word	0x72617473
1001056c:	75642074 	.word	0x75642074
10010570:	6f742065 	.word	0x6f742065
10010574:	6f626120 	.word	0x6f626120
10010578:	65206576 	.word	0x65206576
1001057c:	726f7272 	.word	0x726f7272
10010580:	0021      	.short	0x0021
10010582:	584d      	.short	0x584d
10010584:	53415f43 	.word	0x53415f43
10010588:	54524553 	.word	0x54524553
1001058c:	20732520 	.word	0x20732520
10010590:	3a642523 	.word	0x3a642523
10010594:	73252820 	.word	0x73252820
10010598:	0a29      	.short	0x0a29
1001059a:	00          	.byte	0x00
1001059b:	2e          	.byte	0x2e
1001059c:	62694c2f 	.word	0x62694c2f
100105a0:	69726172 	.word	0x69726172
100105a4:	422f7365 	.word	0x422f7365
100105a8:	6472616f 	.word	0x6472616f
100105ac:	414d2f73 	.word	0x414d2f73
100105b0:	36323358 	.word	0x36323358
100105b4:	462f3536 	.word	0x462f3536
100105b8:	2f524854 	.word	0x2f524854
100105bc:	72756f53 	.word	0x72756f53
100105c0:	622f6563 	.word	0x622f6563
100105c4:	6472616f 	.word	0x6472616f
100105c8:	4600632e 	.word	0x4600632e
100105cc:	004c4941 	.word	0x004c4941

100105d0 <led_pin>:
100105d0:	40008000 20000000 00000001 40008000     ...@... .......@
100105e0:	40000000 00000001 40008000 80000000     ...@.......@....
100105f0:	00000001                                ....

100105f4 <num_leds>:
100105f4:	00000003                                ....

100105f8 <num_pbs>:
100105f8:	00000001                                ....

100105fc <pb_pin>:
100105fc:	40009000 00000400 00000100 694c2f2e     ...@........./Li
1001060c:	72617262 2f736569 72616f42 4d2f7364     braries/Boards/M
1001061c:	32335841 2f353636 52485446 2f2e2e2f     AX32665/FTHR/../
1001062c:	72756f53 6c2f6563 632e6465 78646900     Source/led.c.idx
1001063c:	6e203c20 6c5f6d75 00736465 6e6e6f43      < num_leds.Conn
1001064c:	6d204449 20747375 69206562 6874206e     ID must be in th
1001065c:	61722065 2065676e 2e20315b 6425202e     e range [1 .. %d
1001066c:	31000a5d 64003200 6f685300 42207472     ]..1.2.d.Short B
1001067c:	6f747475 7325206e 65725020 0a0d7373     utton %s Press..
1001068c:	4d006d00 75696465 7542206d 6e6f7474     .m.Medium Button
1001069c:	20732520 73657250 000a0d73 6f4c006c      %s Press...l.Lo
100106ac:	4220676e 6f747475 7325206e 65725020     ng Button %s Pre
100106bc:	0a0d7373 58007800 7542204c 6e6f7474     ss...x.XL Button
100106cc:	20732520 73657250 000a0d73 006e6970      %s Press...pin.
100106dc:	206e6970 6e6f433c 3e44496e 69503c20     pin <ConnID> <Pi
100106ec:	6f43206e 003e6564 006e7462 206e7462     n Code>.btn.btn 
100106fc:	3e44493c 7c733c20 7c6c7c6d 2e003e78     <ID> <s|m|l|x>..
1001070c:	62694c2f 69726172 432f7365 6964726f     /Libraries/Cordi
1001071c:	6c622f6f 6f682d65 732f7473 6372756f     o/ble-host/sourc
1001072c:	732f7365 6b636174 2f6d642f 735f6d64     es/stack/dm/dm_s
1001073c:	632e6365 00003000 6d726574 6c616e69     ec.c.0..terminal
1001074c:	6e69203a 6f007469 6365006e 6f206f68     : init.on.echo o
1001075c:	000a0d6e 0066666f 6f686365 66666f20     n...off.echo off
1001076c:	45000a0d 524f5252 6f74203a 616d206f     ...ERROR: too ma
1001077c:	6120796e 6d756772 73746e65 45000a0d     ny arguments...E
1001078c:	524f5252 6e49203a 696c6176 72612064     RROR: Invalid ar
1001079c:	656d7567 7328746e 000a0d29 4f525245     gument(s)...ERRO
100107ac:	54203a52 66206f6f 61207765 6d756772     R: Too few argum
100107bc:	73746e65 45000a0d 524f5252 6f54203a     ents...ERROR: To
100107cc:	616d206f 6120796e 6d756772 73746e65     o many arguments
100107dc:	45000a0d 524f5252 6e55203a 776f6e6b     ...ERROR: Unknow
100107ec:	7265206e 0d726f72 203e000a 52524500     n error...> .ERR
100107fc:	203a524f 65726e75 6e676f63 64657a69     OR: unrecognized
1001080c:	6d6f6320 646e616d 22002220 08000a0d      command "."....
1001081c:	65000820 006f6863 6f686365 6e6f3c20      ..echo.echo <on
1001082c:	66666f7c 6568003e 4100706c 72657373     |off>.help.Asser
1001083c:	6e6f6974 74656420 65746365 6e6f2064     tion detected on
1001084c:	3a732520 2e007525 62694c2f 69726172      %s:%u../Librari
1001085c:	432f7365 6964726f 73772f6f 6f732f66     es/Cordio/wsf/so
1001086c:	65637275 61742f73 74656772 72662f73     urces/targets/fr
1001087c:	74726565 772f736f 625f6673 632e6675     eertos/wsf_buf.c
1001088c:	4c2f2e00 61726269 73656972 726f432f     ../Libraries/Cor
1001089c:	2f6f6964 2f667377 72756f73 2f736563     dio/wsf/sources/
100108ac:	67726174 2f737465 65657266 736f7472     targets/freertos
100108bc:	6673772f 2e73635f 2f2e0063 7262694c     /wsf_cs.c../Libr
100108cc:	65697261 6f432f73 6f696472 6673772f     aries/Cordio/wsf
100108dc:	756f732f 73656372 7261742f 73746567     /sources/targets
100108ec:	6572662f 6f747265 73772f73 736d5f66     /freertos/wsf_ms
100108fc:	00632e67 694c2f2e 72617262 2f736569     g.c../Libraries/
1001090c:	64726f43 772f6f69 732f6673 6372756f     Cordio/wsf/sourc
1001091c:	742f7365 65677261 662f7374 72656572     es/targets/freer
1001092c:	2f736f74 5f667377 632e736f 726f4300     tos/wsf_os.c.Cor
1001093c:	4d6f6964 726f4300 486f6964 4c2f2e00     dioM.CordioH../L
1001094c:	61726269 73656972 726f432f 2f6f6964     ibraries/Cordio/
1001095c:	2f667377 72756f73 2f736563 67726174     wsf/sources/targ
1001096c:	2f737465 65657266 736f7472 6673772f     ets/freertos/wsf
1001097c:	6575715f 632e6575 4c2f2e00 61726269     _queue.c../Libra
1001098c:	73656972 726f432f 2f6f6964 2f667377     ries/Cordio/wsf/
1001099c:	72756f73 2f736563 67726174 2f737465     sources/targets/
100109ac:	65657266 736f7472 6673772f 6172745f     freertos/wsf_tra
100109bc:	632e6563                                 ce.c.

100109c1 <CSWTCH.23>:
100109c1:	                                         ...

100109c4 <CSWTCH.10>:
100109c4:	08101010                                 .....

100109c9 <CSWTCH.8>:
100109c9:	08201810                                 .. ....

100109d0 <gpio_cfg_uart0a>:
100109d0:	40008000 00000600 00000004              ...@........

100109dc <gpio_cfg_uart0a_flow>:
100109dc:	40008000 00000900 00000004              ...@........

100109e8 <gpio_cfg_uart0b>:
100109e8:	40009000 00000030 00000004              ...@0.......

100109f4 <gpio_cfg_uart0b_flow>:
100109f4:	40009000 000000c0 00000004              ...@........

10010a00 <gpio_cfg_uart1a>:
10010a00:	40008000 00300000 00000004              ...@..0.....

10010a0c <gpio_cfg_uart1a_flow>:
10010a0c:	40008000 00c00000 00000004              ...@........

10010a18 <gpio_cfg_uart1b>:
10010a18:	40009000 00003000 00000004              ...@.0......

10010a24 <gpio_cfg_uart1b_flow>:
10010a24:	40009000 0000c000 00000004              ...@........

10010a30 <gpio_cfg_uart2a>:
10010a30:	40008000 00000006 00000004              ...@........

10010a3c <gpio_cfg_uart2a_flow>:
10010a3c:	40008000 00000009 00000004              ...@........

10010a48 <gpio_cfg_uart2b>:
10010a48:	40008000 30000000 00000004              ...@...0....

10010a54 <gpio_cfg_uart2b_flow>:
10010a54:	40008000 c0000000 00000004 454c4449     ...@........IDLE
10010a64:	726d5400 63765320 00000000              .Tmr Svc....

10010a70 <_global_impure_ptr>:
10010a70:	200000a8 0000000a                       ... ....

10010a78 <blanks.8652>:
10010a78:	20202020 20202020 20202020 20202020                     

10010a88 <zeroes.8653>:
10010a88:	30303030 30303030 30303030 30303030     0000000000000000
10010a98:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
10010aa8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
10010ab8:	00000000 33323130 37363534 62613938     ....0123456789ab
10010ac8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
10010ad8:	00000030                                0...

10010adc <_ctype_>:
10010adc:	20202000 20202020 28282020 20282828     .         ((((( 
10010aec:	20202020 20202020 20202020 20202020                     
10010afc:	10108820 10101010 10101010 10101010      ...............
10010b0c:	04040410 04040404 10040404 10101010     ................
10010b1c:	41411010 41414141 01010101 01010101     ..AAAAAA........
10010b2c:	01010101 01010101 01010101 10101010     ................
10010b3c:	42421010 42424242 02020202 02020202     ..BBBBBB........
10010b4c:	02020202 02020202 02020202 10101010     ................
10010b5c:	00000020 00000000 00000000 00000000      ...............
	...
10010be0:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
10010bf0:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
10010c00:	00000000 2e2f2e2e 2e2e2f2e 2f2e2e2f     ....../../../../
10010c10:	2e2f2e2e 2e2e2f2e 2f2e2e2f 6c77656e     ../../../../newl
10010c20:	6c2f6269 2f636269 6c647473 642f6269     ib/libc/stdlib/d
10010c30:	2e616f74 00000063                       toa.c...

10010c38 <p05.7429>:
10010c38:	00000005 00000019 0000007d 00000000     ........}.......

10010c48 <__mprec_tens>:
10010c48:	00000000 3ff00000 00000000 40240000     .......?......$@
10010c58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
10010c68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
10010c78:	00000000 412e8480 00000000 416312d0     .......A......cA
10010c88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10010c98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10010ca8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10010cb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10010cc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10010cd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10010ce8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10010cf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10010d08:	79d99db4 44ea7843                       ...yCx.D

10010d10 <__mprec_tinytens>:
10010d10:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
10010d20:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
10010d30:	64ac6f43 0ac80628                       Co.d(...

10010d38 <__mprec_bigtens>:
10010d38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10010d48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
10010d58:	7f73bf3c 75154fdd 2e2f2e2e 2e2e2f2e     <.s..O.u../../..
10010d68:	2f2e2e2f 2e2f2e2e 2e2e2f2e 2f2e2e2f     /../../../../../
10010d78:	6c77656e 6c2f6269 2f636269 6c647473     newlib/libc/stdl
10010d88:	6d2f6269 63657270 0000632e              ib/mprec.c..

10010d94 <blanks.8631>:
10010d94:	20202020 20202020 20202020 20202020                     

10010da4 <zeroes.8632>:
10010da4:	30303030 30303030 30303030 30303030     0000000000000000
10010db4:	7566202c 6974636e 203a6e6f 00000000     , function: ....
10010dc4:	65737361 6f697472 2522206e 66202273     assertion "%s" f
10010dd4:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
10010de4:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...
10010df4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

10010e04 <_init>:
10010e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010e06:	bf00      	nop
10010e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
10010e0a:	bc08      	pop	{r3}
10010e0c:	469e      	mov	lr, r3
10010e0e:	4770      	bx	lr

10010e10 <_fini>:
10010e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010e12:	bf00      	nop
10010e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
10010e16:	bc08      	pop	{r3}
10010e18:	469e      	mov	lr, r3
10010e1a:	4770      	bx	lr

10010e1c <__EH_FRAME_BEGIN__>:
10010e1c:	0000 0000                                   ....
